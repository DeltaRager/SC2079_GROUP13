
MDP_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d78  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa4  08003f00  08003f00  00004f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049a4  080049a4  0000613c  2**0
                  CONTENTS
  4 .ARM          00000008  080049a4  080049a4  000059a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049ac  080049ac  0000613c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049ac  080049ac  000059ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080049b0  080049b0  000059b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000013c  20000000  080049b4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000613c  2**0
                  CONTENTS
 10 .bss          000005a8  2000013c  2000013c  0000613c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006e4  200006e4  0000613c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000613c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dba6  00000000  00000000  0000616c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002013  00000000  00000000  00013d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d38  00000000  00000000  00015d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a50  00000000  00000000  00016a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000272b  00000000  00000000  000174b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fd11  00000000  00000000  00019bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cc3ad  00000000  00000000  000298ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f5c99  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000370c  00000000  00000000  000f5cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000cc  00000000  00000000  000f93e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000013c 	.word	0x2000013c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003ee8 	.word	0x08003ee8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000140 	.word	0x20000140
 80001c4:	08003ee8 	.word	0x08003ee8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b09a      	sub	sp, #104	@ 0x68
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t buffer[100] = "Hello";
 80004be:	4a23      	ldr	r2, [pc, #140]	@ (800054c <main+0x94>)
 80004c0:	1d3b      	adds	r3, r7, #4
 80004c2:	6810      	ldr	r0, [r2, #0]
 80004c4:	6018      	str	r0, [r3, #0]
 80004c6:	8892      	ldrh	r2, [r2, #4]
 80004c8:	809a      	strh	r2, [r3, #4]
 80004ca:	f107 030a 	add.w	r3, r7, #10
 80004ce:	225e      	movs	r2, #94	@ 0x5e
 80004d0:	2100      	movs	r1, #0
 80004d2:	4618      	mov	r0, r3
 80004d4:	f003 fcdc 	bl	8003e90 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f001 fa14 	bl	8001904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f846 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 fac0 	bl	8000a64 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004e4:	f000 fa94 	bl	8000a10 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80004e8:	f000 f89e 	bl	8000628 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004ec:	f000 f93c 	bl	8000768 <MX_TIM2_Init>
  MX_TIM8_Init();
 80004f0:	f000 f9e2 	bl	80008b8 <MX_TIM8_Init>
  MX_TIM3_Init();
 80004f4:	f000 f98c 	bl	8000810 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Initialize peripherals
  OLED_Init();
 80004f8:	f000 fe90 	bl	800121c <OLED_Init>
  motor_init(&htim8, &htim2, &htim3);
 80004fc:	4a14      	ldr	r2, [pc, #80]	@ (8000550 <main+0x98>)
 80004fe:	4915      	ldr	r1, [pc, #84]	@ (8000554 <main+0x9c>)
 8000500:	4815      	ldr	r0, [pc, #84]	@ (8000558 <main+0xa0>)
 8000502:	f000 fb55 	bl	8000bb0 <motor_init>
  servo_init(&htim1);
 8000506:	4815      	ldr	r0, [pc, #84]	@ (800055c <main+0xa4>)
 8000508:	f000 ff14 	bl	8001334 <servo_init>

  // Setup
  OLED_ShowString(0, 0, "Press USER button");
 800050c:	4a14      	ldr	r2, [pc, #80]	@ (8000560 <main+0xa8>)
 800050e:	2100      	movs	r1, #0
 8000510:	2000      	movs	r0, #0
 8000512:	f000 fe51 	bl	80011b8 <OLED_ShowString>
  OLED_ShowString(0, 15, "to continue");
 8000516:	4a13      	ldr	r2, [pc, #76]	@ (8000564 <main+0xac>)
 8000518:	210f      	movs	r1, #15
 800051a:	2000      	movs	r0, #0
 800051c:	f000 fe4c 	bl	80011b8 <OLED_ShowString>
  OLED_Refresh_Gram();
 8000520:	f000 fd20 	bl	8000f64 <OLED_Refresh_Gram>

  while (HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_SET);
 8000524:	bf00      	nop
 8000526:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800052a:	480f      	ldr	r0, [pc, #60]	@ (8000568 <main+0xb0>)
 800052c:	f001 fd02 	bl	8001f34 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	2b01      	cmp	r3, #1
 8000534:	d0f7      	beq.n	8000526 <main+0x6e>
  motor_setDrive(1, 20);
 8000536:	2114      	movs	r1, #20
 8000538:	2001      	movs	r0, #1
 800053a:	f000 fc6d 	bl	8000e18 <motor_setDrive>
  servo_setAngle(25);
 800053e:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 8000542:	f000 ff1b 	bl	800137c <servo_setAngle>
  // OLED_Refresh_Gram();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000546:	bf00      	nop
 8000548:	e7fd      	b.n	8000546 <main+0x8e>
 800054a:	bf00      	nop
 800054c:	08003f20 	.word	0x08003f20
 8000550:	200001e8 	.word	0x200001e8
 8000554:	200001a0 	.word	0x200001a0
 8000558:	20000230 	.word	0x20000230
 800055c:	20000158 	.word	0x20000158
 8000560:	08003f00 	.word	0x08003f00
 8000564:	08003f14 	.word	0x08003f14
 8000568:	40020c00 	.word	0x40020c00

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	@ 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f003 fc88 	bl	8003e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b22      	ldr	r3, [pc, #136]	@ (8000620 <SystemClock_Config+0xb4>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a21      	ldr	r2, [pc, #132]	@ (8000620 <SystemClock_Config+0xb4>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000620 <SystemClock_Config+0xb4>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000624 <SystemClock_Config+0xb8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a1b      	ldr	r2, [pc, #108]	@ (8000624 <SystemClock_Config+0xb8>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b19      	ldr	r3, [pc, #100]	@ (8000624 <SystemClock_Config+0xb8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fd03 	bl	8001fe8 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005e8:	f000 fadc 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f001 ff66 	bl	80024d8 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000612:	f000 fac7 	bl	8000ba4 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	@ 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b096      	sub	sp, #88	@ 0x58
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800062e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800063c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
 8000656:	615a      	str	r2, [r3, #20]
 8000658:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	2220      	movs	r2, #32
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f003 fc15 	bl	8003e90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000666:	4b3e      	ldr	r3, [pc, #248]	@ (8000760 <MX_TIM1_Init+0x138>)
 8000668:	4a3e      	ldr	r2, [pc, #248]	@ (8000764 <MX_TIM1_Init+0x13c>)
 800066a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 800066c:	4b3c      	ldr	r3, [pc, #240]	@ (8000760 <MX_TIM1_Init+0x138>)
 800066e:	2204      	movs	r2, #4
 8000670:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000672:	4b3b      	ldr	r3, [pc, #236]	@ (8000760 <MX_TIM1_Init+0x138>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 8000678:	4b39      	ldr	r3, [pc, #228]	@ (8000760 <MX_TIM1_Init+0x138>)
 800067a:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800067e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000680:	4b37      	ldr	r3, [pc, #220]	@ (8000760 <MX_TIM1_Init+0x138>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000686:	4b36      	ldr	r3, [pc, #216]	@ (8000760 <MX_TIM1_Init+0x138>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068c:	4b34      	ldr	r3, [pc, #208]	@ (8000760 <MX_TIM1_Init+0x138>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000692:	4833      	ldr	r0, [pc, #204]	@ (8000760 <MX_TIM1_Init+0x138>)
 8000694:	f002 f900 	bl	8002898 <HAL_TIM_Base_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800069e:	f000 fa81 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006a8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80006ac:	4619      	mov	r1, r3
 80006ae:	482c      	ldr	r0, [pc, #176]	@ (8000760 <MX_TIM1_Init+0x138>)
 80006b0:	f002 fc78 	bl	8002fa4 <HAL_TIM_ConfigClockSource>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80006ba:	f000 fa73 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006be:	4828      	ldr	r0, [pc, #160]	@ (8000760 <MX_TIM1_Init+0x138>)
 80006c0:	f002 f939 	bl	8002936 <HAL_TIM_PWM_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80006ca:	f000 fa6b 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006ce:	2300      	movs	r3, #0
 80006d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006d2:	2300      	movs	r3, #0
 80006d4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006d6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006da:	4619      	mov	r1, r3
 80006dc:	4820      	ldr	r0, [pc, #128]	@ (8000760 <MX_TIM1_Init+0x138>)
 80006de:	f003 f845 	bl	800376c <HAL_TIMEx_MasterConfigSynchronization>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006e8:	f000 fa5c 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006ec:	2360      	movs	r3, #96	@ 0x60
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006f4:	2300      	movs	r3, #0
 80006f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006f8:	2300      	movs	r3, #0
 80006fa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000700:	2300      	movs	r3, #0
 8000702:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000704:	2300      	movs	r3, #0
 8000706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070c:	2200      	movs	r2, #0
 800070e:	4619      	mov	r1, r3
 8000710:	4813      	ldr	r0, [pc, #76]	@ (8000760 <MX_TIM1_Init+0x138>)
 8000712:	f002 fb85 	bl	8002e20 <HAL_TIM_PWM_ConfigChannel>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800071c:	f000 fa42 	bl	8000ba4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000730:	2300      	movs	r3, #0
 8000732:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000734:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000738:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800073a:	2300      	movs	r3, #0
 800073c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	4619      	mov	r1, r3
 8000742:	4807      	ldr	r0, [pc, #28]	@ (8000760 <MX_TIM1_Init+0x138>)
 8000744:	f003 f88e 	bl	8003864 <HAL_TIMEx_ConfigBreakDeadTime>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800074e:	f000 fa29 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000752:	4803      	ldr	r0, [pc, #12]	@ (8000760 <MX_TIM1_Init+0x138>)
 8000754:	f000 ffc0 	bl	80016d8 <HAL_TIM_MspPostInit>

}
 8000758:	bf00      	nop
 800075a:	3758      	adds	r7, #88	@ 0x58
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000158 	.word	0x20000158
 8000764:	40010000 	.word	0x40010000

08000768 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08c      	sub	sp, #48	@ 0x30
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	2224      	movs	r2, #36	@ 0x24
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f003 fb8a 	bl	8003e90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000784:	4b21      	ldr	r3, [pc, #132]	@ (800080c <MX_TIM2_Init+0xa4>)
 8000786:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800078a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800078c:	4b1f      	ldr	r3, [pc, #124]	@ (800080c <MX_TIM2_Init+0xa4>)
 800078e:	2200      	movs	r2, #0
 8000790:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000792:	4b1e      	ldr	r3, [pc, #120]	@ (800080c <MX_TIM2_Init+0xa4>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000798:	4b1c      	ldr	r3, [pc, #112]	@ (800080c <MX_TIM2_Init+0xa4>)
 800079a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800079e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007a0:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <MX_TIM2_Init+0xa4>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a6:	4b19      	ldr	r3, [pc, #100]	@ (800080c <MX_TIM2_Init+0xa4>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007ac:	2303      	movs	r3, #3
 80007ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007b0:	2300      	movs	r3, #0
 80007b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007b4:	2301      	movs	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007c0:	2300      	movs	r3, #0
 80007c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007c4:	2301      	movs	r3, #1
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80007d0:	f107 030c 	add.w	r3, r7, #12
 80007d4:	4619      	mov	r1, r3
 80007d6:	480d      	ldr	r0, [pc, #52]	@ (800080c <MX_TIM2_Init+0xa4>)
 80007d8:	f002 f9ce 	bl	8002b78 <HAL_TIM_Encoder_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80007e2:	f000 f9df 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	@ (800080c <MX_TIM2_Init+0xa4>)
 80007f4:	f002 ffba 	bl	800376c <HAL_TIMEx_MasterConfigSynchronization>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80007fe:	f000 f9d1 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000802:	bf00      	nop
 8000804:	3730      	adds	r7, #48	@ 0x30
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	200001a0 	.word	0x200001a0

08000810 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	@ 0x30
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	2224      	movs	r2, #36	@ 0x24
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f003 fb36 	bl	8003e90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800082c:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <MX_TIM3_Init+0xa0>)
 800082e:	4a21      	ldr	r2, [pc, #132]	@ (80008b4 <MX_TIM3_Init+0xa4>)
 8000830:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000832:	4b1f      	ldr	r3, [pc, #124]	@ (80008b0 <MX_TIM3_Init+0xa0>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <MX_TIM3_Init+0xa0>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800083e:	4b1c      	ldr	r3, [pc, #112]	@ (80008b0 <MX_TIM3_Init+0xa0>)
 8000840:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000844:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_TIM3_Init+0xa0>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_TIM3_Init+0xa0>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000852:	2303      	movs	r3, #3
 8000854:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800085a:	2301      	movs	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800086a:	2301      	movs	r3, #1
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <MX_TIM3_Init+0xa0>)
 800087e:	f002 f97b 	bl	8002b78 <HAL_TIM_Encoder_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000888:	f000 f98c 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4619      	mov	r1, r3
 8000898:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_TIM3_Init+0xa0>)
 800089a:	f002 ff67 	bl	800376c <HAL_TIMEx_MasterConfigSynchronization>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80008a4:	f000 f97e 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008a8:	bf00      	nop
 80008aa:	3730      	adds	r7, #48	@ 0x30
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200001e8 	.word	0x200001e8
 80008b4:	40000400 	.word	0x40000400

080008b8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b096      	sub	sp, #88	@ 0x58
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
 80008e6:	615a      	str	r2, [r3, #20]
 80008e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	2220      	movs	r2, #32
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f003 facd 	bl	8003e90 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80008f6:	4b44      	ldr	r3, [pc, #272]	@ (8000a08 <MX_TIM8_Init+0x150>)
 80008f8:	4a44      	ldr	r2, [pc, #272]	@ (8000a0c <MX_TIM8_Init+0x154>)
 80008fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80008fc:	4b42      	ldr	r3, [pc, #264]	@ (8000a08 <MX_TIM8_Init+0x150>)
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b41      	ldr	r3, [pc, #260]	@ (8000a08 <MX_TIM8_Init+0x150>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7200-1;
 8000908:	4b3f      	ldr	r3, [pc, #252]	@ (8000a08 <MX_TIM8_Init+0x150>)
 800090a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800090e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b3d      	ldr	r3, [pc, #244]	@ (8000a08 <MX_TIM8_Init+0x150>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000916:	4b3c      	ldr	r3, [pc, #240]	@ (8000a08 <MX_TIM8_Init+0x150>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091c:	4b3a      	ldr	r3, [pc, #232]	@ (8000a08 <MX_TIM8_Init+0x150>)
 800091e:	2200      	movs	r2, #0
 8000920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000922:	4839      	ldr	r0, [pc, #228]	@ (8000a08 <MX_TIM8_Init+0x150>)
 8000924:	f001 ffb8 	bl	8002898 <HAL_TIM_Base_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800092e:	f000 f939 	bl	8000ba4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000936:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000938:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800093c:	4619      	mov	r1, r3
 800093e:	4832      	ldr	r0, [pc, #200]	@ (8000a08 <MX_TIM8_Init+0x150>)
 8000940:	f002 fb30 	bl	8002fa4 <HAL_TIM_ConfigClockSource>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800094a:	f000 f92b 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800094e:	482e      	ldr	r0, [pc, #184]	@ (8000a08 <MX_TIM8_Init+0x150>)
 8000950:	f001 fff1 	bl	8002936 <HAL_TIM_PWM_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800095a:	f000 f923 	bl	8000ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095e:	2300      	movs	r3, #0
 8000960:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000962:	2300      	movs	r3, #0
 8000964:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000966:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800096a:	4619      	mov	r1, r3
 800096c:	4826      	ldr	r0, [pc, #152]	@ (8000a08 <MX_TIM8_Init+0x150>)
 800096e:	f002 fefd 	bl	800376c <HAL_TIMEx_MasterConfigSynchronization>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000978:	f000 f914 	bl	8000ba4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097c:	2360      	movs	r3, #96	@ 0x60
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000988:	2300      	movs	r3, #0
 800098a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800098c:	2300      	movs	r3, #0
 800098e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000990:	2300      	movs	r3, #0
 8000992:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000994:	2300      	movs	r3, #0
 8000996:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800099c:	2200      	movs	r2, #0
 800099e:	4619      	mov	r1, r3
 80009a0:	4819      	ldr	r0, [pc, #100]	@ (8000a08 <MX_TIM8_Init+0x150>)
 80009a2:	f002 fa3d 	bl	8002e20 <HAL_TIM_PWM_ConfigChannel>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80009ac:	f000 f8fa 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b4:	2204      	movs	r2, #4
 80009b6:	4619      	mov	r1, r3
 80009b8:	4813      	ldr	r0, [pc, #76]	@ (8000a08 <MX_TIM8_Init+0x150>)
 80009ba:	f002 fa31 	bl	8002e20 <HAL_TIM_PWM_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80009c4:	f000 f8ee 	bl	8000ba4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80009dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009e0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80009e6:	1d3b      	adds	r3, r7, #4
 80009e8:	4619      	mov	r1, r3
 80009ea:	4807      	ldr	r0, [pc, #28]	@ (8000a08 <MX_TIM8_Init+0x150>)
 80009ec:	f002 ff3a 	bl	8003864 <HAL_TIMEx_ConfigBreakDeadTime>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80009f6:	f000 f8d5 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80009fa:	4803      	ldr	r0, [pc, #12]	@ (8000a08 <MX_TIM8_Init+0x150>)
 80009fc:	f000 fe6c 	bl	80016d8 <HAL_TIM_MspPostInit>

}
 8000a00:	bf00      	nop
 8000a02:	3758      	adds	r7, #88	@ 0x58
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000230 	.word	0x20000230
 8000a0c:	40010400 	.word	0x40010400

08000a10 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a14:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a16:	4a12      	ldr	r2, [pc, #72]	@ (8000a60 <MX_USART3_UART_Init+0x50>)
 8000a18:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a1a:	4b10      	ldr	r3, [pc, #64]	@ (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a20:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a22:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a28:	4b0c      	ldr	r3, [pc, #48]	@ (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a34:	4b09      	ldr	r3, [pc, #36]	@ (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a36:	220c      	movs	r2, #12
 8000a38:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3a:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a46:	4805      	ldr	r0, [pc, #20]	@ (8000a5c <MX_USART3_UART_Init+0x4c>)
 8000a48:	f002 ff5e 	bl	8003908 <HAL_UART_Init>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000a52:	f000 f8a7 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000278 	.word	0x20000278
 8000a60:	40004800 	.word	0x40004800

08000a64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	@ 0x28
 8000a68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	4b45      	ldr	r3, [pc, #276]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a82:	4a44      	ldr	r2, [pc, #272]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000a84:	f043 0310 	orr.w	r3, r3, #16
 8000a88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8a:	4b42      	ldr	r3, [pc, #264]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8e:	f003 0310 	and.w	r3, r3, #16
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b3e      	ldr	r3, [pc, #248]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9e:	4a3d      	ldr	r2, [pc, #244]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000aa0:	f043 0301 	orr.w	r3, r3, #1
 8000aa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa6:	4b3b      	ldr	r3, [pc, #236]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aaa:	f003 0301 	and.w	r3, r3, #1
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	4b37      	ldr	r3, [pc, #220]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	4a36      	ldr	r2, [pc, #216]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000abc:	f043 0308 	orr.w	r3, r3, #8
 8000ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac2:	4b34      	ldr	r3, [pc, #208]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	4b30      	ldr	r3, [pc, #192]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	4a2f      	ldr	r2, [pc, #188]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000ad8:	f043 0304 	orr.w	r3, r3, #4
 8000adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ade:	4b2d      	ldr	r3, [pc, #180]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	f003 0304 	and.w	r3, r3, #4
 8000ae6:	607b      	str	r3, [r7, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4b29      	ldr	r3, [pc, #164]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	4a28      	ldr	r2, [pc, #160]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afa:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <MX_GPIO_Init+0x130>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET_Pin|OLED_DC_Pin
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 8000b0c:	4822      	ldr	r0, [pc, #136]	@ (8000b98 <MX_GPIO_Init+0x134>)
 8000b0e:	f001 fa29 	bl	8001f64 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_A_IN2_Pin|MOTOR_A_IN1_Pin|MOTOR_B_IN1_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	211c      	movs	r1, #28
 8000b16:	4821      	ldr	r0, [pc, #132]	@ (8000b9c <MX_GPIO_Init+0x138>)
 8000b18:	f001 fa24 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDIN_Pin OLED_RESET_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET_Pin|OLED_DC_Pin
 8000b1c:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 8000b20:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	4818      	ldr	r0, [pc, #96]	@ (8000b98 <MX_GPIO_Init+0x134>)
 8000b36:	f001 f861 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_A_IN2_Pin MOTOR_A_IN1_Pin MOTOR_B_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_IN2_Pin|MOTOR_A_IN1_Pin|MOTOR_B_IN1_Pin;
 8000b3a:	231c      	movs	r3, #28
 8000b3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b46:	2300      	movs	r3, #0
 8000b48:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4812      	ldr	r0, [pc, #72]	@ (8000b9c <MX_GPIO_Init+0x138>)
 8000b52:	f001 f853 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_B_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_B_IN2_Pin;
 8000b56:	2320      	movs	r3, #32
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b5a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MOTOR_B_IN2_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <MX_GPIO_Init+0x138>)
 8000b6c:	f001 f846 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8000b70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	4619      	mov	r1, r3
 8000b84:	4806      	ldr	r0, [pc, #24]	@ (8000ba0 <MX_GPIO_Init+0x13c>)
 8000b86:	f001 f839 	bl	8001bfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3728      	adds	r7, #40	@ 0x28
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40020000 	.word	0x40020000
 8000ba0:	40020c00 	.word	0x40020c00

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <Error_Handler+0x8>

08000bb0 <motor_init>:
int16_t lLastCount = 0, rLastCount = 0;
// For bi-directional correction.
int8_t curDir = 0;


void motor_init(TIM_HandleTypeDef *pwm, TIM_HandleTypeDef *l_enc, TIM_HandleTypeDef *r_enc) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
	// Assign timer pointers
	motor_pwm_tim = pwm;
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf8 <motor_init+0x48>)
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	6013      	str	r3, [r2, #0]
	l_enc_tim = l_enc;
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <motor_init+0x4c>)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	6013      	str	r3, [r2, #0]
	r_enc_tim = r_enc;
 8000bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c00 <motor_init+0x50>)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6013      	str	r3, [r2, #0]

	// Start Encoders and PWM for L, R motors
	HAL_TIM_Encoder_Start_IT(l_enc, TIM_CHANNEL_ALL);
 8000bce:	213c      	movs	r1, #60	@ 0x3c
 8000bd0:	68b8      	ldr	r0, [r7, #8]
 8000bd2:	f002 f877 	bl	8002cc4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(r_enc, TIM_CHANNEL_ALL);
 8000bd6:	213c      	movs	r1, #60	@ 0x3c
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f002 f873 	bl	8002cc4 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(pwm, L_CHANNEL);
 8000bde:	2100      	movs	r1, #0
 8000be0:	68f8      	ldr	r0, [r7, #12]
 8000be2:	f001 ff01 	bl	80029e8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm, R_CHANNEL);
 8000be6:	2104      	movs	r1, #4
 8000be8:	68f8      	ldr	r0, [r7, #12]
 8000bea:	f001 fefd 	bl	80029e8 <HAL_TIM_PWM_Start>
}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200002c0 	.word	0x200002c0
 8000bfc:	200002c4 	.word	0x200002c4
 8000c00:	200002c8 	.word	0x200002c8

08000c04 <setDriveDir>:

void setDriveDir(int8_t dir) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
	if (dir == 1) {
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d114      	bne.n	8000c40 <setDriveDir+0x3c>
		// Forward
		HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2108      	movs	r1, #8
 8000c1a:	483e      	ldr	r0, [pc, #248]	@ (8000d14 <setDriveDir+0x110>)
 8000c1c:	f001 f9a2 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	2104      	movs	r1, #4
 8000c24:	483b      	ldr	r0, [pc, #236]	@ (8000d14 <setDriveDir+0x110>)
 8000c26:	f001 f99d 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2110      	movs	r1, #16
 8000c2e:	4839      	ldr	r0, [pc, #228]	@ (8000d14 <setDriveDir+0x110>)
 8000c30:	f001 f998 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	2120      	movs	r1, #32
 8000c38:	4836      	ldr	r0, [pc, #216]	@ (8000d14 <setDriveDir+0x110>)
 8000c3a:	f001 f993 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
	}
}
 8000c3e:	e064      	b.n	8000d0a <setDriveDir+0x106>
	} else if (dir == -1) {
 8000c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c48:	d114      	bne.n	8000c74 <setDriveDir+0x70>
		HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2108      	movs	r1, #8
 8000c4e:	4831      	ldr	r0, [pc, #196]	@ (8000d14 <setDriveDir+0x110>)
 8000c50:	f001 f988 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2104      	movs	r1, #4
 8000c58:	482e      	ldr	r0, [pc, #184]	@ (8000d14 <setDriveDir+0x110>)
 8000c5a:	f001 f983 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2110      	movs	r1, #16
 8000c62:	482c      	ldr	r0, [pc, #176]	@ (8000d14 <setDriveDir+0x110>)
 8000c64:	f001 f97e 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	4829      	ldr	r0, [pc, #164]	@ (8000d14 <setDriveDir+0x110>)
 8000c6e:	f001 f979 	bl	8001f64 <HAL_GPIO_WritePin>
}
 8000c72:	e04a      	b.n	8000d0a <setDriveDir+0x106>
	} else if (dir == 0) {
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d114      	bne.n	8000ca6 <setDriveDir+0xa2>
		HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_SET);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2108      	movs	r1, #8
 8000c80:	4824      	ldr	r0, [pc, #144]	@ (8000d14 <setDriveDir+0x110>)
 8000c82:	f001 f96f 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	2104      	movs	r1, #4
 8000c8a:	4822      	ldr	r0, [pc, #136]	@ (8000d14 <setDriveDir+0x110>)
 8000c8c:	f001 f96a 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	2110      	movs	r1, #16
 8000c94:	481f      	ldr	r0, [pc, #124]	@ (8000d14 <setDriveDir+0x110>)
 8000c96:	f001 f965 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_SET);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2120      	movs	r1, #32
 8000c9e:	481d      	ldr	r0, [pc, #116]	@ (8000d14 <setDriveDir+0x110>)
 8000ca0:	f001 f960 	bl	8001f64 <HAL_GPIO_WritePin>
}
 8000ca4:	e031      	b.n	8000d0a <setDriveDir+0x106>
	} else if (dir == 2)  {
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d114      	bne.n	8000cd8 <setDriveDir+0xd4>
		HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_SET);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2108      	movs	r1, #8
 8000cb2:	4818      	ldr	r0, [pc, #96]	@ (8000d14 <setDriveDir+0x110>)
 8000cb4:	f001 f956 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2104      	movs	r1, #4
 8000cbc:	4815      	ldr	r0, [pc, #84]	@ (8000d14 <setDriveDir+0x110>)
 8000cbe:	f001 f951 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2110      	movs	r1, #16
 8000cc6:	4813      	ldr	r0, [pc, #76]	@ (8000d14 <setDriveDir+0x110>)
 8000cc8:	f001 f94c 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2120      	movs	r1, #32
 8000cd0:	4810      	ldr	r0, [pc, #64]	@ (8000d14 <setDriveDir+0x110>)
 8000cd2:	f001 f947 	bl	8001f64 <HAL_GPIO_WritePin>
}
 8000cd6:	e018      	b.n	8000d0a <setDriveDir+0x106>
	} else if (dir == -2) {
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	f113 0f02 	cmn.w	r3, #2
 8000ce0:	d113      	bne.n	8000d0a <setDriveDir+0x106>
		HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2108      	movs	r1, #8
 8000ce6:	480b      	ldr	r0, [pc, #44]	@ (8000d14 <setDriveDir+0x110>)
 8000ce8:	f001 f93c 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2104      	movs	r1, #4
 8000cf0:	4808      	ldr	r0, [pc, #32]	@ (8000d14 <setDriveDir+0x110>)
 8000cf2:	f001 f937 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2110      	movs	r1, #16
 8000cfa:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <setDriveDir+0x110>)
 8000cfc:	f001 f932 	bl	8001f64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2120      	movs	r1, #32
 8000d04:	4803      	ldr	r0, [pc, #12]	@ (8000d14 <setDriveDir+0x110>)
 8000d06:	f001 f92d 	bl	8001f64 <HAL_GPIO_WritePin>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40020000 	.word	0x40020000

08000d18 <timer_reset>:

void timer_reset(TIM_HandleTypeDef* htim) {
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(htim, 0);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2200      	movs	r2, #0
 8000d26:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <getSpeedPwm>:

int16_t getSpeedPwm(uint8_t speed) {
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
	int16_t val = (int16_t)(MOTOR_PWM_MAX / 100 * speed);
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	461a      	mov	r2, r3
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	1ad3      	subs	r3, r2, r3
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	81fb      	strh	r3, [r7, #14]
	return val;
 8000d4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <resetEncoders>:

void resetEncoders() {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	timer_reset(l_enc_tim);
 8000d64:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <resetEncoders+0x2c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ffd5 	bl	8000d18 <timer_reset>
	timer_reset(r_enc_tim);
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <resetEncoders+0x30>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4618      	mov	r0, r3
 8000d74:	f7ff ffd0 	bl	8000d18 <timer_reset>

	lLastCount = rLastCount = 0;
 8000d78:	4b06      	ldr	r3, [pc, #24]	@ (8000d94 <resetEncoders+0x34>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	801a      	strh	r2, [r3, #0]
 8000d7e:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <resetEncoders+0x34>)
 8000d80:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <resetEncoders+0x38>)
 8000d86:	801a      	strh	r2, [r3, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	200002c4 	.word	0x200002c4
 8000d90:	200002c8 	.word	0x200002c8
 8000d94:	200002d6 	.word	0x200002d6
 8000d98:	200002d4 	.word	0x200002d4

08000d9c <setPwmLR>:

void setPwmLR() {
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
	// Set L, R channels
	__HAL_TIM_SetCompare(motor_pwm_tim, L_CHANNEL,
 8000da0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <setPwmLR+0x70>)
 8000da2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da6:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000daa:	4293      	cmp	r3, r2
 8000dac:	dc0a      	bgt.n	8000dc4 <setPwmLR+0x28>
 8000dae:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <setPwmLR+0x70>)
 8000db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db4:	f240 1277 	movw	r2, #375	@ 0x177
 8000db8:	4293      	cmp	r3, r2
 8000dba:	bfb8      	it	lt
 8000dbc:	4613      	movlt	r3, r2
 8000dbe:	b21b      	sxth	r3, r3
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	e001      	b.n	8000dc8 <setPwmLR+0x2c>
 8000dc4:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000dc8:	4b11      	ldr	r3, [pc, #68]	@ (8000e10 <setPwmLR+0x74>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	635a      	str	r2, [r3, #52]	@ 0x34
		lPwmVal > MOTOR_PWM_MAX
		? MOTOR_PWM_MAX
		: lPwmVal < MOTOR_PWM_MIN
		? MOTOR_PWM_MIN
		: lPwmVal);
	__HAL_TIM_SetCompare(motor_pwm_tim, R_CHANNEL,
 8000dd0:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <setPwmLR+0x78>)
 8000dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd6:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	dc0a      	bgt.n	8000df4 <setPwmLR+0x58>
 8000dde:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <setPwmLR+0x78>)
 8000de0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de4:	f240 1277 	movw	r2, #375	@ 0x177
 8000de8:	4293      	cmp	r3, r2
 8000dea:	bfb8      	it	lt
 8000dec:	4613      	movlt	r3, r2
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	461a      	mov	r2, r3
 8000df2:	e001      	b.n	8000df8 <setPwmLR+0x5c>
 8000df4:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000df8:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <setPwmLR+0x74>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	639a      	str	r2, [r3, #56]	@ 0x38
		rPwmVal > MOTOR_PWM_MAX
		? MOTOR_PWM_MAX
		: rPwmVal < MOTOR_PWM_MIN
		? MOTOR_PWM_MIN
		: rPwmVal);
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	200002d0 	.word	0x200002d0
 8000e10:	200002c0 	.word	0x200002c0
 8000e14:	200002d2 	.word	0x200002d2

08000e18 <motor_setDrive>:

// Speed: 0 - 100
void motor_setDrive(int8_t dir, uint8_t speed) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0b4      	sub	sp, #208	@ 0xd0
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	460a      	mov	r2, r1
 8000e22:	71fb      	strb	r3, [r7, #7]
 8000e24:	4613      	mov	r3, r2
 8000e26:	71bb      	strb	r3, [r7, #6]
	if (dir == 0) {
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d106      	bne.n	8000e3e <motor_setDrive+0x26>
		setDriveDir(0);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff fee7 	bl	8000c04 <setDriveDir>
		pwmValAccel = 0;
 8000e36:	4b21      	ldr	r3, [pc, #132]	@ (8000ebc <motor_setDrive+0xa4>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	801a      	strh	r2, [r3, #0]
 8000e3c:	e03a      	b.n	8000eb4 <motor_setDrive+0x9c>
		return;
	}

	// Derive PWM value.
	pwmValTarget = getSpeedPwm(speed);
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff77 	bl	8000d34 <getSpeedPwm>
 8000e46:	4603      	mov	r3, r0
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ec0 <motor_setDrive+0xa8>)
 8000e4c:	801a      	strh	r2, [r3, #0]

	if (dir == 2) {
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d10a      	bne.n	8000e6c <motor_setDrive+0x54>
		lPwmVal = pwmValTarget;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <motor_setDrive+0xa8>)
 8000e58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ec4 <motor_setDrive+0xac>)
 8000e5e:	801a      	strh	r2, [r3, #0]
		rPwmVal = pwmValTarget;
 8000e60:	4b17      	ldr	r3, [pc, #92]	@ (8000ec0 <motor_setDrive+0xa8>)
 8000e62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e66:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <motor_setDrive+0xb0>)
 8000e68:	801a      	strh	r2, [r3, #0]
 8000e6a:	e017      	b.n	8000e9c <motor_setDrive+0x84>
	} else if (dir == -2) {
 8000e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e70:	f113 0f02 	cmn.w	r3, #2
 8000e74:	d108      	bne.n	8000e88 <motor_setDrive+0x70>
		lPwmVal = 0;
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <motor_setDrive+0xac>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	801a      	strh	r2, [r3, #0]
		rPwmVal = pwmValTarget;
 8000e7c:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <motor_setDrive+0xa8>)
 8000e7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <motor_setDrive+0xb0>)
 8000e84:	801a      	strh	r2, [r3, #0]
 8000e86:	e009      	b.n	8000e9c <motor_setDrive+0x84>
	} else {
		lPwmVal = pwmValTarget;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec0 <motor_setDrive+0xa8>)
 8000e8a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <motor_setDrive+0xac>)
 8000e90:	801a      	strh	r2, [r3, #0]
		rPwmVal = pwmValTarget;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <motor_setDrive+0xa8>)
 8000e94:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec8 <motor_setDrive+0xb0>)
 8000e9a:	801a      	strh	r2, [r3, #0]
	}

	// Reset
	resetEncoders();
 8000e9c:	f7ff ff60 	bl	8000d60 <resetEncoders>

	curDir = dir;
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <motor_setDrive+0xb4>)
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	7013      	strb	r3, [r2, #0]
	setDriveDir(dir);
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff feaa 	bl	8000c04 <setDriveDir>
	setPwmLR();
 8000eb0:	f7ff ff74 	bl	8000d9c <setPwmLR>
	//sprintf(buffer1, "lPwmVal: %" PRId16, lPwmVal);
	//sprintf(buffer2, "rPwmVal: %" PRId16, rPwmVal);
	//OLED_ShowString(0, 0, buffer1);
	//OLED_ShowString(0, 15, buffer2);
	//OLED_Refresh_Gram();
}
 8000eb4:	37d0      	adds	r7, #208	@ 0xd0
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200002cc 	.word	0x200002cc
 8000ec0:	200002ce 	.word	0x200002ce
 8000ec4:	200002d0 	.word	0x200002d0
 8000ec8:	200002d2 	.word	0x200002d2
 8000ecc:	200002d8 	.word	0x200002d8

08000ed0 <OLED_WR_Byte>:
			   1 => sending data
			   0 => sending command
Output  : none

**************************************************************************/
void OLED_WR_Byte(uint8_t dat, uint8_t DataCmd) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	460a      	mov	r2, r1
 8000eda:	71fb      	strb	r3, [r7, #7]
 8000edc:	4613      	mov	r3, r2
 8000ede:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if (DataCmd == 1) {		// Data write
 8000ee0:	79bb      	ldrb	r3, [r7, #6]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d106      	bne.n	8000ef4 <OLED_WR_Byte+0x24>
		OLED_RS_Set();		// Set the D/C# line
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eec:	481c      	ldr	r0, [pc, #112]	@ (8000f60 <OLED_WR_Byte+0x90>)
 8000eee:	f001 f839 	bl	8001f64 <HAL_GPIO_WritePin>
 8000ef2:	e005      	b.n	8000f00 <OLED_WR_Byte+0x30>
	} else {				// Command write
		OLED_RS_Clr();
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000efa:	4819      	ldr	r0, [pc, #100]	@ (8000f60 <OLED_WR_Byte+0x90>)
 8000efc:	f001 f832 	bl	8001f64 <HAL_GPIO_WritePin>
	}						// Clear the D/C# line

	for(i = 0; i < 8 ; i++) {
 8000f00:	2300      	movs	r3, #0
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e01e      	b.n	8000f44 <OLED_WR_Byte+0x74>
		OLED_SCLK_Clr();
 8000f06:	2200      	movs	r2, #0
 8000f08:	2120      	movs	r1, #32
 8000f0a:	4815      	ldr	r0, [pc, #84]	@ (8000f60 <OLED_WR_Byte+0x90>)
 8000f0c:	f001 f82a 	bl	8001f64 <HAL_GPIO_WritePin>
		(dat & 0x80) ? OLED_SDIN_Set(): OLED_SDIN_Clr();
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	da05      	bge.n	8000f24 <OLED_WR_Byte+0x54>
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2140      	movs	r1, #64	@ 0x40
 8000f1c:	4810      	ldr	r0, [pc, #64]	@ (8000f60 <OLED_WR_Byte+0x90>)
 8000f1e:	f001 f821 	bl	8001f64 <HAL_GPIO_WritePin>
 8000f22:	e004      	b.n	8000f2e <OLED_WR_Byte+0x5e>
 8000f24:	2200      	movs	r2, #0
 8000f26:	2140      	movs	r1, #64	@ 0x40
 8000f28:	480d      	ldr	r0, [pc, #52]	@ (8000f60 <OLED_WR_Byte+0x90>)
 8000f2a:	f001 f81b 	bl	8001f64 <HAL_GPIO_WritePin>
		dat <<= 1;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	71fb      	strb	r3, [r7, #7]
		OLED_SCLK_Set();
 8000f34:	2201      	movs	r2, #1
 8000f36:	2120      	movs	r1, #32
 8000f38:	4809      	ldr	r0, [pc, #36]	@ (8000f60 <OLED_WR_Byte+0x90>)
 8000f3a:	f001 f813 	bl	8001f64 <HAL_GPIO_WritePin>
	for(i = 0; i < 8 ; i++) {
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	3301      	adds	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]
 8000f44:	7bfb      	ldrb	r3, [r7, #15]
 8000f46:	2b07      	cmp	r3, #7
 8000f48:	d9dd      	bls.n	8000f06 <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();			// Keep the D/C# line high upon exit
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f50:	4803      	ldr	r0, [pc, #12]	@ (8000f60 <OLED_WR_Byte+0x90>)
 8000f52:	f001 f807 	bl	8001f64 <HAL_GPIO_WritePin>
}
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <OLED_Refresh_Gram>:

// **************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram() {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i = 0; i < 8; i++){
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	e026      	b.n	8000fbe <OLED_Refresh_Gram+0x5a>
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	3b50      	subs	r3, #80	@ 0x50
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	2100      	movs	r1, #0
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ffa9 	bl	8000ed0 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff ffa5 	bl	8000ed0 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 8000f86:	2100      	movs	r1, #0
 8000f88:	2010      	movs	r0, #16
 8000f8a:	f7ff ffa1 	bl	8000ed0 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	71bb      	strb	r3, [r7, #6]
 8000f92:	e00d      	b.n	8000fb0 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 8000f94:	79ba      	ldrb	r2, [r7, #6]
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	490d      	ldr	r1, [pc, #52]	@ (8000fd0 <OLED_Refresh_Gram+0x6c>)
 8000f9a:	00d2      	lsls	r2, r2, #3
 8000f9c:	440a      	add	r2, r1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff93 	bl	8000ed0 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8000faa:	79bb      	ldrb	r3, [r7, #6]
 8000fac:	3301      	adds	r3, #1
 8000fae:	71bb      	strb	r3, [r7, #6]
 8000fb0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	daed      	bge.n	8000f94 <OLED_Refresh_Gram+0x30>
	for(i = 0; i < 8; i++){
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	2b07      	cmp	r3, #7
 8000fc2:	d9d5      	bls.n	8000f70 <OLED_Refresh_Gram+0xc>
	}
}
 8000fc4:	bf00      	nop
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200002dc 	.word	0x200002dc

08000fd4 <OLED_Clear>:

// **************************************************************************
// Clear OLED
void OLED_Clear() {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for(i = 0; i < 8; i++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	71fb      	strb	r3, [r7, #7]
 8000fde:	e014      	b.n	800100a <OLED_Clear+0x36>
		for(n = 0; n < 128; n++)
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	71bb      	strb	r3, [r7, #6]
 8000fe4:	e00a      	b.n	8000ffc <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 8000fe6:	79ba      	ldrb	r2, [r7, #6]
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	490c      	ldr	r1, [pc, #48]	@ (800101c <OLED_Clear+0x48>)
 8000fec:	00d2      	lsls	r2, r2, #3
 8000fee:	440a      	add	r2, r1
 8000ff0:	4413      	add	r3, r2
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	701a      	strb	r2, [r3, #0]
		for(n = 0; n < 128; n++)
 8000ff6:	79bb      	ldrb	r3, [r7, #6]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	71bb      	strb	r3, [r7, #6]
 8000ffc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001000:	2b00      	cmp	r3, #0
 8001002:	daf0      	bge.n	8000fe6 <OLED_Clear+0x12>
	for(i = 0; i < 8; i++)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	3301      	adds	r3, #1
 8001008:	71fb      	strb	r3, [r7, #7]
 800100a:	79fb      	ldrb	r3, [r7, #7]
 800100c:	2b07      	cmp	r3, #7
 800100e:	d9e7      	bls.n	8000fe0 <OLED_Clear+0xc>
	OLED_Refresh_Gram();	// Refresh
 8001010:	f7ff ffa8 	bl	8000f64 <OLED_Refresh_Gram>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200002dc 	.word	0x200002dc

08001020 <OLED_DrawPoint>:
	OLED_WR_Byte(0XAE, OLED_CMD);	// DISPLAY OFF
}

// **************************************************************************
// Draw A Point
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t) {
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
 800102a:	460b      	mov	r3, r1
 800102c:	71bb      	strb	r3, [r7, #6]
 800102e:	4613      	mov	r3, r2
 8001030:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	73fb      	strb	r3, [r7, #15]

	if (x > 127 || y > 63)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db41      	blt.n	80010c2 <OLED_DrawPoint+0xa2>
 800103e:	79bb      	ldrb	r3, [r7, #6]
 8001040:	2b3f      	cmp	r3, #63	@ 0x3f
 8001042:	d83e      	bhi.n	80010c2 <OLED_DrawPoint+0xa2>
		return;		// Out of reach

	pos = 7 - y/8;
 8001044:	79bb      	ldrb	r3, [r7, #6]
 8001046:	08db      	lsrs	r3, r3, #3
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 8001050:	79bb      	ldrb	r3, [r7, #6]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7-bx);
 8001058:	7b7b      	ldrb	r3, [r7, #13]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2201      	movs	r2, #1
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	73fb      	strb	r3, [r7, #15]

	if (t) {
 8001066:	797b      	ldrb	r3, [r7, #5]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d012      	beq.n	8001092 <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 800106c:	79fa      	ldrb	r2, [r7, #7]
 800106e:	7bbb      	ldrb	r3, [r7, #14]
 8001070:	4917      	ldr	r1, [pc, #92]	@ (80010d0 <OLED_DrawPoint+0xb0>)
 8001072:	00d2      	lsls	r2, r2, #3
 8001074:	440a      	add	r2, r1
 8001076:	4413      	add	r3, r2
 8001078:	7818      	ldrb	r0, [r3, #0]
 800107a:	79fa      	ldrb	r2, [r7, #7]
 800107c:	7bbb      	ldrb	r3, [r7, #14]
 800107e:	7bf9      	ldrb	r1, [r7, #15]
 8001080:	4301      	orrs	r1, r0
 8001082:	b2c8      	uxtb	r0, r1
 8001084:	4912      	ldr	r1, [pc, #72]	@ (80010d0 <OLED_DrawPoint+0xb0>)
 8001086:	00d2      	lsls	r2, r2, #3
 8001088:	440a      	add	r2, r1
 800108a:	4413      	add	r3, r2
 800108c:	4602      	mov	r2, r0
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e018      	b.n	80010c4 <OLED_DrawPoint+0xa4>
	} else {
		OLED_GRAM[x][pos] &= ~temp;
 8001092:	79fa      	ldrb	r2, [r7, #7]
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	490e      	ldr	r1, [pc, #56]	@ (80010d0 <OLED_DrawPoint+0xb0>)
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	440a      	add	r2, r1
 800109c:	4413      	add	r3, r2
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b25a      	sxtb	r2, r3
 80010a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	b25b      	sxtb	r3, r3
 80010aa:	4013      	ands	r3, r2
 80010ac:	b259      	sxtb	r1, r3
 80010ae:	79fa      	ldrb	r2, [r7, #7]
 80010b0:	7bbb      	ldrb	r3, [r7, #14]
 80010b2:	b2c8      	uxtb	r0, r1
 80010b4:	4906      	ldr	r1, [pc, #24]	@ (80010d0 <OLED_DrawPoint+0xb0>)
 80010b6:	00d2      	lsls	r2, r2, #3
 80010b8:	440a      	add	r2, r1
 80010ba:	4413      	add	r3, r2
 80010bc:	4602      	mov	r2, r0
 80010be:	701a      	strb	r2, [r3, #0]
 80010c0:	e000      	b.n	80010c4 <OLED_DrawPoint+0xa4>
		return;		// Out of reach
 80010c2:	bf00      	nop
	}
}
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	200002dc 	.word	0x200002dc

080010d4 <OLED_ShowChar>:

// **************************************************************************
// Show Char
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode) {
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4604      	mov	r4, r0
 80010dc:	4608      	mov	r0, r1
 80010de:	4611      	mov	r1, r2
 80010e0:	461a      	mov	r2, r3
 80010e2:	4623      	mov	r3, r4
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	4603      	mov	r3, r0
 80010e8:	71bb      	strb	r3, [r7, #6]
 80010ea:	460b      	mov	r3, r1
 80010ec:	717b      	strb	r3, [r7, #5]
 80010ee:	4613      	mov	r3, r2
 80010f0:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	733b      	strb	r3, [r7, #12]

	chr = chr - ' ';
 80010f6:	797b      	ldrb	r3, [r7, #5]
 80010f8:	3b20      	subs	r3, #32
 80010fa:	717b      	strb	r3, [r7, #5]
    for(t = 0; t < size; t++) {
 80010fc:	2300      	movs	r3, #0
 80010fe:	73bb      	strb	r3, [r7, #14]
 8001100:	e04d      	b.n	800119e <OLED_ShowChar+0xca>
		if (size == 12)
 8001102:	793b      	ldrb	r3, [r7, #4]
 8001104:	2b0c      	cmp	r3, #12
 8001106:	d10b      	bne.n	8001120 <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t];		// 1206 Size
 8001108:	797a      	ldrb	r2, [r7, #5]
 800110a:	7bb9      	ldrb	r1, [r7, #14]
 800110c:	4828      	ldr	r0, [pc, #160]	@ (80011b0 <OLED_ShowChar+0xdc>)
 800110e:	4613      	mov	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	4413      	add	r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	4403      	add	r3, r0
 8001118:	440b      	add	r3, r1
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	73fb      	strb	r3, [r7, #15]
 800111e:	e007      	b.n	8001130 <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t];		// 1608 Size
 8001120:	797a      	ldrb	r2, [r7, #5]
 8001122:	7bbb      	ldrb	r3, [r7, #14]
 8001124:	4923      	ldr	r1, [pc, #140]	@ (80011b4 <OLED_ShowChar+0xe0>)
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	440a      	add	r2, r1
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	73fb      	strb	r3, [r7, #15]

        for(t1 = 0; t1 < 8; t1++) {
 8001130:	2300      	movs	r3, #0
 8001132:	737b      	strb	r3, [r7, #13]
 8001134:	e02d      	b.n	8001192 <OLED_ShowChar+0xbe>
			if (temp & 0x80) {
 8001136:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113a:	2b00      	cmp	r3, #0
 800113c:	da07      	bge.n	800114e <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 800113e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001142:	79b9      	ldrb	r1, [r7, #6]
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff6a 	bl	8001020 <OLED_DrawPoint>
 800114c:	e00c      	b.n	8001168 <OLED_ShowChar+0x94>
			} else {
				OLED_DrawPoint(x, y, !mode);
 800114e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001152:	2b00      	cmp	r3, #0
 8001154:	bf0c      	ite	eq
 8001156:	2301      	moveq	r3, #1
 8001158:	2300      	movne	r3, #0
 800115a:	b2db      	uxtb	r3, r3
 800115c:	461a      	mov	r2, r3
 800115e:	79b9      	ldrb	r1, [r7, #6]
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff5c 	bl	8001020 <OLED_DrawPoint>
			}

			temp <<= 1;
 8001168:	7bfb      	ldrb	r3, [r7, #15]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	73fb      	strb	r3, [r7, #15]
			y++;
 800116e:	79bb      	ldrb	r3, [r7, #6]
 8001170:	3301      	adds	r3, #1
 8001172:	71bb      	strb	r3, [r7, #6]

			if((y - y0) == size) {
 8001174:	79ba      	ldrb	r2, [r7, #6]
 8001176:	7b3b      	ldrb	r3, [r7, #12]
 8001178:	1ad2      	subs	r2, r2, r3
 800117a:	793b      	ldrb	r3, [r7, #4]
 800117c:	429a      	cmp	r2, r3
 800117e:	d105      	bne.n	800118c <OLED_ShowChar+0xb8>
				y = y0;
 8001180:	7b3b      	ldrb	r3, [r7, #12]
 8001182:	71bb      	strb	r3, [r7, #6]
				x++;
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	3301      	adds	r3, #1
 8001188:	71fb      	strb	r3, [r7, #7]
				break;
 800118a:	e005      	b.n	8001198 <OLED_ShowChar+0xc4>
        for(t1 = 0; t1 < 8; t1++) {
 800118c:	7b7b      	ldrb	r3, [r7, #13]
 800118e:	3301      	adds	r3, #1
 8001190:	737b      	strb	r3, [r7, #13]
 8001192:	7b7b      	ldrb	r3, [r7, #13]
 8001194:	2b07      	cmp	r3, #7
 8001196:	d9ce      	bls.n	8001136 <OLED_ShowChar+0x62>
    for(t = 0; t < size; t++) {
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	3301      	adds	r3, #1
 800119c:	73bb      	strb	r3, [r7, #14]
 800119e:	7bba      	ldrb	r2, [r7, #14]
 80011a0:	793b      	ldrb	r3, [r7, #4]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d3ad      	bcc.n	8001102 <OLED_ShowChar+0x2e>
			}
		}
    }
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd90      	pop	{r4, r7, pc}
 80011b0:	08003f28 	.word	0x08003f28
 80011b4:	0800439c 	.word	0x0800439c

080011b8 <OLED_ShowString>:
	}
}

// **************************************************************************
// Show The String
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af02      	add	r7, sp, #8
 80011be:	4603      	mov	r3, r0
 80011c0:	603a      	str	r2, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	460b      	mov	r3, r1
 80011c6:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
    while (*p != '\0') {
 80011c8:	e01f      	b.n	800120a <OLED_ShowString+0x52>
        if (x > MAX_CHAR_POSX){
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	2b7a      	cmp	r3, #122	@ 0x7a
 80011ce:	d904      	bls.n	80011da <OLED_ShowString+0x22>
        	x = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	71fb      	strb	r3, [r7, #7]
        	y += 16;
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	3310      	adds	r3, #16
 80011d8:	71bb      	strb	r3, [r7, #6]
        }

        if (y > MAX_CHAR_POSY) {
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	2b3a      	cmp	r3, #58	@ 0x3a
 80011de:	d905      	bls.n	80011ec <OLED_ShowString+0x34>
        	y = x = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	71fb      	strb	r3, [r7, #7]
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	71bb      	strb	r3, [r7, #6]
        	OLED_Clear();
 80011e8:	f7ff fef4 	bl	8000fd4 <OLED_Clear>
        }

        OLED_ShowChar(x, y, *p, 12, 1);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	79b9      	ldrb	r1, [r7, #6]
 80011f2:	79f8      	ldrb	r0, [r7, #7]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	230c      	movs	r3, #12
 80011fa:	f7ff ff6b 	bl	80010d4 <OLED_ShowChar>
        x += 8;
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	3308      	adds	r3, #8
 8001202:	71fb      	strb	r3, [r7, #7]
        p++;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	603b      	str	r3, [r7, #0]
    while (*p != '\0') {
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d1db      	bne.n	80011ca <OLED_ShowString+0x12>
    }
}
 8001212:	bf00      	nop
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <OLED_Init>:

void OLED_Init() {
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8001220:	f000 feba 	bl	8001f98 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);	// turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles
 8001224:	4b41      	ldr	r3, [pc, #260]	@ (800132c <OLED_Init+0x110>)
 8001226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001228:	4a40      	ldr	r2, [pc, #256]	@ (800132c <OLED_Init+0x110>)
 800122a:	f023 0301 	bic.w	r3, r3, #1
 800122e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001230:	4b3e      	ldr	r3, [pc, #248]	@ (800132c <OLED_Init+0x110>)
 8001232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001234:	4a3d      	ldr	r2, [pc, #244]	@ (800132c <OLED_Init+0x110>)
 8001236:	f023 0304 	bic.w	r3, r3, #4
 800123a:	6713      	str	r3, [r2, #112]	@ 0x70
										// LSE oscillator switch off to let PC13 PC14 PC15 be IO


	HAL_PWR_DisableBkUpAccess();
 800123c:	f000 fec0 	bl	8001fc0 <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 8001240:	2200      	movs	r2, #0
 8001242:	2180      	movs	r1, #128	@ 0x80
 8001244:	483a      	ldr	r0, [pc, #232]	@ (8001330 <OLED_Init+0x114>)
 8001246:	f000 fe8d 	bl	8001f64 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800124a:	2064      	movs	r0, #100	@ 0x64
 800124c:	f000 fbcc 	bl	80019e8 <HAL_Delay>
	OLED_RST_Set();
 8001250:	2201      	movs	r2, #1
 8001252:	2180      	movs	r1, #128	@ 0x80
 8001254:	4836      	ldr	r0, [pc, #216]	@ (8001330 <OLED_Init+0x114>)
 8001256:	f000 fe85 	bl	8001f64 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD);	// Off Display
 800125a:	2100      	movs	r1, #0
 800125c:	20ae      	movs	r0, #174	@ 0xae
 800125e:	f7ff fe37 	bl	8000ed0 <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD);	// Set Oscillator Division
 8001262:	2100      	movs	r1, #0
 8001264:	20d5      	movs	r0, #213	@ 0xd5
 8001266:	f7ff fe33 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);		// [3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800126a:	2100      	movs	r1, #0
 800126c:	2050      	movs	r0, #80	@ 0x50
 800126e:	f7ff fe2f 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD);	// multiplex ratio
 8001272:	2100      	movs	r1, #0
 8001274:	20a8      	movs	r0, #168	@ 0xa8
 8001276:	f7ff fe2b 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD);	// duty = 0X3F(1/64)
 800127a:	2100      	movs	r1, #0
 800127c:	203f      	movs	r0, #63	@ 0x3f
 800127e:	f7ff fe27 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD);	// set display offset
 8001282:	2100      	movs	r1, #0
 8001284:	20d3      	movs	r0, #211	@ 0xd3
 8001286:	f7ff fe23 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD);	// 0
 800128a:	2100      	movs	r1, #0
 800128c:	2000      	movs	r0, #0
 800128e:	f7ff fe1f 	bl	8000ed0 <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD);	// set display start line [5:0]- from 0-63. RESET
 8001292:	2100      	movs	r1, #0
 8001294:	2040      	movs	r0, #64	@ 0x40
 8001296:	f7ff fe1b 	bl	8000ed0 <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD);	// Set charge pump
 800129a:	2100      	movs	r1, #0
 800129c:	208d      	movs	r0, #141	@ 0x8d
 800129e:	f7ff fe17 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); 	// Enable Charge Pump
 80012a2:	2100      	movs	r1, #0
 80012a4:	2014      	movs	r0, #20
 80012a6:	f7ff fe13 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD);	// Set Memory Addressing Mode
 80012aa:	2100      	movs	r1, #0
 80012ac:	2020      	movs	r0, #32
 80012ae:	f7ff fe0f 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD);	// Page Addressing Mode (RESET)
 80012b2:	2100      	movs	r1, #0
 80012b4:	2002      	movs	r0, #2
 80012b6:	f7ff fe0b 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD);	// Set segment remap, bit0:0,0->0;1,0->127;
 80012ba:	2100      	movs	r1, #0
 80012bc:	20a1      	movs	r0, #161	@ 0xa1
 80012be:	f7ff fe07 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD);	// Set COM Output Scan Direction
 80012c2:	2100      	movs	r1, #0
 80012c4:	20c0      	movs	r0, #192	@ 0xc0
 80012c6:	f7ff fe03 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD);	// Set COM Pins
 80012ca:	2100      	movs	r1, #0
 80012cc:	20da      	movs	r0, #218	@ 0xda
 80012ce:	f7ff fdff 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);	// [5:4] setting
 80012d2:	2100      	movs	r1, #0
 80012d4:	2012      	movs	r0, #18
 80012d6:	f7ff fdfb 	bl	8000ed0 <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD);	// Contrast Control
 80012da:	2100      	movs	r1, #0
 80012dc:	2081      	movs	r0, #129	@ 0x81
 80012de:	f7ff fdf7 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD);	// 1~256; Default: 0X7F
 80012e2:	2100      	movs	r1, #0
 80012e4:	20ef      	movs	r0, #239	@ 0xef
 80012e6:	f7ff fdf3 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD);	// Set Pre-charge Period
 80012ea:	2100      	movs	r1, #0
 80012ec:	20d9      	movs	r0, #217	@ 0xd9
 80012ee:	f7ff fdef 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD);	// [3:0],PHASE 1;[7:4],PHASE 2;
 80012f2:	2100      	movs	r1, #0
 80012f4:	20f1      	movs	r0, #241	@ 0xf1
 80012f6:	f7ff fdeb 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD);	// Set VCOMH
 80012fa:	2100      	movs	r1, #0
 80012fc:	20db      	movs	r0, #219	@ 0xdb
 80012fe:	f7ff fde7 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD);	// [6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001302:	2100      	movs	r1, #0
 8001304:	2030      	movs	r0, #48	@ 0x30
 8001306:	f7ff fde3 	bl	8000ed0 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD);	// Enable display outputs according to the GDDRAM contents
 800130a:	2100      	movs	r1, #0
 800130c:	20a4      	movs	r0, #164	@ 0xa4
 800130e:	f7ff fddf 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD);	// Set normal display
 8001312:	2100      	movs	r1, #0
 8001314:	20a6      	movs	r0, #166	@ 0xa6
 8001316:	f7ff fddb 	bl	8000ed0 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);	// DISPLAY ON
 800131a:	2100      	movs	r1, #0
 800131c:	20af      	movs	r0, #175	@ 0xaf
 800131e:	f7ff fdd7 	bl	8000ed0 <OLED_WR_Byte>
	OLED_Clear();
 8001322:	f7ff fe57 	bl	8000fd4 <OLED_Clear>
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40023800 	.word	0x40023800
 8001330:	40021000 	.word	0x40021000

08001334 <servo_init>:
	{25, 6700},
	{25.5, 6800},
	{26, 6900}
};

void servo_init(TIM_HandleTypeDef* pwm) {
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	pwm_tim = pwm;
 800133c:	4a05      	ldr	r2, [pc, #20]	@ (8001354 <servo_init+0x20>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pwm, SERVO_PWM_CHANNEL);
 8001342:	2100      	movs	r1, #0
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f001 fb4f 	bl	80029e8 <HAL_TIM_PWM_Start>
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200006dc 	.word	0x200006dc

08001358 <servo_setVal>:

void servo_setVal(uint32_t val) {
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	pwm_tim->Instance->CCR1 = val;
 8001360:	4b05      	ldr	r3, [pc, #20]	@ (8001378 <servo_setVal+0x20>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	200006dc 	.word	0x200006dc

0800137c <servo_setAngle>:

void servo_setAngle(float angle) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0
 8001382:	ed87 0a01 	vstr	s0, [r7, #4]
	// Clamp angle to within width
	if (angle < -SERVO_WIDTH) {
 8001386:	edd7 7a01 	vldr	s15, [r7, #4]
 800138a:	eebb 7a09 	vmov.f32	s14, #185	@ 0xc1c80000 -25.0
 800138e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001396:	d502      	bpl.n	800139e <servo_setAngle+0x22>
		angle = -SERVO_WIDTH;
 8001398:	4b4f      	ldr	r3, [pc, #316]	@ (80014d8 <servo_setAngle+0x15c>)
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	e00a      	b.n	80013b4 <servo_setAngle+0x38>
	} else if (angle > SERVO_WIDTH) {
 800139e:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a2:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80013a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ae:	dd01      	ble.n	80013b4 <servo_setAngle+0x38>
		angle = SERVO_WIDTH;
 80013b0:	4b4a      	ldr	r3, [pc, #296]	@ (80014dc <servo_setAngle+0x160>)
 80013b2:	607b      	str	r3, [r7, #4]
	}

	uint32_t val = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61fb      	str	r3, [r7, #28]
	if (angle <= lookup[0][0]) {
 80013b8:	4b49      	ldr	r3, [pc, #292]	@ (80014e0 <servo_setAngle+0x164>)
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	ed97 7a01 	vldr	s14, [r7, #4]
 80013c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ca:	d808      	bhi.n	80013de <servo_setAngle+0x62>
		val = lookup[0][0];
 80013cc:	4b44      	ldr	r3, [pc, #272]	@ (80014e0 <servo_setAngle+0x164>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d6:	ee17 3a90 	vmov	r3, s15
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	e069      	b.n	80014b2 <servo_setAngle+0x136>
	} else if (angle >= lookup[SERVO_LOOKUP_SIZE - 1][0]) {
 80013de:	4b40      	ldr	r3, [pc, #256]	@ (80014e0 <servo_setAngle+0x164>)
 80013e0:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 80013e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80013e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f0:	db08      	blt.n	8001404 <servo_setAngle+0x88>
		val = lookup[SERVO_LOOKUP_SIZE - 1][0];
 80013f2:	4b3b      	ldr	r3, [pc, #236]	@ (80014e0 <servo_setAngle+0x164>)
 80013f4:	edd3 7a4a 	vldr	s15, [r3, #296]	@ 0x128
 80013f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013fc:	ee17 3a90 	vmov	r3, s15
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e056      	b.n	80014b2 <servo_setAngle+0x136>
	} else {
		uint8_t i;
		float min_val, max_val;
		float min_angle, max_angle;
		for (i = 0; i < SERVO_LOOKUP_SIZE - 1; i++) {
 8001404:	2300      	movs	r3, #0
 8001406:	76fb      	strb	r3, [r7, #27]
 8001408:	e050      	b.n	80014ac <servo_setAngle+0x130>
			min_angle = lookup[i][0];
 800140a:	7efb      	ldrb	r3, [r7, #27]
 800140c:	4a34      	ldr	r2, [pc, #208]	@ (80014e0 <servo_setAngle+0x164>)
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	4413      	add	r3, r2
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	617b      	str	r3, [r7, #20]
			max_angle = lookup[i+1][0];
 8001416:	7efb      	ldrb	r3, [r7, #27]
 8001418:	3301      	adds	r3, #1
 800141a:	4a31      	ldr	r2, [pc, #196]	@ (80014e0 <servo_setAngle+0x164>)
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	4413      	add	r3, r2
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	613b      	str	r3, [r7, #16]
			min_val = lookup[i][1];
 8001424:	7efb      	ldrb	r3, [r7, #27]
 8001426:	4a2e      	ldr	r2, [pc, #184]	@ (80014e0 <servo_setAngle+0x164>)
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	3304      	adds	r3, #4
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]
			max_val = lookup[i+1][1];
 8001432:	7efb      	ldrb	r3, [r7, #27]
 8001434:	3301      	adds	r3, #1
 8001436:	4a2a      	ldr	r2, [pc, #168]	@ (80014e0 <servo_setAngle+0x164>)
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4413      	add	r3, r2
 800143c:	3304      	adds	r3, #4
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60bb      	str	r3, [r7, #8]

			if (angle >= min_angle && angle <= max_angle) {
 8001442:	ed97 7a01 	vldr	s14, [r7, #4]
 8001446:	edd7 7a05 	vldr	s15, [r7, #20]
 800144a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	db28      	blt.n	80014a6 <servo_setAngle+0x12a>
 8001454:	ed97 7a01 	vldr	s14, [r7, #4]
 8001458:	edd7 7a04 	vldr	s15, [r7, #16]
 800145c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001464:	d81f      	bhi.n	80014a6 <servo_setAngle+0x12a>
				val = min_val + (max_val - min_val) * (angle - min_angle) / (max_angle - min_angle);
 8001466:	ed97 7a02 	vldr	s14, [r7, #8]
 800146a:	edd7 7a03 	vldr	s15, [r7, #12]
 800146e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001472:	edd7 6a01 	vldr	s13, [r7, #4]
 8001476:	edd7 7a05 	vldr	s15, [r7, #20]
 800147a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800147e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001482:	ed97 7a04 	vldr	s14, [r7, #16]
 8001486:	edd7 7a05 	vldr	s15, [r7, #20]
 800148a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001492:	edd7 7a03 	vldr	s15, [r7, #12]
 8001496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800149a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800149e:	ee17 3a90 	vmov	r3, s15
 80014a2:	61fb      	str	r3, [r7, #28]
				break;
 80014a4:	e005      	b.n	80014b2 <servo_setAngle+0x136>
		for (i = 0; i < SERVO_LOOKUP_SIZE - 1; i++) {
 80014a6:	7efb      	ldrb	r3, [r7, #27]
 80014a8:	3301      	adds	r3, #1
 80014aa:	76fb      	strb	r3, [r7, #27]
 80014ac:	7efb      	ldrb	r3, [r7, #27]
 80014ae:	2b24      	cmp	r3, #36	@ 0x24
 80014b0:	d9ab      	bls.n	800140a <servo_setAngle+0x8e>
			}
		}
	}

	if (val == 0)
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d107      	bne.n	80014c8 <servo_setAngle+0x14c>
		val = lookup[SERVO_LOOKUP_SIZE - 1][1];
 80014b8:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <servo_setAngle+0x164>)
 80014ba:	edd3 7a4b 	vldr	s15, [r3, #300]	@ 0x12c
 80014be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014c2:	ee17 3a90 	vmov	r3, s15
 80014c6:	61fb      	str	r3, [r7, #28]
	
	servo_setVal(val);
 80014c8:	69f8      	ldr	r0, [r7, #28]
 80014ca:	f7ff ff45 	bl	8001358 <servo_setVal>
}
 80014ce:	bf00      	nop
 80014d0:	3720      	adds	r7, #32
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	c1c80000 	.word	0xc1c80000
 80014dc:	41c80000 	.word	0x41c80000
 80014e0:	20000000 	.word	0x20000000

080014e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <HAL_MspInit+0x4c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001530 <HAL_MspInit+0x4c>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80014fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001530 <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <HAL_MspInit+0x4c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	4a08      	ldr	r2, [pc, #32]	@ (8001530 <HAL_MspInit+0x4c>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	@ 0x40
 8001516:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001534:	b480      	push	{r7}
 8001536:	b085      	sub	sp, #20
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a15      	ldr	r2, [pc, #84]	@ (8001598 <HAL_TIM_Base_MspInit+0x64>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d10e      	bne.n	8001564 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	4b14      	ldr	r3, [pc, #80]	@ (800159c <HAL_TIM_Base_MspInit+0x68>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154e:	4a13      	ldr	r2, [pc, #76]	@ (800159c <HAL_TIM_Base_MspInit+0x68>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6453      	str	r3, [r2, #68]	@ 0x44
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <HAL_TIM_Base_MspInit+0x68>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	60fb      	str	r3, [r7, #12]
 8001560:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001562:	e012      	b.n	800158a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM8)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a0d      	ldr	r2, [pc, #52]	@ (80015a0 <HAL_TIM_Base_MspInit+0x6c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d10d      	bne.n	800158a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800156e:	2300      	movs	r3, #0
 8001570:	60bb      	str	r3, [r7, #8]
 8001572:	4b0a      	ldr	r3, [pc, #40]	@ (800159c <HAL_TIM_Base_MspInit+0x68>)
 8001574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001576:	4a09      	ldr	r2, [pc, #36]	@ (800159c <HAL_TIM_Base_MspInit+0x68>)
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	6453      	str	r3, [r2, #68]	@ 0x44
 800157e:	4b07      	ldr	r3, [pc, #28]	@ (800159c <HAL_TIM_Base_MspInit+0x68>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
}
 800158a:	bf00      	nop
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40010000 	.word	0x40010000
 800159c:	40023800 	.word	0x40023800
 80015a0:	40010400 	.word	0x40010400

080015a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	@ 0x30
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015c4:	d14b      	bne.n	800165e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	4b3f      	ldr	r3, [pc, #252]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ce:	4a3e      	ldr	r2, [pc, #248]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d6:	4b3c      	ldr	r3, [pc, #240]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	4b38      	ldr	r3, [pc, #224]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a37      	ldr	r2, [pc, #220]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b35      	ldr	r3, [pc, #212]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b31      	ldr	r3, [pc, #196]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a30      	ldr	r2, [pc, #192]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001608:	f043 0302 	orr.w	r3, r3, #2
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b2e      	ldr	r3, [pc, #184]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_CH1_Pin;
 800161a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800161e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800162c:	2301      	movs	r3, #1
 800162e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_A_CH1_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	4825      	ldr	r0, [pc, #148]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x128>)
 8001638:	f000 fae0 	bl	8001bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_A_CH2_Pin;
 800163c:	2308      	movs	r3, #8
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800164c:	2301      	movs	r3, #1
 800164e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_A_CH2_GPIO_Port, &GPIO_InitStruct);
 8001650:	f107 031c 	add.w	r3, r7, #28
 8001654:	4619      	mov	r1, r3
 8001656:	481e      	ldr	r0, [pc, #120]	@ (80016d0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001658:	f000 fad0 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800165c:	e030      	b.n	80016c0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a1c      	ldr	r2, [pc, #112]	@ (80016d4 <HAL_TIM_Encoder_MspInit+0x130>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d12b      	bne.n	80016c0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	4a15      	ldr	r2, [pc, #84]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001672:	f043 0302 	orr.w	r3, r3, #2
 8001676:	6413      	str	r3, [r2, #64]	@ 0x40
 8001678:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168c:	4a0e      	ldr	r2, [pc, #56]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 800168e:	f043 0301 	orr.w	r3, r3, #1
 8001692:	6313      	str	r3, [r2, #48]	@ 0x30
 8001694:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <HAL_TIM_Encoder_MspInit+0x124>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_B_CH1_Pin|MOTOR_B_CH2_Pin;
 80016a0:	23c0      	movs	r3, #192	@ 0xc0
 80016a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016b0:	2302      	movs	r3, #2
 80016b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	f107 031c 	add.w	r3, r7, #28
 80016b8:	4619      	mov	r1, r3
 80016ba:	4804      	ldr	r0, [pc, #16]	@ (80016cc <HAL_TIM_Encoder_MspInit+0x128>)
 80016bc:	f000 fa9e 	bl	8001bfc <HAL_GPIO_Init>
}
 80016c0:	bf00      	nop
 80016c2:	3730      	adds	r7, #48	@ 0x30
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020400 	.word	0x40020400
 80016d4:	40000400 	.word	0x40000400

080016d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	@ 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a24      	ldr	r2, [pc, #144]	@ (8001788 <HAL_TIM_MspPostInit+0xb0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d11f      	bne.n	800173a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
 80016fe:	4b23      	ldr	r3, [pc, #140]	@ (800178c <HAL_TIM_MspPostInit+0xb4>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a22      	ldr	r2, [pc, #136]	@ (800178c <HAL_TIM_MspPostInit+0xb4>)
 8001704:	f043 0310 	orr.w	r3, r3, #16
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b20      	ldr	r3, [pc, #128]	@ (800178c <HAL_TIM_MspPostInit+0xb4>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0310 	and.w	r3, r3, #16
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8001716:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001728:	2301      	movs	r3, #1
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4817      	ldr	r0, [pc, #92]	@ (8001790 <HAL_TIM_MspPostInit+0xb8>)
 8001734:	f000 fa62 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001738:	e022      	b.n	8001780 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a15      	ldr	r2, [pc, #84]	@ (8001794 <HAL_TIM_MspPostInit+0xbc>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d11d      	bne.n	8001780 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	4b10      	ldr	r3, [pc, #64]	@ (800178c <HAL_TIM_MspPostInit+0xb4>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174c:	4a0f      	ldr	r2, [pc, #60]	@ (800178c <HAL_TIM_MspPostInit+0xb4>)
 800174e:	f043 0304 	orr.w	r3, r3, #4
 8001752:	6313      	str	r3, [r2, #48]	@ 0x30
 8001754:	4b0d      	ldr	r3, [pc, #52]	@ (800178c <HAL_TIM_MspPostInit+0xb4>)
 8001756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001758:	f003 0304 	and.w	r3, r3, #4
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_A_PWM_Pin|MOTOR_B_PWM_Pin;
 8001760:	23c0      	movs	r3, #192	@ 0xc0
 8001762:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001764:	2302      	movs	r3, #2
 8001766:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800176c:	2300      	movs	r3, #0
 800176e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001770:	2303      	movs	r3, #3
 8001772:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001774:	f107 0314 	add.w	r3, r7, #20
 8001778:	4619      	mov	r1, r3
 800177a:	4807      	ldr	r0, [pc, #28]	@ (8001798 <HAL_TIM_MspPostInit+0xc0>)
 800177c:	f000 fa3e 	bl	8001bfc <HAL_GPIO_Init>
}
 8001780:	bf00      	nop
 8001782:	3728      	adds	r7, #40	@ 0x28
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40010000 	.word	0x40010000
 800178c:	40023800 	.word	0x40023800
 8001790:	40021000 	.word	0x40021000
 8001794:	40010400 	.word	0x40010400
 8001798:	40020800 	.word	0x40020800

0800179c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a19      	ldr	r2, [pc, #100]	@ (8001820 <HAL_UART_MspInit+0x84>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d12c      	bne.n	8001818 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b18      	ldr	r3, [pc, #96]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	4a17      	ldr	r2, [pc, #92]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ce:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	4a10      	ldr	r2, [pc, #64]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017e4:	f043 0304 	orr.w	r3, r3, #4
 80017e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <HAL_UART_MspInit+0x88>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ee:	f003 0304 	and.w	r3, r3, #4
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80017f6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001808:	2307      	movs	r3, #7
 800180a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4805      	ldr	r0, [pc, #20]	@ (8001828 <HAL_UART_MspInit+0x8c>)
 8001814:	f000 f9f2 	bl	8001bfc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001818:	bf00      	nop
 800181a:	3728      	adds	r7, #40	@ 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40004800 	.word	0x40004800
 8001824:	40023800 	.word	0x40023800
 8001828:	40020800 	.word	0x40020800

0800182c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001830:	bf00      	nop
 8001832:	e7fd      	b.n	8001830 <NMI_Handler+0x4>

08001834 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <HardFault_Handler+0x4>

0800183c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <MemManage_Handler+0x4>

08001844 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <BusFault_Handler+0x4>

0800184c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <UsageFault_Handler+0x4>

08001854 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001882:	f000 f891 	bl	80019a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <SystemInit+0x20>)
 8001892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001896:	4a05      	ldr	r2, [pc, #20]	@ (80018ac <SystemInit+0x20>)
 8001898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800189c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018b4:	f7ff ffea 	bl	800188c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b8:	480c      	ldr	r0, [pc, #48]	@ (80018ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ba:	490d      	ldr	r1, [pc, #52]	@ (80018f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018bc:	4a0d      	ldr	r2, [pc, #52]	@ (80018f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ce:	4a0a      	ldr	r2, [pc, #40]	@ (80018f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018d0:	4c0a      	ldr	r4, [pc, #40]	@ (80018fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018de:	f002 fadf 	bl	8003ea0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e2:	f7fe fde9 	bl	80004b8 <main>
  bx  lr    
 80018e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 80018f4:	080049b4 	.word	0x080049b4
  ldr r2, =_sbss
 80018f8:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 80018fc:	200006e4 	.word	0x200006e4

08001900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC_IRQHandler>
	...

08001904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001908:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0d      	ldr	r2, [pc, #52]	@ (8001944 <HAL_Init+0x40>)
 800190e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001914:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <HAL_Init+0x40>)
 800191a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800191e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001920:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <HAL_Init+0x40>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a07      	ldr	r2, [pc, #28]	@ (8001944 <HAL_Init+0x40>)
 8001926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800192a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f000 f931 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001932:	200f      	movs	r0, #15
 8001934:	f000 f808 	bl	8001948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001938:	f7ff fdd4 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023c00 	.word	0x40023c00

08001948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001950:	4b12      	ldr	r3, [pc, #72]	@ (800199c <HAL_InitTick+0x54>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_InitTick+0x58>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	4619      	mov	r1, r3
 800195a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800195e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f000 f93b 	bl	8001be2 <HAL_SYSTICK_Config>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e00e      	b.n	8001994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b0f      	cmp	r3, #15
 800197a:	d80a      	bhi.n	8001992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800197c:	2200      	movs	r2, #0
 800197e:	6879      	ldr	r1, [r7, #4]
 8001980:	f04f 30ff 	mov.w	r0, #4294967295
 8001984:	f000 f911 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001988:	4a06      	ldr	r2, [pc, #24]	@ (80019a4 <HAL_InitTick+0x5c>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	e000      	b.n	8001994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000130 	.word	0x20000130
 80019a0:	20000138 	.word	0x20000138
 80019a4:	20000134 	.word	0x20000134

080019a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_IncTick+0x20>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_IncTick+0x24>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4413      	add	r3, r2
 80019b8:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <HAL_IncTick+0x24>)
 80019ba:	6013      	str	r3, [r2, #0]
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	20000138 	.word	0x20000138
 80019cc:	200006e0 	.word	0x200006e0

080019d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return uwTick;
 80019d4:	4b03      	ldr	r3, [pc, #12]	@ (80019e4 <HAL_GetTick+0x14>)
 80019d6:	681b      	ldr	r3, [r3, #0]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	200006e0 	.word	0x200006e0

080019e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f0:	f7ff ffee 	bl	80019d0 <HAL_GetTick>
 80019f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d005      	beq.n	8001a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a02:	4b0a      	ldr	r3, [pc, #40]	@ (8001a2c <HAL_Delay+0x44>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a0e:	bf00      	nop
 8001a10:	f7ff ffde 	bl	80019d0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d8f7      	bhi.n	8001a10 <HAL_Delay+0x28>
  {
  }
}
 8001a20:	bf00      	nop
 8001a22:	bf00      	nop
 8001a24:	3710      	adds	r7, #16
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20000138 	.word	0x20000138

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	@ (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	6039      	str	r1, [r7, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	db0a      	blt.n	8001abe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	490c      	ldr	r1, [pc, #48]	@ (8001ae0 <__NVIC_SetPriority+0x4c>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	0112      	lsls	r2, r2, #4
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001abc:	e00a      	b.n	8001ad4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4908      	ldr	r1, [pc, #32]	@ (8001ae4 <__NVIC_SetPriority+0x50>)
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	3b04      	subs	r3, #4
 8001acc:	0112      	lsls	r2, r2, #4
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	761a      	strb	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000e100 	.word	0xe000e100
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b089      	sub	sp, #36	@ 0x24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f1c3 0307 	rsb	r3, r3, #7
 8001b02:	2b04      	cmp	r3, #4
 8001b04:	bf28      	it	cs
 8001b06:	2304      	movcs	r3, #4
 8001b08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	2b06      	cmp	r3, #6
 8001b10:	d902      	bls.n	8001b18 <NVIC_EncodePriority+0x30>
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3b03      	subs	r3, #3
 8001b16:	e000      	b.n	8001b1a <NVIC_EncodePriority+0x32>
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b20:	69bb      	ldr	r3, [r7, #24]
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	43da      	mvns	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b30:	f04f 31ff 	mov.w	r1, #4294967295
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43d9      	mvns	r1, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	4313      	orrs	r3, r2
         );
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3724      	adds	r7, #36	@ 0x24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
	...

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	@ (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f7ff ff8e 	bl	8001a94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	@ (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	@ (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff47 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff5c 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff8e 	bl	8001ae8 <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5d 	bl	8001a94 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f7ff ffb0 	bl	8001b50 <SysTick_Config>
 8001bf0:	4603      	mov	r3, r0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	@ 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	e16b      	b.n	8001ef0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c18:	2201      	movs	r2, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	f040 815a 	bne.w	8001eea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d005      	beq.n	8001c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d130      	bne.n	8001cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c84:	2201      	movs	r2, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 0201 	and.w	r2, r3, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d017      	beq.n	8001cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d123      	bne.n	8001d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	08da      	lsrs	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3208      	adds	r2, #8
 8001d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220f      	movs	r2, #15
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	08da      	lsrs	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3208      	adds	r2, #8
 8001d3a:	69b9      	ldr	r1, [r7, #24]
 8001d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0203 	and.w	r2, r3, #3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80b4 	beq.w	8001eea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b60      	ldr	r3, [pc, #384]	@ (8001f08 <HAL_GPIO_Init+0x30c>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	4a5f      	ldr	r2, [pc, #380]	@ (8001f08 <HAL_GPIO_Init+0x30c>)
 8001d8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d92:	4b5d      	ldr	r3, [pc, #372]	@ (8001f08 <HAL_GPIO_Init+0x30c>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d9e:	4a5b      	ldr	r2, [pc, #364]	@ (8001f0c <HAL_GPIO_Init+0x310>)
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	220f      	movs	r2, #15
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a52      	ldr	r2, [pc, #328]	@ (8001f10 <HAL_GPIO_Init+0x314>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d02b      	beq.n	8001e22 <HAL_GPIO_Init+0x226>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a51      	ldr	r2, [pc, #324]	@ (8001f14 <HAL_GPIO_Init+0x318>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d025      	beq.n	8001e1e <HAL_GPIO_Init+0x222>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a50      	ldr	r2, [pc, #320]	@ (8001f18 <HAL_GPIO_Init+0x31c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d01f      	beq.n	8001e1a <HAL_GPIO_Init+0x21e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8001f1c <HAL_GPIO_Init+0x320>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d019      	beq.n	8001e16 <HAL_GPIO_Init+0x21a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f20 <HAL_GPIO_Init+0x324>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d013      	beq.n	8001e12 <HAL_GPIO_Init+0x216>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4d      	ldr	r2, [pc, #308]	@ (8001f24 <HAL_GPIO_Init+0x328>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00d      	beq.n	8001e0e <HAL_GPIO_Init+0x212>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4c      	ldr	r2, [pc, #304]	@ (8001f28 <HAL_GPIO_Init+0x32c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d007      	beq.n	8001e0a <HAL_GPIO_Init+0x20e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4b      	ldr	r2, [pc, #300]	@ (8001f2c <HAL_GPIO_Init+0x330>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d101      	bne.n	8001e06 <HAL_GPIO_Init+0x20a>
 8001e02:	2307      	movs	r3, #7
 8001e04:	e00e      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e06:	2308      	movs	r3, #8
 8001e08:	e00c      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e0a:	2306      	movs	r3, #6
 8001e0c:	e00a      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e0e:	2305      	movs	r3, #5
 8001e10:	e008      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e12:	2304      	movs	r3, #4
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e16:	2303      	movs	r3, #3
 8001e18:	e004      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e002      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_GPIO_Init+0x228>
 8001e22:	2300      	movs	r3, #0
 8001e24:	69fa      	ldr	r2, [r7, #28]
 8001e26:	f002 0203 	and.w	r2, r2, #3
 8001e2a:	0092      	lsls	r2, r2, #2
 8001e2c:	4093      	lsls	r3, r2
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e34:	4935      	ldr	r1, [pc, #212]	@ (8001f0c <HAL_GPIO_Init+0x310>)
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	089b      	lsrs	r3, r3, #2
 8001e3a:	3302      	adds	r3, #2
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e42:	4b3b      	ldr	r3, [pc, #236]	@ (8001f30 <HAL_GPIO_Init+0x334>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e66:	4a32      	ldr	r2, [pc, #200]	@ (8001f30 <HAL_GPIO_Init+0x334>)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e6c:	4b30      	ldr	r3, [pc, #192]	@ (8001f30 <HAL_GPIO_Init+0x334>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e90:	4a27      	ldr	r2, [pc, #156]	@ (8001f30 <HAL_GPIO_Init+0x334>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e96:	4b26      	ldr	r3, [pc, #152]	@ (8001f30 <HAL_GPIO_Init+0x334>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eba:	4a1d      	ldr	r2, [pc, #116]	@ (8001f30 <HAL_GPIO_Init+0x334>)
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <HAL_GPIO_Init+0x334>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ee4:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <HAL_GPIO_Init+0x334>)
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3301      	adds	r3, #1
 8001eee:	61fb      	str	r3, [r7, #28]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	2b0f      	cmp	r3, #15
 8001ef4:	f67f ae90 	bls.w	8001c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	3724      	adds	r7, #36	@ 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40013800 	.word	0x40013800
 8001f10:	40020000 	.word	0x40020000
 8001f14:	40020400 	.word	0x40020400
 8001f18:	40020800 	.word	0x40020800
 8001f1c:	40020c00 	.word	0x40020c00
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40021400 	.word	0x40021400
 8001f28:	40021800 	.word	0x40021800
 8001f2c:	40021c00 	.word	0x40021c00
 8001f30:	40013c00 	.word	0x40013c00

08001f34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	887b      	ldrh	r3, [r7, #2]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	73fb      	strb	r3, [r7, #15]
 8001f50:	e001      	b.n	8001f56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
 8001f70:	4613      	mov	r3, r2
 8001f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f80:	e003      	b.n	8001f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	041a      	lsls	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	619a      	str	r2, [r3, #24]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001f9e:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <HAL_PWR_EnableBkUpAccess+0x24>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001faa:	687b      	ldr	r3, [r7, #4]
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	420e0020 	.word	0x420e0020
 8001fbc:	40007000 	.word	0x40007000

08001fc0 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8001fc6:	4b06      	ldr	r3, [pc, #24]	@ (8001fe0 <HAL_PWR_DisableBkUpAccess+0x20>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001fcc:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <HAL_PWR_DisableBkUpAccess+0x24>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001fd2:	687b      	ldr	r3, [r7, #4]
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	420e0020 	.word	0x420e0020
 8001fe4:	40007000 	.word	0x40007000

08001fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e267      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d075      	beq.n	80020f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002006:	4b88      	ldr	r3, [pc, #544]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	2b04      	cmp	r3, #4
 8002010:	d00c      	beq.n	800202c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002012:	4b85      	ldr	r3, [pc, #532]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800201a:	2b08      	cmp	r3, #8
 800201c:	d112      	bne.n	8002044 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800201e:	4b82      	ldr	r3, [pc, #520]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002026:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800202a:	d10b      	bne.n	8002044 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800202c:	4b7e      	ldr	r3, [pc, #504]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d05b      	beq.n	80020f0 <HAL_RCC_OscConfig+0x108>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d157      	bne.n	80020f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e242      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800204c:	d106      	bne.n	800205c <HAL_RCC_OscConfig+0x74>
 800204e:	4b76      	ldr	r3, [pc, #472]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a75      	ldr	r2, [pc, #468]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e01d      	b.n	8002098 <HAL_RCC_OscConfig+0xb0>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0x98>
 8002066:	4b70      	ldr	r3, [pc, #448]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a6f      	ldr	r2, [pc, #444]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b6d      	ldr	r3, [pc, #436]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6c      	ldr	r2, [pc, #432]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0xb0>
 8002080:	4b69      	ldr	r3, [pc, #420]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a68      	ldr	r2, [pc, #416]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b66      	ldr	r3, [pc, #408]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a65      	ldr	r2, [pc, #404]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7ff fc96 	bl	80019d0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a8:	f7ff fc92 	bl	80019d0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	@ 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e207      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0xc0>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7ff fc82 	bl	80019d0 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff fc7e 	bl	80019d0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	@ 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e1f3      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	4b51      	ldr	r3, [pc, #324]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0xe8>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d063      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80020fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210a:	4b47      	ldr	r3, [pc, #284]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002112:	2b08      	cmp	r3, #8
 8002114:	d11c      	bne.n	8002150 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002116:	4b44      	ldr	r3, [pc, #272]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d116      	bne.n	8002150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	4b41      	ldr	r3, [pc, #260]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_RCC_OscConfig+0x152>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e1c7      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	4b3b      	ldr	r3, [pc, #236]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4937      	ldr	r1, [pc, #220]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	e03a      	b.n	80021c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002158:	4b34      	ldr	r3, [pc, #208]	@ (800222c <HAL_RCC_OscConfig+0x244>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7ff fc37 	bl	80019d0 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002166:	f7ff fc33 	bl	80019d0 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e1a8      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002178:	4b2b      	ldr	r3, [pc, #172]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002184:	4b28      	ldr	r3, [pc, #160]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691b      	ldr	r3, [r3, #16]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4925      	ldr	r1, [pc, #148]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]
 8002198:	e015      	b.n	80021c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219a:	4b24      	ldr	r3, [pc, #144]	@ (800222c <HAL_RCC_OscConfig+0x244>)
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a0:	f7ff fc16 	bl	80019d0 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a8:	f7ff fc12 	bl	80019d0 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e187      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f0      	bne.n	80021a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0308 	and.w	r3, r3, #8
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d036      	beq.n	8002240 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d016      	beq.n	8002208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021da:	4b15      	ldr	r3, [pc, #84]	@ (8002230 <HAL_RCC_OscConfig+0x248>)
 80021dc:	2201      	movs	r2, #1
 80021de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e0:	f7ff fbf6 	bl	80019d0 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e8:	f7ff fbf2 	bl	80019d0 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e167      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002228 <HAL_RCC_OscConfig+0x240>)
 80021fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x200>
 8002206:	e01b      	b.n	8002240 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002208:	4b09      	ldr	r3, [pc, #36]	@ (8002230 <HAL_RCC_OscConfig+0x248>)
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7ff fbdf 	bl	80019d0 <HAL_GetTick>
 8002212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002214:	e00e      	b.n	8002234 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002216:	f7ff fbdb 	bl	80019d0 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d907      	bls.n	8002234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e150      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
 8002228:	40023800 	.word	0x40023800
 800222c:	42470000 	.word	0x42470000
 8002230:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002234:	4b88      	ldr	r3, [pc, #544]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 8002236:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002238:	f003 0302 	and.w	r3, r3, #2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1ea      	bne.n	8002216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0304 	and.w	r3, r3, #4
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 8097 	beq.w	800237c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800224e:	2300      	movs	r3, #0
 8002250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002252:	4b81      	ldr	r3, [pc, #516]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 8002254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002256:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10f      	bne.n	800227e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	4b7d      	ldr	r3, [pc, #500]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	4a7c      	ldr	r2, [pc, #496]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 8002268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800226c:	6413      	str	r3, [r2, #64]	@ 0x40
 800226e:	4b7a      	ldr	r3, [pc, #488]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 8002270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227a:	2301      	movs	r3, #1
 800227c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227e:	4b77      	ldr	r3, [pc, #476]	@ (800245c <HAL_RCC_OscConfig+0x474>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d118      	bne.n	80022bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228a:	4b74      	ldr	r3, [pc, #464]	@ (800245c <HAL_RCC_OscConfig+0x474>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a73      	ldr	r2, [pc, #460]	@ (800245c <HAL_RCC_OscConfig+0x474>)
 8002290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002296:	f7ff fb9b 	bl	80019d0 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229e:	f7ff fb97 	bl	80019d0 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e10c      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	4b6a      	ldr	r3, [pc, #424]	@ (800245c <HAL_RCC_OscConfig+0x474>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d106      	bne.n	80022d2 <HAL_RCC_OscConfig+0x2ea>
 80022c4:	4b64      	ldr	r3, [pc, #400]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 80022c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c8:	4a63      	ldr	r2, [pc, #396]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 80022ca:	f043 0301 	orr.w	r3, r3, #1
 80022ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d0:	e01c      	b.n	800230c <HAL_RCC_OscConfig+0x324>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	2b05      	cmp	r3, #5
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCC_OscConfig+0x30c>
 80022da:	4b5f      	ldr	r3, [pc, #380]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022de:	4a5e      	ldr	r2, [pc, #376]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 80022e0:	f043 0304 	orr.w	r3, r3, #4
 80022e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f2:	e00b      	b.n	800230c <HAL_RCC_OscConfig+0x324>
 80022f4:	4b58      	ldr	r3, [pc, #352]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 80022f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f8:	4a57      	ldr	r2, [pc, #348]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 80022fa:	f023 0301 	bic.w	r3, r3, #1
 80022fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002300:	4b55      	ldr	r3, [pc, #340]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002304:	4a54      	ldr	r2, [pc, #336]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 8002306:	f023 0304 	bic.w	r3, r3, #4
 800230a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d015      	beq.n	8002340 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7ff fb5c 	bl	80019d0 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231a:	e00a      	b.n	8002332 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231c:	f7ff fb58 	bl	80019d0 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e0cb      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002332:	4b49      	ldr	r3, [pc, #292]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 8002334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0ee      	beq.n	800231c <HAL_RCC_OscConfig+0x334>
 800233e:	e014      	b.n	800236a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002340:	f7ff fb46 	bl	80019d0 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002346:	e00a      	b.n	800235e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7ff fb42 	bl	80019d0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0b5      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800235e:	4b3e      	ldr	r3, [pc, #248]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d1ee      	bne.n	8002348 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800236a:	7dfb      	ldrb	r3, [r7, #23]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d105      	bne.n	800237c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002370:	4b39      	ldr	r3, [pc, #228]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 8002372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002374:	4a38      	ldr	r2, [pc, #224]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 8002376:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800237a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80a1 	beq.w	80024c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002386:	4b34      	ldr	r3, [pc, #208]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f003 030c 	and.w	r3, r3, #12
 800238e:	2b08      	cmp	r3, #8
 8002390:	d05c      	beq.n	800244c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d141      	bne.n	800241e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239a:	4b31      	ldr	r3, [pc, #196]	@ (8002460 <HAL_RCC_OscConfig+0x478>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7ff fb16 	bl	80019d0 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a8:	f7ff fb12 	bl	80019d0 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e087      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ba:	4b27      	ldr	r3, [pc, #156]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	69da      	ldr	r2, [r3, #28]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	019b      	lsls	r3, r3, #6
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023dc:	085b      	lsrs	r3, r3, #1
 80023de:	3b01      	subs	r3, #1
 80023e0:	041b      	lsls	r3, r3, #16
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e8:	061b      	lsls	r3, r3, #24
 80023ea:	491b      	ldr	r1, [pc, #108]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002460 <HAL_RCC_OscConfig+0x478>)
 80023f2:	2201      	movs	r2, #1
 80023f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7ff faeb 	bl	80019d0 <HAL_GetTick>
 80023fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fc:	e008      	b.n	8002410 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023fe:	f7ff fae7 	bl	80019d0 <HAL_GetTick>
 8002402:	4602      	mov	r2, r0
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b02      	cmp	r3, #2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e05c      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002410:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0f0      	beq.n	80023fe <HAL_RCC_OscConfig+0x416>
 800241c:	e054      	b.n	80024c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800241e:	4b10      	ldr	r3, [pc, #64]	@ (8002460 <HAL_RCC_OscConfig+0x478>)
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff fad4 	bl	80019d0 <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800242c:	f7ff fad0 	bl	80019d0 <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b02      	cmp	r3, #2
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e045      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_RCC_OscConfig+0x470>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f0      	bne.n	800242c <HAL_RCC_OscConfig+0x444>
 800244a:	e03d      	b.n	80024c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d107      	bne.n	8002464 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e038      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
 8002458:	40023800 	.word	0x40023800
 800245c:	40007000 	.word	0x40007000
 8002460:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002464:	4b1b      	ldr	r3, [pc, #108]	@ (80024d4 <HAL_RCC_OscConfig+0x4ec>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d028      	beq.n	80024c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800247c:	429a      	cmp	r2, r3
 800247e:	d121      	bne.n	80024c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800248a:	429a      	cmp	r2, r3
 800248c:	d11a      	bne.n	80024c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002494:	4013      	ands	r3, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800249a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800249c:	4293      	cmp	r3, r2
 800249e:	d111      	bne.n	80024c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024aa:	085b      	lsrs	r3, r3, #1
 80024ac:	3b01      	subs	r3, #1
 80024ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d107      	bne.n	80024c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e000      	b.n	80024ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40023800 	.word	0x40023800

080024d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e0cc      	b.n	8002686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024ec:	4b68      	ldr	r3, [pc, #416]	@ (8002690 <HAL_RCC_ClockConfig+0x1b8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d90c      	bls.n	8002514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b65      	ldr	r3, [pc, #404]	@ (8002690 <HAL_RCC_ClockConfig+0x1b8>)
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b63      	ldr	r3, [pc, #396]	@ (8002690 <HAL_RCC_ClockConfig+0x1b8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0b8      	b.n	8002686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d020      	beq.n	8002562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800252c:	4b59      	ldr	r3, [pc, #356]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	4a58      	ldr	r2, [pc, #352]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002536:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002544:	4b53      	ldr	r3, [pc, #332]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a52      	ldr	r2, [pc, #328]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 800254a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800254e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002550:	4b50      	ldr	r3, [pc, #320]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	494d      	ldr	r1, [pc, #308]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 800255e:	4313      	orrs	r3, r2
 8002560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d044      	beq.n	80025f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b47      	ldr	r3, [pc, #284]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d119      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e07f      	b.n	8002686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d003      	beq.n	8002596 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002592:	2b03      	cmp	r3, #3
 8002594:	d107      	bne.n	80025a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002596:	4b3f      	ldr	r3, [pc, #252]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d109      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e06f      	b.n	8002686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e067      	b.n	8002686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025b6:	4b37      	ldr	r3, [pc, #220]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f023 0203 	bic.w	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4934      	ldr	r1, [pc, #208]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c8:	f7ff fa02 	bl	80019d0 <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ce:	e00a      	b.n	80025e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025d0:	f7ff f9fe 	bl	80019d0 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025de:	4293      	cmp	r3, r2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e04f      	b.n	8002686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e6:	4b2b      	ldr	r3, [pc, #172]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 020c 	and.w	r2, r3, #12
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d1eb      	bne.n	80025d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f8:	4b25      	ldr	r3, [pc, #148]	@ (8002690 <HAL_RCC_ClockConfig+0x1b8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d20c      	bcs.n	8002620 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002606:	4b22      	ldr	r3, [pc, #136]	@ (8002690 <HAL_RCC_ClockConfig+0x1b8>)
 8002608:	683a      	ldr	r2, [r7, #0]
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <HAL_RCC_ClockConfig+0x1b8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e032      	b.n	8002686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800262c:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4916      	ldr	r1, [pc, #88]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	4313      	orrs	r3, r2
 800263c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d009      	beq.n	800265e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800264a:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	490e      	ldr	r1, [pc, #56]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 800265a:	4313      	orrs	r3, r2
 800265c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800265e:	f000 f821 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 8002662:	4602      	mov	r2, r0
 8002664:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	490a      	ldr	r1, [pc, #40]	@ (8002698 <HAL_RCC_ClockConfig+0x1c0>)
 8002670:	5ccb      	ldrb	r3, [r1, r3]
 8002672:	fa22 f303 	lsr.w	r3, r2, r3
 8002676:	4a09      	ldr	r2, [pc, #36]	@ (800269c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800267a:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <HAL_RCC_ClockConfig+0x1c8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff f962 	bl	8001948 <HAL_InitTick>

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023c00 	.word	0x40023c00
 8002694:	40023800 	.word	0x40023800
 8002698:	0800498c 	.word	0x0800498c
 800269c:	20000130 	.word	0x20000130
 80026a0:	20000134 	.word	0x20000134

080026a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a8:	b090      	sub	sp, #64	@ 0x40
 80026aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80026b4:	2300      	movs	r3, #0
 80026b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026bc:	4b59      	ldr	r3, [pc, #356]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x180>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 030c 	and.w	r3, r3, #12
 80026c4:	2b08      	cmp	r3, #8
 80026c6:	d00d      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0x40>
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	f200 80a1 	bhi.w	8002810 <HAL_RCC_GetSysClockFreq+0x16c>
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_RCC_GetSysClockFreq+0x34>
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d003      	beq.n	80026de <HAL_RCC_GetSysClockFreq+0x3a>
 80026d6:	e09b      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026d8:	4b53      	ldr	r3, [pc, #332]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x184>)
 80026da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026dc:	e09b      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026de:	4b53      	ldr	r3, [pc, #332]	@ (800282c <HAL_RCC_GetSysClockFreq+0x188>)
 80026e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80026e2:	e098      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x180>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80026ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ee:	4b4d      	ldr	r3, [pc, #308]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x180>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d028      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x180>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	099b      	lsrs	r3, r3, #6
 8002700:	2200      	movs	r2, #0
 8002702:	623b      	str	r3, [r7, #32]
 8002704:	627a      	str	r2, [r7, #36]	@ 0x24
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800270c:	2100      	movs	r1, #0
 800270e:	4b47      	ldr	r3, [pc, #284]	@ (800282c <HAL_RCC_GetSysClockFreq+0x188>)
 8002710:	fb03 f201 	mul.w	r2, r3, r1
 8002714:	2300      	movs	r3, #0
 8002716:	fb00 f303 	mul.w	r3, r0, r3
 800271a:	4413      	add	r3, r2
 800271c:	4a43      	ldr	r2, [pc, #268]	@ (800282c <HAL_RCC_GetSysClockFreq+0x188>)
 800271e:	fba0 1202 	umull	r1, r2, r0, r2
 8002722:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002724:	460a      	mov	r2, r1
 8002726:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002728:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800272a:	4413      	add	r3, r2
 800272c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800272e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002730:	2200      	movs	r2, #0
 8002732:	61bb      	str	r3, [r7, #24]
 8002734:	61fa      	str	r2, [r7, #28]
 8002736:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800273a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800273e:	f7fd fd43 	bl	80001c8 <__aeabi_uldivmod>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4613      	mov	r3, r2
 8002748:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800274a:	e053      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274c:	4b35      	ldr	r3, [pc, #212]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x180>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	099b      	lsrs	r3, r3, #6
 8002752:	2200      	movs	r2, #0
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	617a      	str	r2, [r7, #20]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800275e:	f04f 0b00 	mov.w	fp, #0
 8002762:	4652      	mov	r2, sl
 8002764:	465b      	mov	r3, fp
 8002766:	f04f 0000 	mov.w	r0, #0
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	0159      	lsls	r1, r3, #5
 8002770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002774:	0150      	lsls	r0, r2, #5
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	ebb2 080a 	subs.w	r8, r2, sl
 800277e:	eb63 090b 	sbc.w	r9, r3, fp
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	f04f 0300 	mov.w	r3, #0
 800278a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800278e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002792:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002796:	ebb2 0408 	subs.w	r4, r2, r8
 800279a:	eb63 0509 	sbc.w	r5, r3, r9
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	00eb      	lsls	r3, r5, #3
 80027a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ac:	00e2      	lsls	r2, r4, #3
 80027ae:	4614      	mov	r4, r2
 80027b0:	461d      	mov	r5, r3
 80027b2:	eb14 030a 	adds.w	r3, r4, sl
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	eb45 030b 	adc.w	r3, r5, fp
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	f04f 0300 	mov.w	r3, #0
 80027c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ca:	4629      	mov	r1, r5
 80027cc:	028b      	lsls	r3, r1, #10
 80027ce:	4621      	mov	r1, r4
 80027d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d4:	4621      	mov	r1, r4
 80027d6:	028a      	lsls	r2, r1, #10
 80027d8:	4610      	mov	r0, r2
 80027da:	4619      	mov	r1, r3
 80027dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027de:	2200      	movs	r2, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	60fa      	str	r2, [r7, #12]
 80027e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80027e8:	f7fd fcee 	bl	80001c8 <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4613      	mov	r3, r2
 80027f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <HAL_RCC_GetSysClockFreq+0x180>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	0c1b      	lsrs	r3, r3, #16
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	3301      	adds	r3, #1
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002804:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002808:	fbb2 f3f3 	udiv	r3, r2, r3
 800280c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800280e:	e002      	b.n	8002816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002810:	4b05      	ldr	r3, [pc, #20]	@ (8002828 <HAL_RCC_GetSysClockFreq+0x184>)
 8002812:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002818:	4618      	mov	r0, r3
 800281a:	3740      	adds	r7, #64	@ 0x40
 800281c:	46bd      	mov	sp, r7
 800281e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	00f42400 	.word	0x00f42400
 800282c:	017d7840 	.word	0x017d7840

08002830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002834:	4b03      	ldr	r3, [pc, #12]	@ (8002844 <HAL_RCC_GetHCLKFreq+0x14>)
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	20000130 	.word	0x20000130

08002848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800284c:	f7ff fff0 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b05      	ldr	r3, [pc, #20]	@ (8002868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	0a9b      	lsrs	r3, r3, #10
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4903      	ldr	r1, [pc, #12]	@ (800286c <HAL_RCC_GetPCLK1Freq+0x24>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002864:	4618      	mov	r0, r3
 8002866:	bd80      	pop	{r7, pc}
 8002868:	40023800 	.word	0x40023800
 800286c:	0800499c 	.word	0x0800499c

08002870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002874:	f7ff ffdc 	bl	8002830 <HAL_RCC_GetHCLKFreq>
 8002878:	4602      	mov	r2, r0
 800287a:	4b05      	ldr	r3, [pc, #20]	@ (8002890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	0b5b      	lsrs	r3, r3, #13
 8002880:	f003 0307 	and.w	r3, r3, #7
 8002884:	4903      	ldr	r1, [pc, #12]	@ (8002894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002886:	5ccb      	ldrb	r3, [r1, r3]
 8002888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800288c:	4618      	mov	r0, r3
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40023800 	.word	0x40023800
 8002894:	0800499c 	.word	0x0800499c

08002898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e041      	b.n	800292e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f7fe fe38 	bl	8001534 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3304      	adds	r3, #4
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f000 fc2c 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b082      	sub	sp, #8
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e041      	b.n	80029cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800294e:	b2db      	uxtb	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f839 	bl	80029d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3304      	adds	r3, #4
 8002972:	4619      	mov	r1, r3
 8002974:	4610      	mov	r0, r2
 8002976:	f000 fbdd 	bl	8003134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d109      	bne.n	8002a0c <HAL_TIM_PWM_Start+0x24>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	bf14      	ite	ne
 8002a04:	2301      	movne	r3, #1
 8002a06:	2300      	moveq	r3, #0
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	e022      	b.n	8002a52 <HAL_TIM_PWM_Start+0x6a>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d109      	bne.n	8002a26 <HAL_TIM_PWM_Start+0x3e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	bf14      	ite	ne
 8002a1e:	2301      	movne	r3, #1
 8002a20:	2300      	moveq	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	e015      	b.n	8002a52 <HAL_TIM_PWM_Start+0x6a>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	2b08      	cmp	r3, #8
 8002a2a:	d109      	bne.n	8002a40 <HAL_TIM_PWM_Start+0x58>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	bf14      	ite	ne
 8002a38:	2301      	movne	r3, #1
 8002a3a:	2300      	moveq	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	e008      	b.n	8002a52 <HAL_TIM_PWM_Start+0x6a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	bf14      	ite	ne
 8002a4c:	2301      	movne	r3, #1
 8002a4e:	2300      	moveq	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e07c      	b.n	8002b54 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d104      	bne.n	8002a6a <HAL_TIM_PWM_Start+0x82>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a68:	e013      	b.n	8002a92 <HAL_TIM_PWM_Start+0xaa>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d104      	bne.n	8002a7a <HAL_TIM_PWM_Start+0x92>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a78:	e00b      	b.n	8002a92 <HAL_TIM_PWM_Start+0xaa>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d104      	bne.n	8002a8a <HAL_TIM_PWM_Start+0xa2>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a88:	e003      	b.n	8002a92 <HAL_TIM_PWM_Start+0xaa>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2201      	movs	r2, #1
 8002a98:	6839      	ldr	r1, [r7, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f000 fe40 	bl	8003720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8002b5c <HAL_TIM_PWM_Start+0x174>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d004      	beq.n	8002ab4 <HAL_TIM_PWM_Start+0xcc>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a2c      	ldr	r2, [pc, #176]	@ (8002b60 <HAL_TIM_PWM_Start+0x178>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d101      	bne.n	8002ab8 <HAL_TIM_PWM_Start+0xd0>
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e000      	b.n	8002aba <HAL_TIM_PWM_Start+0xd2>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002acc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a22      	ldr	r2, [pc, #136]	@ (8002b5c <HAL_TIM_PWM_Start+0x174>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d022      	beq.n	8002b1e <HAL_TIM_PWM_Start+0x136>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae0:	d01d      	beq.n	8002b1e <HAL_TIM_PWM_Start+0x136>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8002b64 <HAL_TIM_PWM_Start+0x17c>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d018      	beq.n	8002b1e <HAL_TIM_PWM_Start+0x136>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b68 <HAL_TIM_PWM_Start+0x180>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_TIM_PWM_Start+0x136>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a1c      	ldr	r2, [pc, #112]	@ (8002b6c <HAL_TIM_PWM_Start+0x184>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00e      	beq.n	8002b1e <HAL_TIM_PWM_Start+0x136>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a16      	ldr	r2, [pc, #88]	@ (8002b60 <HAL_TIM_PWM_Start+0x178>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d009      	beq.n	8002b1e <HAL_TIM_PWM_Start+0x136>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a18      	ldr	r2, [pc, #96]	@ (8002b70 <HAL_TIM_PWM_Start+0x188>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d004      	beq.n	8002b1e <HAL_TIM_PWM_Start+0x136>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a16      	ldr	r2, [pc, #88]	@ (8002b74 <HAL_TIM_PWM_Start+0x18c>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d111      	bne.n	8002b42 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b06      	cmp	r3, #6
 8002b2e:	d010      	beq.n	8002b52 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b40:	e007      	b.n	8002b52 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f042 0201 	orr.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40010000 	.word	0x40010000
 8002b60:	40010400 	.word	0x40010400
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40000800 	.word	0x40000800
 8002b6c:	40000c00 	.word	0x40000c00
 8002b70:	40014000 	.word	0x40014000
 8002b74:	40001800 	.word	0x40001800

08002b78 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e097      	b.n	8002cbc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d106      	bne.n	8002ba6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f7fe fcff 	bl	80015a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	6812      	ldr	r2, [r2, #0]
 8002bb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002bbc:	f023 0307 	bic.w	r3, r3, #7
 8002bc0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3304      	adds	r3, #4
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4610      	mov	r0, r2
 8002bce:	f000 fab1 	bl	8003134 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bfa:	f023 0303 	bic.w	r3, r3, #3
 8002bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	693a      	ldr	r2, [r7, #16]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002c18:	f023 030c 	bic.w	r3, r3, #12
 8002c1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c24:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	69db      	ldr	r3, [r3, #28]
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	4313      	orrs	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	011a      	lsls	r2, r3, #4
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	031b      	lsls	r3, r3, #12
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8002c56:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002c5e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cd4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002cdc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ce4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002cec:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d110      	bne.n	8002d16 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002cf4:	7bfb      	ldrb	r3, [r7, #15]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d102      	bne.n	8002d00 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002cfa:	7b7b      	ldrb	r3, [r7, #13]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d001      	beq.n	8002d04 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e089      	b.n	8002e18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2202      	movs	r2, #2
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2202      	movs	r2, #2
 8002d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d14:	e031      	b.n	8002d7a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d110      	bne.n	8002d3e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d1c:	7bbb      	ldrb	r3, [r7, #14]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d102      	bne.n	8002d28 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d22:	7b3b      	ldrb	r3, [r7, #12]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d001      	beq.n	8002d2c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e075      	b.n	8002e18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d3c:	e01d      	b.n	8002d7a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d108      	bne.n	8002d56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d44:	7bbb      	ldrb	r3, [r7, #14]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d105      	bne.n	8002d56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d4a:	7b7b      	ldrb	r3, [r7, #13]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d102      	bne.n	8002d56 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d50:	7b3b      	ldrb	r3, [r7, #12]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d001      	beq.n	8002d5a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e05e      	b.n	8002e18 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2202      	movs	r2, #2
 8002d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2202      	movs	r2, #2
 8002d76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_TIM_Encoder_Start_IT+0xc4>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d010      	beq.n	8002da8 <HAL_TIM_Encoder_Start_IT+0xe4>
 8002d86:	e01f      	b.n	8002dc8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	2100      	movs	r1, #0
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 fcc5 	bl	8003720 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f042 0202 	orr.w	r2, r2, #2
 8002da4:	60da      	str	r2, [r3, #12]
      break;
 8002da6:	e02e      	b.n	8002e06 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2201      	movs	r2, #1
 8002dae:	2104      	movs	r1, #4
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fcb5 	bl	8003720 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0204 	orr.w	r2, r2, #4
 8002dc4:	60da      	str	r2, [r3, #12]
      break;
 8002dc6:	e01e      	b.n	8002e06 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	2100      	movs	r1, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fca5 	bl	8003720 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	2104      	movs	r1, #4
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fc9e 	bl	8003720 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f042 0202 	orr.w	r2, r2, #2
 8002df2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68da      	ldr	r2, [r3, #12]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f042 0204 	orr.w	r2, r2, #4
 8002e02:	60da      	str	r2, [r3, #12]
      break;
 8002e04:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	e0ae      	b.n	8002f9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b0c      	cmp	r3, #12
 8002e4a:	f200 809f 	bhi.w	8002f8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8002e54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e54:	08002e89 	.word	0x08002e89
 8002e58:	08002f8d 	.word	0x08002f8d
 8002e5c:	08002f8d 	.word	0x08002f8d
 8002e60:	08002f8d 	.word	0x08002f8d
 8002e64:	08002ec9 	.word	0x08002ec9
 8002e68:	08002f8d 	.word	0x08002f8d
 8002e6c:	08002f8d 	.word	0x08002f8d
 8002e70:	08002f8d 	.word	0x08002f8d
 8002e74:	08002f0b 	.word	0x08002f0b
 8002e78:	08002f8d 	.word	0x08002f8d
 8002e7c:	08002f8d 	.word	0x08002f8d
 8002e80:	08002f8d 	.word	0x08002f8d
 8002e84:	08002f4b 	.word	0x08002f4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 f9fc 	bl	800328c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	699a      	ldr	r2, [r3, #24]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0208 	orr.w	r2, r2, #8
 8002ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0204 	bic.w	r2, r2, #4
 8002eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6999      	ldr	r1, [r3, #24]
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	619a      	str	r2, [r3, #24]
      break;
 8002ec6:	e064      	b.n	8002f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fa4c 	bl	800336c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6999      	ldr	r1, [r3, #24]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	021a      	lsls	r2, r3, #8
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	619a      	str	r2, [r3, #24]
      break;
 8002f08:	e043      	b.n	8002f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f000 faa1 	bl	8003458 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	69da      	ldr	r2, [r3, #28]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0208 	orr.w	r2, r2, #8
 8002f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	69da      	ldr	r2, [r3, #28]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 0204 	bic.w	r2, r2, #4
 8002f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69d9      	ldr	r1, [r3, #28]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	61da      	str	r2, [r3, #28]
      break;
 8002f48:	e023      	b.n	8002f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 faf5 	bl	8003540 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69d9      	ldr	r1, [r3, #28]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	021a      	lsls	r2, r3, #8
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	61da      	str	r2, [r3, #28]
      break;
 8002f8a:	e002      	b.n	8002f92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002f90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d101      	bne.n	8002fc0 <HAL_TIM_ConfigClockSource+0x1c>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e0b4      	b.n	800312a <HAL_TIM_ConfigClockSource+0x186>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fe6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ff8:	d03e      	beq.n	8003078 <HAL_TIM_ConfigClockSource+0xd4>
 8002ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ffe:	f200 8087 	bhi.w	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003006:	f000 8086 	beq.w	8003116 <HAL_TIM_ConfigClockSource+0x172>
 800300a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300e:	d87f      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b70      	cmp	r3, #112	@ 0x70
 8003012:	d01a      	beq.n	800304a <HAL_TIM_ConfigClockSource+0xa6>
 8003014:	2b70      	cmp	r3, #112	@ 0x70
 8003016:	d87b      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b60      	cmp	r3, #96	@ 0x60
 800301a:	d050      	beq.n	80030be <HAL_TIM_ConfigClockSource+0x11a>
 800301c:	2b60      	cmp	r3, #96	@ 0x60
 800301e:	d877      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b50      	cmp	r3, #80	@ 0x50
 8003022:	d03c      	beq.n	800309e <HAL_TIM_ConfigClockSource+0xfa>
 8003024:	2b50      	cmp	r3, #80	@ 0x50
 8003026:	d873      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b40      	cmp	r3, #64	@ 0x40
 800302a:	d058      	beq.n	80030de <HAL_TIM_ConfigClockSource+0x13a>
 800302c:	2b40      	cmp	r3, #64	@ 0x40
 800302e:	d86f      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b30      	cmp	r3, #48	@ 0x30
 8003032:	d064      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x15a>
 8003034:	2b30      	cmp	r3, #48	@ 0x30
 8003036:	d86b      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003038:	2b20      	cmp	r3, #32
 800303a:	d060      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x15a>
 800303c:	2b20      	cmp	r3, #32
 800303e:	d867      	bhi.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
 8003040:	2b00      	cmp	r3, #0
 8003042:	d05c      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x15a>
 8003044:	2b10      	cmp	r3, #16
 8003046:	d05a      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0x15a>
 8003048:	e062      	b.n	8003110 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800305a:	f000 fb41 	bl	80036e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800306c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	609a      	str	r2, [r3, #8]
      break;
 8003076:	e04f      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003088:	f000 fb2a 	bl	80036e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800309a:	609a      	str	r2, [r3, #8]
      break;
 800309c:	e03c      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030aa:	461a      	mov	r2, r3
 80030ac:	f000 fa9e 	bl	80035ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2150      	movs	r1, #80	@ 0x50
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 faf7 	bl	80036aa <TIM_ITRx_SetConfig>
      break;
 80030bc:	e02c      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ca:	461a      	mov	r2, r3
 80030cc:	f000 fabd 	bl	800364a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2160      	movs	r1, #96	@ 0x60
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fae7 	bl	80036aa <TIM_ITRx_SetConfig>
      break;
 80030dc:	e01c      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ea:	461a      	mov	r2, r3
 80030ec:	f000 fa7e 	bl	80035ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2140      	movs	r1, #64	@ 0x40
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fad7 	bl	80036aa <TIM_ITRx_SetConfig>
      break;
 80030fc:	e00c      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4619      	mov	r1, r3
 8003108:	4610      	mov	r0, r2
 800310a:	f000 face 	bl	80036aa <TIM_ITRx_SetConfig>
      break;
 800310e:	e003      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
      break;
 8003114:	e000      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003116:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2201      	movs	r2, #1
 800311c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003128:	7bfb      	ldrb	r3, [r7, #15]
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	4a46      	ldr	r2, [pc, #280]	@ (8003260 <TIM_Base_SetConfig+0x12c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d013      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003152:	d00f      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a43      	ldr	r2, [pc, #268]	@ (8003264 <TIM_Base_SetConfig+0x130>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d00b      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a42      	ldr	r2, [pc, #264]	@ (8003268 <TIM_Base_SetConfig+0x134>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d007      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4a41      	ldr	r2, [pc, #260]	@ (800326c <TIM_Base_SetConfig+0x138>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d003      	beq.n	8003174 <TIM_Base_SetConfig+0x40>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a40      	ldr	r2, [pc, #256]	@ (8003270 <TIM_Base_SetConfig+0x13c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d108      	bne.n	8003186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800317a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a35      	ldr	r2, [pc, #212]	@ (8003260 <TIM_Base_SetConfig+0x12c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d02b      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003194:	d027      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a32      	ldr	r2, [pc, #200]	@ (8003264 <TIM_Base_SetConfig+0x130>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d023      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a31      	ldr	r2, [pc, #196]	@ (8003268 <TIM_Base_SetConfig+0x134>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01f      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a30      	ldr	r2, [pc, #192]	@ (800326c <TIM_Base_SetConfig+0x138>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01b      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a2f      	ldr	r2, [pc, #188]	@ (8003270 <TIM_Base_SetConfig+0x13c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d017      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003274 <TIM_Base_SetConfig+0x140>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003278 <TIM_Base_SetConfig+0x144>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d00f      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a2c      	ldr	r2, [pc, #176]	@ (800327c <TIM_Base_SetConfig+0x148>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00b      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a2b      	ldr	r2, [pc, #172]	@ (8003280 <TIM_Base_SetConfig+0x14c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d007      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a2a      	ldr	r2, [pc, #168]	@ (8003284 <TIM_Base_SetConfig+0x150>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d003      	beq.n	80031e6 <TIM_Base_SetConfig+0xb2>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a29      	ldr	r2, [pc, #164]	@ (8003288 <TIM_Base_SetConfig+0x154>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d108      	bne.n	80031f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	4313      	orrs	r3, r2
 8003204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68fa      	ldr	r2, [r7, #12]
 800320a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a10      	ldr	r2, [pc, #64]	@ (8003260 <TIM_Base_SetConfig+0x12c>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d003      	beq.n	800322c <TIM_Base_SetConfig+0xf8>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a12      	ldr	r2, [pc, #72]	@ (8003270 <TIM_Base_SetConfig+0x13c>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d103      	bne.n	8003234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b01      	cmp	r3, #1
 8003244:	d105      	bne.n	8003252 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f023 0201 	bic.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	611a      	str	r2, [r3, #16]
  }
}
 8003252:	bf00      	nop
 8003254:	3714      	adds	r7, #20
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40010000 	.word	0x40010000
 8003264:	40000400 	.word	0x40000400
 8003268:	40000800 	.word	0x40000800
 800326c:	40000c00 	.word	0x40000c00
 8003270:	40010400 	.word	0x40010400
 8003274:	40014000 	.word	0x40014000
 8003278:	40014400 	.word	0x40014400
 800327c:	40014800 	.word	0x40014800
 8003280:	40001800 	.word	0x40001800
 8003284:	40001c00 	.word	0x40001c00
 8003288:	40002000 	.word	0x40002000

0800328c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f023 0201 	bic.w	r2, r3, #1
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f023 0302 	bic.w	r3, r3, #2
 80032d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a20      	ldr	r2, [pc, #128]	@ (8003364 <TIM_OC1_SetConfig+0xd8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d003      	beq.n	80032f0 <TIM_OC1_SetConfig+0x64>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003368 <TIM_OC1_SetConfig+0xdc>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d10c      	bne.n	800330a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f023 0308 	bic.w	r3, r3, #8
 80032f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	f023 0304 	bic.w	r3, r3, #4
 8003308:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a15      	ldr	r2, [pc, #84]	@ (8003364 <TIM_OC1_SetConfig+0xd8>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d003      	beq.n	800331a <TIM_OC1_SetConfig+0x8e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a14      	ldr	r2, [pc, #80]	@ (8003368 <TIM_OC1_SetConfig+0xdc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d111      	bne.n	800333e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4313      	orrs	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685a      	ldr	r2, [r3, #4]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	621a      	str	r2, [r3, #32]
}
 8003358:	bf00      	nop
 800335a:	371c      	adds	r7, #28
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	40010000 	.word	0x40010000
 8003368:	40010400 	.word	0x40010400

0800336c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800336c:	b480      	push	{r7}
 800336e:	b087      	sub	sp, #28
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a1b      	ldr	r3, [r3, #32]
 8003380:	f023 0210 	bic.w	r2, r3, #16
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800339a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	021b      	lsls	r3, r3, #8
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	f023 0320 	bic.w	r3, r3, #32
 80033b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a22      	ldr	r2, [pc, #136]	@ (8003450 <TIM_OC2_SetConfig+0xe4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d003      	beq.n	80033d4 <TIM_OC2_SetConfig+0x68>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a21      	ldr	r2, [pc, #132]	@ (8003454 <TIM_OC2_SetConfig+0xe8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d10d      	bne.n	80033f0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a17      	ldr	r2, [pc, #92]	@ (8003450 <TIM_OC2_SetConfig+0xe4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d003      	beq.n	8003400 <TIM_OC2_SetConfig+0x94>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a16      	ldr	r2, [pc, #88]	@ (8003454 <TIM_OC2_SetConfig+0xe8>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d113      	bne.n	8003428 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003406:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800340e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	4313      	orrs	r3, r2
 800341a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	621a      	str	r2, [r3, #32]
}
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	40010000 	.word	0x40010000
 8003454:	40010400 	.word	0x40010400

08003458 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0303 	bic.w	r3, r3, #3
 800348e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80034a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	021b      	lsls	r3, r3, #8
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a21      	ldr	r2, [pc, #132]	@ (8003538 <TIM_OC3_SetConfig+0xe0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_OC3_SetConfig+0x66>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a20      	ldr	r2, [pc, #128]	@ (800353c <TIM_OC3_SetConfig+0xe4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d10d      	bne.n	80034da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80034c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	021b      	lsls	r3, r3, #8
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80034d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a16      	ldr	r2, [pc, #88]	@ (8003538 <TIM_OC3_SetConfig+0xe0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d003      	beq.n	80034ea <TIM_OC3_SetConfig+0x92>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a15      	ldr	r2, [pc, #84]	@ (800353c <TIM_OC3_SetConfig+0xe4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d113      	bne.n	8003512 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80034f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	4313      	orrs	r3, r2
 8003504:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	697a      	ldr	r2, [r7, #20]
 800352a:	621a      	str	r2, [r3, #32]
}
 800352c:	bf00      	nop
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	40010000 	.word	0x40010000
 800353c:	40010400 	.word	0x40010400

08003540 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800356e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	021b      	lsls	r3, r3, #8
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4313      	orrs	r3, r2
 8003582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800358a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	031b      	lsls	r3, r3, #12
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4313      	orrs	r3, r2
 8003596:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a12      	ldr	r2, [pc, #72]	@ (80035e4 <TIM_OC4_SetConfig+0xa4>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d003      	beq.n	80035a8 <TIM_OC4_SetConfig+0x68>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a11      	ldr	r2, [pc, #68]	@ (80035e8 <TIM_OC4_SetConfig+0xa8>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d109      	bne.n	80035bc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	019b      	lsls	r3, r3, #6
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	621a      	str	r2, [r3, #32]
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	40010000 	.word	0x40010000
 80035e8:	40010400 	.word	0x40010400

080035ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b087      	sub	sp, #28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	f023 0201 	bic.w	r2, r3, #1
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	011b      	lsls	r3, r3, #4
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f023 030a 	bic.w	r3, r3, #10
 8003628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4313      	orrs	r3, r2
 8003630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	697a      	ldr	r2, [r7, #20]
 800363c:	621a      	str	r2, [r3, #32]
}
 800363e:	bf00      	nop
 8003640:	371c      	adds	r7, #28
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800364a:	b480      	push	{r7}
 800364c:	b087      	sub	sp, #28
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f023 0210 	bic.w	r2, r3, #16
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003674:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	031b      	lsls	r3, r3, #12
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003686:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	621a      	str	r2, [r3, #32]
}
 800369e:	bf00      	nop
 80036a0:	371c      	adds	r7, #28
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036aa:	b480      	push	{r7}
 80036ac:	b085      	sub	sp, #20
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
 80036b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	f043 0307 	orr.w	r3, r3, #7
 80036cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	609a      	str	r2, [r3, #8]
}
 80036d4:	bf00      	nop
 80036d6:	3714      	adds	r7, #20
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b087      	sub	sp, #28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	021a      	lsls	r2, r3, #8
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	431a      	orrs	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4313      	orrs	r3, r2
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	609a      	str	r2, [r3, #8]
}
 8003714:	bf00      	nop
 8003716:	371c      	adds	r7, #28
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	2201      	movs	r2, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1a      	ldr	r2, [r3, #32]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	43db      	mvns	r3, r3
 8003742:	401a      	ands	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a1a      	ldr	r2, [r3, #32]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	431a      	orrs	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003780:	2302      	movs	r3, #2
 8003782:	e05a      	b.n	800383a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68fa      	ldr	r2, [r7, #12]
 80037bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a21      	ldr	r2, [pc, #132]	@ (8003848 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d022      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037d0:	d01d      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d018      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003850 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a1a      	ldr	r2, [pc, #104]	@ (8003854 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00e      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a18      	ldr	r2, [pc, #96]	@ (8003858 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d009      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a17      	ldr	r2, [pc, #92]	@ (800385c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d004      	beq.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a15      	ldr	r2, [pc, #84]	@ (8003860 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d10c      	bne.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003814:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	4313      	orrs	r3, r2
 800381e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	40010000 	.word	0x40010000
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800
 8003854:	40000c00 	.word	0x40000c00
 8003858:	40010400 	.word	0x40010400
 800385c:	40014000 	.word	0x40014000
 8003860:	40001800 	.word	0x40001800

08003864 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003878:	2b01      	cmp	r3, #1
 800387a:	d101      	bne.n	8003880 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800387c:	2302      	movs	r3, #2
 800387e:	e03d      	b.n	80038fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	4313      	orrs	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4313      	orrs	r3, r2
 80038be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	695b      	ldr	r3, [r3, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr

08003908 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d101      	bne.n	800391a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e042      	b.n	80039a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7fd ff34 	bl	800179c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2224      	movs	r2, #36	@ 0x24
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800394a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f82b 	bl	80039a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003960:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	695a      	ldr	r2, [r3, #20]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003970:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68da      	ldr	r2, [r3, #12]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003980:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2220      	movs	r2, #32
 8003994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039ac:	b0c0      	sub	sp, #256	@ 0x100
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c4:	68d9      	ldr	r1, [r3, #12]
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	ea40 0301 	orr.w	r3, r0, r1
 80039d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	431a      	orrs	r2, r3
 80039e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	431a      	orrs	r2, r3
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a00:	f021 010c 	bic.w	r1, r1, #12
 8003a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a0e:	430b      	orrs	r3, r1
 8003a10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a22:	6999      	ldr	r1, [r3, #24]
 8003a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	ea40 0301 	orr.w	r3, r0, r1
 8003a2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4b8f      	ldr	r3, [pc, #572]	@ (8003c74 <UART_SetConfig+0x2cc>)
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d005      	beq.n	8003a48 <UART_SetConfig+0xa0>
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4b8d      	ldr	r3, [pc, #564]	@ (8003c78 <UART_SetConfig+0x2d0>)
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d104      	bne.n	8003a52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a48:	f7fe ff12 	bl	8002870 <HAL_RCC_GetPCLK2Freq>
 8003a4c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a50:	e003      	b.n	8003a5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a52:	f7fe fef9 	bl	8002848 <HAL_RCC_GetPCLK1Freq>
 8003a56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a64:	f040 810c 	bne.w	8003c80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a72:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a7a:	4622      	mov	r2, r4
 8003a7c:	462b      	mov	r3, r5
 8003a7e:	1891      	adds	r1, r2, r2
 8003a80:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a82:	415b      	adcs	r3, r3
 8003a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a8a:	4621      	mov	r1, r4
 8003a8c:	eb12 0801 	adds.w	r8, r2, r1
 8003a90:	4629      	mov	r1, r5
 8003a92:	eb43 0901 	adc.w	r9, r3, r1
 8003a96:	f04f 0200 	mov.w	r2, #0
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003aa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aaa:	4690      	mov	r8, r2
 8003aac:	4699      	mov	r9, r3
 8003aae:	4623      	mov	r3, r4
 8003ab0:	eb18 0303 	adds.w	r3, r8, r3
 8003ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ab8:	462b      	mov	r3, r5
 8003aba:	eb49 0303 	adc.w	r3, r9, r3
 8003abe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ace:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ad2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	18db      	adds	r3, r3, r3
 8003ada:	653b      	str	r3, [r7, #80]	@ 0x50
 8003adc:	4613      	mov	r3, r2
 8003ade:	eb42 0303 	adc.w	r3, r2, r3
 8003ae2:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ae4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ae8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003aec:	f7fc fb6c 	bl	80001c8 <__aeabi_uldivmod>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4b61      	ldr	r3, [pc, #388]	@ (8003c7c <UART_SetConfig+0x2d4>)
 8003af6:	fba3 2302 	umull	r2, r3, r3, r2
 8003afa:	095b      	lsrs	r3, r3, #5
 8003afc:	011c      	lsls	r4, r3, #4
 8003afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b08:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b10:	4642      	mov	r2, r8
 8003b12:	464b      	mov	r3, r9
 8003b14:	1891      	adds	r1, r2, r2
 8003b16:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b18:	415b      	adcs	r3, r3
 8003b1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b20:	4641      	mov	r1, r8
 8003b22:	eb12 0a01 	adds.w	sl, r2, r1
 8003b26:	4649      	mov	r1, r9
 8003b28:	eb43 0b01 	adc.w	fp, r3, r1
 8003b2c:	f04f 0200 	mov.w	r2, #0
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b40:	4692      	mov	sl, r2
 8003b42:	469b      	mov	fp, r3
 8003b44:	4643      	mov	r3, r8
 8003b46:	eb1a 0303 	adds.w	r3, sl, r3
 8003b4a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b4e:	464b      	mov	r3, r9
 8003b50:	eb4b 0303 	adc.w	r3, fp, r3
 8003b54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b64:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	18db      	adds	r3, r3, r3
 8003b70:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b72:	4613      	mov	r3, r2
 8003b74:	eb42 0303 	adc.w	r3, r2, r3
 8003b78:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b82:	f7fc fb21 	bl	80001c8 <__aeabi_uldivmod>
 8003b86:	4602      	mov	r2, r0
 8003b88:	460b      	mov	r3, r1
 8003b8a:	4611      	mov	r1, r2
 8003b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003c7c <UART_SetConfig+0x2d4>)
 8003b8e:	fba3 2301 	umull	r2, r3, r3, r1
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	2264      	movs	r2, #100	@ 0x64
 8003b96:	fb02 f303 	mul.w	r3, r2, r3
 8003b9a:	1acb      	subs	r3, r1, r3
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003ba2:	4b36      	ldr	r3, [pc, #216]	@ (8003c7c <UART_SetConfig+0x2d4>)
 8003ba4:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003bb0:	441c      	add	r4, r3
 8003bb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bbc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003bc0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	1891      	adds	r1, r2, r2
 8003bca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bcc:	415b      	adcs	r3, r3
 8003bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bd0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003bd4:	4641      	mov	r1, r8
 8003bd6:	1851      	adds	r1, r2, r1
 8003bd8:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bda:	4649      	mov	r1, r9
 8003bdc:	414b      	adcs	r3, r1
 8003bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003bec:	4659      	mov	r1, fp
 8003bee:	00cb      	lsls	r3, r1, #3
 8003bf0:	4651      	mov	r1, sl
 8003bf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf6:	4651      	mov	r1, sl
 8003bf8:	00ca      	lsls	r2, r1, #3
 8003bfa:	4610      	mov	r0, r2
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	4603      	mov	r3, r0
 8003c00:	4642      	mov	r2, r8
 8003c02:	189b      	adds	r3, r3, r2
 8003c04:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c08:	464b      	mov	r3, r9
 8003c0a:	460a      	mov	r2, r1
 8003c0c:	eb42 0303 	adc.w	r3, r2, r3
 8003c10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c20:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c28:	460b      	mov	r3, r1
 8003c2a:	18db      	adds	r3, r3, r3
 8003c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c2e:	4613      	mov	r3, r2
 8003c30:	eb42 0303 	adc.w	r3, r2, r3
 8003c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c3e:	f7fc fac3 	bl	80001c8 <__aeabi_uldivmod>
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4b0d      	ldr	r3, [pc, #52]	@ (8003c7c <UART_SetConfig+0x2d4>)
 8003c48:	fba3 1302 	umull	r1, r3, r3, r2
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	2164      	movs	r1, #100	@ 0x64
 8003c50:	fb01 f303 	mul.w	r3, r1, r3
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	3332      	adds	r3, #50	@ 0x32
 8003c5a:	4a08      	ldr	r2, [pc, #32]	@ (8003c7c <UART_SetConfig+0x2d4>)
 8003c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	f003 0207 	and.w	r2, r3, #7
 8003c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4422      	add	r2, r4
 8003c6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c70:	e106      	b.n	8003e80 <UART_SetConfig+0x4d8>
 8003c72:	bf00      	nop
 8003c74:	40011000 	.word	0x40011000
 8003c78:	40011400 	.word	0x40011400
 8003c7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c84:	2200      	movs	r2, #0
 8003c86:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c8a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c92:	4642      	mov	r2, r8
 8003c94:	464b      	mov	r3, r9
 8003c96:	1891      	adds	r1, r2, r2
 8003c98:	6239      	str	r1, [r7, #32]
 8003c9a:	415b      	adcs	r3, r3
 8003c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ca2:	4641      	mov	r1, r8
 8003ca4:	1854      	adds	r4, r2, r1
 8003ca6:	4649      	mov	r1, r9
 8003ca8:	eb43 0501 	adc.w	r5, r3, r1
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	00eb      	lsls	r3, r5, #3
 8003cb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cba:	00e2      	lsls	r2, r4, #3
 8003cbc:	4614      	mov	r4, r2
 8003cbe:	461d      	mov	r5, r3
 8003cc0:	4643      	mov	r3, r8
 8003cc2:	18e3      	adds	r3, r4, r3
 8003cc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cc8:	464b      	mov	r3, r9
 8003cca:	eb45 0303 	adc.w	r3, r5, r3
 8003cce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cde:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cee:	4629      	mov	r1, r5
 8003cf0:	008b      	lsls	r3, r1, #2
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	008a      	lsls	r2, r1, #2
 8003cfc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d00:	f7fc fa62 	bl	80001c8 <__aeabi_uldivmod>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4b60      	ldr	r3, [pc, #384]	@ (8003e8c <UART_SetConfig+0x4e4>)
 8003d0a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	011c      	lsls	r4, r3, #4
 8003d12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d20:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d24:	4642      	mov	r2, r8
 8003d26:	464b      	mov	r3, r9
 8003d28:	1891      	adds	r1, r2, r2
 8003d2a:	61b9      	str	r1, [r7, #24]
 8003d2c:	415b      	adcs	r3, r3
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d34:	4641      	mov	r1, r8
 8003d36:	1851      	adds	r1, r2, r1
 8003d38:	6139      	str	r1, [r7, #16]
 8003d3a:	4649      	mov	r1, r9
 8003d3c:	414b      	adcs	r3, r1
 8003d3e:	617b      	str	r3, [r7, #20]
 8003d40:	f04f 0200 	mov.w	r2, #0
 8003d44:	f04f 0300 	mov.w	r3, #0
 8003d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d4c:	4659      	mov	r1, fp
 8003d4e:	00cb      	lsls	r3, r1, #3
 8003d50:	4651      	mov	r1, sl
 8003d52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d56:	4651      	mov	r1, sl
 8003d58:	00ca      	lsls	r2, r1, #3
 8003d5a:	4610      	mov	r0, r2
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4642      	mov	r2, r8
 8003d62:	189b      	adds	r3, r3, r2
 8003d64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d68:	464b      	mov	r3, r9
 8003d6a:	460a      	mov	r2, r1
 8003d6c:	eb42 0303 	adc.w	r3, r2, r3
 8003d70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d7e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	008b      	lsls	r3, r1, #2
 8003d90:	4641      	mov	r1, r8
 8003d92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d96:	4641      	mov	r1, r8
 8003d98:	008a      	lsls	r2, r1, #2
 8003d9a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d9e:	f7fc fa13 	bl	80001c8 <__aeabi_uldivmod>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4611      	mov	r1, r2
 8003da8:	4b38      	ldr	r3, [pc, #224]	@ (8003e8c <UART_SetConfig+0x4e4>)
 8003daa:	fba3 2301 	umull	r2, r3, r3, r1
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2264      	movs	r2, #100	@ 0x64
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	1acb      	subs	r3, r1, r3
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	3332      	adds	r3, #50	@ 0x32
 8003dbc:	4a33      	ldr	r2, [pc, #204]	@ (8003e8c <UART_SetConfig+0x4e4>)
 8003dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc2:	095b      	lsrs	r3, r3, #5
 8003dc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dc8:	441c      	add	r4, r3
 8003dca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dce:	2200      	movs	r2, #0
 8003dd0:	673b      	str	r3, [r7, #112]	@ 0x70
 8003dd2:	677a      	str	r2, [r7, #116]	@ 0x74
 8003dd4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003dd8:	4642      	mov	r2, r8
 8003dda:	464b      	mov	r3, r9
 8003ddc:	1891      	adds	r1, r2, r2
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	415b      	adcs	r3, r3
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003de8:	4641      	mov	r1, r8
 8003dea:	1851      	adds	r1, r2, r1
 8003dec:	6039      	str	r1, [r7, #0]
 8003dee:	4649      	mov	r1, r9
 8003df0:	414b      	adcs	r3, r1
 8003df2:	607b      	str	r3, [r7, #4]
 8003df4:	f04f 0200 	mov.w	r2, #0
 8003df8:	f04f 0300 	mov.w	r3, #0
 8003dfc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e00:	4659      	mov	r1, fp
 8003e02:	00cb      	lsls	r3, r1, #3
 8003e04:	4651      	mov	r1, sl
 8003e06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e0a:	4651      	mov	r1, sl
 8003e0c:	00ca      	lsls	r2, r1, #3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	4619      	mov	r1, r3
 8003e12:	4603      	mov	r3, r0
 8003e14:	4642      	mov	r2, r8
 8003e16:	189b      	adds	r3, r3, r2
 8003e18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	460a      	mov	r2, r1
 8003e1e:	eb42 0303 	adc.w	r3, r2, r3
 8003e22:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e2e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e30:	f04f 0200 	mov.w	r2, #0
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e3c:	4649      	mov	r1, r9
 8003e3e:	008b      	lsls	r3, r1, #2
 8003e40:	4641      	mov	r1, r8
 8003e42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e46:	4641      	mov	r1, r8
 8003e48:	008a      	lsls	r2, r1, #2
 8003e4a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e4e:	f7fc f9bb 	bl	80001c8 <__aeabi_uldivmod>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4b0d      	ldr	r3, [pc, #52]	@ (8003e8c <UART_SetConfig+0x4e4>)
 8003e58:	fba3 1302 	umull	r1, r3, r3, r2
 8003e5c:	095b      	lsrs	r3, r3, #5
 8003e5e:	2164      	movs	r1, #100	@ 0x64
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	3332      	adds	r3, #50	@ 0x32
 8003e6a:	4a08      	ldr	r2, [pc, #32]	@ (8003e8c <UART_SetConfig+0x4e4>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	095b      	lsrs	r3, r3, #5
 8003e72:	f003 020f 	and.w	r2, r3, #15
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4422      	add	r2, r4
 8003e7e:	609a      	str	r2, [r3, #8]
}
 8003e80:	bf00      	nop
 8003e82:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e86:	46bd      	mov	sp, r7
 8003e88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e8c:	51eb851f 	.word	0x51eb851f

08003e90 <memset>:
 8003e90:	4402      	add	r2, r0
 8003e92:	4603      	mov	r3, r0
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d100      	bne.n	8003e9a <memset+0xa>
 8003e98:	4770      	bx	lr
 8003e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e9e:	e7f9      	b.n	8003e94 <memset+0x4>

08003ea0 <__libc_init_array>:
 8003ea0:	b570      	push	{r4, r5, r6, lr}
 8003ea2:	4d0d      	ldr	r5, [pc, #52]	@ (8003ed8 <__libc_init_array+0x38>)
 8003ea4:	4c0d      	ldr	r4, [pc, #52]	@ (8003edc <__libc_init_array+0x3c>)
 8003ea6:	1b64      	subs	r4, r4, r5
 8003ea8:	10a4      	asrs	r4, r4, #2
 8003eaa:	2600      	movs	r6, #0
 8003eac:	42a6      	cmp	r6, r4
 8003eae:	d109      	bne.n	8003ec4 <__libc_init_array+0x24>
 8003eb0:	4d0b      	ldr	r5, [pc, #44]	@ (8003ee0 <__libc_init_array+0x40>)
 8003eb2:	4c0c      	ldr	r4, [pc, #48]	@ (8003ee4 <__libc_init_array+0x44>)
 8003eb4:	f000 f818 	bl	8003ee8 <_init>
 8003eb8:	1b64      	subs	r4, r4, r5
 8003eba:	10a4      	asrs	r4, r4, #2
 8003ebc:	2600      	movs	r6, #0
 8003ebe:	42a6      	cmp	r6, r4
 8003ec0:	d105      	bne.n	8003ece <__libc_init_array+0x2e>
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec8:	4798      	blx	r3
 8003eca:	3601      	adds	r6, #1
 8003ecc:	e7ee      	b.n	8003eac <__libc_init_array+0xc>
 8003ece:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ed2:	4798      	blx	r3
 8003ed4:	3601      	adds	r6, #1
 8003ed6:	e7f2      	b.n	8003ebe <__libc_init_array+0x1e>
 8003ed8:	080049ac 	.word	0x080049ac
 8003edc:	080049ac 	.word	0x080049ac
 8003ee0:	080049ac 	.word	0x080049ac
 8003ee4:	080049b0 	.word	0x080049b0

08003ee8 <_init>:
 8003ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eea:	bf00      	nop
 8003eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003eee:	bc08      	pop	{r3}
 8003ef0:	469e      	mov	lr, r3
 8003ef2:	4770      	bx	lr

08003ef4 <_fini>:
 8003ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef6:	bf00      	nop
 8003ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efa:	bc08      	pop	{r3}
 8003efc:	469e      	mov	lr, r3
 8003efe:	4770      	bx	lr
