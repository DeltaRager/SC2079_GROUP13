
MDP_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009054  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee8  080091e8  080091e8  0000a1e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0d0  0800a0d0  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a0d0  0800a0d0  0000b0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0d8  0800a0d8  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0d8  0800a0d8  0000b0d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0dc  0800a0dc  0000b0dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a0e0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          000007b0  200001d4  200001d4  0000c1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000984  20000984  0000c1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000144f7  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ee9  00000000  00000000  000206fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  000235e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000edd  00000000  00000000  000248e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024058  00000000  00000000  000257bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017556  00000000  00000000  00049815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1f23  00000000  00000000  00060d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00132c8e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060e0  00000000  00000000  00132cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000cc  00000000  00000000  00138db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091cc 	.word	0x080091cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080091cc 	.word	0x080091cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <is_USER_button_pressed>:

#include "helper.h"


/*---------- OLED INTERACTION ----------*/
bool is_USER_button_pressed() {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET;
 8000f3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f40:	4805      	ldr	r0, [pc, #20]	@ (8000f58 <is_USER_button_pressed+0x20>)
 8000f42:	f002 fa97 	bl	8003474 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	bf0c      	ite	eq
 8000f4c:	2301      	moveq	r3, #1
 8000f4e:	2300      	movne	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40020c00 	.word	0x40020c00

08000f5c <print_OLED>:

void print_OLED(int x, int y, uint8_t* msg, bool var_exist, int32_t val) {
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b0e9      	sub	sp, #420	@ 0x1a4
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 8000f66:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 8000f6a:	6020      	str	r0, [r4, #0]
 8000f6c:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8000f70:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 8000f74:	6001      	str	r1, [r0, #0]
 8000f76:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8000f7a:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8000f7e:	600a      	str	r2, [r1, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f86:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8000f8a:	701a      	strb	r2, [r3, #0]
	uint8_t* buf[100];

	if (var_exist) {
 8000f8c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f90:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <print_OLED+0x56>
		sprintf(buf, msg, val);
 8000f9a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f9e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000fa2:	f107 0010 	add.w	r0, r7, #16
 8000fa6:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8000faa:	6819      	ldr	r1, [r3, #0]
 8000fac:	f006 f898 	bl	80070e0 <siprintf>
 8000fb0:	e009      	b.n	8000fc6 <print_OLED+0x6a>
	} else {
		sprintf(buf, msg);
 8000fb2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000fb6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000fba:	f107 0210 	add.w	r2, r7, #16
 8000fbe:	6819      	ldr	r1, [r3, #0]
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	f006 f88d 	bl	80070e0 <siprintf>
	}

	OLED_ShowString(x, y, buf);
 8000fc6:	f107 0210 	add.w	r2, r7, #16
 8000fca:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000fce:	f5a3 71cc 	sub.w	r1, r3, #408	@ 0x198
 8000fd2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000fd6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8000fda:	6809      	ldr	r1, [r1, #0]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	f001 f9b5 	bl	800234c <OLED_ShowString>
	OLED_Refresh_Gram();
 8000fe2:	f001 f889 	bl	80020f8 <OLED_Refresh_Gram>
}
 8000fe6:	bf00      	nop
 8000fe8:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd90      	pop	{r4, r7, pc}

08000ff0 <send_ack>:


/*-------------- COMMANDS --------------*/
void send_ack(UART_HandleTypeDef* uart_ptr) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	uint8_t ack[] = "l";
 8000ff8:	236c      	movs	r3, #108	@ 0x6c
 8000ffa:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(uart_ptr, ack, sizeof(ack), 2000);
 8000ffc:	f107 010c 	add.w	r1, r7, #12
 8001000:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001004:	2202      	movs	r2, #2
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f004 fa8c 	bl	8005524 <HAL_UART_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <move>:

void move(uint8_t cmd) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af02      	add	r7, sp, #8
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
	switch ((uint8_t) cmd) {
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	3b61      	subs	r3, #97	@ 0x61
 8001022:	2b19      	cmp	r3, #25
 8001024:	f200 8087 	bhi.w	8001136 <move+0x122>
 8001028:	a201      	add	r2, pc, #4	@ (adr r2, 8001030 <move+0x1c>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	080010c9 	.word	0x080010c9
 8001034:	08001137 	.word	0x08001137
 8001038:	0800110b 	.word	0x0800110b
 800103c:	080010df 	.word	0x080010df
 8001040:	08001137 	.word	0x08001137
 8001044:	08001137 	.word	0x08001137
 8001048:	08001137 	.word	0x08001137
 800104c:	08001137 	.word	0x08001137
 8001050:	08001137 	.word	0x08001137
 8001054:	08001137 	.word	0x08001137
 8001058:	08001137 	.word	0x08001137
 800105c:	08001137 	.word	0x08001137
 8001060:	08001137 	.word	0x08001137
 8001064:	08001137 	.word	0x08001137
 8001068:	08001137 	.word	0x08001137
 800106c:	08001137 	.word	0x08001137
 8001070:	08001137 	.word	0x08001137
 8001074:	08001137 	.word	0x08001137
 8001078:	080010b1 	.word	0x080010b1
 800107c:	08001137 	.word	0x08001137
 8001080:	08001137 	.word	0x08001137
 8001084:	08001137 	.word	0x08001137
 8001088:	08001099 	.word	0x08001099
 800108c:	08001121 	.word	0x08001121
 8001090:	08001137 	.word	0x08001137
 8001094:	080010f5 	.word	0x080010f5
	case 'w':
		print_OLED(0, 30, "Forward", false, 0);
 8001098:	2300      	movs	r3, #0
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2300      	movs	r3, #0
 800109e:	4a2c      	ldr	r2, [pc, #176]	@ (8001150 <move+0x13c>)
 80010a0:	211e      	movs	r1, #30
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff ff5a 	bl	8000f5c <print_OLED>
		forward(80);
 80010a8:	2050      	movs	r0, #80	@ 0x50
 80010aa:	f000 fe55 	bl	8001d58 <forward>
		break;
 80010ae:	e04b      	b.n	8001148 <move+0x134>
	case 's':
		print_OLED(0, 30, "Backward", false, 0);
 80010b0:	2300      	movs	r3, #0
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	2300      	movs	r3, #0
 80010b6:	4a27      	ldr	r2, [pc, #156]	@ (8001154 <move+0x140>)
 80010b8:	211e      	movs	r1, #30
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff ff4e 	bl	8000f5c <print_OLED>
		backward(80);
 80010c0:	2050      	movs	r0, #80	@ 0x50
 80010c2:	f000 feb9 	bl	8001e38 <backward>
		break;
 80010c6:	e03f      	b.n	8001148 <move+0x134>
	case 'a':
		print_OLED(0, 30, "Forward left", false, 0);
 80010c8:	2300      	movs	r3, #0
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2300      	movs	r3, #0
 80010ce:	4a22      	ldr	r2, [pc, #136]	@ (8001158 <move+0x144>)
 80010d0:	211e      	movs	r1, #30
 80010d2:	2000      	movs	r0, #0
 80010d4:	f7ff ff42 	bl	8000f5c <print_OLED>
		forward_left();
 80010d8:	f000 ff5c 	bl	8001f94 <forward_left>
		break;
 80010dc:	e034      	b.n	8001148 <move+0x134>
	case 'd':
		print_OLED(0, 30, "Forward right", false, 0);
 80010de:	2300      	movs	r3, #0
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2300      	movs	r3, #0
 80010e4:	4a1d      	ldr	r2, [pc, #116]	@ (800115c <move+0x148>)
 80010e6:	211e      	movs	r1, #30
 80010e8:	2000      	movs	r0, #0
 80010ea:	f7ff ff37 	bl	8000f5c <print_OLED>
		forward_right();
 80010ee:	f000 ff09 	bl	8001f04 <forward_right>
		break;
 80010f2:	e029      	b.n	8001148 <move+0x134>
	case 'z':
		print_OLED(0, 30, "Backward left", false, 0);
 80010f4:	2300      	movs	r3, #0
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2300      	movs	r3, #0
 80010fa:	4a19      	ldr	r2, [pc, #100]	@ (8001160 <move+0x14c>)
 80010fc:	211e      	movs	r1, #30
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff ff2c 	bl	8000f5c <print_OLED>
		backward_left();
 8001104:	f000 ffa4 	bl	8002050 <backward_left>
		break;
 8001108:	e01e      	b.n	8001148 <move+0x134>
	case 'c':
		print_OLED(0, 30, "Backward right", false, 0);
 800110a:	2300      	movs	r3, #0
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2300      	movs	r3, #0
 8001110:	4a14      	ldr	r2, [pc, #80]	@ (8001164 <move+0x150>)
 8001112:	211e      	movs	r1, #30
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff ff21 	bl	8000f5c <print_OLED>
		backward_right();
 800111a:	f000 ff8f 	bl	800203c <backward_right>
		break;
 800111e:	e013      	b.n	8001148 <move+0x134>
	case 'x':
		print_OLED(0, 30, "Stop", false, 0);
 8001120:	2300      	movs	r3, #0
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2300      	movs	r3, #0
 8001126:	4a10      	ldr	r2, [pc, #64]	@ (8001168 <move+0x154>)
 8001128:	211e      	movs	r1, #30
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff ff16 	bl	8000f5c <print_OLED>
		stop();
 8001130:	f000 fe04 	bl	8001d3c <stop>
		break;
 8001134:	e008      	b.n	8001148 <move+0x134>
	default:
		print_OLED(0, 30, "cmd wrong type", false, 0);
 8001136:	2300      	movs	r3, #0
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2300      	movs	r3, #0
 800113c:	4a0b      	ldr	r2, [pc, #44]	@ (800116c <move+0x158>)
 800113e:	211e      	movs	r1, #30
 8001140:	2000      	movs	r0, #0
 8001142:	f7ff ff0b 	bl	8000f5c <print_OLED>
	}
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	080091e8 	.word	0x080091e8
 8001154:	080091f0 	.word	0x080091f0
 8001158:	080091fc 	.word	0x080091fc
 800115c:	0800920c 	.word	0x0800920c
 8001160:	0800921c 	.word	0x0800921c
 8001164:	0800922c 	.word	0x0800922c
 8001168:	0800923c 	.word	0x0800923c
 800116c:	08009244 	.word	0x08009244

08001170 <HAL_TIM_IC_CaptureCallback>:
  delay_us(10);                                                        // wait for 10 us
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);   // pull the TRIG pin low
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim_ptr) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if (htim_ptr->Channel != HAL_TIM_ACTIVE_CHANNEL_4)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7f1b      	ldrb	r3, [r3, #28]
 800117c:	2b08      	cmp	r3, #8
 800117e:	d17c      	bne.n	800127a <HAL_TIM_IC_CaptureCallback+0x10a>
    return;

  if (!is_first_captured) {                                   // If the first value is not captured
 8001180:	4b43      	ldr	r3, [pc, #268]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	f083 0301 	eor.w	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d01a      	beq.n	80011c4 <HAL_TIM_IC_CaptureCallback+0x54>
    tc1 = HAL_TIM_ReadCapturedValue(htim_ptr, TIM_CHANNEL_4); // read the first value
 800118e:	210c      	movs	r1, #12
 8001190:	6878      	ldr	r0, [r7, #4]
 8001192:	f003 fd0d 	bl	8004bb0 <HAL_TIM_ReadCapturedValue>
 8001196:	4603      	mov	r3, r0
 8001198:	4a3e      	ldr	r2, [pc, #248]	@ (8001294 <HAL_TIM_IC_CaptureCallback+0x124>)
 800119a:	6013      	str	r3, [r2, #0]
    is_first_captured = true;                                 // set the first captured as true
 800119c:	4b3c      	ldr	r3, [pc, #240]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0x120>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
    // Now change the polarity to falling edge
    __HAL_TIM_SET_CAPTUREPOLARITY(htim_ptr, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6a1a      	ldr	r2, [r3, #32]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80011b0:	621a      	str	r2, [r3, #32]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6a1a      	ldr	r2, [r3, #32]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80011c0:	621a      	str	r2, [r3, #32]
 80011c2:	e05b      	b.n	800127c <HAL_TIM_IC_CaptureCallback+0x10c>
  } else if (is_first_captured) {                             // If the first is already captured
 80011c4:	4b32      	ldr	r3, [pc, #200]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0x120>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d057      	beq.n	800127c <HAL_TIM_IC_CaptureCallback+0x10c>
    tc2 = HAL_TIM_ReadCapturedValue(htim_ptr, TIM_CHANNEL_4); // read second value
 80011cc:	210c      	movs	r1, #12
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f003 fcee 	bl	8004bb0 <HAL_TIM_ReadCapturedValue>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4a30      	ldr	r2, [pc, #192]	@ (8001298 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011d8:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COUNTER(htim_ptr, 0);                       // reset the counter
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2200      	movs	r2, #0
 80011e0:	625a      	str	r2, [r3, #36]	@ 0x24

    echo = (tc2 > tc1) ? (tc2 - tc1) : (64000 - tc1 + tc2);
 80011e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <HAL_TIM_IC_CaptureCallback+0x124>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d905      	bls.n	80011fa <HAL_TIM_IC_CaptureCallback+0x8a>
 80011ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001298 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b28      	ldr	r3, [pc, #160]	@ (8001294 <HAL_TIM_IC_CaptureCallback+0x124>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	e006      	b.n	8001208 <HAL_TIM_IC_CaptureCallback+0x98>
 80011fa:	4b27      	ldr	r3, [pc, #156]	@ (8001298 <HAL_TIM_IC_CaptureCallback+0x128>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	f503 437a 	add.w	r3, r3, #64000	@ 0xfa00
 8001208:	4a24      	ldr	r2, [pc, #144]	@ (800129c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800120a:	6013      	str	r3, [r2, #0]
    dist = echo * 0.034/2;
 800120c:	4b23      	ldr	r3, [pc, #140]	@ (800129c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f977 	bl	8000504 <__aeabi_ui2d>
 8001216:	a31c      	add	r3, pc, #112	@ (adr r3, 8001288 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121c:	f7ff f9ec 	bl	80005f8 <__aeabi_dmul>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001230:	f7ff fb0c 	bl	800084c <__aeabi_ddiv>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4610      	mov	r0, r2
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff fcb4 	bl	8000ba8 <__aeabi_d2f>
 8001240:	4603      	mov	r3, r0
 8001242:	4a17      	ldr	r2, [pc, #92]	@ (80012a0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001244:	6013      	str	r3, [r2, #0]
    is_first_captured = false;                                // set it back to false
 8001246:	4b12      	ldr	r3, [pc, #72]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]

    // Set polarity to rising edge
    __HAL_TIM_SET_CAPTUREPOLARITY(htim_ptr, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6a1a      	ldr	r2, [r3, #32]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 800125a:	621a      	str	r2, [r3, #32]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	6a12      	ldr	r2, [r2, #32]
 8001266:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 8001268:	4b0e      	ldr	r3, [pc, #56]	@ (80012a4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	68da      	ldr	r2, [r3, #12]
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0210 	bic.w	r2, r2, #16
 8001276:	60da      	str	r2, [r3, #12]
 8001278:	e000      	b.n	800127c <HAL_TIM_IC_CaptureCallback+0x10c>
    return;
 800127a:	bf00      	nop
  }
}
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	f3af 8000 	nop.w
 8001288:	b020c49c 	.word	0xb020c49c
 800128c:	3fa16872 	.word	0x3fa16872
 8001290:	20000404 	.word	0x20000404
 8001294:	200003f4 	.word	0x200003f4
 8001298:	200003f8 	.word	0x200003f8
 800129c:	200003fc 	.word	0x200003fc
 80012a0:	20000400 	.word	0x20000400
 80012a4:	20000244 	.word	0x20000244

080012a8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  cmd_t* new_cmd = (cmd_t*) malloc(sizeof(cmd_t));
 80012b0:	2008      	movs	r0, #8
 80012b2:	f005 f93d 	bl	8006530 <malloc>
 80012b6:	4603      	mov	r3, r0
 80012b8:	60fb      	str	r3, [r7, #12]
  new_cmd->dir = receive[0];
 80012ba:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <HAL_UART_RxCpltCallback+0x84>)
 80012bc:	781a      	ldrb	r2, [r3, #0]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	701a      	strb	r2, [r3, #0]
  new_cmd->next = NULL;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
  current_cmd = receive[0];
 80012c8:	4b18      	ldr	r3, [pc, #96]	@ (800132c <HAL_UART_RxCpltCallback+0x84>)
 80012ca:	781a      	ldrb	r2, [r3, #0]
 80012cc:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <HAL_UART_RxCpltCallback+0x88>)
 80012ce:	701a      	strb	r2, [r3, #0]

  OLED_ShowString(0, 15, receive[0]);
 80012d0:	4b16      	ldr	r3, [pc, #88]	@ (800132c <HAL_UART_RxCpltCallback+0x84>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	461a      	mov	r2, r3
 80012d6:	210f      	movs	r1, #15
 80012d8:	2000      	movs	r0, #0
 80012da:	f001 f837 	bl	800234c <OLED_ShowString>
  OLED_Refresh_Gram();
 80012de:	f000 ff0b 	bl	80020f8 <OLED_Refresh_Gram>

  if (cmd_cnt == 0) {
 80012e2:	4b14      	ldr	r3, [pc, #80]	@ (8001334 <HAL_UART_RxCpltCallback+0x8c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d106      	bne.n	80012f8 <HAL_UART_RxCpltCallback+0x50>
    head = new_cmd;
 80012ea:	4a13      	ldr	r2, [pc, #76]	@ (8001338 <HAL_UART_RxCpltCallback+0x90>)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	6013      	str	r3, [r2, #0]
    curr = new_cmd;
 80012f0:	4a12      	ldr	r2, [pc, #72]	@ (800133c <HAL_UART_RxCpltCallback+0x94>)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e00a      	b.n	800130e <HAL_UART_RxCpltCallback+0x66>
  } else if (cmd_cnt > 0) {
 80012f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001334 <HAL_UART_RxCpltCallback+0x8c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d006      	beq.n	800130e <HAL_UART_RxCpltCallback+0x66>
    curr->next = new_cmd;
 8001300:	4b0e      	ldr	r3, [pc, #56]	@ (800133c <HAL_UART_RxCpltCallback+0x94>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	605a      	str	r2, [r3, #4]
    curr = new_cmd;
 8001308:	4a0c      	ldr	r2, [pc, #48]	@ (800133c <HAL_UART_RxCpltCallback+0x94>)
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6013      	str	r3, [r2, #0]
  }

  cmd_cnt++;
 800130e:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <HAL_UART_RxCpltCallback+0x8c>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	b2da      	uxtb	r2, r3
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <HAL_UART_RxCpltCallback+0x8c>)
 8001318:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart3, receive, sizeof(receive));
 800131a:	2201      	movs	r2, #1
 800131c:	4903      	ldr	r1, [pc, #12]	@ (800132c <HAL_UART_RxCpltCallback+0x84>)
 800131e:	4808      	ldr	r0, [pc, #32]	@ (8001340 <HAL_UART_RxCpltCallback+0x98>)
 8001320:	f004 f98b 	bl	800563a <HAL_UART_Receive_IT>
}
 8001324:	bf00      	nop
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000414 	.word	0x20000414
 8001330:	20000415 	.word	0x20000415
 8001334:	20000410 	.word	0x20000410
 8001338:	20000408 	.word	0x20000408
 800133c:	2000040c 	.word	0x2000040c
 8001340:	200003ac 	.word	0x200003ac

08001344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  // Turn on LED3 to check whether the STM32 board works or not
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800134e:	4825      	ldr	r0, [pc, #148]	@ (80013e4 <main+0xa0>)
 8001350:	f002 f8a8 	bl	80034a4 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001354:	f001 fcb8 	bl	8002cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001358:	f000 f858 	bl	800140c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800135c:	f000 fb36 	bl	80019cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001360:	f000 fb0a 	bl	8001978 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001364:	f000 f8de 	bl	8001524 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001368:	f000 f97c 	bl	8001664 <MX_TIM2_Init>
  MX_TIM8_Init();
 800136c:	f000 fa58 	bl	8001820 <MX_TIM8_Init>
  MX_TIM3_Init();
 8001370:	f000 f9cc 	bl	800170c <MX_TIM3_Init>
  MX_I2C1_Init();
 8001374:	f000 f8a8 	bl	80014c8 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001378:	f000 fa1c 	bl	80017b4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // Initialize peripherals
  OLED_Init();
 800137c:	f001 f818 	bl	80023b0 <OLED_Init>
  motor_init(&htim8, &htim2, &htim3);
 8001380:	4a19      	ldr	r2, [pc, #100]	@ (80013e8 <main+0xa4>)
 8001382:	491a      	ldr	r1, [pc, #104]	@ (80013ec <main+0xa8>)
 8001384:	481a      	ldr	r0, [pc, #104]	@ (80013f0 <main+0xac>)
 8001386:	f000 fbcd 	bl	8001b24 <motor_init>
  servo_init(&htim1);
 800138a:	481a      	ldr	r0, [pc, #104]	@ (80013f4 <main+0xb0>)
 800138c:	f001 f89c 	bl	80024c8 <servo_init>
  // sensors_init(&hi2c1, &htim4, &sensor);

  // Delay loop for generating a 10us pulse (TIM6)
  HAL_TIM_Base_Start(&htim6);
 8001390:	4819      	ldr	r0, [pc, #100]	@ (80013f8 <main+0xb4>)
 8001392:	f002 feb5 	bl	8004100 <HAL_TIM_Base_Start>

  // USER button
  OLED_ShowString(0, 0, "Press USER btn");
 8001396:	4a19      	ldr	r2, [pc, #100]	@ (80013fc <main+0xb8>)
 8001398:	2100      	movs	r1, #0
 800139a:	2000      	movs	r0, #0
 800139c:	f000 ffd6 	bl	800234c <OLED_ShowString>
  OLED_ShowString(0, 15, "to continue");
 80013a0:	4a17      	ldr	r2, [pc, #92]	@ (8001400 <main+0xbc>)
 80013a2:	210f      	movs	r1, #15
 80013a4:	2000      	movs	r0, #0
 80013a6:	f000 ffd1 	bl	800234c <OLED_ShowString>
  OLED_Refresh_Gram();
 80013aa:	f000 fea5 	bl	80020f8 <OLED_Refresh_Gram>
  servo_set_dir(STRAIGHT);
 80013ae:	f241 2068 	movw	r0, #4712	@ 0x1268
 80013b2:	f001 f89b 	bl	80024ec <servo_set_dir>

  while (!is_USER_button_pressed());
 80013b6:	bf00      	nop
 80013b8:	f7ff fdbe 	bl	8000f38 <is_USER_button_pressed>
 80013bc:	4603      	mov	r3, r0
 80013be:	f083 0301 	eor.w	r3, r3, #1
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1f7      	bne.n	80013b8 <main+0x74>
  OLED_Clear();
 80013c8:	f000 fece 	bl	8002168 <OLED_Clear>
  motor_set_speed(20);
 80013cc:	2014      	movs	r0, #20
 80013ce:	f000 fc37 	bl	8001c40 <motor_set_speed>

  // Start the interrupt for UART3
  HAL_UART_Receive_IT(&huart3, receive, sizeof(receive));
 80013d2:	2201      	movs	r2, #1
 80013d4:	490b      	ldr	r1, [pc, #44]	@ (8001404 <main+0xc0>)
 80013d6:	480c      	ldr	r0, [pc, #48]	@ (8001408 <main+0xc4>)
 80013d8:	f004 f92f 	bl	800563a <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    UART3_task();
 80013dc:	f001 fbee 	bl	8002bbc <UART3_task>
 80013e0:	e7fc      	b.n	80013dc <main+0x98>
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000
 80013e8:	200002d4 	.word	0x200002d4
 80013ec:	2000028c 	.word	0x2000028c
 80013f0:	20000364 	.word	0x20000364
 80013f4:	20000244 	.word	0x20000244
 80013f8:	2000031c 	.word	0x2000031c
 80013fc:	08009254 	.word	0x08009254
 8001400:	08009264 	.word	0x08009264
 8001404:	20000414 	.word	0x20000414
 8001408:	200003ac 	.word	0x200003ac

0800140c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b094      	sub	sp, #80	@ 0x50
 8001410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	f107 0320 	add.w	r3, r7, #32
 8001416:	2230      	movs	r2, #48	@ 0x30
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f005 fec3 	bl	80071a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <SystemClock_Config+0xb4>)
 8001436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001438:	4a21      	ldr	r2, [pc, #132]	@ (80014c0 <SystemClock_Config+0xb4>)
 800143a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800143e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001440:	4b1f      	ldr	r3, [pc, #124]	@ (80014c0 <SystemClock_Config+0xb4>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800144c:	2300      	movs	r3, #0
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <SystemClock_Config+0xb8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a1b      	ldr	r2, [pc, #108]	@ (80014c4 <SystemClock_Config+0xb8>)
 8001456:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800145a:	6013      	str	r3, [r2, #0]
 800145c:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <SystemClock_Config+0xb8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001464:	607b      	str	r3, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001468:	2302      	movs	r3, #2
 800146a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800146c:	2301      	movs	r3, #1
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001470:	2310      	movs	r3, #16
 8001472:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001474:	2300      	movs	r3, #0
 8001476:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	4618      	mov	r0, r3
 800147e:	f002 f997 	bl	80037b0 <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001488:	f000 fb46 	bl	8001b18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	230f      	movs	r3, #15
 800148e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014a0:	f107 030c 	add.w	r3, r7, #12
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f002 fbfa 	bl	8003ca0 <HAL_RCC_ClockConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80014b2:	f000 fb31 	bl	8001b18 <Error_Handler>
  }
}
 80014b6:	bf00      	nop
 80014b8:	3750      	adds	r7, #80	@ 0x50
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000

080014c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014ce:	4a13      	ldr	r2, [pc, #76]	@ (800151c <MX_I2C1_Init+0x54>)
 80014d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014d4:	4a12      	ldr	r2, [pc, #72]	@ (8001520 <MX_I2C1_Init+0x58>)
 80014d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014e6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f8:	4b07      	ldr	r3, [pc, #28]	@ (8001518 <MX_I2C1_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fe:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <MX_I2C1_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	@ (8001518 <MX_I2C1_Init+0x50>)
 8001506:	f001 ffe7 	bl	80034d8 <HAL_I2C_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001510:	f000 fb02 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200001f0 	.word	0x200001f0
 800151c:	40005400 	.word	0x40005400
 8001520:	00061a80 	.word	0x00061a80

08001524 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b096      	sub	sp, #88	@ 0x58
 8001528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001538:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001542:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	615a      	str	r2, [r3, #20]
 8001554:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2220      	movs	r2, #32
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f005 fe22 	bl	80071a6 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001562:	4b3e      	ldr	r3, [pc, #248]	@ (800165c <MX_TIM1_Init+0x138>)
 8001564:	4a3e      	ldr	r2, [pc, #248]	@ (8001660 <MX_TIM1_Init+0x13c>)
 8001566:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8001568:	4b3c      	ldr	r3, [pc, #240]	@ (800165c <MX_TIM1_Init+0x138>)
 800156a:	2204      	movs	r2, #4
 800156c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b3b      	ldr	r3, [pc, #236]	@ (800165c <MX_TIM1_Init+0x138>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 8001574:	4b39      	ldr	r3, [pc, #228]	@ (800165c <MX_TIM1_Init+0x138>)
 8001576:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800157a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b37      	ldr	r3, [pc, #220]	@ (800165c <MX_TIM1_Init+0x138>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001582:	4b36      	ldr	r3, [pc, #216]	@ (800165c <MX_TIM1_Init+0x138>)
 8001584:	2200      	movs	r2, #0
 8001586:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b34      	ldr	r3, [pc, #208]	@ (800165c <MX_TIM1_Init+0x138>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800158e:	4833      	ldr	r0, [pc, #204]	@ (800165c <MX_TIM1_Init+0x138>)
 8001590:	f002 fd66 	bl	8004060 <HAL_TIM_Base_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800159a:	f000 fabd 	bl	8001b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800159e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015a4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015a8:	4619      	mov	r1, r3
 80015aa:	482c      	ldr	r0, [pc, #176]	@ (800165c <MX_TIM1_Init+0x138>)
 80015ac:	f003 fa38 	bl	8004a20 <HAL_TIM_ConfigClockSource>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015b6:	f000 faaf 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015ba:	4828      	ldr	r0, [pc, #160]	@ (800165c <MX_TIM1_Init+0x138>)
 80015bc:	f002 fe08 	bl	80041d0 <HAL_TIM_PWM_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015c6:	f000 faa7 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015d6:	4619      	mov	r1, r3
 80015d8:	4820      	ldr	r0, [pc, #128]	@ (800165c <MX_TIM1_Init+0x138>)
 80015da:	f003 fe71 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015e4:	f000 fa98 	bl	8001b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015e8:	2360      	movs	r3, #96	@ 0x60
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015f4:	2300      	movs	r3, #0
 80015f6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015fc:	2300      	movs	r3, #0
 80015fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001600:	2300      	movs	r3, #0
 8001602:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001604:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001608:	2200      	movs	r2, #0
 800160a:	4619      	mov	r1, r3
 800160c:	4813      	ldr	r0, [pc, #76]	@ (800165c <MX_TIM1_Init+0x138>)
 800160e:	f003 f945 	bl	800489c <HAL_TIM_PWM_ConfigChannel>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001618:	f000 fa7e 	bl	8001b18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001628:	2300      	movs	r3, #0
 800162a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001630:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001634:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4619      	mov	r1, r3
 800163e:	4807      	ldr	r0, [pc, #28]	@ (800165c <MX_TIM1_Init+0x138>)
 8001640:	f003 feba 	bl	80053b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800164a:	f000 fa65 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800164e:	4803      	ldr	r0, [pc, #12]	@ (800165c <MX_TIM1_Init+0x138>)
 8001650:	f001 f8e6 	bl	8002820 <HAL_TIM_MspPostInit>

}
 8001654:	bf00      	nop
 8001656:	3758      	adds	r7, #88	@ 0x58
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20000244 	.word	0x20000244
 8001660:	40010000 	.word	0x40010000

08001664 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08c      	sub	sp, #48	@ 0x30
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	2224      	movs	r2, #36	@ 0x24
 8001670:	2100      	movs	r1, #0
 8001672:	4618      	mov	r0, r3
 8001674:	f005 fd97 	bl	80071a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001680:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <MX_TIM2_Init+0xa4>)
 8001682:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001686:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <MX_TIM2_Init+0xa4>)
 800168a:	2200      	movs	r2, #0
 800168c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168e:	4b1e      	ldr	r3, [pc, #120]	@ (8001708 <MX_TIM2_Init+0xa4>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001694:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <MX_TIM2_Init+0xa4>)
 8001696:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800169a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <MX_TIM2_Init+0xa4>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <MX_TIM2_Init+0xa4>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016a8:	2303      	movs	r3, #3
 80016aa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016ac:	2300      	movs	r3, #0
 80016ae:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016b0:	2301      	movs	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016c0:	2301      	movs	r3, #1
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	4619      	mov	r1, r3
 80016d2:	480d      	ldr	r0, [pc, #52]	@ (8001708 <MX_TIM2_Init+0xa4>)
 80016d4:	f002 fe9e 	bl	8004414 <HAL_TIM_Encoder_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80016de:	f000 fa1b 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016ea:	1d3b      	adds	r3, r7, #4
 80016ec:	4619      	mov	r1, r3
 80016ee:	4806      	ldr	r0, [pc, #24]	@ (8001708 <MX_TIM2_Init+0xa4>)
 80016f0:	f003 fde6 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80016fa:	f000 fa0d 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	3730      	adds	r7, #48	@ 0x30
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	2000028c 	.word	0x2000028c

0800170c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b08c      	sub	sp, #48	@ 0x30
 8001710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	2224      	movs	r2, #36	@ 0x24
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f005 fd43 	bl	80071a6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001728:	4b20      	ldr	r3, [pc, #128]	@ (80017ac <MX_TIM3_Init+0xa0>)
 800172a:	4a21      	ldr	r2, [pc, #132]	@ (80017b0 <MX_TIM3_Init+0xa4>)
 800172c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800172e:	4b1f      	ldr	r3, [pc, #124]	@ (80017ac <MX_TIM3_Init+0xa0>)
 8001730:	2200      	movs	r2, #0
 8001732:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001734:	4b1d      	ldr	r3, [pc, #116]	@ (80017ac <MX_TIM3_Init+0xa0>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800173a:	4b1c      	ldr	r3, [pc, #112]	@ (80017ac <MX_TIM3_Init+0xa0>)
 800173c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001740:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001742:	4b1a      	ldr	r3, [pc, #104]	@ (80017ac <MX_TIM3_Init+0xa0>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001748:	4b18      	ldr	r3, [pc, #96]	@ (80017ac <MX_TIM3_Init+0xa0>)
 800174a:	2200      	movs	r2, #0
 800174c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800174e:	2303      	movs	r3, #3
 8001750:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001756:	2301      	movs	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001766:	2301      	movs	r3, #1
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	4619      	mov	r1, r3
 8001778:	480c      	ldr	r0, [pc, #48]	@ (80017ac <MX_TIM3_Init+0xa0>)
 800177a:	f002 fe4b 	bl	8004414 <HAL_TIM_Encoder_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001784:	f000 f9c8 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	4619      	mov	r1, r3
 8001794:	4805      	ldr	r0, [pc, #20]	@ (80017ac <MX_TIM3_Init+0xa0>)
 8001796:	f003 fd93 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017a0:	f000 f9ba 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	3730      	adds	r7, #48	@ 0x30
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	200002d4 	.word	0x200002d4
 80017b0:	40000400 	.word	0x40000400

080017b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ba:	463b      	mov	r3, r7
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017c2:	4b15      	ldr	r3, [pc, #84]	@ (8001818 <MX_TIM6_Init+0x64>)
 80017c4:	4a15      	ldr	r2, [pc, #84]	@ (800181c <MX_TIM6_Init+0x68>)
 80017c6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 80017c8:	4b13      	ldr	r3, [pc, #76]	@ (8001818 <MX_TIM6_Init+0x64>)
 80017ca:	220f      	movs	r2, #15
 80017cc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ce:	4b12      	ldr	r3, [pc, #72]	@ (8001818 <MX_TIM6_Init+0x64>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80017d4:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <MX_TIM6_Init+0x64>)
 80017d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017da:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <MX_TIM6_Init+0x64>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017e2:	480d      	ldr	r0, [pc, #52]	@ (8001818 <MX_TIM6_Init+0x64>)
 80017e4:	f002 fc3c 	bl	8004060 <HAL_TIM_Base_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80017ee:	f000 f993 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017fa:	463b      	mov	r3, r7
 80017fc:	4619      	mov	r1, r3
 80017fe:	4806      	ldr	r0, [pc, #24]	@ (8001818 <MX_TIM6_Init+0x64>)
 8001800:	f003 fd5e 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800180a:	f000 f985 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	2000031c 	.word	0x2000031c
 800181c:	40001000 	.word	0x40001000

08001820 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b096      	sub	sp, #88	@ 0x58
 8001824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001826:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001834:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800183e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
 800184a:	60da      	str	r2, [r3, #12]
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	615a      	str	r2, [r3, #20]
 8001850:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2220      	movs	r2, #32
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f005 fca4 	bl	80071a6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800185e:	4b44      	ldr	r3, [pc, #272]	@ (8001970 <MX_TIM8_Init+0x150>)
 8001860:	4a44      	ldr	r2, [pc, #272]	@ (8001974 <MX_TIM8_Init+0x154>)
 8001862:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001864:	4b42      	ldr	r3, [pc, #264]	@ (8001970 <MX_TIM8_Init+0x150>)
 8001866:	2200      	movs	r2, #0
 8001868:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186a:	4b41      	ldr	r3, [pc, #260]	@ (8001970 <MX_TIM8_Init+0x150>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7200-1;
 8001870:	4b3f      	ldr	r3, [pc, #252]	@ (8001970 <MX_TIM8_Init+0x150>)
 8001872:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001876:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001878:	4b3d      	ldr	r3, [pc, #244]	@ (8001970 <MX_TIM8_Init+0x150>)
 800187a:	2200      	movs	r2, #0
 800187c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800187e:	4b3c      	ldr	r3, [pc, #240]	@ (8001970 <MX_TIM8_Init+0x150>)
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001884:	4b3a      	ldr	r3, [pc, #232]	@ (8001970 <MX_TIM8_Init+0x150>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800188a:	4839      	ldr	r0, [pc, #228]	@ (8001970 <MX_TIM8_Init+0x150>)
 800188c:	f002 fbe8 	bl	8004060 <HAL_TIM_Base_Init>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001896:	f000 f93f 	bl	8001b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800189e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018a0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018a4:	4619      	mov	r1, r3
 80018a6:	4832      	ldr	r0, [pc, #200]	@ (8001970 <MX_TIM8_Init+0x150>)
 80018a8:	f003 f8ba 	bl	8004a20 <HAL_TIM_ConfigClockSource>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80018b2:	f000 f931 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80018b6:	482e      	ldr	r0, [pc, #184]	@ (8001970 <MX_TIM8_Init+0x150>)
 80018b8:	f002 fc8a 	bl	80041d0 <HAL_TIM_PWM_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80018c2:	f000 f929 	bl	8001b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c6:	2300      	movs	r3, #0
 80018c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ca:	2300      	movs	r3, #0
 80018cc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018d2:	4619      	mov	r1, r3
 80018d4:	4826      	ldr	r0, [pc, #152]	@ (8001970 <MX_TIM8_Init+0x150>)
 80018d6:	f003 fcf3 	bl	80052c0 <HAL_TIMEx_MasterConfigSynchronization>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80018e0:	f000 f91a 	bl	8001b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e4:	2360      	movs	r3, #96	@ 0x60
 80018e6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018f0:	2300      	movs	r3, #0
 80018f2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018f4:	2300      	movs	r3, #0
 80018f6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001904:	2200      	movs	r2, #0
 8001906:	4619      	mov	r1, r3
 8001908:	4819      	ldr	r0, [pc, #100]	@ (8001970 <MX_TIM8_Init+0x150>)
 800190a:	f002 ffc7 	bl	800489c <HAL_TIM_PWM_ConfigChannel>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001914:	f000 f900 	bl	8001b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001918:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800191c:	2204      	movs	r2, #4
 800191e:	4619      	mov	r1, r3
 8001920:	4813      	ldr	r0, [pc, #76]	@ (8001970 <MX_TIM8_Init+0x150>)
 8001922:	f002 ffbb 	bl	800489c <HAL_TIM_PWM_ConfigChannel>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800192c:	f000 f8f4 	bl	8001b18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001934:	2300      	movs	r3, #0
 8001936:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001944:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001948:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800194e:	1d3b      	adds	r3, r7, #4
 8001950:	4619      	mov	r1, r3
 8001952:	4807      	ldr	r0, [pc, #28]	@ (8001970 <MX_TIM8_Init+0x150>)
 8001954:	f003 fd30 	bl	80053b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800195e:	f000 f8db 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001962:	4803      	ldr	r0, [pc, #12]	@ (8001970 <MX_TIM8_Init+0x150>)
 8001964:	f000 ff5c 	bl	8002820 <HAL_TIM_MspPostInit>

}
 8001968:	bf00      	nop
 800196a:	3758      	adds	r7, #88	@ 0x58
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000364 	.word	0x20000364
 8001974:	40010400 	.word	0x40010400

08001978 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800197c:	4b11      	ldr	r3, [pc, #68]	@ (80019c4 <MX_USART3_UART_Init+0x4c>)
 800197e:	4a12      	ldr	r2, [pc, #72]	@ (80019c8 <MX_USART3_UART_Init+0x50>)
 8001980:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001982:	4b10      	ldr	r3, [pc, #64]	@ (80019c4 <MX_USART3_UART_Init+0x4c>)
 8001984:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001988:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800198a:	4b0e      	ldr	r3, [pc, #56]	@ (80019c4 <MX_USART3_UART_Init+0x4c>)
 800198c:	2200      	movs	r2, #0
 800198e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001990:	4b0c      	ldr	r3, [pc, #48]	@ (80019c4 <MX_USART3_UART_Init+0x4c>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001996:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <MX_USART3_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800199c:	4b09      	ldr	r3, [pc, #36]	@ (80019c4 <MX_USART3_UART_Init+0x4c>)
 800199e:	220c      	movs	r2, #12
 80019a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a2:	4b08      	ldr	r3, [pc, #32]	@ (80019c4 <MX_USART3_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <MX_USART3_UART_Init+0x4c>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019ae:	4805      	ldr	r0, [pc, #20]	@ (80019c4 <MX_USART3_UART_Init+0x4c>)
 80019b0:	f003 fd68 	bl	8005484 <HAL_UART_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019ba:	f000 f8ad 	bl	8001b18 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200003ac 	.word	0x200003ac
 80019c8:	40004800 	.word	0x40004800

080019cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	@ 0x28
 80019d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d2:	f107 0314 	add.w	r3, r7, #20
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
 80019e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
 80019e6:	4b48      	ldr	r3, [pc, #288]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ea:	4a47      	ldr	r2, [pc, #284]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 80019ec:	f043 0310 	orr.w	r3, r3, #16
 80019f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f2:	4b45      	ldr	r3, [pc, #276]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4b41      	ldr	r3, [pc, #260]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	4a40      	ldr	r2, [pc, #256]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 8001a08:	f043 0301 	orr.w	r3, r3, #1
 8001a0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	4a39      	ldr	r2, [pc, #228]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2a:	4b37      	ldr	r3, [pc, #220]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	4b33      	ldr	r3, [pc, #204]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	4a32      	ldr	r2, [pc, #200]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a46:	4b30      	ldr	r3, [pc, #192]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	607b      	str	r3, [r7, #4]
 8001a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	603b      	str	r3, [r7, #0]
 8001a56:	4b2c      	ldr	r3, [pc, #176]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a62:	4b29      	ldr	r3, [pc, #164]	@ (8001b08 <MX_GPIO_Init+0x13c>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET_Pin|OLED_DC_Pin
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 8001a74:	4825      	ldr	r0, [pc, #148]	@ (8001b0c <MX_GPIO_Init+0x140>)
 8001a76:	f001 fd15 	bl	80034a4 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_A_IN2_Pin|MOTOR_A_IN1_Pin|MOTOR_B_IN1_Pin|MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	213c      	movs	r1, #60	@ 0x3c
 8001a7e:	4824      	ldr	r0, [pc, #144]	@ (8001b10 <MX_GPIO_Init+0x144>)
 8001a80:	f001 fd10 	bl	80034a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8001a84:	2200      	movs	r2, #0
 8001a86:	2180      	movs	r1, #128	@ 0x80
 8001a88:	4822      	ldr	r0, [pc, #136]	@ (8001b14 <MX_GPIO_Init+0x148>)
 8001a8a:	f001 fd0b 	bl	80034a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDIN_Pin OLED_RESET_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET_Pin|OLED_DC_Pin
 8001a8e:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 8001a92:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4819      	ldr	r0, [pc, #100]	@ (8001b0c <MX_GPIO_Init+0x140>)
 8001aa8:	f001 fb48 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_A_IN2_Pin MOTOR_A_IN1_Pin MOTOR_B_IN1_Pin MOTOR_B_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_IN2_Pin|MOTOR_A_IN1_Pin|MOTOR_B_IN1_Pin|MOTOR_B_IN2_Pin;
 8001aac:	233c      	movs	r3, #60	@ 0x3c
 8001aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0314 	add.w	r3, r7, #20
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4813      	ldr	r0, [pc, #76]	@ (8001b10 <MX_GPIO_Init+0x144>)
 8001ac4:	f001 fb3a 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4619      	mov	r1, r3
 8001adc:	480d      	ldr	r0, [pc, #52]	@ (8001b14 <MX_GPIO_Init+0x148>)
 8001ade:	f001 fb2d 	bl	800313c <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	4806      	ldr	r0, [pc, #24]	@ (8001b14 <MX_GPIO_Init+0x148>)
 8001afa:	f001 fb1f 	bl	800313c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001afe:	bf00      	nop
 8001b00:	3728      	adds	r7, #40	@ 0x28
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40020000 	.word	0x40020000
 8001b14:	40020c00 	.word	0x40020c00

08001b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1c:	b672      	cpsid	i
}
 8001b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b20:	bf00      	nop
 8001b22:	e7fd      	b.n	8001b20 <Error_Handler+0x8>

08001b24 <motor_init>:

// For matching motor speeds.
int16_t pwmValAccel = 0, pwm_val_target = 0, l_pwm_val = 0, r_pwm_val = 0;


void motor_init(TIM_HandleTypeDef* pwm, TIM_HandleTypeDef* l_enc, TIM_HandleTypeDef* r_enc) {
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
	// Assign timer pointers
	motor_pwm_tim = pwm;
 8001b30:	4a0e      	ldr	r2, [pc, #56]	@ (8001b6c <motor_init+0x48>)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6013      	str	r3, [r2, #0]
	l_enc_tim = l_enc;
 8001b36:	4a0e      	ldr	r2, [pc, #56]	@ (8001b70 <motor_init+0x4c>)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	6013      	str	r3, [r2, #0]
	r_enc_tim = r_enc;
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <motor_init+0x50>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6013      	str	r3, [r2, #0]

	// Start Encoders and PWM for L, R motors
	HAL_TIM_Encoder_Start_IT(l_enc, TIM_CHANNEL_ALL);
 8001b42:	213c      	movs	r1, #60	@ 0x3c
 8001b44:	68b8      	ldr	r0, [r7, #8]
 8001b46:	f002 fd0b 	bl	8004560 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(r_enc, TIM_CHANNEL_ALL);
 8001b4a:	213c      	movs	r1, #60	@ 0x3c
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f002 fd07 	bl	8004560 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(pwm, L_CHANNEL);
 8001b52:	2100      	movs	r1, #0
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f002 fb95 	bl	8004284 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm, R_CHANNEL);
 8001b5a:	2104      	movs	r1, #4
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f002 fb91 	bl	8004284 <HAL_TIM_PWM_Start>
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000418 	.word	0x20000418
 8001b70:	2000041c 	.word	0x2000041c
 8001b74:	20000420 	.word	0x20000420

08001b78 <motor_forward>:

void motor_forward() {
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2108      	movs	r1, #8
 8001b80:	4809      	ldr	r0, [pc, #36]	@ (8001ba8 <motor_forward+0x30>)
 8001b82:	f001 fc8f 	bl	80034a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_RESET);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2104      	movs	r1, #4
 8001b8a:	4807      	ldr	r0, [pc, #28]	@ (8001ba8 <motor_forward+0x30>)
 8001b8c:	f001 fc8a 	bl	80034a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_SET);
 8001b90:	2201      	movs	r2, #1
 8001b92:	2110      	movs	r1, #16
 8001b94:	4804      	ldr	r0, [pc, #16]	@ (8001ba8 <motor_forward+0x30>)
 8001b96:	f001 fc85 	bl	80034a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2120      	movs	r1, #32
 8001b9e:	4802      	ldr	r0, [pc, #8]	@ (8001ba8 <motor_forward+0x30>)
 8001ba0:	f001 fc80 	bl	80034a4 <HAL_GPIO_WritePin>
}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40020000 	.word	0x40020000

08001bac <motor_backward>:

void motor_backward() {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2108      	movs	r1, #8
 8001bb4:	4809      	ldr	r0, [pc, #36]	@ (8001bdc <motor_backward+0x30>)
 8001bb6:	f001 fc75 	bl	80034a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_SET);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2104      	movs	r1, #4
 8001bbe:	4807      	ldr	r0, [pc, #28]	@ (8001bdc <motor_backward+0x30>)
 8001bc0:	f001 fc70 	bl	80034a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2110      	movs	r1, #16
 8001bc8:	4804      	ldr	r0, [pc, #16]	@ (8001bdc <motor_backward+0x30>)
 8001bca:	f001 fc6b 	bl	80034a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_SET);
 8001bce:	2201      	movs	r2, #1
 8001bd0:	2120      	movs	r1, #32
 8001bd2:	4802      	ldr	r0, [pc, #8]	@ (8001bdc <motor_backward+0x30>)
 8001bd4:	f001 fc66 	bl	80034a4 <HAL_GPIO_WritePin>
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40020000 	.word	0x40020000

08001be0 <motor_stop>:

void motor_stop() {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_RESET);
 8001be4:	2200      	movs	r2, #0
 8001be6:	2108      	movs	r1, #8
 8001be8:	4809      	ldr	r0, [pc, #36]	@ (8001c10 <motor_stop+0x30>)
 8001bea:	f001 fc5b 	bl	80034a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_RESET);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	4807      	ldr	r0, [pc, #28]	@ (8001c10 <motor_stop+0x30>)
 8001bf4:	f001 fc56 	bl	80034a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_RESET);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2110      	movs	r1, #16
 8001bfc:	4804      	ldr	r0, [pc, #16]	@ (8001c10 <motor_stop+0x30>)
 8001bfe:	f001 fc51 	bl	80034a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2120      	movs	r1, #32
 8001c06:	4802      	ldr	r0, [pc, #8]	@ (8001c10 <motor_stop+0x30>)
 8001c08:	f001 fc4c 	bl	80034a4 <HAL_GPIO_WritePin>
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40020000 	.word	0x40020000

08001c14 <get_speed_pwm>:

int16_t get_speed_pwm(uint8_t speed) {
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
	int16_t val = (int16_t)(MOTOR_PWM_MAX / 100 * speed);
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	0112      	lsls	r2, r2, #4
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001c2e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3714      	adds	r7, #20
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <motor_set_speed>:

// Speed: 0 - 100
void motor_set_speed(uint8_t speed) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
	pwm_val_target = get_speed_pwm(speed);
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ffe1 	bl	8001c14 <get_speed_pwm>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461a      	mov	r2, r3
 8001c56:	4b09      	ldr	r3, [pc, #36]	@ (8001c7c <motor_set_speed+0x3c>)
 8001c58:	801a      	strh	r2, [r3, #0]
	l_pwm_val = pwm_val_target;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <motor_set_speed+0x3c>)
 8001c5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c60:	4b07      	ldr	r3, [pc, #28]	@ (8001c80 <motor_set_speed+0x40>)
 8001c62:	801a      	strh	r2, [r3, #0]
	r_pwm_val = pwm_val_target;
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <motor_set_speed+0x3c>)
 8001c66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <motor_set_speed+0x44>)
 8001c6c:	801a      	strh	r2, [r3, #0]
	set_pwm_LR();
 8001c6e:	f000 f821 	bl	8001cb4 <set_pwm_LR>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000424 	.word	0x20000424
 8001c80:	20000426 	.word	0x20000426
 8001c84:	20000428 	.word	0x20000428

08001c88 <reset_encoders>:

void reset_encoders() {
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
	// Reset timers
	__HAL_TIM_SET_COUNTER(l_enc_tim, 0);
 8001c8c:	4b07      	ldr	r3, [pc, #28]	@ (8001cac <reset_encoders+0x24>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(r_enc_tim, 0);
 8001c96:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <reset_encoders+0x28>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	2000041c 	.word	0x2000041c
 8001cb0:	20000420 	.word	0x20000420

08001cb4 <set_pwm_LR>:

void set_pwm_LR() {
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
	// Set L, R channels
	int16_t l_temp = l_pwm_val, r_temp = r_pwm_val;
 8001cba:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <set_pwm_LR+0x7c>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	80fb      	strh	r3, [r7, #6]
 8001cc0:	4b1c      	ldr	r3, [pc, #112]	@ (8001d34 <set_pwm_LR+0x80>)
 8001cc2:	881b      	ldrh	r3, [r3, #0]
 8001cc4:	80bb      	strh	r3, [r7, #4]

	if (l_temp > MOTOR_PWM_MAX) {
 8001cc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cca:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	dd03      	ble.n	8001cda <set_pwm_LR+0x26>
		l_temp = MOTOR_PWM_MAX;
 8001cd2:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001cd6:	80fb      	strh	r3, [r7, #6]
 8001cd8:	e005      	b.n	8001ce6 <set_pwm_LR+0x32>
	} else if (l_temp < MOTOR_PWM_MIN) {
 8001cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	da01      	bge.n	8001ce6 <set_pwm_LR+0x32>
		l_temp = MOTOR_PWM_MIN;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	80fb      	strh	r3, [r7, #6]
	} 

	if (r_temp > MOTOR_PWM_MAX) {
 8001ce6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cea:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	dd03      	ble.n	8001cfa <set_pwm_LR+0x46>
		r_temp = MOTOR_PWM_MAX;
 8001cf2:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001cf6:	80bb      	strh	r3, [r7, #4]
 8001cf8:	e005      	b.n	8001d06 <set_pwm_LR+0x52>
	} else if (r_temp < MOTOR_PWM_MIN) {
 8001cfa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	da01      	bge.n	8001d06 <set_pwm_LR+0x52>
		r_temp = MOTOR_PWM_MIN;
 8001d02:	2300      	movs	r3, #0
 8001d04:	80bb      	strh	r3, [r7, #4]
	}

	__HAL_TIM_SET_COMPARE(motor_pwm_tim, L_CHANNEL, l_pwm_val);
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <set_pwm_LR+0x7c>)
 8001d08:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <set_pwm_LR+0x84>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(motor_pwm_tim, R_CHANNEL, r_pwm_val);
 8001d14:	4b07      	ldr	r3, [pc, #28]	@ (8001d34 <set_pwm_LR+0x80>)
 8001d16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d1a:	4b07      	ldr	r3, [pc, #28]	@ (8001d38 <set_pwm_LR+0x84>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000426 	.word	0x20000426
 8001d34:	20000428 	.word	0x20000428
 8001d38:	20000418 	.word	0x20000418

08001d3c <stop>:


/*---------- Movement ----------*/
void stop() {
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
	motor_stop();
 8001d40:	f7ff ff4e 	bl	8001be0 <motor_stop>
	servo_set_dir(STRAIGHT);
 8001d44:	f241 2068 	movw	r0, #4712	@ 0x1268
 8001d48:	f000 fbd0 	bl	80024ec <servo_set_dir>
	HAL_Delay(200);
 8001d4c:	20c8      	movs	r0, #200	@ 0xc8
 8001d4e:	f001 f82d 	bl	8002dac <HAL_Delay>
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <forward>:

void forward(uint32_t distance) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
	float wheel_radius = 3.4;							// Wheel radius = 3.4 cm
 8001d60:	4b31      	ldr	r3, [pc, #196]	@ (8001e28 <forward+0xd0>)
 8001d62:	61bb      	str	r3, [r7, #24]
    float circumference = 2 * 3.14159 * wheel_radius;	// Calculate circumference
 8001d64:	69b8      	ldr	r0, [r7, #24]
 8001d66:	f7fe fbef 	bl	8000548 <__aeabi_f2d>
 8001d6a:	a32d      	add	r3, pc, #180	@ (adr r3, 8001e20 <forward+0xc8>)
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	f7fe fc42 	bl	80005f8 <__aeabi_dmul>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f7fe ff14 	bl	8000ba8 <__aeabi_d2f>
 8001d80:	4603      	mov	r3, r0
 8001d82:	617b      	str	r3, [r7, #20]
    uint32_t pulses_per_rev = 1550;						// Encoder's specification: 11 ppr * 30 = 330 (30x reducer)
 8001d84:	f240 630e 	movw	r3, #1550	@ 0x60e
 8001d88:	613b      	str	r3, [r7, #16]
    float pulses_per_cm = pulses_per_rev / circumference;
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	ee07 3a90 	vmov	s15, r3
 8001d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001d94:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d9c:	edc7 7a03 	vstr	s15, [r7, #12]
    uint32_t target_pulses = (uint32_t)(distance * pulses_per_cm);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	ee07 3a90 	vmov	s15, r3
 8001da6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001daa:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001db6:	ee17 3a90 	vmov	r3, s15
 8001dba:	60bb      	str	r3, [r7, #8]
    
    servo_set_dir(STRAIGHT);
 8001dbc:	f241 2068 	movw	r0, #4712	@ 0x1268
 8001dc0:	f000 fb94 	bl	80024ec <servo_set_dir>
    HAL_Delay(500);
 8001dc4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dc8:	f000 fff0 	bl	8002dac <HAL_Delay>
//	uint8_t buf[100];
//    sprintf(buf, "target_pulse: %u", target_pulses);
//	OLED_Clear();
//	OLED_ShowString(0, 15, buf);
//	OLED_Refresh_Gram();
	HAL_Delay(500);
 8001dcc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001dd0:	f000 ffec 	bl	8002dac <HAL_Delay>
    
    // Reset encoder count
    reset_encoders();
 8001dd4:	f7ff ff58 	bl	8001c88 <reset_encoders>
    uint32_t encoder_cnt = 65535;	// Initialize to 65535 after resetting the encoder
 8001dd8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001ddc:	61fb      	str	r3, [r7, #28]

    // Move forward
    motor_forward();
 8001dde:	f7ff fecb 	bl	8001b78 <motor_forward>
	OLED_Clear();
 8001de2:	f000 f9c1 	bl	8002168 <OLED_Clear>
	OLED_ShowString(0, 0, "encoder_cnt: ");
 8001de6:	4a11      	ldr	r2, [pc, #68]	@ (8001e2c <forward+0xd4>)
 8001de8:	2100      	movs	r1, #0
 8001dea:	2000      	movs	r0, #0
 8001dec:	f000 faae 	bl	800234c <OLED_ShowString>
	OLED_Refresh_Gram();
 8001df0:	f000 f982 	bl	80020f8 <OLED_Refresh_Gram>
    while (65535 - encoder_cnt < target_pulses) {
 8001df4:	e004      	b.n	8001e00 <forward+0xa8>
        encoder_cnt = __HAL_TIM_GET_COUNTER(l_enc_tim);
 8001df6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e30 <forward+0xd8>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfe:	61fb      	str	r3, [r7, #28]
    while (65535 - encoder_cnt < target_pulses) {
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001e06:	33ff      	adds	r3, #255	@ 0xff
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d8f3      	bhi.n	8001df6 <forward+0x9e>
//        OLED_ShowString(0, 30, buf);
//		OLED_Refresh_Gram();
    }
    
    // Stop the motors when the target distance is reached
    HAL_Delay(300);
 8001e0e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001e12:	f000 ffcb 	bl	8002dac <HAL_Delay>
}
 8001e16:	bf00      	nop
 8001e18:	3720      	adds	r7, #32
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	f01b866e 	.word	0xf01b866e
 8001e24:	401921f9 	.word	0x401921f9
 8001e28:	4059999a 	.word	0x4059999a
 8001e2c:	08009270 	.word	0x08009270
 8001e30:	2000041c 	.word	0x2000041c
 8001e34:	00000000 	.word	0x00000000

08001e38 <backward>:

void backward(uint32_t distance) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b088      	sub	sp, #32
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    float wheel_radius = 3.4;  							// Wheel radius (cm)
 8001e40:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef8 <backward+0xc0>)
 8001e42:	61bb      	str	r3, [r7, #24]
    float circumference = 2 * 3.14159 * wheel_radius;  	// Calculate circumference
 8001e44:	69b8      	ldr	r0, [r7, #24]
 8001e46:	f7fe fb7f 	bl	8000548 <__aeabi_f2d>
 8001e4a:	a329      	add	r3, pc, #164	@ (adr r3, 8001ef0 <backward+0xb8>)
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	f7fe fbd2 	bl	80005f8 <__aeabi_dmul>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe fea4 	bl	8000ba8 <__aeabi_d2f>
 8001e60:	4603      	mov	r3, r0
 8001e62:	617b      	str	r3, [r7, #20]
    uint32_t pulses_per_rev = 1550;  					// Encoder's specification
 8001e64:	f240 630e 	movw	r3, #1550	@ 0x60e
 8001e68:	613b      	str	r3, [r7, #16]
    float pulses_per_cm = pulses_per_rev / circumference;
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	ee07 3a90 	vmov	s15, r3
 8001e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e74:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e7c:	edc7 7a03 	vstr	s15, [r7, #12]
    uint32_t target_pulses = (uint32_t)(distance * pulses_per_cm);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	ee07 3a90 	vmov	s15, r3
 8001e86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e96:	ee17 3a90 	vmov	r3, s15
 8001e9a:	60bb      	str	r3, [r7, #8]
    
    servo_set_dir(STRAIGHT);
 8001e9c:	f241 2068 	movw	r0, #4712	@ 0x1268
 8001ea0:	f000 fb24 	bl	80024ec <servo_set_dir>
    HAL_Delay(500);
 8001ea4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ea8:	f000 ff80 	bl	8002dac <HAL_Delay>
//    OLED_ShowString(0, 0, buf);
//    OLED_Refresh_Gram();
//    HAL_Delay(1000);  // Delay to allow user to see target pulse

    // Reset encoder count
    reset_encoders();
 8001eac:	f7ff feec 	bl	8001c88 <reset_encoders>
    uint32_t encoder_cnt = 0;	// Initialize to 0 after resetting the encoder
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	61fb      	str	r3, [r7, #28]

    // Move backward
    motor_backward();
 8001eb4:	f7ff fe7a 	bl	8001bac <motor_backward>
    OLED_Clear();
 8001eb8:	f000 f956 	bl	8002168 <OLED_Clear>
    OLED_ShowString(0, 0, "encoder_cnt: ");
 8001ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8001efc <backward+0xc4>)
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f000 fa43 	bl	800234c <OLED_ShowString>
    OLED_Refresh_Gram();
 8001ec6:	f000 f917 	bl	80020f8 <OLED_Refresh_Gram>

    // Monitor encoder count until the target distance is reached
    while (encoder_cnt < target_pulses) {
 8001eca:	e004      	b.n	8001ed6 <backward+0x9e>
        encoder_cnt = __HAL_TIM_GET_COUNTER(l_enc_tim);
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <backward+0xc8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	61fb      	str	r3, [r7, #28]
    while (encoder_cnt < target_pulses) {
 8001ed6:	69fa      	ldr	r2, [r7, #28]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d3f6      	bcc.n	8001ecc <backward+0x94>
//        OLED_ShowString(0, 30, buf);
//        OLED_Refresh_Gram();
    }

    // Stop the motors when the target distance is reached
    HAL_Delay(300);
 8001ede:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001ee2:	f000 ff63 	bl	8002dac <HAL_Delay>
}
 8001ee6:	bf00      	nop
 8001ee8:	3720      	adds	r7, #32
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	f01b866e 	.word	0xf01b866e
 8001ef4:	401921f9 	.word	0x401921f9
 8001ef8:	4059999a 	.word	0x4059999a
 8001efc:	08009270 	.word	0x08009270
 8001f00:	2000041c 	.word	0x2000041c

08001f04 <forward_right>:

void forward_right() {
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b09c      	sub	sp, #112	@ 0x70
 8001f08:	af00      	add	r7, sp, #0
    HAL_Delay(200);  // Reduced delay before moving
 8001f0a:	20c8      	movs	r0, #200	@ 0xc8
 8001f0c:	f000 ff4e 	bl	8002dac <HAL_Delay>

    // Set servo position for right turn
    servo_set_dir(RIGHT);
 8001f10:	f641 504c 	movw	r0, #7500	@ 0x1d4c
 8001f14:	f000 faea 	bl	80024ec <servo_set_dir>
    HAL_Delay(200);  // Reduced delay after setting servo
 8001f18:	20c8      	movs	r0, #200	@ 0xc8
 8001f1a:	f000 ff47 	bl	8002dac <HAL_Delay>

    uint8_t buf[100];
    uint32_t right_circumference = 17500;  // Circumference of the right wheel (in mm)
 8001f1e:	f244 435c 	movw	r3, #17500	@ 0x445c
 8001f22:	66bb      	str	r3, [r7, #104]	@ 0x68

    // Reset encoder count
    reset_encoders();
 8001f24:	f7ff feb0 	bl	8001c88 <reset_encoders>
    uint32_t encoder_cnt = 65535;  // Initialize encoder count to 0 after resetting
 8001f28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f2c:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // Length of the arc to travel based on the angle
    float arc_length = 90.0 / 360 * right_circumference;
 8001f2e:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001f30:	f7fe fae8 	bl	8000504 <__aeabi_ui2d>
 8001f34:	f04f 0200 	mov.w	r2, #0
 8001f38:	4b14      	ldr	r3, [pc, #80]	@ (8001f8c <forward_right+0x88>)
 8001f3a:	f7fe fb5d 	bl	80005f8 <__aeabi_dmul>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	460b      	mov	r3, r1
 8001f42:	4610      	mov	r0, r2
 8001f44:	4619      	mov	r1, r3
 8001f46:	f7fe fe2f 	bl	8000ba8 <__aeabi_d2f>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	667b      	str	r3, [r7, #100]	@ 0x64

    // Move forward
    motor_forward();
 8001f4e:	f7ff fe13 	bl	8001b78 <motor_forward>
//    OLED_Clear();
//    OLED_ShowString(0, 0, "encoder_cnt: ");
//    OLED_Refresh_Gram();

    // Loop until the desired arc length is reached
    while (65535 - encoder_cnt < arc_length) {
 8001f52:	e004      	b.n	8001f5e <forward_right+0x5a>
        encoder_cnt = __HAL_TIM_GET_COUNTER(l_enc_tim);  // Update encoder count
 8001f54:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <forward_right+0x8c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    while (65535 - encoder_cnt < arc_length) {
 8001f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f60:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001f64:	33ff      	adds	r3, #255	@ 0xff
 8001f66:	ee07 3a90 	vmov	s15, r3
 8001f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6e:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8001f72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7a:	dceb      	bgt.n	8001f54 <forward_right+0x50>
//        OLED_ShowString(0, 30, buf);  // Display current encoder count
//        OLED_Refresh_Gram();  // Refresh OLED display
    }

    // Stop the motors when the target distance is reached
    HAL_Delay(300);
 8001f7c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8001f80:	f000 ff14 	bl	8002dac <HAL_Delay>
}
 8001f84:	bf00      	nop
 8001f86:	3770      	adds	r7, #112	@ 0x70
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	3fd00000 	.word	0x3fd00000
 8001f90:	2000041c 	.word	0x2000041c

08001f94 <forward_left>:

void forward_left() {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b09c      	sub	sp, #112	@ 0x70
 8001f98:	af00      	add	r7, sp, #0
	HAL_Delay(200);  // Reduced delay before moving
 8001f9a:	20c8      	movs	r0, #200	@ 0xc8
 8001f9c:	f000 ff06 	bl	8002dac <HAL_Delay>

	// Set servo position for right turn
	servo_set_dir(LEFT);
 8001fa0:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001fa4:	f000 faa2 	bl	80024ec <servo_set_dir>
	HAL_Delay(200);  // Reduced delay after setting servo
 8001fa8:	20c8      	movs	r0, #200	@ 0xc8
 8001faa:	f000 feff 	bl	8002dac <HAL_Delay>

	uint8_t buf[100];
//	uint32_t left_circumference = 8575;
	uint32_t left_circumference = 15000;
 8001fae:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8001fb2:	66bb      	str	r3, [r7, #104]	@ 0x68
    // Reset encoder count
	reset_encoders();
 8001fb4:	f7ff fe68 	bl	8001c88 <reset_encoders>
	uint32_t encoder_cnt = 65535;
 8001fb8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fbc:	66fb      	str	r3, [r7, #108]	@ 0x6c

    // Length
    float arc_length = 90.0 / 360 * left_circumference;
 8001fbe:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001fc0:	f7fe faa0 	bl	8000504 <__aeabi_ui2d>
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <forward_left+0x9c>)
 8001fca:	f7fe fb15 	bl	80005f8 <__aeabi_dmul>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4610      	mov	r0, r2
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f7fe fde7 	bl	8000ba8 <__aeabi_d2f>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	667b      	str	r3, [r7, #100]	@ 0x64

    // Move forward
	motor_forward();
 8001fde:	f7ff fdcb 	bl	8001b78 <motor_forward>

	OLED_Clear();
 8001fe2:	f000 f8c1 	bl	8002168 <OLED_Clear>
	OLED_ShowString(0, 0, "encoder_cnt: ");
 8001fe6:	4a13      	ldr	r2, [pc, #76]	@ (8002034 <forward_left+0xa0>)
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2000      	movs	r0, #0
 8001fec:	f000 f9ae 	bl	800234c <OLED_ShowString>
	OLED_Refresh_Gram();
 8001ff0:	f000 f882 	bl	80020f8 <OLED_Refresh_Gram>

    while (65535 - encoder_cnt < arc_length) {
 8001ff4:	e004      	b.n	8002000 <forward_left+0x6c>
    	encoder_cnt = __HAL_TIM_GET_COUNTER(l_enc_tim);  // Update encoder count
 8001ff6:	4b10      	ldr	r3, [pc, #64]	@ (8002038 <forward_left+0xa4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    while (65535 - encoder_cnt < arc_length) {
 8002000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002002:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8002006:	33ff      	adds	r3, #255	@ 0xff
 8002008:	ee07 3a90 	vmov	s15, r3
 800200c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002010:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8002014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800201c:	dceb      	bgt.n	8001ff6 <forward_left+0x62>
//    	OLED_ShowString(0, 30, buf);  // Display current encoder count
//    	OLED_Refresh_Gram();  // Refresh OLED display
    }

    // Stop the motors when the target distance is reached
    HAL_Delay(300);
 800201e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002022:	f000 fec3 	bl	8002dac <HAL_Delay>
}
 8002026:	bf00      	nop
 8002028:	3770      	adds	r7, #112	@ 0x70
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	3fd00000 	.word	0x3fd00000
 8002034:	08009270 	.word	0x08009270
 8002038:	2000041c 	.word	0x2000041c

0800203c <backward_right>:

void backward_right() {
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	// Servo direction: RIGHT
	servo_set_dir(RIGHT);
 8002040:	f641 504c 	movw	r0, #7500	@ 0x1d4c
 8002044:	f000 fa52 	bl	80024ec <servo_set_dir>
	motor_backward();
 8002048:	f7ff fdb0 	bl	8001bac <motor_backward>
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}

08002050 <backward_left>:

void backward_left() {
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	// Servo direction: LEFT
	servo_set_dir(LEFT);
 8002054:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8002058:	f000 fa48 	bl	80024ec <servo_set_dir>
	motor_backward();
 800205c:	f7ff fda6 	bl	8001bac <motor_backward>
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <OLED_WR_Byte>:
			   1 => sending data
			   0 => sending command
Output  : none

**************************************************************************/
void OLED_WR_Byte(uint8_t dat, uint8_t DataCmd) {
 8002064:	b580      	push	{r7, lr}
 8002066:	b084      	sub	sp, #16
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	460a      	mov	r2, r1
 800206e:	71fb      	strb	r3, [r7, #7]
 8002070:	4613      	mov	r3, r2
 8002072:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if (DataCmd == 1) {		// Data write
 8002074:	79bb      	ldrb	r3, [r7, #6]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d106      	bne.n	8002088 <OLED_WR_Byte+0x24>
		OLED_RS_Set();		// Set the D/C# line
 800207a:	2201      	movs	r2, #1
 800207c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002080:	481c      	ldr	r0, [pc, #112]	@ (80020f4 <OLED_WR_Byte+0x90>)
 8002082:	f001 fa0f 	bl	80034a4 <HAL_GPIO_WritePin>
 8002086:	e005      	b.n	8002094 <OLED_WR_Byte+0x30>
	} else {				// Command write
		OLED_RS_Clr();
 8002088:	2200      	movs	r2, #0
 800208a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800208e:	4819      	ldr	r0, [pc, #100]	@ (80020f4 <OLED_WR_Byte+0x90>)
 8002090:	f001 fa08 	bl	80034a4 <HAL_GPIO_WritePin>
	}						// Clear the D/C# line

	for(i = 0; i < 8 ; i++) {
 8002094:	2300      	movs	r3, #0
 8002096:	73fb      	strb	r3, [r7, #15]
 8002098:	e01e      	b.n	80020d8 <OLED_WR_Byte+0x74>
		OLED_SCLK_Clr();
 800209a:	2200      	movs	r2, #0
 800209c:	2120      	movs	r1, #32
 800209e:	4815      	ldr	r0, [pc, #84]	@ (80020f4 <OLED_WR_Byte+0x90>)
 80020a0:	f001 fa00 	bl	80034a4 <HAL_GPIO_WritePin>
		(dat & 0x80) ? OLED_SDIN_Set(): OLED_SDIN_Clr();
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da05      	bge.n	80020b8 <OLED_WR_Byte+0x54>
 80020ac:	2201      	movs	r2, #1
 80020ae:	2140      	movs	r1, #64	@ 0x40
 80020b0:	4810      	ldr	r0, [pc, #64]	@ (80020f4 <OLED_WR_Byte+0x90>)
 80020b2:	f001 f9f7 	bl	80034a4 <HAL_GPIO_WritePin>
 80020b6:	e004      	b.n	80020c2 <OLED_WR_Byte+0x5e>
 80020b8:	2200      	movs	r2, #0
 80020ba:	2140      	movs	r1, #64	@ 0x40
 80020bc:	480d      	ldr	r0, [pc, #52]	@ (80020f4 <OLED_WR_Byte+0x90>)
 80020be:	f001 f9f1 	bl	80034a4 <HAL_GPIO_WritePin>
		dat <<= 1;
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	71fb      	strb	r3, [r7, #7]
		OLED_SCLK_Set();
 80020c8:	2201      	movs	r2, #1
 80020ca:	2120      	movs	r1, #32
 80020cc:	4809      	ldr	r0, [pc, #36]	@ (80020f4 <OLED_WR_Byte+0x90>)
 80020ce:	f001 f9e9 	bl	80034a4 <HAL_GPIO_WritePin>
	for(i = 0; i < 8 ; i++) {
 80020d2:	7bfb      	ldrb	r3, [r7, #15]
 80020d4:	3301      	adds	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
 80020d8:	7bfb      	ldrb	r3, [r7, #15]
 80020da:	2b07      	cmp	r3, #7
 80020dc:	d9dd      	bls.n	800209a <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();			// Keep the D/C# line high upon exit
 80020de:	2201      	movs	r2, #1
 80020e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80020e4:	4803      	ldr	r0, [pc, #12]	@ (80020f4 <OLED_WR_Byte+0x90>)
 80020e6:	f001 f9dd 	bl	80034a4 <HAL_GPIO_WritePin>
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000

080020f8 <OLED_Refresh_Gram>:

// **************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram() {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i = 0; i < 8; i++){
 80020fe:	2300      	movs	r3, #0
 8002100:	71fb      	strb	r3, [r7, #7]
 8002102:	e026      	b.n	8002152 <OLED_Refresh_Gram+0x5a>
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 8002104:	79fb      	ldrb	r3, [r7, #7]
 8002106:	3b50      	subs	r3, #80	@ 0x50
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2100      	movs	r1, #0
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff ffa9 	bl	8002064 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 8002112:	2100      	movs	r1, #0
 8002114:	2000      	movs	r0, #0
 8002116:	f7ff ffa5 	bl	8002064 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 800211a:	2100      	movs	r1, #0
 800211c:	2010      	movs	r0, #16
 800211e:	f7ff ffa1 	bl	8002064 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8002122:	2300      	movs	r3, #0
 8002124:	71bb      	strb	r3, [r7, #6]
 8002126:	e00d      	b.n	8002144 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 8002128:	79ba      	ldrb	r2, [r7, #6]
 800212a:	79fb      	ldrb	r3, [r7, #7]
 800212c:	490d      	ldr	r1, [pc, #52]	@ (8002164 <OLED_Refresh_Gram+0x6c>)
 800212e:	00d2      	lsls	r2, r2, #3
 8002130:	440a      	add	r2, r1
 8002132:	4413      	add	r3, r2
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	2101      	movs	r1, #1
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff ff93 	bl	8002064 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800213e:	79bb      	ldrb	r3, [r7, #6]
 8002140:	3301      	adds	r3, #1
 8002142:	71bb      	strb	r3, [r7, #6]
 8002144:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002148:	2b00      	cmp	r3, #0
 800214a:	daed      	bge.n	8002128 <OLED_Refresh_Gram+0x30>
	for(i = 0; i < 8; i++){
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	3301      	adds	r3, #1
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	79fb      	ldrb	r3, [r7, #7]
 8002154:	2b07      	cmp	r3, #7
 8002156:	d9d5      	bls.n	8002104 <OLED_Refresh_Gram+0xc>
	}
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	2000042c 	.word	0x2000042c

08002168 <OLED_Clear>:

// **************************************************************************
// Clear OLED
void OLED_Clear() {
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for(i = 0; i < 8; i++)
 800216e:	2300      	movs	r3, #0
 8002170:	71fb      	strb	r3, [r7, #7]
 8002172:	e014      	b.n	800219e <OLED_Clear+0x36>
		for(n = 0; n < 128; n++)
 8002174:	2300      	movs	r3, #0
 8002176:	71bb      	strb	r3, [r7, #6]
 8002178:	e00a      	b.n	8002190 <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 800217a:	79ba      	ldrb	r2, [r7, #6]
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	490c      	ldr	r1, [pc, #48]	@ (80021b0 <OLED_Clear+0x48>)
 8002180:	00d2      	lsls	r2, r2, #3
 8002182:	440a      	add	r2, r1
 8002184:	4413      	add	r3, r2
 8002186:	2200      	movs	r2, #0
 8002188:	701a      	strb	r2, [r3, #0]
		for(n = 0; n < 128; n++)
 800218a:	79bb      	ldrb	r3, [r7, #6]
 800218c:	3301      	adds	r3, #1
 800218e:	71bb      	strb	r3, [r7, #6]
 8002190:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002194:	2b00      	cmp	r3, #0
 8002196:	daf0      	bge.n	800217a <OLED_Clear+0x12>
	for(i = 0; i < 8; i++)
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	3301      	adds	r3, #1
 800219c:	71fb      	strb	r3, [r7, #7]
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	2b07      	cmp	r3, #7
 80021a2:	d9e7      	bls.n	8002174 <OLED_Clear+0xc>
	OLED_Refresh_Gram();	// Refresh
 80021a4:	f7ff ffa8 	bl	80020f8 <OLED_Refresh_Gram>
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2000042c 	.word	0x2000042c

080021b4 <OLED_DrawPoint>:
	OLED_WR_Byte(0XAE, OLED_CMD);	// DISPLAY OFF
}

// **************************************************************************
// Draw A Point
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t) {
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
 80021be:	460b      	mov	r3, r1
 80021c0:	71bb      	strb	r3, [r7, #6]
 80021c2:	4613      	mov	r3, r2
 80021c4:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	73fb      	strb	r3, [r7, #15]

	if (x > 127 || y > 63)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	db41      	blt.n	8002256 <OLED_DrawPoint+0xa2>
 80021d2:	79bb      	ldrb	r3, [r7, #6]
 80021d4:	2b3f      	cmp	r3, #63	@ 0x3f
 80021d6:	d83e      	bhi.n	8002256 <OLED_DrawPoint+0xa2>
		return;		// Out of reach

	pos = 7 - y/8;
 80021d8:	79bb      	ldrb	r3, [r7, #6]
 80021da:	08db      	lsrs	r3, r3, #3
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	f1c3 0307 	rsb	r3, r3, #7
 80021e2:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 80021e4:	79bb      	ldrb	r3, [r7, #6]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7-bx);
 80021ec:	7b7b      	ldrb	r3, [r7, #13]
 80021ee:	f1c3 0307 	rsb	r3, r3, #7
 80021f2:	2201      	movs	r2, #1
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	73fb      	strb	r3, [r7, #15]

	if (t) {
 80021fa:	797b      	ldrb	r3, [r7, #5]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d012      	beq.n	8002226 <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 8002200:	79fa      	ldrb	r2, [r7, #7]
 8002202:	7bbb      	ldrb	r3, [r7, #14]
 8002204:	4917      	ldr	r1, [pc, #92]	@ (8002264 <OLED_DrawPoint+0xb0>)
 8002206:	00d2      	lsls	r2, r2, #3
 8002208:	440a      	add	r2, r1
 800220a:	4413      	add	r3, r2
 800220c:	7818      	ldrb	r0, [r3, #0]
 800220e:	79fa      	ldrb	r2, [r7, #7]
 8002210:	7bbb      	ldrb	r3, [r7, #14]
 8002212:	7bf9      	ldrb	r1, [r7, #15]
 8002214:	4301      	orrs	r1, r0
 8002216:	b2c8      	uxtb	r0, r1
 8002218:	4912      	ldr	r1, [pc, #72]	@ (8002264 <OLED_DrawPoint+0xb0>)
 800221a:	00d2      	lsls	r2, r2, #3
 800221c:	440a      	add	r2, r1
 800221e:	4413      	add	r3, r2
 8002220:	4602      	mov	r2, r0
 8002222:	701a      	strb	r2, [r3, #0]
 8002224:	e018      	b.n	8002258 <OLED_DrawPoint+0xa4>
	} else {
		OLED_GRAM[x][pos] &= ~temp;
 8002226:	79fa      	ldrb	r2, [r7, #7]
 8002228:	7bbb      	ldrb	r3, [r7, #14]
 800222a:	490e      	ldr	r1, [pc, #56]	@ (8002264 <OLED_DrawPoint+0xb0>)
 800222c:	00d2      	lsls	r2, r2, #3
 800222e:	440a      	add	r2, r1
 8002230:	4413      	add	r3, r2
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b25a      	sxtb	r2, r3
 8002236:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800223a:	43db      	mvns	r3, r3
 800223c:	b25b      	sxtb	r3, r3
 800223e:	4013      	ands	r3, r2
 8002240:	b259      	sxtb	r1, r3
 8002242:	79fa      	ldrb	r2, [r7, #7]
 8002244:	7bbb      	ldrb	r3, [r7, #14]
 8002246:	b2c8      	uxtb	r0, r1
 8002248:	4906      	ldr	r1, [pc, #24]	@ (8002264 <OLED_DrawPoint+0xb0>)
 800224a:	00d2      	lsls	r2, r2, #3
 800224c:	440a      	add	r2, r1
 800224e:	4413      	add	r3, r2
 8002250:	4602      	mov	r2, r0
 8002252:	701a      	strb	r2, [r3, #0]
 8002254:	e000      	b.n	8002258 <OLED_DrawPoint+0xa4>
		return;		// Out of reach
 8002256:	bf00      	nop
	}
}
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	2000042c 	.word	0x2000042c

08002268 <OLED_ShowChar>:

// **************************************************************************
// Show Char
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode) {
 8002268:	b590      	push	{r4, r7, lr}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	4604      	mov	r4, r0
 8002270:	4608      	mov	r0, r1
 8002272:	4611      	mov	r1, r2
 8002274:	461a      	mov	r2, r3
 8002276:	4623      	mov	r3, r4
 8002278:	71fb      	strb	r3, [r7, #7]
 800227a:	4603      	mov	r3, r0
 800227c:	71bb      	strb	r3, [r7, #6]
 800227e:	460b      	mov	r3, r1
 8002280:	717b      	strb	r3, [r7, #5]
 8002282:	4613      	mov	r3, r2
 8002284:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 8002286:	79bb      	ldrb	r3, [r7, #6]
 8002288:	733b      	strb	r3, [r7, #12]

	chr = chr - ' ';
 800228a:	797b      	ldrb	r3, [r7, #5]
 800228c:	3b20      	subs	r3, #32
 800228e:	717b      	strb	r3, [r7, #5]
    for(t = 0; t < size; t++) {
 8002290:	2300      	movs	r3, #0
 8002292:	73bb      	strb	r3, [r7, #14]
 8002294:	e04d      	b.n	8002332 <OLED_ShowChar+0xca>
		if (size == 12)
 8002296:	793b      	ldrb	r3, [r7, #4]
 8002298:	2b0c      	cmp	r3, #12
 800229a:	d10b      	bne.n	80022b4 <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t];		// 1206 Size
 800229c:	797a      	ldrb	r2, [r7, #5]
 800229e:	7bb9      	ldrb	r1, [r7, #14]
 80022a0:	4828      	ldr	r0, [pc, #160]	@ (8002344 <OLED_ShowChar+0xdc>)
 80022a2:	4613      	mov	r3, r2
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	4413      	add	r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	4403      	add	r3, r0
 80022ac:	440b      	add	r3, r1
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	73fb      	strb	r3, [r7, #15]
 80022b2:	e007      	b.n	80022c4 <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t];		// 1608 Size
 80022b4:	797a      	ldrb	r2, [r7, #5]
 80022b6:	7bbb      	ldrb	r3, [r7, #14]
 80022b8:	4923      	ldr	r1, [pc, #140]	@ (8002348 <OLED_ShowChar+0xe0>)
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	440a      	add	r2, r1
 80022be:	4413      	add	r3, r2
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	73fb      	strb	r3, [r7, #15]

        for(t1 = 0; t1 < 8; t1++) {
 80022c4:	2300      	movs	r3, #0
 80022c6:	737b      	strb	r3, [r7, #13]
 80022c8:	e02d      	b.n	8002326 <OLED_ShowChar+0xbe>
			if (temp & 0x80) {
 80022ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	da07      	bge.n	80022e2 <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 80022d2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80022d6:	79b9      	ldrb	r1, [r7, #6]
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff6a 	bl	80021b4 <OLED_DrawPoint>
 80022e0:	e00c      	b.n	80022fc <OLED_ShowChar+0x94>
			} else {
				OLED_DrawPoint(x, y, !mode);
 80022e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	bf0c      	ite	eq
 80022ea:	2301      	moveq	r3, #1
 80022ec:	2300      	movne	r3, #0
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	461a      	mov	r2, r3
 80022f2:	79b9      	ldrb	r1, [r7, #6]
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff ff5c 	bl	80021b4 <OLED_DrawPoint>
			}

			temp <<= 1;
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
			y++;
 8002302:	79bb      	ldrb	r3, [r7, #6]
 8002304:	3301      	adds	r3, #1
 8002306:	71bb      	strb	r3, [r7, #6]

			if((y - y0) == size) {
 8002308:	79ba      	ldrb	r2, [r7, #6]
 800230a:	7b3b      	ldrb	r3, [r7, #12]
 800230c:	1ad2      	subs	r2, r2, r3
 800230e:	793b      	ldrb	r3, [r7, #4]
 8002310:	429a      	cmp	r2, r3
 8002312:	d105      	bne.n	8002320 <OLED_ShowChar+0xb8>
				y = y0;
 8002314:	7b3b      	ldrb	r3, [r7, #12]
 8002316:	71bb      	strb	r3, [r7, #6]
				x++;
 8002318:	79fb      	ldrb	r3, [r7, #7]
 800231a:	3301      	adds	r3, #1
 800231c:	71fb      	strb	r3, [r7, #7]
				break;
 800231e:	e005      	b.n	800232c <OLED_ShowChar+0xc4>
        for(t1 = 0; t1 < 8; t1++) {
 8002320:	7b7b      	ldrb	r3, [r7, #13]
 8002322:	3301      	adds	r3, #1
 8002324:	737b      	strb	r3, [r7, #13]
 8002326:	7b7b      	ldrb	r3, [r7, #13]
 8002328:	2b07      	cmp	r3, #7
 800232a:	d9ce      	bls.n	80022ca <OLED_ShowChar+0x62>
    for(t = 0; t < size; t++) {
 800232c:	7bbb      	ldrb	r3, [r7, #14]
 800232e:	3301      	adds	r3, #1
 8002330:	73bb      	strb	r3, [r7, #14]
 8002332:	7bba      	ldrb	r2, [r7, #14]
 8002334:	793b      	ldrb	r3, [r7, #4]
 8002336:	429a      	cmp	r2, r3
 8002338:	d3ad      	bcc.n	8002296 <OLED_ShowChar+0x2e>
			}
		}
    }
}
 800233a:	bf00      	nop
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	bd90      	pop	{r4, r7, pc}
 8002344:	080092e4 	.word	0x080092e4
 8002348:	08009758 	.word	0x08009758

0800234c <OLED_ShowString>:
	}
}

// **************************************************************************
// Show The String
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af02      	add	r7, sp, #8
 8002352:	4603      	mov	r3, r0
 8002354:	603a      	str	r2, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
 8002358:	460b      	mov	r3, r1
 800235a:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
    while (*p != '\0') {
 800235c:	e01f      	b.n	800239e <OLED_ShowString+0x52>
        if (x > MAX_CHAR_POSX){
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b7a      	cmp	r3, #122	@ 0x7a
 8002362:	d904      	bls.n	800236e <OLED_ShowString+0x22>
        	x = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	71fb      	strb	r3, [r7, #7]
        	y += 16;
 8002368:	79bb      	ldrb	r3, [r7, #6]
 800236a:	3310      	adds	r3, #16
 800236c:	71bb      	strb	r3, [r7, #6]
        }

        if (y > MAX_CHAR_POSY) {
 800236e:	79bb      	ldrb	r3, [r7, #6]
 8002370:	2b3a      	cmp	r3, #58	@ 0x3a
 8002372:	d905      	bls.n	8002380 <OLED_ShowString+0x34>
        	y = x = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	71fb      	strb	r3, [r7, #7]
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	71bb      	strb	r3, [r7, #6]
        	OLED_Clear();
 800237c:	f7ff fef4 	bl	8002168 <OLED_Clear>
        }

        OLED_ShowChar(x, y, *p, 12, 1);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	79b9      	ldrb	r1, [r7, #6]
 8002386:	79f8      	ldrb	r0, [r7, #7]
 8002388:	2301      	movs	r3, #1
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	230c      	movs	r3, #12
 800238e:	f7ff ff6b 	bl	8002268 <OLED_ShowChar>
        x += 8;
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	3308      	adds	r3, #8
 8002396:	71fb      	strb	r3, [r7, #7]
        p++;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	3301      	adds	r3, #1
 800239c:	603b      	str	r3, [r7, #0]
    while (*p != '\0') {
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d1db      	bne.n	800235e <OLED_ShowString+0x12>
    }
}
 80023a6:	bf00      	nop
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <OLED_Init>:

void OLED_Init() {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80023b4:	f001 f9d4 	bl	8003760 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);	// turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles
 80023b8:	4b41      	ldr	r3, [pc, #260]	@ (80024c0 <OLED_Init+0x110>)
 80023ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023bc:	4a40      	ldr	r2, [pc, #256]	@ (80024c0 <OLED_Init+0x110>)
 80023be:	f023 0301 	bic.w	r3, r3, #1
 80023c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c4:	4b3e      	ldr	r3, [pc, #248]	@ (80024c0 <OLED_Init+0x110>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c8:	4a3d      	ldr	r2, [pc, #244]	@ (80024c0 <OLED_Init+0x110>)
 80023ca:	f023 0304 	bic.w	r3, r3, #4
 80023ce:	6713      	str	r3, [r2, #112]	@ 0x70
										// LSE oscillator switch off to let PC13 PC14 PC15 be IO


	HAL_PWR_DisableBkUpAccess();
 80023d0:	f001 f9da 	bl	8003788 <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 80023d4:	2200      	movs	r2, #0
 80023d6:	2180      	movs	r1, #128	@ 0x80
 80023d8:	483a      	ldr	r0, [pc, #232]	@ (80024c4 <OLED_Init+0x114>)
 80023da:	f001 f863 	bl	80034a4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80023de:	2064      	movs	r0, #100	@ 0x64
 80023e0:	f000 fce4 	bl	8002dac <HAL_Delay>
	OLED_RST_Set();
 80023e4:	2201      	movs	r2, #1
 80023e6:	2180      	movs	r1, #128	@ 0x80
 80023e8:	4836      	ldr	r0, [pc, #216]	@ (80024c4 <OLED_Init+0x114>)
 80023ea:	f001 f85b 	bl	80034a4 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD);	// Off Display
 80023ee:	2100      	movs	r1, #0
 80023f0:	20ae      	movs	r0, #174	@ 0xae
 80023f2:	f7ff fe37 	bl	8002064 <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD);	// Set Oscillator Division
 80023f6:	2100      	movs	r1, #0
 80023f8:	20d5      	movs	r0, #213	@ 0xd5
 80023fa:	f7ff fe33 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);		// [3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80023fe:	2100      	movs	r1, #0
 8002400:	2050      	movs	r0, #80	@ 0x50
 8002402:	f7ff fe2f 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD);	// multiplex ratio
 8002406:	2100      	movs	r1, #0
 8002408:	20a8      	movs	r0, #168	@ 0xa8
 800240a:	f7ff fe2b 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD);	// duty = 0X3F(1/64)
 800240e:	2100      	movs	r1, #0
 8002410:	203f      	movs	r0, #63	@ 0x3f
 8002412:	f7ff fe27 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD);	// set display offset
 8002416:	2100      	movs	r1, #0
 8002418:	20d3      	movs	r0, #211	@ 0xd3
 800241a:	f7ff fe23 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD);	// 0
 800241e:	2100      	movs	r1, #0
 8002420:	2000      	movs	r0, #0
 8002422:	f7ff fe1f 	bl	8002064 <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD);	// set display start line [5:0]- from 0-63. RESET
 8002426:	2100      	movs	r1, #0
 8002428:	2040      	movs	r0, #64	@ 0x40
 800242a:	f7ff fe1b 	bl	8002064 <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD);	// Set charge pump
 800242e:	2100      	movs	r1, #0
 8002430:	208d      	movs	r0, #141	@ 0x8d
 8002432:	f7ff fe17 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); 	// Enable Charge Pump
 8002436:	2100      	movs	r1, #0
 8002438:	2014      	movs	r0, #20
 800243a:	f7ff fe13 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD);	// Set Memory Addressing Mode
 800243e:	2100      	movs	r1, #0
 8002440:	2020      	movs	r0, #32
 8002442:	f7ff fe0f 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD);	// Page Addressing Mode (RESET)
 8002446:	2100      	movs	r1, #0
 8002448:	2002      	movs	r0, #2
 800244a:	f7ff fe0b 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD);	// Set segment remap, bit0:0,0->0;1,0->127;
 800244e:	2100      	movs	r1, #0
 8002450:	20a1      	movs	r0, #161	@ 0xa1
 8002452:	f7ff fe07 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD);	// Set COM Output Scan Direction
 8002456:	2100      	movs	r1, #0
 8002458:	20c0      	movs	r0, #192	@ 0xc0
 800245a:	f7ff fe03 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD);	// Set COM Pins
 800245e:	2100      	movs	r1, #0
 8002460:	20da      	movs	r0, #218	@ 0xda
 8002462:	f7ff fdff 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);	// [5:4] setting
 8002466:	2100      	movs	r1, #0
 8002468:	2012      	movs	r0, #18
 800246a:	f7ff fdfb 	bl	8002064 <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD);	// Contrast Control
 800246e:	2100      	movs	r1, #0
 8002470:	2081      	movs	r0, #129	@ 0x81
 8002472:	f7ff fdf7 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD);	// 1~256; Default: 0X7F
 8002476:	2100      	movs	r1, #0
 8002478:	20ef      	movs	r0, #239	@ 0xef
 800247a:	f7ff fdf3 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD);	// Set Pre-charge Period
 800247e:	2100      	movs	r1, #0
 8002480:	20d9      	movs	r0, #217	@ 0xd9
 8002482:	f7ff fdef 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD);	// [3:0],PHASE 1;[7:4],PHASE 2;
 8002486:	2100      	movs	r1, #0
 8002488:	20f1      	movs	r0, #241	@ 0xf1
 800248a:	f7ff fdeb 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD);	// Set VCOMH
 800248e:	2100      	movs	r1, #0
 8002490:	20db      	movs	r0, #219	@ 0xdb
 8002492:	f7ff fde7 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD);	// [6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8002496:	2100      	movs	r1, #0
 8002498:	2030      	movs	r0, #48	@ 0x30
 800249a:	f7ff fde3 	bl	8002064 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD);	// Enable display outputs according to the GDDRAM contents
 800249e:	2100      	movs	r1, #0
 80024a0:	20a4      	movs	r0, #164	@ 0xa4
 80024a2:	f7ff fddf 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD);	// Set normal display
 80024a6:	2100      	movs	r1, #0
 80024a8:	20a6      	movs	r0, #166	@ 0xa6
 80024aa:	f7ff fddb 	bl	8002064 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);	// DISPLAY ON
 80024ae:	2100      	movs	r1, #0
 80024b0:	20af      	movs	r0, #175	@ 0xaf
 80024b2:	f7ff fdd7 	bl	8002064 <OLED_WR_Byte>
	OLED_Clear();
 80024b6:	f7ff fe57 	bl	8002168 <OLED_Clear>
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023800 	.word	0x40023800
 80024c4:	40021000 	.word	0x40021000

080024c8 <servo_init>:
#include "servo.h"


TIM_HandleTypeDef* pwm_tim;

void servo_init(TIM_HandleTypeDef* pwm) {
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	pwm_tim = pwm;
 80024d0:	4a05      	ldr	r2, [pc, #20]	@ (80024e8 <servo_init+0x20>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pwm, SERVO_PWM_CHANNEL);
 80024d6:	2100      	movs	r1, #0
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f001 fed3 	bl	8004284 <HAL_TIM_PWM_Start>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	2000082c 	.word	0x2000082c

080024ec <servo_set_dir>:

void servo_set_dir(uint32_t val) {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	HAL_Delay(500);
 80024f4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80024f8:	f000 fc58 	bl	8002dac <HAL_Delay>
	pwm_tim->Instance->CCR1 = val;
 80024fc:	4b04      	ldr	r3, [pc, #16]	@ (8002510 <servo_set_dir+0x24>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002506:	bf00      	nop
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	2000082c 	.word	0x2000082c

08002514 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	607b      	str	r3, [r7, #4]
 800251e:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <HAL_MspInit+0x4c>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002522:	4a0f      	ldr	r2, [pc, #60]	@ (8002560 <HAL_MspInit+0x4c>)
 8002524:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002528:	6453      	str	r3, [r2, #68]	@ 0x44
 800252a:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <HAL_MspInit+0x4c>)
 800252c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800252e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002532:	607b      	str	r3, [r7, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	603b      	str	r3, [r7, #0]
 800253a:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <HAL_MspInit+0x4c>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	4a08      	ldr	r2, [pc, #32]	@ (8002560 <HAL_MspInit+0x4c>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002544:	6413      	str	r3, [r2, #64]	@ 0x40
 8002546:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <HAL_MspInit+0x4c>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40023800 	.word	0x40023800

08002564 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	@ 0x28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800256c:	f107 0314 	add.w	r3, r7, #20
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a19      	ldr	r2, [pc, #100]	@ (80025e8 <HAL_I2C_MspInit+0x84>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d12c      	bne.n	80025e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	4b18      	ldr	r3, [pc, #96]	@ (80025ec <HAL_I2C_MspInit+0x88>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	4a17      	ldr	r2, [pc, #92]	@ (80025ec <HAL_I2C_MspInit+0x88>)
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	6313      	str	r3, [r2, #48]	@ 0x30
 8002596:	4b15      	ldr	r3, [pc, #84]	@ (80025ec <HAL_I2C_MspInit+0x88>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 80025a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80025a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025a8:	2312      	movs	r3, #18
 80025aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b0:	2303      	movs	r3, #3
 80025b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025b4:	2304      	movs	r3, #4
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b8:	f107 0314 	add.w	r3, r7, #20
 80025bc:	4619      	mov	r1, r3
 80025be:	480c      	ldr	r0, [pc, #48]	@ (80025f0 <HAL_I2C_MspInit+0x8c>)
 80025c0:	f000 fdbc 	bl	800313c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	4b08      	ldr	r3, [pc, #32]	@ (80025ec <HAL_I2C_MspInit+0x88>)
 80025ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025cc:	4a07      	ldr	r2, [pc, #28]	@ (80025ec <HAL_I2C_MspInit+0x88>)
 80025ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025d4:	4b05      	ldr	r3, [pc, #20]	@ (80025ec <HAL_I2C_MspInit+0x88>)
 80025d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80025e0:	bf00      	nop
 80025e2:	3728      	adds	r7, #40	@ 0x28
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40005400 	.word	0x40005400
 80025ec:	40023800 	.word	0x40023800
 80025f0:	40020400 	.word	0x40020400

080025f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08c      	sub	sp, #48	@ 0x30
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a31      	ldr	r2, [pc, #196]	@ (80026d8 <HAL_TIM_Base_MspInit+0xe4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d135      	bne.n	8002682 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	61bb      	str	r3, [r7, #24]
 800261a:	4b30      	ldr	r3, [pc, #192]	@ (80026dc <HAL_TIM_Base_MspInit+0xe8>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	4a2f      	ldr	r2, [pc, #188]	@ (80026dc <HAL_TIM_Base_MspInit+0xe8>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6453      	str	r3, [r2, #68]	@ 0x44
 8002626:	4b2d      	ldr	r3, [pc, #180]	@ (80026dc <HAL_TIM_Base_MspInit+0xe8>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f003 0301 	and.w	r3, r3, #1
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
 8002636:	4b29      	ldr	r3, [pc, #164]	@ (80026dc <HAL_TIM_Base_MspInit+0xe8>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a28      	ldr	r2, [pc, #160]	@ (80026dc <HAL_TIM_Base_MspInit+0xe8>)
 800263c:	f043 0310 	orr.w	r3, r3, #16
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b26      	ldr	r3, [pc, #152]	@ (80026dc <HAL_TIM_Base_MspInit+0xe8>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0310 	and.w	r3, r3, #16
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800264e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2300      	movs	r3, #0
 800265e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002660:	2301      	movs	r3, #1
 8002662:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	4619      	mov	r1, r3
 800266a:	481d      	ldr	r0, [pc, #116]	@ (80026e0 <HAL_TIM_Base_MspInit+0xec>)
 800266c:	f000 fd66 	bl	800313c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	2100      	movs	r1, #0
 8002674:	201b      	movs	r0, #27
 8002676:	f000 fc98 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800267a:	201b      	movs	r0, #27
 800267c:	f000 fcb1 	bl	8002fe2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002680:	e026      	b.n	80026d0 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM6)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a17      	ldr	r2, [pc, #92]	@ (80026e4 <HAL_TIM_Base_MspInit+0xf0>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d10e      	bne.n	80026aa <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
 8002690:	4b12      	ldr	r3, [pc, #72]	@ (80026dc <HAL_TIM_Base_MspInit+0xe8>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	4a11      	ldr	r2, [pc, #68]	@ (80026dc <HAL_TIM_Base_MspInit+0xe8>)
 8002696:	f043 0310 	orr.w	r3, r3, #16
 800269a:	6413      	str	r3, [r2, #64]	@ 0x40
 800269c:	4b0f      	ldr	r3, [pc, #60]	@ (80026dc <HAL_TIM_Base_MspInit+0xe8>)
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	f003 0310 	and.w	r3, r3, #16
 80026a4:	613b      	str	r3, [r7, #16]
 80026a6:	693b      	ldr	r3, [r7, #16]
}
 80026a8:	e012      	b.n	80026d0 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM8)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a0e      	ldr	r2, [pc, #56]	@ (80026e8 <HAL_TIM_Base_MspInit+0xf4>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d10d      	bne.n	80026d0 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80026b4:	2300      	movs	r3, #0
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	4b08      	ldr	r3, [pc, #32]	@ (80026dc <HAL_TIM_Base_MspInit+0xe8>)
 80026ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026bc:	4a07      	ldr	r2, [pc, #28]	@ (80026dc <HAL_TIM_Base_MspInit+0xe8>)
 80026be:	f043 0302 	orr.w	r3, r3, #2
 80026c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80026c4:	4b05      	ldr	r3, [pc, #20]	@ (80026dc <HAL_TIM_Base_MspInit+0xe8>)
 80026c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	bf00      	nop
 80026d2:	3730      	adds	r7, #48	@ 0x30
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40010000 	.word	0x40010000
 80026dc:	40023800 	.word	0x40023800
 80026e0:	40021000 	.word	0x40021000
 80026e4:	40001000 	.word	0x40001000
 80026e8:	40010400 	.word	0x40010400

080026ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b08c      	sub	sp, #48	@ 0x30
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f4:	f107 031c 	add.w	r3, r7, #28
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800270c:	d14b      	bne.n	80027a6 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	61bb      	str	r3, [r7, #24]
 8002712:	4b3f      	ldr	r3, [pc, #252]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	4a3e      	ldr	r2, [pc, #248]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6413      	str	r3, [r2, #64]	@ 0x40
 800271e:	4b3c      	ldr	r3, [pc, #240]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	61bb      	str	r3, [r7, #24]
 8002728:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	4b38      	ldr	r3, [pc, #224]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 8002730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002732:	4a37      	ldr	r2, [pc, #220]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 8002734:	f043 0301 	orr.w	r3, r3, #1
 8002738:	6313      	str	r3, [r2, #48]	@ 0x30
 800273a:	4b35      	ldr	r3, [pc, #212]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	617b      	str	r3, [r7, #20]
 8002744:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	4b31      	ldr	r3, [pc, #196]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	4a30      	ldr	r2, [pc, #192]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 8002750:	f043 0302 	orr.w	r3, r3, #2
 8002754:	6313      	str	r3, [r2, #48]	@ 0x30
 8002756:	4b2e      	ldr	r3, [pc, #184]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_CH1_Pin;
 8002762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002768:	2302      	movs	r3, #2
 800276a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002770:	2300      	movs	r3, #0
 8002772:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002774:	2301      	movs	r3, #1
 8002776:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_A_CH1_GPIO_Port, &GPIO_InitStruct);
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	4619      	mov	r1, r3
 800277e:	4825      	ldr	r0, [pc, #148]	@ (8002814 <HAL_TIM_Encoder_MspInit+0x128>)
 8002780:	f000 fcdc 	bl	800313c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_A_CH2_Pin;
 8002784:	2308      	movs	r3, #8
 8002786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002790:	2300      	movs	r3, #0
 8002792:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002794:	2301      	movs	r3, #1
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_A_CH2_GPIO_Port, &GPIO_InitStruct);
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	4619      	mov	r1, r3
 800279e:	481e      	ldr	r0, [pc, #120]	@ (8002818 <HAL_TIM_Encoder_MspInit+0x12c>)
 80027a0:	f000 fccc 	bl	800313c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027a4:	e030      	b.n	8002808 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a1c      	ldr	r2, [pc, #112]	@ (800281c <HAL_TIM_Encoder_MspInit+0x130>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d12b      	bne.n	8002808 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	4b16      	ldr	r3, [pc, #88]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 80027b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b8:	4a15      	ldr	r2, [pc, #84]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 80027ba:	f043 0302 	orr.w	r3, r3, #2
 80027be:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c0:	4b13      	ldr	r3, [pc, #76]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	4a0e      	ldr	r2, [pc, #56]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6313      	str	r3, [r2, #48]	@ 0x30
 80027dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x124>)
 80027de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_B_CH1_Pin|MOTOR_B_CH2_Pin;
 80027e8:	23c0      	movs	r3, #192	@ 0xc0
 80027ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ec:	2302      	movs	r3, #2
 80027ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f0:	2300      	movs	r3, #0
 80027f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f4:	2300      	movs	r3, #0
 80027f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027f8:	2302      	movs	r3, #2
 80027fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fc:	f107 031c 	add.w	r3, r7, #28
 8002800:	4619      	mov	r1, r3
 8002802:	4804      	ldr	r0, [pc, #16]	@ (8002814 <HAL_TIM_Encoder_MspInit+0x128>)
 8002804:	f000 fc9a 	bl	800313c <HAL_GPIO_Init>
}
 8002808:	bf00      	nop
 800280a:	3730      	adds	r7, #48	@ 0x30
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40023800 	.word	0x40023800
 8002814:	40020000 	.word	0x40020000
 8002818:	40020400 	.word	0x40020400
 800281c:	40000400 	.word	0x40000400

08002820 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	@ 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a24      	ldr	r2, [pc, #144]	@ (80028d0 <HAL_TIM_MspPostInit+0xb0>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d11f      	bne.n	8002882 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	4b23      	ldr	r3, [pc, #140]	@ (80028d4 <HAL_TIM_MspPostInit+0xb4>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	4a22      	ldr	r2, [pc, #136]	@ (80028d4 <HAL_TIM_MspPostInit+0xb4>)
 800284c:	f043 0310 	orr.w	r3, r3, #16
 8002850:	6313      	str	r3, [r2, #48]	@ 0x30
 8002852:	4b20      	ldr	r3, [pc, #128]	@ (80028d4 <HAL_TIM_MspPostInit+0xb4>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 800285e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286c:	2300      	movs	r3, #0
 800286e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002870:	2301      	movs	r3, #1
 8002872:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4619      	mov	r1, r3
 800287a:	4817      	ldr	r0, [pc, #92]	@ (80028d8 <HAL_TIM_MspPostInit+0xb8>)
 800287c:	f000 fc5e 	bl	800313c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002880:	e022      	b.n	80028c8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a15      	ldr	r2, [pc, #84]	@ (80028dc <HAL_TIM_MspPostInit+0xbc>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d11d      	bne.n	80028c8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800288c:	2300      	movs	r3, #0
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	4b10      	ldr	r3, [pc, #64]	@ (80028d4 <HAL_TIM_MspPostInit+0xb4>)
 8002892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002894:	4a0f      	ldr	r2, [pc, #60]	@ (80028d4 <HAL_TIM_MspPostInit+0xb4>)
 8002896:	f043 0304 	orr.w	r3, r3, #4
 800289a:	6313      	str	r3, [r2, #48]	@ 0x30
 800289c:	4b0d      	ldr	r3, [pc, #52]	@ (80028d4 <HAL_TIM_MspPostInit+0xb4>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_A_PWM_Pin|MOTOR_B_PWM_Pin;
 80028a8:	23c0      	movs	r3, #192	@ 0xc0
 80028aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80028b8:	2303      	movs	r3, #3
 80028ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4619      	mov	r1, r3
 80028c2:	4807      	ldr	r0, [pc, #28]	@ (80028e0 <HAL_TIM_MspPostInit+0xc0>)
 80028c4:	f000 fc3a 	bl	800313c <HAL_GPIO_Init>
}
 80028c8:	bf00      	nop
 80028ca:	3728      	adds	r7, #40	@ 0x28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40010000 	.word	0x40010000
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40010400 	.word	0x40010400
 80028e0:	40020800 	.word	0x40020800

080028e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	@ 0x28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ec:	f107 0314 	add.w	r3, r7, #20
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	605a      	str	r2, [r3, #4]
 80028f6:	609a      	str	r2, [r3, #8]
 80028f8:	60da      	str	r2, [r3, #12]
 80028fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a1d      	ldr	r2, [pc, #116]	@ (8002978 <HAL_UART_MspInit+0x94>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d134      	bne.n	8002970 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	4b1c      	ldr	r3, [pc, #112]	@ (800297c <HAL_UART_MspInit+0x98>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	4a1b      	ldr	r2, [pc, #108]	@ (800297c <HAL_UART_MspInit+0x98>)
 8002910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002914:	6413      	str	r3, [r2, #64]	@ 0x40
 8002916:	4b19      	ldr	r3, [pc, #100]	@ (800297c <HAL_UART_MspInit+0x98>)
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
 8002926:	4b15      	ldr	r3, [pc, #84]	@ (800297c <HAL_UART_MspInit+0x98>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	4a14      	ldr	r2, [pc, #80]	@ (800297c <HAL_UART_MspInit+0x98>)
 800292c:	f043 0304 	orr.w	r3, r3, #4
 8002930:	6313      	str	r3, [r2, #48]	@ 0x30
 8002932:	4b12      	ldr	r3, [pc, #72]	@ (800297c <HAL_UART_MspInit+0x98>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	f003 0304 	and.w	r3, r3, #4
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800293e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800294c:	2303      	movs	r3, #3
 800294e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002950:	2307      	movs	r3, #7
 8002952:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4619      	mov	r1, r3
 800295a:	4809      	ldr	r0, [pc, #36]	@ (8002980 <HAL_UART_MspInit+0x9c>)
 800295c:	f000 fbee 	bl	800313c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002960:	2200      	movs	r2, #0
 8002962:	2100      	movs	r1, #0
 8002964:	2027      	movs	r0, #39	@ 0x27
 8002966:	f000 fb20 	bl	8002faa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800296a:	2027      	movs	r0, #39	@ 0x27
 800296c:	f000 fb39 	bl	8002fe2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002970:	bf00      	nop
 8002972:	3728      	adds	r7, #40	@ 0x28
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40004800 	.word	0x40004800
 800297c:	40023800 	.word	0x40023800
 8002980:	40020800 	.word	0x40020800

08002984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002988:	bf00      	nop
 800298a:	e7fd      	b.n	8002988 <NMI_Handler+0x4>

0800298c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002990:	bf00      	nop
 8002992:	e7fd      	b.n	8002990 <HardFault_Handler+0x4>

08002994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002998:	bf00      	nop
 800299a:	e7fd      	b.n	8002998 <MemManage_Handler+0x4>

0800299c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029a0:	bf00      	nop
 80029a2:	e7fd      	b.n	80029a0 <BusFault_Handler+0x4>

080029a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <UsageFault_Handler+0x4>

080029ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029b0:	bf00      	nop
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029be:	bf00      	nop
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029cc:	bf00      	nop
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029da:	f000 f9c7 	bl	8002d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
	...

080029e4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80029e8:	4802      	ldr	r0, [pc, #8]	@ (80029f4 <TIM1_CC_IRQHandler+0x10>)
 80029ea:	f001 fe67 	bl	80046bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000244 	.word	0x20000244

080029f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80029fc:	4802      	ldr	r0, [pc, #8]	@ (8002a08 <USART3_IRQHandler+0x10>)
 80029fe:	f002 fe41 	bl	8005684 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	200003ac 	.word	0x200003ac

08002a0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  return 1;
 8002a10:	2301      	movs	r3, #1
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <_kill>:

int _kill(int pid, int sig)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a26:	f004 fc21 	bl	800726c <__errno>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2216      	movs	r2, #22
 8002a2e:	601a      	str	r2, [r3, #0]
  return -1;
 8002a30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <_exit>:

void _exit (int status)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a44:	f04f 31ff 	mov.w	r1, #4294967295
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ffe7 	bl	8002a1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a4e:	bf00      	nop
 8002a50:	e7fd      	b.n	8002a4e <_exit+0x12>

08002a52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b086      	sub	sp, #24
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	60f8      	str	r0, [r7, #12]
 8002a5a:	60b9      	str	r1, [r7, #8]
 8002a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	e00a      	b.n	8002a7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a64:	f3af 8000 	nop.w
 8002a68:	4601      	mov	r1, r0
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	60ba      	str	r2, [r7, #8]
 8002a70:	b2ca      	uxtb	r2, r1
 8002a72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	3301      	adds	r3, #1
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	dbf0      	blt.n	8002a64 <_read+0x12>
  }

  return len;
 8002a82:	687b      	ldr	r3, [r7, #4]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3718      	adds	r7, #24
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	e009      	b.n	8002ab2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	60ba      	str	r2, [r7, #8]
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	3301      	adds	r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	dbf1      	blt.n	8002a9e <_write+0x12>
  }
  return len;
 8002aba:	687b      	ldr	r3, [r7, #4]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <_close>:

int _close(int file)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002acc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002aec:	605a      	str	r2, [r3, #4]
  return 0;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_isatty>:

int _isatty(int file)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b04:	2301      	movs	r3, #1
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3714      	adds	r7, #20
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b34:	4a14      	ldr	r2, [pc, #80]	@ (8002b88 <_sbrk+0x5c>)
 8002b36:	4b15      	ldr	r3, [pc, #84]	@ (8002b8c <_sbrk+0x60>)
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b40:	4b13      	ldr	r3, [pc, #76]	@ (8002b90 <_sbrk+0x64>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d102      	bne.n	8002b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b48:	4b11      	ldr	r3, [pc, #68]	@ (8002b90 <_sbrk+0x64>)
 8002b4a:	4a12      	ldr	r2, [pc, #72]	@ (8002b94 <_sbrk+0x68>)
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b4e:	4b10      	ldr	r3, [pc, #64]	@ (8002b90 <_sbrk+0x64>)
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d207      	bcs.n	8002b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b5c:	f004 fb86 	bl	800726c <__errno>
 8002b60:	4603      	mov	r3, r0
 8002b62:	220c      	movs	r2, #12
 8002b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b66:	f04f 33ff 	mov.w	r3, #4294967295
 8002b6a:	e009      	b.n	8002b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b6c:	4b08      	ldr	r3, [pc, #32]	@ (8002b90 <_sbrk+0x64>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b72:	4b07      	ldr	r3, [pc, #28]	@ (8002b90 <_sbrk+0x64>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4413      	add	r3, r2
 8002b7a:	4a05      	ldr	r2, [pc, #20]	@ (8002b90 <_sbrk+0x64>)
 8002b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	20020000 	.word	0x20020000
 8002b8c:	00000400 	.word	0x00000400
 8002b90:	20000830 	.word	0x20000830
 8002b94:	20000988 	.word	0x20000988

08002b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b9c:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <SystemInit+0x20>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba2:	4a05      	ldr	r2, [pc, #20]	@ (8002bb8 <SystemInit+0x20>)
 8002ba4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ba8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <UART3_task>:

void gyroscope_task() {
	print_value(0, 0, "gyro: %f", sensor.gyroZ);
}

void UART3_task() {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af02      	add	r7, sp, #8
	print_OLED(0, 0, "cmd_cnt: %u", true, cmd_cnt);
 8002bc2:	4b26      	ldr	r3, [pc, #152]	@ (8002c5c <UART3_task+0xa0>)
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	2301      	movs	r3, #1
 8002bca:	4a25      	ldr	r2, [pc, #148]	@ (8002c60 <UART3_task+0xa4>)
 8002bcc:	2100      	movs	r1, #0
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f7fe f9c4 	bl	8000f5c <print_OLED>
	HAL_Delay(1000);
 8002bd4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bd8:	f000 f8e8 	bl	8002dac <HAL_Delay>

	if (cmd_cnt == 1) {
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8002c5c <UART3_task+0xa0>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d119      	bne.n	8002c18 <UART3_task+0x5c>
		move(receive[0]);
 8002be4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c64 <UART3_task+0xa8>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7fe fa13 	bl	8001014 <move>
		head = NULL;
 8002bee:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <UART3_task+0xac>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
		free(curr);
 8002bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c6c <UART3_task+0xb0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 fca1 	bl	8006540 <free>
		curr = NULL;
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002c6c <UART3_task+0xb0>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	601a      	str	r2, [r3, #0]
		cmd_cnt--;
 8002c04:	4b15      	ldr	r3, [pc, #84]	@ (8002c5c <UART3_task+0xa0>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	4b13      	ldr	r3, [pc, #76]	@ (8002c5c <UART3_task+0xa0>)
 8002c0e:	701a      	strb	r2, [r3, #0]
		send_ack(&huart3);
 8002c10:	4817      	ldr	r0, [pc, #92]	@ (8002c70 <UART3_task+0xb4>)
 8002c12:	f7fe f9ed 	bl	8000ff0 <send_ack>
		head = head->next;
		free(temp);
		cmd_cnt--;
		send_ack(&huart3);
	}
}
 8002c16:	e01c      	b.n	8002c52 <UART3_task+0x96>
	} else if (cmd_cnt > 1) {
 8002c18:	4b10      	ldr	r3, [pc, #64]	@ (8002c5c <UART3_task+0xa0>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d918      	bls.n	8002c52 <UART3_task+0x96>
		move(receive[0]);
 8002c20:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <UART3_task+0xa8>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7fe f9f5 	bl	8001014 <move>
		cmd_t* temp = head;
 8002c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c68 <UART3_task+0xac>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	607b      	str	r3, [r7, #4]
		head = head->next;
 8002c30:	4b0d      	ldr	r3, [pc, #52]	@ (8002c68 <UART3_task+0xac>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	4a0c      	ldr	r2, [pc, #48]	@ (8002c68 <UART3_task+0xac>)
 8002c38:	6013      	str	r3, [r2, #0]
		free(temp);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f003 fc80 	bl	8006540 <free>
		cmd_cnt--;
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <UART3_task+0xa0>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	4b04      	ldr	r3, [pc, #16]	@ (8002c5c <UART3_task+0xa0>)
 8002c4a:	701a      	strb	r2, [r3, #0]
		send_ack(&huart3);
 8002c4c:	4808      	ldr	r0, [pc, #32]	@ (8002c70 <UART3_task+0xb4>)
 8002c4e:	f7fe f9cf 	bl	8000ff0 <send_ack>
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000410 	.word	0x20000410
 8002c60:	080092d8 	.word	0x080092d8
 8002c64:	20000414 	.word	0x20000414
 8002c68:	20000408 	.word	0x20000408
 8002c6c:	2000040c 	.word	0x2000040c
 8002c70:	200003ac 	.word	0x200003ac

08002c74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c78:	f7ff ff8e 	bl	8002b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c7c:	480c      	ldr	r0, [pc, #48]	@ (8002cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c7e:	490d      	ldr	r1, [pc, #52]	@ (8002cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c80:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c84:	e002      	b.n	8002c8c <LoopCopyDataInit>

08002c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c8a:	3304      	adds	r3, #4

08002c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c90:	d3f9      	bcc.n	8002c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c92:	4a0a      	ldr	r2, [pc, #40]	@ (8002cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c94:	4c0a      	ldr	r4, [pc, #40]	@ (8002cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c98:	e001      	b.n	8002c9e <LoopFillZerobss>

08002c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c9c:	3204      	adds	r2, #4

08002c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ca0:	d3fb      	bcc.n	8002c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ca2:	f004 fae9 	bl	8007278 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ca6:	f7fe fb4d 	bl	8001344 <main>
  bx  lr    
 8002caa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cb4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002cb8:	0800a0e0 	.word	0x0800a0e0
  ldr r2, =_sbss
 8002cbc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002cc0:	20000984 	.word	0x20000984

08002cc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cc4:	e7fe      	b.n	8002cc4 <ADC_IRQHandler>
	...

08002cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <HAL_Init+0x40>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002d08 <HAL_Init+0x40>)
 8002cd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <HAL_Init+0x40>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	@ (8002d08 <HAL_Init+0x40>)
 8002cde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ce2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ce4:	4b08      	ldr	r3, [pc, #32]	@ (8002d08 <HAL_Init+0x40>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a07      	ldr	r2, [pc, #28]	@ (8002d08 <HAL_Init+0x40>)
 8002cea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf0:	2003      	movs	r0, #3
 8002cf2:	f000 f94f 	bl	8002f94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cf6:	200f      	movs	r0, #15
 8002cf8:	f000 f808 	bl	8002d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cfc:	f7ff fc0a 	bl	8002514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	40023c00 	.word	0x40023c00

08002d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d14:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <HAL_InitTick+0x54>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <HAL_InitTick+0x58>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f967 	bl	8002ffe <HAL_SYSTICK_Config>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00e      	b.n	8002d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b0f      	cmp	r3, #15
 8002d3e:	d80a      	bhi.n	8002d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d40:	2200      	movs	r2, #0
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	f000 f92f 	bl	8002faa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d4c:	4a06      	ldr	r2, [pc, #24]	@ (8002d68 <HAL_InitTick+0x5c>)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	20000000 	.word	0x20000000
 8002d64:	20000008 	.word	0x20000008
 8002d68:	20000004 	.word	0x20000004

08002d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d70:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <HAL_IncTick+0x20>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4b06      	ldr	r3, [pc, #24]	@ (8002d90 <HAL_IncTick+0x24>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <HAL_IncTick+0x24>)
 8002d7e:	6013      	str	r3, [r2, #0]
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000008 	.word	0x20000008
 8002d90:	20000834 	.word	0x20000834

08002d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return uwTick;
 8002d98:	4b03      	ldr	r3, [pc, #12]	@ (8002da8 <HAL_GetTick+0x14>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	20000834 	.word	0x20000834

08002dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002db4:	f7ff ffee 	bl	8002d94 <HAL_GetTick>
 8002db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d005      	beq.n	8002dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <HAL_Delay+0x44>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dd2:	bf00      	nop
 8002dd4:	f7ff ffde 	bl	8002d94 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d8f7      	bhi.n	8002dd4 <HAL_Delay+0x28>
  {
  }
}
 8002de4:	bf00      	nop
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000008 	.word	0x20000008

08002df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e04:	4b0c      	ldr	r3, [pc, #48]	@ (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e10:	4013      	ands	r3, r2
 8002e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e26:	4a04      	ldr	r2, [pc, #16]	@ (8002e38 <__NVIC_SetPriorityGrouping+0x44>)
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	60d3      	str	r3, [r2, #12]
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e40:	4b04      	ldr	r3, [pc, #16]	@ (8002e54 <__NVIC_GetPriorityGrouping+0x18>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	f003 0307 	and.w	r3, r3, #7
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	db0b      	blt.n	8002e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	f003 021f 	and.w	r2, r3, #31
 8002e70:	4907      	ldr	r1, [pc, #28]	@ (8002e90 <__NVIC_EnableIRQ+0x38>)
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	095b      	lsrs	r3, r3, #5
 8002e78:	2001      	movs	r0, #1
 8002e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000e100 	.word	0xe000e100

08002e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	6039      	str	r1, [r7, #0]
 8002e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	db0a      	blt.n	8002ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	490c      	ldr	r1, [pc, #48]	@ (8002ee0 <__NVIC_SetPriority+0x4c>)
 8002eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb2:	0112      	lsls	r2, r2, #4
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ebc:	e00a      	b.n	8002ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	4908      	ldr	r1, [pc, #32]	@ (8002ee4 <__NVIC_SetPriority+0x50>)
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	3b04      	subs	r3, #4
 8002ecc:	0112      	lsls	r2, r2, #4
 8002ece:	b2d2      	uxtb	r2, r2
 8002ed0:	440b      	add	r3, r1
 8002ed2:	761a      	strb	r2, [r3, #24]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	e000e100 	.word	0xe000e100
 8002ee4:	e000ed00 	.word	0xe000ed00

08002ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b089      	sub	sp, #36	@ 0x24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f1c3 0307 	rsb	r3, r3, #7
 8002f02:	2b04      	cmp	r3, #4
 8002f04:	bf28      	it	cs
 8002f06:	2304      	movcs	r3, #4
 8002f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	2b06      	cmp	r3, #6
 8002f10:	d902      	bls.n	8002f18 <NVIC_EncodePriority+0x30>
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3b03      	subs	r3, #3
 8002f16:	e000      	b.n	8002f1a <NVIC_EncodePriority+0x32>
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	fa02 f303 	lsl.w	r3, r2, r3
 8002f26:	43da      	mvns	r2, r3
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	401a      	ands	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f30:	f04f 31ff 	mov.w	r1, #4294967295
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3a:	43d9      	mvns	r1, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f40:	4313      	orrs	r3, r2
         );
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	@ 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f60:	d301      	bcc.n	8002f66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f62:	2301      	movs	r3, #1
 8002f64:	e00f      	b.n	8002f86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f66:	4a0a      	ldr	r2, [pc, #40]	@ (8002f90 <SysTick_Config+0x40>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f6e:	210f      	movs	r1, #15
 8002f70:	f04f 30ff 	mov.w	r0, #4294967295
 8002f74:	f7ff ff8e 	bl	8002e94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f78:	4b05      	ldr	r3, [pc, #20]	@ (8002f90 <SysTick_Config+0x40>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f7e:	4b04      	ldr	r3, [pc, #16]	@ (8002f90 <SysTick_Config+0x40>)
 8002f80:	2207      	movs	r2, #7
 8002f82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	e000e010 	.word	0xe000e010

08002f94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f7ff ff29 	bl	8002df4 <__NVIC_SetPriorityGrouping>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fbc:	f7ff ff3e 	bl	8002e3c <__NVIC_GetPriorityGrouping>
 8002fc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	6978      	ldr	r0, [r7, #20]
 8002fc8:	f7ff ff8e 	bl	8002ee8 <NVIC_EncodePriority>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fd2:	4611      	mov	r1, r2
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f7ff ff5d 	bl	8002e94 <__NVIC_SetPriority>
}
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	4603      	mov	r3, r0
 8002fea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f7ff ff31 	bl	8002e58 <__NVIC_EnableIRQ>
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b082      	sub	sp, #8
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ffa2 	bl	8002f50 <SysTick_Config>
 800300c:	4603      	mov	r3, r0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003022:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003024:	f7ff feb6 	bl	8002d94 <HAL_GetTick>
 8003028:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d008      	beq.n	8003048 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2280      	movs	r2, #128	@ 0x80
 800303a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e052      	b.n	80030ee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f022 0216 	bic.w	r2, r2, #22
 8003056:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695a      	ldr	r2, [r3, #20]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003066:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800306c:	2b00      	cmp	r3, #0
 800306e:	d103      	bne.n	8003078 <HAL_DMA_Abort+0x62>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003074:	2b00      	cmp	r3, #0
 8003076:	d007      	beq.n	8003088 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0208 	bic.w	r2, r2, #8
 8003086:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003098:	e013      	b.n	80030c2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800309a:	f7ff fe7b 	bl	8002d94 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b05      	cmp	r3, #5
 80030a6:	d90c      	bls.n	80030c2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2220      	movs	r2, #32
 80030ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2203      	movs	r2, #3
 80030b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e015      	b.n	80030ee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e4      	bne.n	800309a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030d4:	223f      	movs	r2, #63	@ 0x3f
 80030d6:	409a      	lsls	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d004      	beq.n	8003114 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2280      	movs	r2, #128	@ 0x80
 800310e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e00c      	b.n	800312e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2205      	movs	r2, #5
 8003118:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
	...

0800313c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800313c:	b480      	push	{r7}
 800313e:	b089      	sub	sp, #36	@ 0x24
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800314a:	2300      	movs	r3, #0
 800314c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800314e:	2300      	movs	r3, #0
 8003150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
 8003156:	e16b      	b.n	8003430 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003158:	2201      	movs	r2, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	4013      	ands	r3, r2
 800316a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	429a      	cmp	r2, r3
 8003172:	f040 815a 	bne.w	800342a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d005      	beq.n	800318e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800318a:	2b02      	cmp	r3, #2
 800318c:	d130      	bne.n	80031f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	2203      	movs	r2, #3
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	69ba      	ldr	r2, [r7, #24]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c4:	2201      	movs	r2, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	091b      	lsrs	r3, r3, #4
 80031da:	f003 0201 	and.w	r2, r3, #1
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d017      	beq.n	800322c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4013      	ands	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 0303 	and.w	r3, r3, #3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d123      	bne.n	8003280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	08da      	lsrs	r2, r3, #3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3208      	adds	r2, #8
 8003240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	220f      	movs	r2, #15
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	691a      	ldr	r2, [r3, #16]
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	08da      	lsrs	r2, r3, #3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	3208      	adds	r2, #8
 800327a:	69b9      	ldr	r1, [r7, #24]
 800327c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	2203      	movs	r2, #3
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 0203 	and.w	r2, r3, #3
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	005b      	lsls	r3, r3, #1
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 80b4 	beq.w	800342a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	4b60      	ldr	r3, [pc, #384]	@ (8003448 <HAL_GPIO_Init+0x30c>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ca:	4a5f      	ldr	r2, [pc, #380]	@ (8003448 <HAL_GPIO_Init+0x30c>)
 80032cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032d2:	4b5d      	ldr	r3, [pc, #372]	@ (8003448 <HAL_GPIO_Init+0x30c>)
 80032d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032de:	4a5b      	ldr	r2, [pc, #364]	@ (800344c <HAL_GPIO_Init+0x310>)
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	089b      	lsrs	r3, r3, #2
 80032e4:	3302      	adds	r3, #2
 80032e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0303 	and.w	r3, r3, #3
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	220f      	movs	r2, #15
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43db      	mvns	r3, r3
 80032fc:	69ba      	ldr	r2, [r7, #24]
 80032fe:	4013      	ands	r3, r2
 8003300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a52      	ldr	r2, [pc, #328]	@ (8003450 <HAL_GPIO_Init+0x314>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d02b      	beq.n	8003362 <HAL_GPIO_Init+0x226>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a51      	ldr	r2, [pc, #324]	@ (8003454 <HAL_GPIO_Init+0x318>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d025      	beq.n	800335e <HAL_GPIO_Init+0x222>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a50      	ldr	r2, [pc, #320]	@ (8003458 <HAL_GPIO_Init+0x31c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d01f      	beq.n	800335a <HAL_GPIO_Init+0x21e>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a4f      	ldr	r2, [pc, #316]	@ (800345c <HAL_GPIO_Init+0x320>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d019      	beq.n	8003356 <HAL_GPIO_Init+0x21a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4e      	ldr	r2, [pc, #312]	@ (8003460 <HAL_GPIO_Init+0x324>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d013      	beq.n	8003352 <HAL_GPIO_Init+0x216>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4d      	ldr	r2, [pc, #308]	@ (8003464 <HAL_GPIO_Init+0x328>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d00d      	beq.n	800334e <HAL_GPIO_Init+0x212>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4c      	ldr	r2, [pc, #304]	@ (8003468 <HAL_GPIO_Init+0x32c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <HAL_GPIO_Init+0x20e>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4b      	ldr	r2, [pc, #300]	@ (800346c <HAL_GPIO_Init+0x330>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d101      	bne.n	8003346 <HAL_GPIO_Init+0x20a>
 8003342:	2307      	movs	r3, #7
 8003344:	e00e      	b.n	8003364 <HAL_GPIO_Init+0x228>
 8003346:	2308      	movs	r3, #8
 8003348:	e00c      	b.n	8003364 <HAL_GPIO_Init+0x228>
 800334a:	2306      	movs	r3, #6
 800334c:	e00a      	b.n	8003364 <HAL_GPIO_Init+0x228>
 800334e:	2305      	movs	r3, #5
 8003350:	e008      	b.n	8003364 <HAL_GPIO_Init+0x228>
 8003352:	2304      	movs	r3, #4
 8003354:	e006      	b.n	8003364 <HAL_GPIO_Init+0x228>
 8003356:	2303      	movs	r3, #3
 8003358:	e004      	b.n	8003364 <HAL_GPIO_Init+0x228>
 800335a:	2302      	movs	r3, #2
 800335c:	e002      	b.n	8003364 <HAL_GPIO_Init+0x228>
 800335e:	2301      	movs	r3, #1
 8003360:	e000      	b.n	8003364 <HAL_GPIO_Init+0x228>
 8003362:	2300      	movs	r3, #0
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	f002 0203 	and.w	r2, r2, #3
 800336a:	0092      	lsls	r2, r2, #2
 800336c:	4093      	lsls	r3, r2
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003374:	4935      	ldr	r1, [pc, #212]	@ (800344c <HAL_GPIO_Init+0x310>)
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	3302      	adds	r3, #2
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003382:	4b3b      	ldr	r3, [pc, #236]	@ (8003470 <HAL_GPIO_Init+0x334>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	43db      	mvns	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4013      	ands	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033a6:	4a32      	ldr	r2, [pc, #200]	@ (8003470 <HAL_GPIO_Init+0x334>)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033ac:	4b30      	ldr	r3, [pc, #192]	@ (8003470 <HAL_GPIO_Init+0x334>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033d0:	4a27      	ldr	r2, [pc, #156]	@ (8003470 <HAL_GPIO_Init+0x334>)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033d6:	4b26      	ldr	r3, [pc, #152]	@ (8003470 <HAL_GPIO_Init+0x334>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003470 <HAL_GPIO_Init+0x334>)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003400:	4b1b      	ldr	r3, [pc, #108]	@ (8003470 <HAL_GPIO_Init+0x334>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	43db      	mvns	r3, r3
 800340a:	69ba      	ldr	r2, [r7, #24]
 800340c:	4013      	ands	r3, r2
 800340e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003424:	4a12      	ldr	r2, [pc, #72]	@ (8003470 <HAL_GPIO_Init+0x334>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	3301      	adds	r3, #1
 800342e:	61fb      	str	r3, [r7, #28]
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2b0f      	cmp	r3, #15
 8003434:	f67f ae90 	bls.w	8003158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop
 800343c:	3724      	adds	r7, #36	@ 0x24
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	40023800 	.word	0x40023800
 800344c:	40013800 	.word	0x40013800
 8003450:	40020000 	.word	0x40020000
 8003454:	40020400 	.word	0x40020400
 8003458:	40020800 	.word	0x40020800
 800345c:	40020c00 	.word	0x40020c00
 8003460:	40021000 	.word	0x40021000
 8003464:	40021400 	.word	0x40021400
 8003468:	40021800 	.word	0x40021800
 800346c:	40021c00 	.word	0x40021c00
 8003470:	40013c00 	.word	0x40013c00

08003474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	887b      	ldrh	r3, [r7, #2]
 8003486:	4013      	ands	r3, r2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
 8003490:	e001      	b.n	8003496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003492:	2300      	movs	r3, #0
 8003494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003496:	7bfb      	ldrb	r3, [r7, #15]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	807b      	strh	r3, [r7, #2]
 80034b0:	4613      	mov	r3, r2
 80034b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034b4:	787b      	ldrb	r3, [r7, #1]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ba:	887a      	ldrh	r2, [r7, #2]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034c0:	e003      	b.n	80034ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034c2:	887b      	ldrh	r3, [r7, #2]
 80034c4:	041a      	lsls	r2, r3, #16
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	619a      	str	r2, [r3, #24]
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e12b      	b.n	8003742 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff f830 	bl	8002564 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2224      	movs	r2, #36	@ 0x24
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0201 	bic.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800352a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800353a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800353c:	f000 fd68 	bl	8004010 <HAL_RCC_GetPCLK1Freq>
 8003540:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	4a81      	ldr	r2, [pc, #516]	@ (800374c <HAL_I2C_Init+0x274>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d807      	bhi.n	800355c <HAL_I2C_Init+0x84>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4a80      	ldr	r2, [pc, #512]	@ (8003750 <HAL_I2C_Init+0x278>)
 8003550:	4293      	cmp	r3, r2
 8003552:	bf94      	ite	ls
 8003554:	2301      	movls	r3, #1
 8003556:	2300      	movhi	r3, #0
 8003558:	b2db      	uxtb	r3, r3
 800355a:	e006      	b.n	800356a <HAL_I2C_Init+0x92>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4a7d      	ldr	r2, [pc, #500]	@ (8003754 <HAL_I2C_Init+0x27c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	bf94      	ite	ls
 8003564:	2301      	movls	r3, #1
 8003566:	2300      	movhi	r3, #0
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e0e7      	b.n	8003742 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4a78      	ldr	r2, [pc, #480]	@ (8003758 <HAL_I2C_Init+0x280>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	0c9b      	lsrs	r3, r3, #18
 800357c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	430a      	orrs	r2, r1
 8003590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4a6a      	ldr	r2, [pc, #424]	@ (800374c <HAL_I2C_Init+0x274>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d802      	bhi.n	80035ac <HAL_I2C_Init+0xd4>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	3301      	adds	r3, #1
 80035aa:	e009      	b.n	80035c0 <HAL_I2C_Init+0xe8>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	4a69      	ldr	r2, [pc, #420]	@ (800375c <HAL_I2C_Init+0x284>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	099b      	lsrs	r3, r3, #6
 80035be:	3301      	adds	r3, #1
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	430b      	orrs	r3, r1
 80035c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	69db      	ldr	r3, [r3, #28]
 80035ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	495c      	ldr	r1, [pc, #368]	@ (800374c <HAL_I2C_Init+0x274>)
 80035dc:	428b      	cmp	r3, r1
 80035de:	d819      	bhi.n	8003614 <HAL_I2C_Init+0x13c>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1e59      	subs	r1, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ee:	1c59      	adds	r1, r3, #1
 80035f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80035f4:	400b      	ands	r3, r1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_I2C_Init+0x138>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1e59      	subs	r1, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	fbb1 f3f3 	udiv	r3, r1, r3
 8003608:	3301      	adds	r3, #1
 800360a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360e:	e051      	b.n	80036b4 <HAL_I2C_Init+0x1dc>
 8003610:	2304      	movs	r3, #4
 8003612:	e04f      	b.n	80036b4 <HAL_I2C_Init+0x1dc>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d111      	bne.n	8003640 <HAL_I2C_Init+0x168>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1e58      	subs	r0, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	440b      	add	r3, r1
 800362a:	fbb0 f3f3 	udiv	r3, r0, r3
 800362e:	3301      	adds	r3, #1
 8003630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e012      	b.n	8003666 <HAL_I2C_Init+0x18e>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1e58      	subs	r0, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	0099      	lsls	r1, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	fbb0 f3f3 	udiv	r3, r0, r3
 8003656:	3301      	adds	r3, #1
 8003658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365c:	2b00      	cmp	r3, #0
 800365e:	bf0c      	ite	eq
 8003660:	2301      	moveq	r3, #1
 8003662:	2300      	movne	r3, #0
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_I2C_Init+0x196>
 800366a:	2301      	movs	r3, #1
 800366c:	e022      	b.n	80036b4 <HAL_I2C_Init+0x1dc>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10e      	bne.n	8003694 <HAL_I2C_Init+0x1bc>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1e58      	subs	r0, r3, #1
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	460b      	mov	r3, r1
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	440b      	add	r3, r1
 8003684:	fbb0 f3f3 	udiv	r3, r0, r3
 8003688:	3301      	adds	r3, #1
 800368a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003692:	e00f      	b.n	80036b4 <HAL_I2C_Init+0x1dc>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	1e58      	subs	r0, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6859      	ldr	r1, [r3, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	440b      	add	r3, r1
 80036a2:	0099      	lsls	r1, r3, #2
 80036a4:	440b      	add	r3, r1
 80036a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036aa:	3301      	adds	r3, #1
 80036ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	6809      	ldr	r1, [r1, #0]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69da      	ldr	r2, [r3, #28]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a1b      	ldr	r3, [r3, #32]
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80036e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	6911      	ldr	r1, [r2, #16]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	68d2      	ldr	r2, [r2, #12]
 80036ee:	4311      	orrs	r1, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	431a      	orrs	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2200      	movs	r2, #0
 8003728:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	000186a0 	.word	0x000186a0
 8003750:	001e847f 	.word	0x001e847f
 8003754:	003d08ff 	.word	0x003d08ff
 8003758:	431bde83 	.word	0x431bde83
 800375c:	10624dd3 	.word	0x10624dd3

08003760 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003766:	4b06      	ldr	r3, [pc, #24]	@ (8003780 <HAL_PWR_EnableBkUpAccess+0x20>)
 8003768:	2201      	movs	r2, #1
 800376a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800376c:	4b05      	ldr	r3, [pc, #20]	@ (8003784 <HAL_PWR_EnableBkUpAccess+0x24>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003772:	687b      	ldr	r3, [r7, #4]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	420e0020 	.word	0x420e0020
 8003784:	40007000 	.word	0x40007000

08003788 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 800378e:	4b06      	ldr	r3, [pc, #24]	@ (80037a8 <HAL_PWR_DisableBkUpAccess+0x20>)
 8003790:	2200      	movs	r2, #0
 8003792:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003794:	4b05      	ldr	r3, [pc, #20]	@ (80037ac <HAL_PWR_DisableBkUpAccess+0x24>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800379a:	687b      	ldr	r3, [r7, #4]
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	420e0020 	.word	0x420e0020
 80037ac:	40007000 	.word	0x40007000

080037b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e267      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d075      	beq.n	80038ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037ce:	4b88      	ldr	r3, [pc, #544]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d00c      	beq.n	80037f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037da:	4b85      	ldr	r3, [pc, #532]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d112      	bne.n	800380c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e6:	4b82      	ldr	r3, [pc, #520]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037f2:	d10b      	bne.n	800380c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f4:	4b7e      	ldr	r3, [pc, #504]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d05b      	beq.n	80038b8 <HAL_RCC_OscConfig+0x108>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d157      	bne.n	80038b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e242      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003814:	d106      	bne.n	8003824 <HAL_RCC_OscConfig+0x74>
 8003816:	4b76      	ldr	r3, [pc, #472]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a75      	ldr	r2, [pc, #468]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e01d      	b.n	8003860 <HAL_RCC_OscConfig+0xb0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800382c:	d10c      	bne.n	8003848 <HAL_RCC_OscConfig+0x98>
 800382e:	4b70      	ldr	r3, [pc, #448]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a6f      	ldr	r2, [pc, #444]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b6d      	ldr	r3, [pc, #436]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a6c      	ldr	r2, [pc, #432]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	e00b      	b.n	8003860 <HAL_RCC_OscConfig+0xb0>
 8003848:	4b69      	ldr	r3, [pc, #420]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a68      	ldr	r2, [pc, #416]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800384e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4b66      	ldr	r3, [pc, #408]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a65      	ldr	r2, [pc, #404]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800385a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800385e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d013      	beq.n	8003890 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7ff fa94 	bl	8002d94 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7ff fa90 	bl	8002d94 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	@ 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e207      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	4b5b      	ldr	r3, [pc, #364]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0xc0>
 800388e:	e014      	b.n	80038ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7ff fa80 	bl	8002d94 <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003898:	f7ff fa7c 	bl	8002d94 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	@ 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e1f3      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038aa:	4b51      	ldr	r3, [pc, #324]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0xe8>
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d063      	beq.n	800398e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038c6:	4b4a      	ldr	r3, [pc, #296]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038d2:	4b47      	ldr	r3, [pc, #284]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d11c      	bne.n	8003918 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038de:	4b44      	ldr	r3, [pc, #272]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d116      	bne.n	8003918 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ea:	4b41      	ldr	r3, [pc, #260]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_RCC_OscConfig+0x152>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e1c7      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003902:	4b3b      	ldr	r3, [pc, #236]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4937      	ldr	r1, [pc, #220]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003916:	e03a      	b.n	800398e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d020      	beq.n	8003962 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003920:	4b34      	ldr	r3, [pc, #208]	@ (80039f4 <HAL_RCC_OscConfig+0x244>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7ff fa35 	bl	8002d94 <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392e:	f7ff fa31 	bl	8002d94 <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e1a8      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003940:	4b2b      	ldr	r3, [pc, #172]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394c:	4b28      	ldr	r3, [pc, #160]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4925      	ldr	r1, [pc, #148]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]
 8003960:	e015      	b.n	800398e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003962:	4b24      	ldr	r3, [pc, #144]	@ (80039f4 <HAL_RCC_OscConfig+0x244>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7ff fa14 	bl	8002d94 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003970:	f7ff fa10 	bl	8002d94 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e187      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003982:	4b1b      	ldr	r3, [pc, #108]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d036      	beq.n	8003a08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d016      	beq.n	80039d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a2:	4b15      	ldr	r3, [pc, #84]	@ (80039f8 <HAL_RCC_OscConfig+0x248>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7ff f9f4 	bl	8002d94 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b0:	f7ff f9f0 	bl	8002d94 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e167      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c2:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80039c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x200>
 80039ce:	e01b      	b.n	8003a08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d0:	4b09      	ldr	r3, [pc, #36]	@ (80039f8 <HAL_RCC_OscConfig+0x248>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d6:	f7ff f9dd 	bl	8002d94 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	e00e      	b.n	80039fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039de:	f7ff f9d9 	bl	8002d94 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d907      	bls.n	80039fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e150      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
 80039f0:	40023800 	.word	0x40023800
 80039f4:	42470000 	.word	0x42470000
 80039f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039fc:	4b88      	ldr	r3, [pc, #544]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 80039fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1ea      	bne.n	80039de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8097 	beq.w	8003b44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a16:	2300      	movs	r3, #0
 8003a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a1a:	4b81      	ldr	r3, [pc, #516]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10f      	bne.n	8003a46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a36:	4b7a      	ldr	r3, [pc, #488]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a42:	2301      	movs	r3, #1
 8003a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a46:	4b77      	ldr	r3, [pc, #476]	@ (8003c24 <HAL_RCC_OscConfig+0x474>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d118      	bne.n	8003a84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a52:	4b74      	ldr	r3, [pc, #464]	@ (8003c24 <HAL_RCC_OscConfig+0x474>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a73      	ldr	r2, [pc, #460]	@ (8003c24 <HAL_RCC_OscConfig+0x474>)
 8003a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a5e:	f7ff f999 	bl	8002d94 <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a66:	f7ff f995 	bl	8002d94 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e10c      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a78:	4b6a      	ldr	r3, [pc, #424]	@ (8003c24 <HAL_RCC_OscConfig+0x474>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d106      	bne.n	8003a9a <HAL_RCC_OscConfig+0x2ea>
 8003a8c:	4b64      	ldr	r3, [pc, #400]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a90:	4a63      	ldr	r2, [pc, #396]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a98:	e01c      	b.n	8003ad4 <HAL_RCC_OscConfig+0x324>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCC_OscConfig+0x30c>
 8003aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	4a5e      	ldr	r2, [pc, #376]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	f043 0304 	orr.w	r3, r3, #4
 8003aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aae:	4b5c      	ldr	r3, [pc, #368]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab2:	4a5b      	ldr	r2, [pc, #364]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aba:	e00b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x324>
 8003abc:	4b58      	ldr	r3, [pc, #352]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac0:	4a57      	ldr	r2, [pc, #348]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	f023 0301 	bic.w	r3, r3, #1
 8003ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac8:	4b55      	ldr	r3, [pc, #340]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003acc:	4a54      	ldr	r2, [pc, #336]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003ace:	f023 0304 	bic.w	r3, r3, #4
 8003ad2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003adc:	f7ff f95a 	bl	8002d94 <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae4:	f7ff f956 	bl	8002d94 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e0cb      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afa:	4b49      	ldr	r3, [pc, #292]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0ee      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x334>
 8003b06:	e014      	b.n	8003b32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b08:	f7ff f944 	bl	8002d94 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7ff f940 	bl	8002d94 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e0b5      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b26:	4b3e      	ldr	r3, [pc, #248]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1ee      	bne.n	8003b10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d105      	bne.n	8003b44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b38:	4b39      	ldr	r3, [pc, #228]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	4a38      	ldr	r2, [pc, #224]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80a1 	beq.w	8003c90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b4e:	4b34      	ldr	r3, [pc, #208]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d05c      	beq.n	8003c14 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d141      	bne.n	8003be6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b62:	4b31      	ldr	r3, [pc, #196]	@ (8003c28 <HAL_RCC_OscConfig+0x478>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7ff f914 	bl	8002d94 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b70:	f7ff f910 	bl	8002d94 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e087      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	4b27      	ldr	r3, [pc, #156]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	019b      	lsls	r3, r3, #6
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	041b      	lsls	r3, r3, #16
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	061b      	lsls	r3, r3, #24
 8003bb2:	491b      	ldr	r1, [pc, #108]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <HAL_RCC_OscConfig+0x478>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7ff f8e9 	bl	8002d94 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc6:	f7ff f8e5 	bl	8002d94 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e05c      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd8:	4b11      	ldr	r3, [pc, #68]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x416>
 8003be4:	e054      	b.n	8003c90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be6:	4b10      	ldr	r3, [pc, #64]	@ (8003c28 <HAL_RCC_OscConfig+0x478>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7ff f8d2 	bl	8002d94 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7ff f8ce 	bl	8002d94 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e045      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x444>
 8003c12:	e03d      	b.n	8003c90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d107      	bne.n	8003c2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e038      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40007000 	.word	0x40007000
 8003c28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c9c <HAL_RCC_OscConfig+0x4ec>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d028      	beq.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d121      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d11a      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d111      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	3b01      	subs	r3, #1
 8003c76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800

08003ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0cc      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b68      	ldr	r3, [pc, #416]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d90c      	bls.n	8003cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b65      	ldr	r3, [pc, #404]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b63      	ldr	r3, [pc, #396]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0b8      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d020      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf4:	4b59      	ldr	r3, [pc, #356]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a58      	ldr	r2, [pc, #352]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d0c:	4b53      	ldr	r3, [pc, #332]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4a52      	ldr	r2, [pc, #328]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d18:	4b50      	ldr	r3, [pc, #320]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	494d      	ldr	r1, [pc, #308]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d044      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3e:	4b47      	ldr	r3, [pc, #284]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d119      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e07f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d003      	beq.n	8003d5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e06f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e067      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7e:	4b37      	ldr	r3, [pc, #220]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f023 0203 	bic.w	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4934      	ldr	r1, [pc, #208]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d90:	f7ff f800 	bl	8002d94 <HAL_GetTick>
 8003d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d98:	f7fe fffc 	bl	8002d94 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e04f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	4b2b      	ldr	r3, [pc, #172]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 020c 	and.w	r2, r3, #12
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d1eb      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b25      	ldr	r3, [pc, #148]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d20c      	bcs.n	8003de8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b22      	ldr	r3, [pc, #136]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b20      	ldr	r3, [pc, #128]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e032      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df4:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4916      	ldr	r1, [pc, #88]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e12:	4b12      	ldr	r3, [pc, #72]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	490e      	ldr	r1, [pc, #56]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e26:	f000 f821 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	490a      	ldr	r1, [pc, #40]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003e38:	5ccb      	ldrb	r3, [r1, r3]
 8003e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3e:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e42:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fe ff60 	bl	8002d0c <HAL_InitTick>

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40023c00 	.word	0x40023c00
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	08009d48 	.word	0x08009d48
 8003e64:	20000000 	.word	0x20000000
 8003e68:	20000004 	.word	0x20000004

08003e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e70:	b090      	sub	sp, #64	@ 0x40
 8003e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e84:	4b59      	ldr	r3, [pc, #356]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x180>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d00d      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x40>
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	f200 80a1 	bhi.w	8003fd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e9e:	e09b      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ea0:	4b53      	ldr	r3, [pc, #332]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ea4:	e09b      	b.n	8003fde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ea6:	4b53      	ldr	r3, [pc, #332]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003eaa:	e098      	b.n	8003fde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eac:	4b4f      	ldr	r3, [pc, #316]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x180>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eb4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eb6:	4b4d      	ldr	r3, [pc, #308]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x180>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d028      	beq.n	8003f14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x180>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	099b      	lsrs	r3, r3, #6
 8003ec8:	2200      	movs	r2, #0
 8003eca:	623b      	str	r3, [r7, #32]
 8003ecc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ece:	6a3b      	ldr	r3, [r7, #32]
 8003ed0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	4b47      	ldr	r3, [pc, #284]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ed8:	fb03 f201 	mul.w	r2, r3, r1
 8003edc:	2300      	movs	r3, #0
 8003ede:	fb00 f303 	mul.w	r3, r0, r3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	4a43      	ldr	r2, [pc, #268]	@ (8003ff4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ee6:	fba0 1202 	umull	r1, r2, r0, r2
 8003eea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003eec:	460a      	mov	r2, r1
 8003eee:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ef0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ef2:	4413      	add	r3, r2
 8003ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef8:	2200      	movs	r2, #0
 8003efa:	61bb      	str	r3, [r7, #24]
 8003efc:	61fa      	str	r2, [r7, #28]
 8003efe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003f06:	f7fc fe9f 	bl	8000c48 <__aeabi_uldivmod>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4613      	mov	r3, r2
 8003f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f12:	e053      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f14:	4b35      	ldr	r3, [pc, #212]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x180>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	099b      	lsrs	r3, r3, #6
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	613b      	str	r3, [r7, #16]
 8003f1e:	617a      	str	r2, [r7, #20]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003f26:	f04f 0b00 	mov.w	fp, #0
 8003f2a:	4652      	mov	r2, sl
 8003f2c:	465b      	mov	r3, fp
 8003f2e:	f04f 0000 	mov.w	r0, #0
 8003f32:	f04f 0100 	mov.w	r1, #0
 8003f36:	0159      	lsls	r1, r3, #5
 8003f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f3c:	0150      	lsls	r0, r2, #5
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	ebb2 080a 	subs.w	r8, r2, sl
 8003f46:	eb63 090b 	sbc.w	r9, r3, fp
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	f04f 0300 	mov.w	r3, #0
 8003f52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003f56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003f5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003f5e:	ebb2 0408 	subs.w	r4, r2, r8
 8003f62:	eb63 0509 	sbc.w	r5, r3, r9
 8003f66:	f04f 0200 	mov.w	r2, #0
 8003f6a:	f04f 0300 	mov.w	r3, #0
 8003f6e:	00eb      	lsls	r3, r5, #3
 8003f70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f74:	00e2      	lsls	r2, r4, #3
 8003f76:	4614      	mov	r4, r2
 8003f78:	461d      	mov	r5, r3
 8003f7a:	eb14 030a 	adds.w	r3, r4, sl
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	eb45 030b 	adc.w	r3, r5, fp
 8003f84:	607b      	str	r3, [r7, #4]
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f92:	4629      	mov	r1, r5
 8003f94:	028b      	lsls	r3, r1, #10
 8003f96:	4621      	mov	r1, r4
 8003f98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	028a      	lsls	r2, r1, #10
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	4619      	mov	r1, r3
 8003fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	60fa      	str	r2, [r7, #12]
 8003fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fb0:	f7fc fe4a 	bl	8000c48 <__aeabi_uldivmod>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4613      	mov	r3, r2
 8003fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003fec <HAL_RCC_GetSysClockFreq+0x180>)
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	0c1b      	lsrs	r3, r3, #16
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003fcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fd6:	e002      	b.n	8003fde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fd8:	4b05      	ldr	r3, [pc, #20]	@ (8003ff0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3740      	adds	r7, #64	@ 0x40
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fea:	bf00      	nop
 8003fec:	40023800 	.word	0x40023800
 8003ff0:	00f42400 	.word	0x00f42400
 8003ff4:	017d7840 	.word	0x017d7840

08003ff8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ffc:	4b03      	ldr	r3, [pc, #12]	@ (800400c <HAL_RCC_GetHCLKFreq+0x14>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
}
 8004000:	4618      	mov	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000000 	.word	0x20000000

08004010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004014:	f7ff fff0 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 8004018:	4602      	mov	r2, r0
 800401a:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <HAL_RCC_GetPCLK1Freq+0x20>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	0a9b      	lsrs	r3, r3, #10
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	4903      	ldr	r1, [pc, #12]	@ (8004034 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004026:	5ccb      	ldrb	r3, [r1, r3]
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800402c:	4618      	mov	r0, r3
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40023800 	.word	0x40023800
 8004034:	08009d58 	.word	0x08009d58

08004038 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800403c:	f7ff ffdc 	bl	8003ff8 <HAL_RCC_GetHCLKFreq>
 8004040:	4602      	mov	r2, r0
 8004042:	4b05      	ldr	r3, [pc, #20]	@ (8004058 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	0b5b      	lsrs	r3, r3, #13
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	4903      	ldr	r1, [pc, #12]	@ (800405c <HAL_RCC_GetPCLK2Freq+0x24>)
 800404e:	5ccb      	ldrb	r3, [r1, r3]
 8004050:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004054:	4618      	mov	r0, r3
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40023800 	.word	0x40023800
 800405c:	08009d58 	.word	0x08009d58

08004060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e041      	b.n	80040f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fe fab4 	bl	80025f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	4619      	mov	r1, r3
 800409e:	4610      	mov	r0, r2
 80040a0:	f000 fdf2 	bl	8004c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	d001      	beq.n	8004118 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e046      	b.n	80041a6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a23      	ldr	r2, [pc, #140]	@ (80041b4 <HAL_TIM_Base_Start+0xb4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d022      	beq.n	8004170 <HAL_TIM_Base_Start+0x70>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004132:	d01d      	beq.n	8004170 <HAL_TIM_Base_Start+0x70>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1f      	ldr	r2, [pc, #124]	@ (80041b8 <HAL_TIM_Base_Start+0xb8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d018      	beq.n	8004170 <HAL_TIM_Base_Start+0x70>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1e      	ldr	r2, [pc, #120]	@ (80041bc <HAL_TIM_Base_Start+0xbc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d013      	beq.n	8004170 <HAL_TIM_Base_Start+0x70>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1c      	ldr	r2, [pc, #112]	@ (80041c0 <HAL_TIM_Base_Start+0xc0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00e      	beq.n	8004170 <HAL_TIM_Base_Start+0x70>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a1b      	ldr	r2, [pc, #108]	@ (80041c4 <HAL_TIM_Base_Start+0xc4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d009      	beq.n	8004170 <HAL_TIM_Base_Start+0x70>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a19      	ldr	r2, [pc, #100]	@ (80041c8 <HAL_TIM_Base_Start+0xc8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d004      	beq.n	8004170 <HAL_TIM_Base_Start+0x70>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a18      	ldr	r2, [pc, #96]	@ (80041cc <HAL_TIM_Base_Start+0xcc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d111      	bne.n	8004194 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b06      	cmp	r3, #6
 8004180:	d010      	beq.n	80041a4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f042 0201 	orr.w	r2, r2, #1
 8004190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004192:	e007      	b.n	80041a4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3714      	adds	r7, #20
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40010000 	.word	0x40010000
 80041b8:	40000400 	.word	0x40000400
 80041bc:	40000800 	.word	0x40000800
 80041c0:	40000c00 	.word	0x40000c00
 80041c4:	40010400 	.word	0x40010400
 80041c8:	40014000 	.word	0x40014000
 80041cc:	40001800 	.word	0x40001800

080041d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e041      	b.n	8004266 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f839 	bl	800426e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2202      	movs	r2, #2
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	3304      	adds	r3, #4
 800420c:	4619      	mov	r1, r3
 800420e:	4610      	mov	r0, r2
 8004210:	f000 fd3a 	bl	8004c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800426e:	b480      	push	{r7}
 8004270:	b083      	sub	sp, #12
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d109      	bne.n	80042a8 <HAL_TIM_PWM_Start+0x24>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	bf14      	ite	ne
 80042a0:	2301      	movne	r3, #1
 80042a2:	2300      	moveq	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	e022      	b.n	80042ee <HAL_TIM_PWM_Start+0x6a>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d109      	bne.n	80042c2 <HAL_TIM_PWM_Start+0x3e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	bf14      	ite	ne
 80042ba:	2301      	movne	r3, #1
 80042bc:	2300      	moveq	r3, #0
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	e015      	b.n	80042ee <HAL_TIM_PWM_Start+0x6a>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d109      	bne.n	80042dc <HAL_TIM_PWM_Start+0x58>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	bf14      	ite	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	2300      	moveq	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	e008      	b.n	80042ee <HAL_TIM_PWM_Start+0x6a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	bf14      	ite	ne
 80042e8:	2301      	movne	r3, #1
 80042ea:	2300      	moveq	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e07c      	b.n	80043f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d104      	bne.n	8004306 <HAL_TIM_PWM_Start+0x82>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004304:	e013      	b.n	800432e <HAL_TIM_PWM_Start+0xaa>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b04      	cmp	r3, #4
 800430a:	d104      	bne.n	8004316 <HAL_TIM_PWM_Start+0x92>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004314:	e00b      	b.n	800432e <HAL_TIM_PWM_Start+0xaa>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b08      	cmp	r3, #8
 800431a:	d104      	bne.n	8004326 <HAL_TIM_PWM_Start+0xa2>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004324:	e003      	b.n	800432e <HAL_TIM_PWM_Start+0xaa>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2201      	movs	r2, #1
 8004334:	6839      	ldr	r1, [r7, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f000 ff9c 	bl	8005274 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a2d      	ldr	r2, [pc, #180]	@ (80043f8 <HAL_TIM_PWM_Start+0x174>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_TIM_PWM_Start+0xcc>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a2c      	ldr	r2, [pc, #176]	@ (80043fc <HAL_TIM_PWM_Start+0x178>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_TIM_PWM_Start+0xd0>
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <HAL_TIM_PWM_Start+0xd2>
 8004354:	2300      	movs	r3, #0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004368:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a22      	ldr	r2, [pc, #136]	@ (80043f8 <HAL_TIM_PWM_Start+0x174>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d022      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800437c:	d01d      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1f      	ldr	r2, [pc, #124]	@ (8004400 <HAL_TIM_PWM_Start+0x17c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d018      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a1d      	ldr	r2, [pc, #116]	@ (8004404 <HAL_TIM_PWM_Start+0x180>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d013      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a1c      	ldr	r2, [pc, #112]	@ (8004408 <HAL_TIM_PWM_Start+0x184>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a16      	ldr	r2, [pc, #88]	@ (80043fc <HAL_TIM_PWM_Start+0x178>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a18      	ldr	r2, [pc, #96]	@ (800440c <HAL_TIM_PWM_Start+0x188>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_TIM_PWM_Start+0x136>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a16      	ldr	r2, [pc, #88]	@ (8004410 <HAL_TIM_PWM_Start+0x18c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d111      	bne.n	80043de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b06      	cmp	r3, #6
 80043ca:	d010      	beq.n	80043ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043dc:	e007      	b.n	80043ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0201 	orr.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40010400 	.word	0x40010400
 8004400:	40000400 	.word	0x40000400
 8004404:	40000800 	.word	0x40000800
 8004408:	40000c00 	.word	0x40000c00
 800440c:	40014000 	.word	0x40014000
 8004410:	40001800 	.word	0x40001800

08004414 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d101      	bne.n	8004428 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e097      	b.n	8004558 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d106      	bne.n	8004442 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f7fe f955 	bl	80026ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2202      	movs	r2, #2
 8004446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	6812      	ldr	r2, [r2, #0]
 8004454:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004458:	f023 0307 	bic.w	r3, r3, #7
 800445c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3304      	adds	r3, #4
 8004466:	4619      	mov	r1, r3
 8004468:	4610      	mov	r0, r2
 800446a:	f000 fc0d 	bl	8004c88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	6a1b      	ldr	r3, [r3, #32]
 8004484:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004496:	f023 0303 	bic.w	r3, r3, #3
 800449a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	4313      	orrs	r3, r2
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80044b4:	f023 030c 	bic.w	r3, r3, #12
 80044b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80044c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	68da      	ldr	r2, [r3, #12]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	021b      	lsls	r3, r3, #8
 80044d0:	4313      	orrs	r3, r2
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	011a      	lsls	r2, r3, #4
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	031b      	lsls	r3, r3, #12
 80044e4:	4313      	orrs	r3, r2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80044f2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	011b      	lsls	r3, r3, #4
 8004506:	4313      	orrs	r3, r2
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004570:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004578:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004580:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004588:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d110      	bne.n	80045b2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004590:	7bfb      	ldrb	r3, [r7, #15]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d102      	bne.n	800459c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004596:	7b7b      	ldrb	r3, [r7, #13]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d001      	beq.n	80045a0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e089      	b.n	80046b4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045b0:	e031      	b.n	8004616 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d110      	bne.n	80045da <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045b8:	7bbb      	ldrb	r3, [r7, #14]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d102      	bne.n	80045c4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045be:	7b3b      	ldrb	r3, [r7, #12]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d001      	beq.n	80045c8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e075      	b.n	80046b4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045d8:	e01d      	b.n	8004616 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045da:	7bfb      	ldrb	r3, [r7, #15]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d108      	bne.n	80045f2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80045e0:	7bbb      	ldrb	r3, [r7, #14]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d105      	bne.n	80045f2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80045e6:	7b7b      	ldrb	r3, [r7, #13]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d102      	bne.n	80045f2 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80045ec:	7b3b      	ldrb	r3, [r7, #12]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d001      	beq.n	80045f6 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e05e      	b.n	80046b4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2202      	movs	r2, #2
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2202      	movs	r2, #2
 8004602:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d003      	beq.n	8004624 <HAL_TIM_Encoder_Start_IT+0xc4>
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b04      	cmp	r3, #4
 8004620:	d010      	beq.n	8004644 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004622:	e01f      	b.n	8004664 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2201      	movs	r2, #1
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fe21 	bl	8005274 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68da      	ldr	r2, [r3, #12]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0202 	orr.w	r2, r2, #2
 8004640:	60da      	str	r2, [r3, #12]
      break;
 8004642:	e02e      	b.n	80046a2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2201      	movs	r2, #1
 800464a:	2104      	movs	r1, #4
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fe11 	bl	8005274 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f042 0204 	orr.w	r2, r2, #4
 8004660:	60da      	str	r2, [r3, #12]
      break;
 8004662:	e01e      	b.n	80046a2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2201      	movs	r2, #1
 800466a:	2100      	movs	r1, #0
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fe01 	bl	8005274 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	2201      	movs	r2, #1
 8004678:	2104      	movs	r1, #4
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fdfa 	bl	8005274 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0202 	orr.w	r2, r2, #2
 800468e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0204 	orr.w	r2, r2, #4
 800469e:	60da      	str	r2, [r3, #12]
      break;
 80046a0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d020      	beq.n	8004720 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d01b      	beq.n	8004720 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f06f 0202 	mvn.w	r2, #2
 80046f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	f003 0303 	and.w	r3, r3, #3
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f7fc fd32 	bl	8001170 <HAL_TIM_IC_CaptureCallback>
 800470c:	e005      	b.n	800471a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 fa9c 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 faa3 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d020      	beq.n	800476c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01b      	beq.n	800476c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f06f 0204 	mvn.w	r2, #4
 800473c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2202      	movs	r2, #2
 8004742:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc fd0c 	bl	8001170 <HAL_TIM_IC_CaptureCallback>
 8004758:	e005      	b.n	8004766 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 fa76 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 fa7d 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 0308 	and.w	r3, r3, #8
 8004772:	2b00      	cmp	r3, #0
 8004774:	d020      	beq.n	80047b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d01b      	beq.n	80047b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f06f 0208 	mvn.w	r2, #8
 8004788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2204      	movs	r2, #4
 800478e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f003 0303 	and.w	r3, r3, #3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7fc fce6 	bl	8001170 <HAL_TIM_IC_CaptureCallback>
 80047a4:	e005      	b.n	80047b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fa50 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fa57 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d020      	beq.n	8004804 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d01b      	beq.n	8004804 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f06f 0210 	mvn.w	r2, #16
 80047d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2208      	movs	r2, #8
 80047da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d003      	beq.n	80047f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fc fcc0 	bl	8001170 <HAL_TIM_IC_CaptureCallback>
 80047f0:	e005      	b.n	80047fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fa2a 	bl	8004c4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fa31 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00c      	beq.n	8004828 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f06f 0201 	mvn.w	r2, #1
 8004820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 fa08 	bl	8004c38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00c      	beq.n	800484c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fe12 	bl	8005470 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00c      	beq.n	8004870 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004868:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa02 	bl	8004c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00c      	beq.n	8004894 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d007      	beq.n	8004894 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f06f 0220 	mvn.w	r2, #32
 800488c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fde4 	bl	800545c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004894:	bf00      	nop
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e0ae      	b.n	8004a18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b0c      	cmp	r3, #12
 80048c6:	f200 809f 	bhi.w	8004a08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048ca:	a201      	add	r2, pc, #4	@ (adr r2, 80048d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	08004905 	.word	0x08004905
 80048d4:	08004a09 	.word	0x08004a09
 80048d8:	08004a09 	.word	0x08004a09
 80048dc:	08004a09 	.word	0x08004a09
 80048e0:	08004945 	.word	0x08004945
 80048e4:	08004a09 	.word	0x08004a09
 80048e8:	08004a09 	.word	0x08004a09
 80048ec:	08004a09 	.word	0x08004a09
 80048f0:	08004987 	.word	0x08004987
 80048f4:	08004a09 	.word	0x08004a09
 80048f8:	08004a09 	.word	0x08004a09
 80048fc:	08004a09 	.word	0x08004a09
 8004900:	080049c7 	.word	0x080049c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fa68 	bl	8004de0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699a      	ldr	r2, [r3, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0208 	orr.w	r2, r2, #8
 800491e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	699a      	ldr	r2, [r3, #24]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0204 	bic.w	r2, r2, #4
 800492e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	6999      	ldr	r1, [r3, #24]
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	430a      	orrs	r2, r1
 8004940:	619a      	str	r2, [r3, #24]
      break;
 8004942:	e064      	b.n	8004a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 fab8 	bl	8004ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800495e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800496e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6999      	ldr	r1, [r3, #24]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	021a      	lsls	r2, r3, #8
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	430a      	orrs	r2, r1
 8004982:	619a      	str	r2, [r3, #24]
      break;
 8004984:	e043      	b.n	8004a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68b9      	ldr	r1, [r7, #8]
 800498c:	4618      	mov	r0, r3
 800498e:	f000 fb0d 	bl	8004fac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	69da      	ldr	r2, [r3, #28]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0208 	orr.w	r2, r2, #8
 80049a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	69da      	ldr	r2, [r3, #28]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0204 	bic.w	r2, r2, #4
 80049b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69d9      	ldr	r1, [r3, #28]
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	61da      	str	r2, [r3, #28]
      break;
 80049c4:	e023      	b.n	8004a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fb61 	bl	8005094 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69d9      	ldr	r1, [r3, #28]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	021a      	lsls	r2, r3, #8
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	61da      	str	r2, [r3, #28]
      break;
 8004a06:	e002      	b.n	8004a0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_TIM_ConfigClockSource+0x1c>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e0b4      	b.n	8004ba6 <HAL_TIM_ConfigClockSource+0x186>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a74:	d03e      	beq.n	8004af4 <HAL_TIM_ConfigClockSource+0xd4>
 8004a76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a7a:	f200 8087 	bhi.w	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004a7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a82:	f000 8086 	beq.w	8004b92 <HAL_TIM_ConfigClockSource+0x172>
 8004a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a8a:	d87f      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004a8c:	2b70      	cmp	r3, #112	@ 0x70
 8004a8e:	d01a      	beq.n	8004ac6 <HAL_TIM_ConfigClockSource+0xa6>
 8004a90:	2b70      	cmp	r3, #112	@ 0x70
 8004a92:	d87b      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004a94:	2b60      	cmp	r3, #96	@ 0x60
 8004a96:	d050      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0x11a>
 8004a98:	2b60      	cmp	r3, #96	@ 0x60
 8004a9a:	d877      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004a9c:	2b50      	cmp	r3, #80	@ 0x50
 8004a9e:	d03c      	beq.n	8004b1a <HAL_TIM_ConfigClockSource+0xfa>
 8004aa0:	2b50      	cmp	r3, #80	@ 0x50
 8004aa2:	d873      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004aa4:	2b40      	cmp	r3, #64	@ 0x40
 8004aa6:	d058      	beq.n	8004b5a <HAL_TIM_ConfigClockSource+0x13a>
 8004aa8:	2b40      	cmp	r3, #64	@ 0x40
 8004aaa:	d86f      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004aac:	2b30      	cmp	r3, #48	@ 0x30
 8004aae:	d064      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x15a>
 8004ab0:	2b30      	cmp	r3, #48	@ 0x30
 8004ab2:	d86b      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d060      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x15a>
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d867      	bhi.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d05c      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x15a>
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d05a      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0x15a>
 8004ac4:	e062      	b.n	8004b8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ad6:	f000 fbad 	bl	8005234 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ae8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	609a      	str	r2, [r3, #8]
      break;
 8004af2:	e04f      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b04:	f000 fb96 	bl	8005234 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689a      	ldr	r2, [r3, #8]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b16:	609a      	str	r2, [r3, #8]
      break;
 8004b18:	e03c      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b26:	461a      	mov	r2, r3
 8004b28:	f000 fb0a 	bl	8005140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2150      	movs	r1, #80	@ 0x50
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fb63 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 8004b38:	e02c      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b46:	461a      	mov	r2, r3
 8004b48:	f000 fb29 	bl	800519e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2160      	movs	r1, #96	@ 0x60
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fb53 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 8004b58:	e01c      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b66:	461a      	mov	r2, r3
 8004b68:	f000 faea 	bl	8005140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2140      	movs	r1, #64	@ 0x40
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fb43 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 8004b78:	e00c      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4619      	mov	r1, r3
 8004b84:	4610      	mov	r0, r2
 8004b86:	f000 fb3a 	bl	80051fe <TIM_ITRx_SetConfig>
      break;
 8004b8a:	e003      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b90:	e000      	b.n	8004b94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b0c      	cmp	r3, #12
 8004bc2:	d831      	bhi.n	8004c28 <HAL_TIM_ReadCapturedValue+0x78>
 8004bc4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bcc <HAL_TIM_ReadCapturedValue+0x1c>)
 8004bc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bca:	bf00      	nop
 8004bcc:	08004c01 	.word	0x08004c01
 8004bd0:	08004c29 	.word	0x08004c29
 8004bd4:	08004c29 	.word	0x08004c29
 8004bd8:	08004c29 	.word	0x08004c29
 8004bdc:	08004c0b 	.word	0x08004c0b
 8004be0:	08004c29 	.word	0x08004c29
 8004be4:	08004c29 	.word	0x08004c29
 8004be8:	08004c29 	.word	0x08004c29
 8004bec:	08004c15 	.word	0x08004c15
 8004bf0:	08004c29 	.word	0x08004c29
 8004bf4:	08004c29 	.word	0x08004c29
 8004bf8:	08004c29 	.word	0x08004c29
 8004bfc:	08004c1f 	.word	0x08004c1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c06:	60fb      	str	r3, [r7, #12]

      break;
 8004c08:	e00f      	b.n	8004c2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c10:	60fb      	str	r3, [r7, #12]

      break;
 8004c12:	e00a      	b.n	8004c2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1a:	60fb      	str	r3, [r7, #12]

      break;
 8004c1c:	e005      	b.n	8004c2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c24:	60fb      	str	r3, [r7, #12]

      break;
 8004c26:	e000      	b.n	8004c2a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004c28:	bf00      	nop
  }

  return tmpreg;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c54:	bf00      	nop
 8004c56:	370c      	adds	r7, #12
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a46      	ldr	r2, [pc, #280]	@ (8004db4 <TIM_Base_SetConfig+0x12c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d013      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca6:	d00f      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a43      	ldr	r2, [pc, #268]	@ (8004db8 <TIM_Base_SetConfig+0x130>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00b      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a42      	ldr	r2, [pc, #264]	@ (8004dbc <TIM_Base_SetConfig+0x134>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d007      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a41      	ldr	r2, [pc, #260]	@ (8004dc0 <TIM_Base_SetConfig+0x138>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d003      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a40      	ldr	r2, [pc, #256]	@ (8004dc4 <TIM_Base_SetConfig+0x13c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d108      	bne.n	8004cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a35      	ldr	r2, [pc, #212]	@ (8004db4 <TIM_Base_SetConfig+0x12c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d02b      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ce8:	d027      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a32      	ldr	r2, [pc, #200]	@ (8004db8 <TIM_Base_SetConfig+0x130>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d023      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a31      	ldr	r2, [pc, #196]	@ (8004dbc <TIM_Base_SetConfig+0x134>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d01f      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a30      	ldr	r2, [pc, #192]	@ (8004dc0 <TIM_Base_SetConfig+0x138>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01b      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a2f      	ldr	r2, [pc, #188]	@ (8004dc4 <TIM_Base_SetConfig+0x13c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d017      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a2e      	ldr	r2, [pc, #184]	@ (8004dc8 <TIM_Base_SetConfig+0x140>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a2d      	ldr	r2, [pc, #180]	@ (8004dcc <TIM_Base_SetConfig+0x144>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d00f      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a2c      	ldr	r2, [pc, #176]	@ (8004dd0 <TIM_Base_SetConfig+0x148>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00b      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a2b      	ldr	r2, [pc, #172]	@ (8004dd4 <TIM_Base_SetConfig+0x14c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d007      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a2a      	ldr	r2, [pc, #168]	@ (8004dd8 <TIM_Base_SetConfig+0x150>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d003      	beq.n	8004d3a <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a29      	ldr	r2, [pc, #164]	@ (8004ddc <TIM_Base_SetConfig+0x154>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d108      	bne.n	8004d4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689a      	ldr	r2, [r3, #8]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a10      	ldr	r2, [pc, #64]	@ (8004db4 <TIM_Base_SetConfig+0x12c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_Base_SetConfig+0xf8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a12      	ldr	r2, [pc, #72]	@ (8004dc4 <TIM_Base_SetConfig+0x13c>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d103      	bne.n	8004d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d105      	bne.n	8004da6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	f023 0201 	bic.w	r2, r3, #1
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	611a      	str	r2, [r3, #16]
  }
}
 8004da6:	bf00      	nop
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40010000 	.word	0x40010000
 8004db8:	40000400 	.word	0x40000400
 8004dbc:	40000800 	.word	0x40000800
 8004dc0:	40000c00 	.word	0x40000c00
 8004dc4:	40010400 	.word	0x40010400
 8004dc8:	40014000 	.word	0x40014000
 8004dcc:	40014400 	.word	0x40014400
 8004dd0:	40014800 	.word	0x40014800
 8004dd4:	40001800 	.word	0x40001800
 8004dd8:	40001c00 	.word	0x40001c00
 8004ddc:	40002000 	.word	0x40002000

08004de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f023 0201 	bic.w	r2, r3, #1
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0303 	bic.w	r3, r3, #3
 8004e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f023 0302 	bic.w	r3, r3, #2
 8004e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a20      	ldr	r2, [pc, #128]	@ (8004eb8 <TIM_OC1_SetConfig+0xd8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_OC1_SetConfig+0x64>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a1f      	ldr	r2, [pc, #124]	@ (8004ebc <TIM_OC1_SetConfig+0xdc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d10c      	bne.n	8004e5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f023 0308 	bic.w	r3, r3, #8
 8004e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f023 0304 	bic.w	r3, r3, #4
 8004e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a15      	ldr	r2, [pc, #84]	@ (8004eb8 <TIM_OC1_SetConfig+0xd8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_OC1_SetConfig+0x8e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a14      	ldr	r2, [pc, #80]	@ (8004ebc <TIM_OC1_SetConfig+0xdc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d111      	bne.n	8004e92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	621a      	str	r2, [r3, #32]
}
 8004eac:	bf00      	nop
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	40010000 	.word	0x40010000
 8004ebc:	40010400 	.word	0x40010400

08004ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	f023 0210 	bic.w	r2, r3, #16
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 0320 	bic.w	r3, r3, #32
 8004f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a22      	ldr	r2, [pc, #136]	@ (8004fa4 <TIM_OC2_SetConfig+0xe4>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_OC2_SetConfig+0x68>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a21      	ldr	r2, [pc, #132]	@ (8004fa8 <TIM_OC2_SetConfig+0xe8>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d10d      	bne.n	8004f44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a17      	ldr	r2, [pc, #92]	@ (8004fa4 <TIM_OC2_SetConfig+0xe4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC2_SetConfig+0x94>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a16      	ldr	r2, [pc, #88]	@ (8004fa8 <TIM_OC2_SetConfig+0xe8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d113      	bne.n	8004f7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	621a      	str	r2, [r3, #32]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40010000 	.word	0x40010000
 8004fa8:	40010400 	.word	0x40010400

08004fac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b087      	sub	sp, #28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0303 	bic.w	r3, r3, #3
 8004fe2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ff4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	021b      	lsls	r3, r3, #8
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a21      	ldr	r2, [pc, #132]	@ (800508c <TIM_OC3_SetConfig+0xe0>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d003      	beq.n	8005012 <TIM_OC3_SetConfig+0x66>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a20      	ldr	r2, [pc, #128]	@ (8005090 <TIM_OC3_SetConfig+0xe4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d10d      	bne.n	800502e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005018:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800502c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a16      	ldr	r2, [pc, #88]	@ (800508c <TIM_OC3_SetConfig+0xe0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_OC3_SetConfig+0x92>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a15      	ldr	r2, [pc, #84]	@ (8005090 <TIM_OC3_SetConfig+0xe4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d113      	bne.n	8005066 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800503e:	693b      	ldr	r3, [r7, #16]
 8005040:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800504c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	695b      	ldr	r3, [r3, #20]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	693a      	ldr	r2, [r7, #16]
 800506a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685a      	ldr	r2, [r3, #4]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	621a      	str	r2, [r3, #32]
}
 8005080:	bf00      	nop
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	40010000 	.word	0x40010000
 8005090:	40010400 	.word	0x40010400

08005094 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	031b      	lsls	r3, r3, #12
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a12      	ldr	r2, [pc, #72]	@ (8005138 <TIM_OC4_SetConfig+0xa4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_OC4_SetConfig+0x68>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a11      	ldr	r2, [pc, #68]	@ (800513c <TIM_OC4_SetConfig+0xa8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d109      	bne.n	8005110 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005102:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	019b      	lsls	r3, r3, #6
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	68fa      	ldr	r2, [r7, #12]
 800511a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	621a      	str	r2, [r3, #32]
}
 800512a:	bf00      	nop
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	40010000 	.word	0x40010000
 800513c:	40010400 	.word	0x40010400

08005140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005140:	b480      	push	{r7}
 8005142:	b087      	sub	sp, #28
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	f023 0201 	bic.w	r2, r3, #1
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800516a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f023 030a 	bic.w	r3, r3, #10
 800517c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	621a      	str	r2, [r3, #32]
}
 8005192:	bf00      	nop
 8005194:	371c      	adds	r7, #28
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr

0800519e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800519e:	b480      	push	{r7}
 80051a0:	b087      	sub	sp, #28
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	f023 0210 	bic.w	r2, r3, #16
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	031b      	lsls	r3, r3, #12
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	697a      	ldr	r2, [r7, #20]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	621a      	str	r2, [r3, #32]
}
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005214:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4313      	orrs	r3, r2
 800521c:	f043 0307 	orr.w	r3, r3, #7
 8005220:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	609a      	str	r2, [r3, #8]
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005234:	b480      	push	{r7}
 8005236:	b087      	sub	sp, #28
 8005238:	af00      	add	r7, sp, #0
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
 8005240:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800524e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	021a      	lsls	r2, r3, #8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	431a      	orrs	r2, r3
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4313      	orrs	r3, r2
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	4313      	orrs	r3, r2
 8005260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	697a      	ldr	r2, [r7, #20]
 8005266:	609a      	str	r2, [r3, #8]
}
 8005268:	bf00      	nop
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	2201      	movs	r2, #1
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a1a      	ldr	r2, [r3, #32]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	43db      	mvns	r3, r3
 8005296:	401a      	ands	r2, r3
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a1a      	ldr	r2, [r3, #32]
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	f003 031f 	and.w	r3, r3, #31
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	fa01 f303 	lsl.w	r3, r1, r3
 80052ac:	431a      	orrs	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
	...

080052c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e05a      	b.n	800538e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a21      	ldr	r2, [pc, #132]	@ (800539c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d022      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005324:	d01d      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1d      	ldr	r2, [pc, #116]	@ (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d018      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a1b      	ldr	r2, [pc, #108]	@ (80053a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d013      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1a      	ldr	r2, [pc, #104]	@ (80053a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d00e      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a18      	ldr	r2, [pc, #96]	@ (80053ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d009      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a17      	ldr	r2, [pc, #92]	@ (80053b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d004      	beq.n	8005362 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a15      	ldr	r2, [pc, #84]	@ (80053b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d10c      	bne.n	800537c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	4313      	orrs	r3, r2
 8005372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800538c:	2300      	movs	r3, #0
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr
 800539a:	bf00      	nop
 800539c:	40010000 	.word	0x40010000
 80053a0:	40000400 	.word	0x40000400
 80053a4:	40000800 	.word	0x40000800
 80053a8:	40000c00 	.word	0x40000c00
 80053ac:	40010400 	.word	0x40010400
 80053b0:	40014000 	.word	0x40014000
 80053b4:	40001800 	.word	0x40001800

080053b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053c2:	2300      	movs	r3, #0
 80053c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d101      	bne.n	80053d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053d0:	2302      	movs	r3, #2
 80053d2:	e03d      	b.n	8005450 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	4313      	orrs	r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	695b      	ldr	r3, [r3, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	69db      	ldr	r3, [r3, #28]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e042      	b.n	800551c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800549c:	b2db      	uxtb	r3, r3
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d106      	bne.n	80054b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f7fd fa1a 	bl	80028e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2224      	movs	r2, #36	@ 0x24
 80054b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80054c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 fdbd 	bl	8006048 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	691a      	ldr	r2, [r3, #16]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695a      	ldr	r2, [r3, #20]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68da      	ldr	r2, [r3, #12]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2220      	movs	r2, #32
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2220      	movs	r2, #32
 8005510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800551a:	2300      	movs	r3, #0
}
 800551c:	4618      	mov	r0, r3
 800551e:	3708      	adds	r7, #8
 8005520:	46bd      	mov	sp, r7
 8005522:	bd80      	pop	{r7, pc}

08005524 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b08a      	sub	sp, #40	@ 0x28
 8005528:	af02      	add	r7, sp, #8
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	603b      	str	r3, [r7, #0]
 8005530:	4613      	mov	r3, r2
 8005532:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005534:	2300      	movs	r3, #0
 8005536:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800553e:	b2db      	uxtb	r3, r3
 8005540:	2b20      	cmp	r3, #32
 8005542:	d175      	bne.n	8005630 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d002      	beq.n	8005550 <HAL_UART_Transmit+0x2c>
 800554a:	88fb      	ldrh	r3, [r7, #6]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e06e      	b.n	8005632 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2221      	movs	r2, #33	@ 0x21
 800555e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005562:	f7fd fc17 	bl	8002d94 <HAL_GetTick>
 8005566:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	88fa      	ldrh	r2, [r7, #6]
 800556c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	88fa      	ldrh	r2, [r7, #6]
 8005572:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800557c:	d108      	bne.n	8005590 <HAL_UART_Transmit+0x6c>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	691b      	ldr	r3, [r3, #16]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d104      	bne.n	8005590 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005586:	2300      	movs	r3, #0
 8005588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	61bb      	str	r3, [r7, #24]
 800558e:	e003      	b.n	8005598 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005594:	2300      	movs	r3, #0
 8005596:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005598:	e02e      	b.n	80055f8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	9300      	str	r3, [sp, #0]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2200      	movs	r2, #0
 80055a2:	2180      	movs	r1, #128	@ 0x80
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f000 fb1f 	bl	8005be8 <UART_WaitOnFlagUntilTimeout>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d005      	beq.n	80055bc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2220      	movs	r2, #32
 80055b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e03a      	b.n	8005632 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d10b      	bne.n	80055da <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	881b      	ldrh	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	3302      	adds	r3, #2
 80055d6:	61bb      	str	r3, [r7, #24]
 80055d8:	e007      	b.n	80055ea <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	781a      	ldrb	r2, [r3, #0]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	3301      	adds	r3, #1
 80055e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	3b01      	subs	r3, #1
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1cb      	bne.n	800559a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	9300      	str	r3, [sp, #0]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2200      	movs	r2, #0
 800560a:	2140      	movs	r1, #64	@ 0x40
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 faeb 	bl	8005be8 <UART_WaitOnFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d005      	beq.n	8005624 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2220      	movs	r2, #32
 800561c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005620:	2303      	movs	r3, #3
 8005622:	e006      	b.n	8005632 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	e000      	b.n	8005632 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005630:	2302      	movs	r3, #2
  }
}
 8005632:	4618      	mov	r0, r3
 8005634:	3720      	adds	r7, #32
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	4613      	mov	r3, r2
 8005646:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800564e:	b2db      	uxtb	r3, r3
 8005650:	2b20      	cmp	r3, #32
 8005652:	d112      	bne.n	800567a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <HAL_UART_Receive_IT+0x26>
 800565a:	88fb      	ldrh	r3, [r7, #6]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e00b      	b.n	800567c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	461a      	mov	r2, r3
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 fb12 	bl	8005c9a <UART_Start_Receive_IT>
 8005676:	4603      	mov	r3, r0
 8005678:	e000      	b.n	800567c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800567a:	2302      	movs	r3, #2
  }
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b0ba      	sub	sp, #232	@ 0xe8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80056c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10f      	bne.n	80056ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d009      	beq.n	80056ea <HAL_UART_IRQHandler+0x66>
 80056d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fbf2 	bl	8005ecc <UART_Receive_IT>
      return;
 80056e8:	e25b      	b.n	8005ba2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 80de 	beq.w	80058b0 <HAL_UART_IRQHandler+0x22c>
 80056f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d106      	bne.n	800570e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005704:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 80d1 	beq.w	80058b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d00b      	beq.n	8005732 <HAL_UART_IRQHandler+0xae>
 800571a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800571e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800572a:	f043 0201 	orr.w	r2, r3, #1
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <HAL_UART_IRQHandler+0xd2>
 800573e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800574e:	f043 0202 	orr.w	r2, r3, #2
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00b      	beq.n	800577a <HAL_UART_IRQHandler+0xf6>
 8005762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d005      	beq.n	800577a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005772:	f043 0204 	orr.w	r2, r3, #4
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800577a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b00      	cmp	r3, #0
 8005784:	d011      	beq.n	80057aa <HAL_UART_IRQHandler+0x126>
 8005786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800578a:	f003 0320 	and.w	r3, r3, #32
 800578e:	2b00      	cmp	r3, #0
 8005790:	d105      	bne.n	800579e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057a2:	f043 0208 	orr.w	r2, r3, #8
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 81f2 	beq.w	8005b98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d008      	beq.n	80057d2 <HAL_UART_IRQHandler+0x14e>
 80057c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fb7d 	bl	8005ecc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	695b      	ldr	r3, [r3, #20]
 80057d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057dc:	2b40      	cmp	r3, #64	@ 0x40
 80057de:	bf0c      	ite	eq
 80057e0:	2301      	moveq	r3, #1
 80057e2:	2300      	movne	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ee:	f003 0308 	and.w	r3, r3, #8
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d103      	bne.n	80057fe <HAL_UART_IRQHandler+0x17a>
 80057f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d04f      	beq.n	800589e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 fa85 	bl	8005d0e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800580e:	2b40      	cmp	r3, #64	@ 0x40
 8005810:	d141      	bne.n	8005896 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3314      	adds	r3, #20
 8005818:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005820:	e853 3f00 	ldrex	r3, [r3]
 8005824:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005828:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800582c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005830:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3314      	adds	r3, #20
 800583a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800583e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005842:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800584a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1d9      	bne.n	8005812 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d013      	beq.n	800588e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586a:	4a7e      	ldr	r2, [pc, #504]	@ (8005a64 <HAL_UART_IRQHandler+0x3e0>)
 800586c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005872:	4618      	mov	r0, r3
 8005874:	f7fd fc3f 	bl	80030f6 <HAL_DMA_Abort_IT>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d016      	beq.n	80058ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005888:	4610      	mov	r0, r2
 800588a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800588c:	e00e      	b.n	80058ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f994 	bl	8005bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005894:	e00a      	b.n	80058ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f990 	bl	8005bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589c:	e006      	b.n	80058ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f98c 	bl	8005bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80058aa:	e175      	b.n	8005b98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ac:	bf00      	nop
    return;
 80058ae:	e173      	b.n	8005b98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	f040 814f 	bne.w	8005b58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f000 8148 	beq.w	8005b58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058cc:	f003 0310 	and.w	r3, r3, #16
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 8141 	beq.w	8005b58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058d6:	2300      	movs	r3, #0
 80058d8:	60bb      	str	r3, [r7, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	60bb      	str	r3, [r7, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	60bb      	str	r3, [r7, #8]
 80058ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
 80058f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f6:	2b40      	cmp	r3, #64	@ 0x40
 80058f8:	f040 80b6 	bne.w	8005a68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005908:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800590c:	2b00      	cmp	r3, #0
 800590e:	f000 8145 	beq.w	8005b9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800591a:	429a      	cmp	r2, r3
 800591c:	f080 813e 	bcs.w	8005b9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005926:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005932:	f000 8088 	beq.w	8005a46 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	330c      	adds	r3, #12
 800593c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005944:	e853 3f00 	ldrex	r3, [r3]
 8005948:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800594c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005950:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005954:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	330c      	adds	r3, #12
 800595e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005962:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005966:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800596e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800597a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1d9      	bne.n	8005936 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3314      	adds	r3, #20
 8005988:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005992:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3314      	adds	r3, #20
 80059a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80059a6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80059aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80059ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80059b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e1      	bne.n	8005982 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3314      	adds	r3, #20
 80059c4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3314      	adds	r3, #20
 80059de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d1e3      	bne.n	80059be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	330c      	adds	r3, #12
 8005a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a14:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a16:	f023 0310 	bic.w	r3, r3, #16
 8005a1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	330c      	adds	r3, #12
 8005a24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005a28:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a2a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a2e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e3      	bne.n	8005a04 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a40:	4618      	mov	r0, r3
 8005a42:	f7fd fae8 	bl	8003016 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2202      	movs	r2, #2
 8005a4a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f000 f8b7 	bl	8005bd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a62:	e09b      	b.n	8005b9c <HAL_UART_IRQHandler+0x518>
 8005a64:	08005dd5 	.word	0x08005dd5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 808e 	beq.w	8005ba0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	f000 8089 	beq.w	8005ba0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	330c      	adds	r3, #12
 8005a94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	330c      	adds	r3, #12
 8005aae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005ab2:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ab4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ab8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e3      	bne.n	8005a8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3314      	adds	r3, #20
 8005acc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	f023 0301 	bic.w	r3, r3, #1
 8005adc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3314      	adds	r3, #20
 8005ae6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005aea:	633a      	str	r2, [r7, #48]	@ 0x30
 8005aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005af0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af2:	e841 2300 	strex	r3, r2, [r1]
 8005af6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1e3      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	e853 3f00 	ldrex	r3, [r3]
 8005b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0310 	bic.w	r3, r3, #16
 8005b22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005b30:	61fa      	str	r2, [r7, #28]
 8005b32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	69b9      	ldr	r1, [r7, #24]
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e3      	bne.n	8005b0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2202      	movs	r2, #2
 8005b48:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005b4e:	4619      	mov	r1, r3
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f83d 	bl	8005bd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b56:	e023      	b.n	8005ba0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d009      	beq.n	8005b78 <HAL_UART_IRQHandler+0x4f4>
 8005b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f943 	bl	8005dfc <UART_Transmit_IT>
    return;
 8005b76:	e014      	b.n	8005ba2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00e      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x51e>
 8005b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f983 	bl	8005e9c <UART_EndTransmit_IT>
    return;
 8005b96:	e004      	b.n	8005ba2 <HAL_UART_IRQHandler+0x51e>
    return;
 8005b98:	bf00      	nop
 8005b9a:	e002      	b.n	8005ba2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005b9c:	bf00      	nop
 8005b9e:	e000      	b.n	8005ba2 <HAL_UART_IRQHandler+0x51e>
      return;
 8005ba0:	bf00      	nop
  }
}
 8005ba2:	37e8      	adds	r7, #232	@ 0xe8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b086      	sub	sp, #24
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	603b      	str	r3, [r7, #0]
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bf8:	e03b      	b.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c00:	d037      	beq.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c02:	f7fd f8c7 	bl	8002d94 <HAL_GetTick>
 8005c06:	4602      	mov	r2, r0
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	1ad3      	subs	r3, r2, r3
 8005c0c:	6a3a      	ldr	r2, [r7, #32]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d302      	bcc.n	8005c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d101      	bne.n	8005c1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c18:	2303      	movs	r3, #3
 8005c1a:	e03a      	b.n	8005c92 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d023      	beq.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b80      	cmp	r3, #128	@ 0x80
 8005c2e:	d020      	beq.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	2b40      	cmp	r3, #64	@ 0x40
 8005c34:	d01d      	beq.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d116      	bne.n	8005c72 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005c44:	2300      	movs	r3, #0
 8005c46:	617b      	str	r3, [r7, #20]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	617b      	str	r3, [r7, #20]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 f857 	bl	8005d0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2208      	movs	r2, #8
 8005c64:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e00f      	b.n	8005c92 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	bf0c      	ite	eq
 8005c82:	2301      	moveq	r3, #1
 8005c84:	2300      	movne	r3, #0
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d0b4      	beq.n	8005bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b085      	sub	sp, #20
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	60f8      	str	r0, [r7, #12]
 8005ca2:	60b9      	str	r1, [r7, #8]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	88fa      	ldrh	r2, [r7, #6]
 8005cb2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	88fa      	ldrh	r2, [r7, #6]
 8005cb8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2222      	movs	r2, #34	@ 0x22
 8005cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d007      	beq.n	8005ce0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cde:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	695a      	ldr	r2, [r3, #20]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68da      	ldr	r2, [r3, #12]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f042 0220 	orr.w	r2, r2, #32
 8005cfe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3714      	adds	r7, #20
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr

08005d0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b095      	sub	sp, #84	@ 0x54
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	330c      	adds	r3, #12
 8005d1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d20:	e853 3f00 	ldrex	r3, [r3]
 8005d24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	330c      	adds	r3, #12
 8005d34:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d36:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e5      	bne.n	8005d16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3314      	adds	r3, #20
 8005d50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	e853 3f00 	ldrex	r3, [r3]
 8005d58:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f023 0301 	bic.w	r3, r3, #1
 8005d60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3314      	adds	r3, #20
 8005d68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d72:	e841 2300 	strex	r3, r2, [r1]
 8005d76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1e5      	bne.n	8005d4a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d119      	bne.n	8005dba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	330c      	adds	r3, #12
 8005d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	f023 0310 	bic.w	r3, r3, #16
 8005d9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	330c      	adds	r3, #12
 8005da4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005da6:	61ba      	str	r2, [r7, #24]
 8005da8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005daa:	6979      	ldr	r1, [r7, #20]
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	613b      	str	r3, [r7, #16]
   return(result);
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e5      	bne.n	8005d86 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2220      	movs	r2, #32
 8005dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005dc8:	bf00      	nop
 8005dca:	3754      	adds	r7, #84	@ 0x54
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f7ff fee4 	bl	8005bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005df4:	bf00      	nop
 8005df6:	3710      	adds	r7, #16
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b21      	cmp	r3, #33	@ 0x21
 8005e0e:	d13e      	bne.n	8005e8e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e18:	d114      	bne.n	8005e44 <UART_Transmit_IT+0x48>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d110      	bne.n	8005e44 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e36:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a1b      	ldr	r3, [r3, #32]
 8005e3c:	1c9a      	adds	r2, r3, #2
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	621a      	str	r2, [r3, #32]
 8005e42:	e008      	b.n	8005e56 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	1c59      	adds	r1, r3, #1
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	6211      	str	r1, [r2, #32]
 8005e4e:	781a      	ldrb	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	4619      	mov	r1, r3
 8005e64:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d10f      	bne.n	8005e8a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68da      	ldr	r2, [r3, #12]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005e78:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e88:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	e000      	b.n	8005e90 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005e8e:	2302      	movs	r3, #2
  }
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005eb2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2220      	movs	r2, #32
 8005eb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff fe73 	bl	8005ba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08c      	sub	sp, #48	@ 0x30
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b22      	cmp	r3, #34	@ 0x22
 8005ede:	f040 80ae 	bne.w	800603e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eea:	d117      	bne.n	8005f1c <UART_Receive_IT+0x50>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	691b      	ldr	r3, [r3, #16]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d113      	bne.n	8005f1c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005efc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f14:	1c9a      	adds	r2, r3, #2
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f1a:	e026      	b.n	8005f6a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f2e:	d007      	beq.n	8005f40 <UART_Receive_IT+0x74>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <UART_Receive_IT+0x82>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d106      	bne.n	8005f4e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f4a:	701a      	strb	r2, [r3, #0]
 8005f4c:	e008      	b.n	8005f60 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	3b01      	subs	r3, #1
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	4619      	mov	r1, r3
 8005f78:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d15d      	bne.n	800603a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0220 	bic.w	r2, r2, #32
 8005f8c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0201 	bic.w	r2, r2, #1
 8005fac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d135      	bne.n	8006030 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	e853 3f00 	ldrex	r3, [r3]
 8005fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f023 0310 	bic.w	r3, r3, #16
 8005fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fea:	623a      	str	r2, [r7, #32]
 8005fec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fee:	69f9      	ldr	r1, [r7, #28]
 8005ff0:	6a3a      	ldr	r2, [r7, #32]
 8005ff2:	e841 2300 	strex	r3, r2, [r1]
 8005ff6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d1e5      	bne.n	8005fca <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b10      	cmp	r3, #16
 800600a:	d10a      	bne.n	8006022 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800600c:	2300      	movs	r3, #0
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006026:	4619      	mov	r1, r3
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff fdd1 	bl	8005bd0 <HAL_UARTEx_RxEventCallback>
 800602e:	e002      	b.n	8006036 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7fb f939 	bl	80012a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	e002      	b.n	8006040 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800603a:	2300      	movs	r3, #0
 800603c:	e000      	b.n	8006040 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800603e:	2302      	movs	r3, #2
  }
}
 8006040:	4618      	mov	r0, r3
 8006042:	3730      	adds	r7, #48	@ 0x30
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}

08006048 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800604c:	b0c0      	sub	sp, #256	@ 0x100
 800604e:	af00      	add	r7, sp, #0
 8006050:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006064:	68d9      	ldr	r1, [r3, #12]
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	ea40 0301 	orr.w	r3, r0, r1
 8006070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006076:	689a      	ldr	r2, [r3, #8]
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	431a      	orrs	r2, r3
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	431a      	orrs	r2, r3
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608c:	69db      	ldr	r3, [r3, #28]
 800608e:	4313      	orrs	r3, r2
 8006090:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006094:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80060a0:	f021 010c 	bic.w	r1, r1, #12
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80060ae:	430b      	orrs	r3, r1
 80060b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80060be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c2:	6999      	ldr	r1, [r3, #24]
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	ea40 0301 	orr.w	r3, r0, r1
 80060ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4b8f      	ldr	r3, [pc, #572]	@ (8006314 <UART_SetConfig+0x2cc>)
 80060d8:	429a      	cmp	r2, r3
 80060da:	d005      	beq.n	80060e8 <UART_SetConfig+0xa0>
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b8d      	ldr	r3, [pc, #564]	@ (8006318 <UART_SetConfig+0x2d0>)
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d104      	bne.n	80060f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060e8:	f7fd ffa6 	bl	8004038 <HAL_RCC_GetPCLK2Freq>
 80060ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80060f0:	e003      	b.n	80060fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060f2:	f7fd ff8d 	bl	8004010 <HAL_RCC_GetPCLK1Freq>
 80060f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006104:	f040 810c 	bne.w	8006320 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006108:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800610c:	2200      	movs	r2, #0
 800610e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006112:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006116:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800611a:	4622      	mov	r2, r4
 800611c:	462b      	mov	r3, r5
 800611e:	1891      	adds	r1, r2, r2
 8006120:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006122:	415b      	adcs	r3, r3
 8006124:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006126:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800612a:	4621      	mov	r1, r4
 800612c:	eb12 0801 	adds.w	r8, r2, r1
 8006130:	4629      	mov	r1, r5
 8006132:	eb43 0901 	adc.w	r9, r3, r1
 8006136:	f04f 0200 	mov.w	r2, #0
 800613a:	f04f 0300 	mov.w	r3, #0
 800613e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006142:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006146:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800614a:	4690      	mov	r8, r2
 800614c:	4699      	mov	r9, r3
 800614e:	4623      	mov	r3, r4
 8006150:	eb18 0303 	adds.w	r3, r8, r3
 8006154:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006158:	462b      	mov	r3, r5
 800615a:	eb49 0303 	adc.w	r3, r9, r3
 800615e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800616e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006172:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006176:	460b      	mov	r3, r1
 8006178:	18db      	adds	r3, r3, r3
 800617a:	653b      	str	r3, [r7, #80]	@ 0x50
 800617c:	4613      	mov	r3, r2
 800617e:	eb42 0303 	adc.w	r3, r2, r3
 8006182:	657b      	str	r3, [r7, #84]	@ 0x54
 8006184:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006188:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800618c:	f7fa fd5c 	bl	8000c48 <__aeabi_uldivmod>
 8006190:	4602      	mov	r2, r0
 8006192:	460b      	mov	r3, r1
 8006194:	4b61      	ldr	r3, [pc, #388]	@ (800631c <UART_SetConfig+0x2d4>)
 8006196:	fba3 2302 	umull	r2, r3, r3, r2
 800619a:	095b      	lsrs	r3, r3, #5
 800619c:	011c      	lsls	r4, r3, #4
 800619e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061a2:	2200      	movs	r2, #0
 80061a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80061ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80061b0:	4642      	mov	r2, r8
 80061b2:	464b      	mov	r3, r9
 80061b4:	1891      	adds	r1, r2, r2
 80061b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80061b8:	415b      	adcs	r3, r3
 80061ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80061c0:	4641      	mov	r1, r8
 80061c2:	eb12 0a01 	adds.w	sl, r2, r1
 80061c6:	4649      	mov	r1, r9
 80061c8:	eb43 0b01 	adc.w	fp, r3, r1
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061e0:	4692      	mov	sl, r2
 80061e2:	469b      	mov	fp, r3
 80061e4:	4643      	mov	r3, r8
 80061e6:	eb1a 0303 	adds.w	r3, sl, r3
 80061ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061ee:	464b      	mov	r3, r9
 80061f0:	eb4b 0303 	adc.w	r3, fp, r3
 80061f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006204:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006208:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800620c:	460b      	mov	r3, r1
 800620e:	18db      	adds	r3, r3, r3
 8006210:	643b      	str	r3, [r7, #64]	@ 0x40
 8006212:	4613      	mov	r3, r2
 8006214:	eb42 0303 	adc.w	r3, r2, r3
 8006218:	647b      	str	r3, [r7, #68]	@ 0x44
 800621a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800621e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006222:	f7fa fd11 	bl	8000c48 <__aeabi_uldivmod>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4611      	mov	r1, r2
 800622c:	4b3b      	ldr	r3, [pc, #236]	@ (800631c <UART_SetConfig+0x2d4>)
 800622e:	fba3 2301 	umull	r2, r3, r3, r1
 8006232:	095b      	lsrs	r3, r3, #5
 8006234:	2264      	movs	r2, #100	@ 0x64
 8006236:	fb02 f303 	mul.w	r3, r2, r3
 800623a:	1acb      	subs	r3, r1, r3
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006242:	4b36      	ldr	r3, [pc, #216]	@ (800631c <UART_SetConfig+0x2d4>)
 8006244:	fba3 2302 	umull	r2, r3, r3, r2
 8006248:	095b      	lsrs	r3, r3, #5
 800624a:	005b      	lsls	r3, r3, #1
 800624c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006250:	441c      	add	r4, r3
 8006252:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006256:	2200      	movs	r2, #0
 8006258:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800625c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006260:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006264:	4642      	mov	r2, r8
 8006266:	464b      	mov	r3, r9
 8006268:	1891      	adds	r1, r2, r2
 800626a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800626c:	415b      	adcs	r3, r3
 800626e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006270:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006274:	4641      	mov	r1, r8
 8006276:	1851      	adds	r1, r2, r1
 8006278:	6339      	str	r1, [r7, #48]	@ 0x30
 800627a:	4649      	mov	r1, r9
 800627c:	414b      	adcs	r3, r1
 800627e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006280:	f04f 0200 	mov.w	r2, #0
 8006284:	f04f 0300 	mov.w	r3, #0
 8006288:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800628c:	4659      	mov	r1, fp
 800628e:	00cb      	lsls	r3, r1, #3
 8006290:	4651      	mov	r1, sl
 8006292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006296:	4651      	mov	r1, sl
 8006298:	00ca      	lsls	r2, r1, #3
 800629a:	4610      	mov	r0, r2
 800629c:	4619      	mov	r1, r3
 800629e:	4603      	mov	r3, r0
 80062a0:	4642      	mov	r2, r8
 80062a2:	189b      	adds	r3, r3, r2
 80062a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80062a8:	464b      	mov	r3, r9
 80062aa:	460a      	mov	r2, r1
 80062ac:	eb42 0303 	adc.w	r3, r2, r3
 80062b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80062c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80062c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80062c8:	460b      	mov	r3, r1
 80062ca:	18db      	adds	r3, r3, r3
 80062cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062ce:	4613      	mov	r3, r2
 80062d0:	eb42 0303 	adc.w	r3, r2, r3
 80062d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80062da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80062de:	f7fa fcb3 	bl	8000c48 <__aeabi_uldivmod>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4b0d      	ldr	r3, [pc, #52]	@ (800631c <UART_SetConfig+0x2d4>)
 80062e8:	fba3 1302 	umull	r1, r3, r3, r2
 80062ec:	095b      	lsrs	r3, r3, #5
 80062ee:	2164      	movs	r1, #100	@ 0x64
 80062f0:	fb01 f303 	mul.w	r3, r1, r3
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	00db      	lsls	r3, r3, #3
 80062f8:	3332      	adds	r3, #50	@ 0x32
 80062fa:	4a08      	ldr	r2, [pc, #32]	@ (800631c <UART_SetConfig+0x2d4>)
 80062fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	f003 0207 	and.w	r2, r3, #7
 8006306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4422      	add	r2, r4
 800630e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006310:	e106      	b.n	8006520 <UART_SetConfig+0x4d8>
 8006312:	bf00      	nop
 8006314:	40011000 	.word	0x40011000
 8006318:	40011400 	.word	0x40011400
 800631c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006324:	2200      	movs	r2, #0
 8006326:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800632a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800632e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006332:	4642      	mov	r2, r8
 8006334:	464b      	mov	r3, r9
 8006336:	1891      	adds	r1, r2, r2
 8006338:	6239      	str	r1, [r7, #32]
 800633a:	415b      	adcs	r3, r3
 800633c:	627b      	str	r3, [r7, #36]	@ 0x24
 800633e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006342:	4641      	mov	r1, r8
 8006344:	1854      	adds	r4, r2, r1
 8006346:	4649      	mov	r1, r9
 8006348:	eb43 0501 	adc.w	r5, r3, r1
 800634c:	f04f 0200 	mov.w	r2, #0
 8006350:	f04f 0300 	mov.w	r3, #0
 8006354:	00eb      	lsls	r3, r5, #3
 8006356:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800635a:	00e2      	lsls	r2, r4, #3
 800635c:	4614      	mov	r4, r2
 800635e:	461d      	mov	r5, r3
 8006360:	4643      	mov	r3, r8
 8006362:	18e3      	adds	r3, r4, r3
 8006364:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006368:	464b      	mov	r3, r9
 800636a:	eb45 0303 	adc.w	r3, r5, r3
 800636e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800637e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006382:	f04f 0200 	mov.w	r2, #0
 8006386:	f04f 0300 	mov.w	r3, #0
 800638a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800638e:	4629      	mov	r1, r5
 8006390:	008b      	lsls	r3, r1, #2
 8006392:	4621      	mov	r1, r4
 8006394:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006398:	4621      	mov	r1, r4
 800639a:	008a      	lsls	r2, r1, #2
 800639c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80063a0:	f7fa fc52 	bl	8000c48 <__aeabi_uldivmod>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4b60      	ldr	r3, [pc, #384]	@ (800652c <UART_SetConfig+0x4e4>)
 80063aa:	fba3 2302 	umull	r2, r3, r3, r2
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	011c      	lsls	r4, r3, #4
 80063b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80063c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80063c4:	4642      	mov	r2, r8
 80063c6:	464b      	mov	r3, r9
 80063c8:	1891      	adds	r1, r2, r2
 80063ca:	61b9      	str	r1, [r7, #24]
 80063cc:	415b      	adcs	r3, r3
 80063ce:	61fb      	str	r3, [r7, #28]
 80063d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063d4:	4641      	mov	r1, r8
 80063d6:	1851      	adds	r1, r2, r1
 80063d8:	6139      	str	r1, [r7, #16]
 80063da:	4649      	mov	r1, r9
 80063dc:	414b      	adcs	r3, r1
 80063de:	617b      	str	r3, [r7, #20]
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	f04f 0300 	mov.w	r3, #0
 80063e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063ec:	4659      	mov	r1, fp
 80063ee:	00cb      	lsls	r3, r1, #3
 80063f0:	4651      	mov	r1, sl
 80063f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063f6:	4651      	mov	r1, sl
 80063f8:	00ca      	lsls	r2, r1, #3
 80063fa:	4610      	mov	r0, r2
 80063fc:	4619      	mov	r1, r3
 80063fe:	4603      	mov	r3, r0
 8006400:	4642      	mov	r2, r8
 8006402:	189b      	adds	r3, r3, r2
 8006404:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006408:	464b      	mov	r3, r9
 800640a:	460a      	mov	r2, r1
 800640c:	eb42 0303 	adc.w	r3, r2, r3
 8006410:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800641e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	f04f 0300 	mov.w	r3, #0
 8006428:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800642c:	4649      	mov	r1, r9
 800642e:	008b      	lsls	r3, r1, #2
 8006430:	4641      	mov	r1, r8
 8006432:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006436:	4641      	mov	r1, r8
 8006438:	008a      	lsls	r2, r1, #2
 800643a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800643e:	f7fa fc03 	bl	8000c48 <__aeabi_uldivmod>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4611      	mov	r1, r2
 8006448:	4b38      	ldr	r3, [pc, #224]	@ (800652c <UART_SetConfig+0x4e4>)
 800644a:	fba3 2301 	umull	r2, r3, r3, r1
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	2264      	movs	r2, #100	@ 0x64
 8006452:	fb02 f303 	mul.w	r3, r2, r3
 8006456:	1acb      	subs	r3, r1, r3
 8006458:	011b      	lsls	r3, r3, #4
 800645a:	3332      	adds	r3, #50	@ 0x32
 800645c:	4a33      	ldr	r2, [pc, #204]	@ (800652c <UART_SetConfig+0x4e4>)
 800645e:	fba2 2303 	umull	r2, r3, r2, r3
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006468:	441c      	add	r4, r3
 800646a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800646e:	2200      	movs	r2, #0
 8006470:	673b      	str	r3, [r7, #112]	@ 0x70
 8006472:	677a      	str	r2, [r7, #116]	@ 0x74
 8006474:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006478:	4642      	mov	r2, r8
 800647a:	464b      	mov	r3, r9
 800647c:	1891      	adds	r1, r2, r2
 800647e:	60b9      	str	r1, [r7, #8]
 8006480:	415b      	adcs	r3, r3
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006488:	4641      	mov	r1, r8
 800648a:	1851      	adds	r1, r2, r1
 800648c:	6039      	str	r1, [r7, #0]
 800648e:	4649      	mov	r1, r9
 8006490:	414b      	adcs	r3, r1
 8006492:	607b      	str	r3, [r7, #4]
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064a0:	4659      	mov	r1, fp
 80064a2:	00cb      	lsls	r3, r1, #3
 80064a4:	4651      	mov	r1, sl
 80064a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064aa:	4651      	mov	r1, sl
 80064ac:	00ca      	lsls	r2, r1, #3
 80064ae:	4610      	mov	r0, r2
 80064b0:	4619      	mov	r1, r3
 80064b2:	4603      	mov	r3, r0
 80064b4:	4642      	mov	r2, r8
 80064b6:	189b      	adds	r3, r3, r2
 80064b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064ba:	464b      	mov	r3, r9
 80064bc:	460a      	mov	r2, r1
 80064be:	eb42 0303 	adc.w	r3, r2, r3
 80064c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80064ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80064d0:	f04f 0200 	mov.w	r2, #0
 80064d4:	f04f 0300 	mov.w	r3, #0
 80064d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80064dc:	4649      	mov	r1, r9
 80064de:	008b      	lsls	r3, r1, #2
 80064e0:	4641      	mov	r1, r8
 80064e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064e6:	4641      	mov	r1, r8
 80064e8:	008a      	lsls	r2, r1, #2
 80064ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80064ee:	f7fa fbab 	bl	8000c48 <__aeabi_uldivmod>
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	4b0d      	ldr	r3, [pc, #52]	@ (800652c <UART_SetConfig+0x4e4>)
 80064f8:	fba3 1302 	umull	r1, r3, r3, r2
 80064fc:	095b      	lsrs	r3, r3, #5
 80064fe:	2164      	movs	r1, #100	@ 0x64
 8006500:	fb01 f303 	mul.w	r3, r1, r3
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	011b      	lsls	r3, r3, #4
 8006508:	3332      	adds	r3, #50	@ 0x32
 800650a:	4a08      	ldr	r2, [pc, #32]	@ (800652c <UART_SetConfig+0x4e4>)
 800650c:	fba2 2303 	umull	r2, r3, r2, r3
 8006510:	095b      	lsrs	r3, r3, #5
 8006512:	f003 020f 	and.w	r2, r3, #15
 8006516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4422      	add	r2, r4
 800651e:	609a      	str	r2, [r3, #8]
}
 8006520:	bf00      	nop
 8006522:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006526:	46bd      	mov	sp, r7
 8006528:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800652c:	51eb851f 	.word	0x51eb851f

08006530 <malloc>:
 8006530:	4b02      	ldr	r3, [pc, #8]	@ (800653c <malloc+0xc>)
 8006532:	4601      	mov	r1, r0
 8006534:	6818      	ldr	r0, [r3, #0]
 8006536:	f000 b82d 	b.w	8006594 <_malloc_r>
 800653a:	bf00      	nop
 800653c:	20000018 	.word	0x20000018

08006540 <free>:
 8006540:	4b02      	ldr	r3, [pc, #8]	@ (800654c <free+0xc>)
 8006542:	4601      	mov	r1, r0
 8006544:	6818      	ldr	r0, [r3, #0]
 8006546:	f001 bd0b 	b.w	8007f60 <_free_r>
 800654a:	bf00      	nop
 800654c:	20000018 	.word	0x20000018

08006550 <sbrk_aligned>:
 8006550:	b570      	push	{r4, r5, r6, lr}
 8006552:	4e0f      	ldr	r6, [pc, #60]	@ (8006590 <sbrk_aligned+0x40>)
 8006554:	460c      	mov	r4, r1
 8006556:	6831      	ldr	r1, [r6, #0]
 8006558:	4605      	mov	r5, r0
 800655a:	b911      	cbnz	r1, 8006562 <sbrk_aligned+0x12>
 800655c:	f000 fe64 	bl	8007228 <_sbrk_r>
 8006560:	6030      	str	r0, [r6, #0]
 8006562:	4621      	mov	r1, r4
 8006564:	4628      	mov	r0, r5
 8006566:	f000 fe5f 	bl	8007228 <_sbrk_r>
 800656a:	1c43      	adds	r3, r0, #1
 800656c:	d103      	bne.n	8006576 <sbrk_aligned+0x26>
 800656e:	f04f 34ff 	mov.w	r4, #4294967295
 8006572:	4620      	mov	r0, r4
 8006574:	bd70      	pop	{r4, r5, r6, pc}
 8006576:	1cc4      	adds	r4, r0, #3
 8006578:	f024 0403 	bic.w	r4, r4, #3
 800657c:	42a0      	cmp	r0, r4
 800657e:	d0f8      	beq.n	8006572 <sbrk_aligned+0x22>
 8006580:	1a21      	subs	r1, r4, r0
 8006582:	4628      	mov	r0, r5
 8006584:	f000 fe50 	bl	8007228 <_sbrk_r>
 8006588:	3001      	adds	r0, #1
 800658a:	d1f2      	bne.n	8006572 <sbrk_aligned+0x22>
 800658c:	e7ef      	b.n	800656e <sbrk_aligned+0x1e>
 800658e:	bf00      	nop
 8006590:	20000838 	.word	0x20000838

08006594 <_malloc_r>:
 8006594:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006598:	1ccd      	adds	r5, r1, #3
 800659a:	f025 0503 	bic.w	r5, r5, #3
 800659e:	3508      	adds	r5, #8
 80065a0:	2d0c      	cmp	r5, #12
 80065a2:	bf38      	it	cc
 80065a4:	250c      	movcc	r5, #12
 80065a6:	2d00      	cmp	r5, #0
 80065a8:	4606      	mov	r6, r0
 80065aa:	db01      	blt.n	80065b0 <_malloc_r+0x1c>
 80065ac:	42a9      	cmp	r1, r5
 80065ae:	d904      	bls.n	80065ba <_malloc_r+0x26>
 80065b0:	230c      	movs	r3, #12
 80065b2:	6033      	str	r3, [r6, #0]
 80065b4:	2000      	movs	r0, #0
 80065b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006690 <_malloc_r+0xfc>
 80065be:	f000 f869 	bl	8006694 <__malloc_lock>
 80065c2:	f8d8 3000 	ldr.w	r3, [r8]
 80065c6:	461c      	mov	r4, r3
 80065c8:	bb44      	cbnz	r4, 800661c <_malloc_r+0x88>
 80065ca:	4629      	mov	r1, r5
 80065cc:	4630      	mov	r0, r6
 80065ce:	f7ff ffbf 	bl	8006550 <sbrk_aligned>
 80065d2:	1c43      	adds	r3, r0, #1
 80065d4:	4604      	mov	r4, r0
 80065d6:	d158      	bne.n	800668a <_malloc_r+0xf6>
 80065d8:	f8d8 4000 	ldr.w	r4, [r8]
 80065dc:	4627      	mov	r7, r4
 80065de:	2f00      	cmp	r7, #0
 80065e0:	d143      	bne.n	800666a <_malloc_r+0xd6>
 80065e2:	2c00      	cmp	r4, #0
 80065e4:	d04b      	beq.n	800667e <_malloc_r+0xea>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	4639      	mov	r1, r7
 80065ea:	4630      	mov	r0, r6
 80065ec:	eb04 0903 	add.w	r9, r4, r3
 80065f0:	f000 fe1a 	bl	8007228 <_sbrk_r>
 80065f4:	4581      	cmp	r9, r0
 80065f6:	d142      	bne.n	800667e <_malloc_r+0xea>
 80065f8:	6821      	ldr	r1, [r4, #0]
 80065fa:	1a6d      	subs	r5, r5, r1
 80065fc:	4629      	mov	r1, r5
 80065fe:	4630      	mov	r0, r6
 8006600:	f7ff ffa6 	bl	8006550 <sbrk_aligned>
 8006604:	3001      	adds	r0, #1
 8006606:	d03a      	beq.n	800667e <_malloc_r+0xea>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	442b      	add	r3, r5
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	f8d8 3000 	ldr.w	r3, [r8]
 8006612:	685a      	ldr	r2, [r3, #4]
 8006614:	bb62      	cbnz	r2, 8006670 <_malloc_r+0xdc>
 8006616:	f8c8 7000 	str.w	r7, [r8]
 800661a:	e00f      	b.n	800663c <_malloc_r+0xa8>
 800661c:	6822      	ldr	r2, [r4, #0]
 800661e:	1b52      	subs	r2, r2, r5
 8006620:	d420      	bmi.n	8006664 <_malloc_r+0xd0>
 8006622:	2a0b      	cmp	r2, #11
 8006624:	d917      	bls.n	8006656 <_malloc_r+0xc2>
 8006626:	1961      	adds	r1, r4, r5
 8006628:	42a3      	cmp	r3, r4
 800662a:	6025      	str	r5, [r4, #0]
 800662c:	bf18      	it	ne
 800662e:	6059      	strne	r1, [r3, #4]
 8006630:	6863      	ldr	r3, [r4, #4]
 8006632:	bf08      	it	eq
 8006634:	f8c8 1000 	streq.w	r1, [r8]
 8006638:	5162      	str	r2, [r4, r5]
 800663a:	604b      	str	r3, [r1, #4]
 800663c:	4630      	mov	r0, r6
 800663e:	f000 f82f 	bl	80066a0 <__malloc_unlock>
 8006642:	f104 000b 	add.w	r0, r4, #11
 8006646:	1d23      	adds	r3, r4, #4
 8006648:	f020 0007 	bic.w	r0, r0, #7
 800664c:	1ac2      	subs	r2, r0, r3
 800664e:	bf1c      	itt	ne
 8006650:	1a1b      	subne	r3, r3, r0
 8006652:	50a3      	strne	r3, [r4, r2]
 8006654:	e7af      	b.n	80065b6 <_malloc_r+0x22>
 8006656:	6862      	ldr	r2, [r4, #4]
 8006658:	42a3      	cmp	r3, r4
 800665a:	bf0c      	ite	eq
 800665c:	f8c8 2000 	streq.w	r2, [r8]
 8006660:	605a      	strne	r2, [r3, #4]
 8006662:	e7eb      	b.n	800663c <_malloc_r+0xa8>
 8006664:	4623      	mov	r3, r4
 8006666:	6864      	ldr	r4, [r4, #4]
 8006668:	e7ae      	b.n	80065c8 <_malloc_r+0x34>
 800666a:	463c      	mov	r4, r7
 800666c:	687f      	ldr	r7, [r7, #4]
 800666e:	e7b6      	b.n	80065de <_malloc_r+0x4a>
 8006670:	461a      	mov	r2, r3
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	42a3      	cmp	r3, r4
 8006676:	d1fb      	bne.n	8006670 <_malloc_r+0xdc>
 8006678:	2300      	movs	r3, #0
 800667a:	6053      	str	r3, [r2, #4]
 800667c:	e7de      	b.n	800663c <_malloc_r+0xa8>
 800667e:	230c      	movs	r3, #12
 8006680:	6033      	str	r3, [r6, #0]
 8006682:	4630      	mov	r0, r6
 8006684:	f000 f80c 	bl	80066a0 <__malloc_unlock>
 8006688:	e794      	b.n	80065b4 <_malloc_r+0x20>
 800668a:	6005      	str	r5, [r0, #0]
 800668c:	e7d6      	b.n	800663c <_malloc_r+0xa8>
 800668e:	bf00      	nop
 8006690:	2000083c 	.word	0x2000083c

08006694 <__malloc_lock>:
 8006694:	4801      	ldr	r0, [pc, #4]	@ (800669c <__malloc_lock+0x8>)
 8006696:	f000 be14 	b.w	80072c2 <__retarget_lock_acquire_recursive>
 800669a:	bf00      	nop
 800669c:	20000980 	.word	0x20000980

080066a0 <__malloc_unlock>:
 80066a0:	4801      	ldr	r0, [pc, #4]	@ (80066a8 <__malloc_unlock+0x8>)
 80066a2:	f000 be0f 	b.w	80072c4 <__retarget_lock_release_recursive>
 80066a6:	bf00      	nop
 80066a8:	20000980 	.word	0x20000980

080066ac <__cvt>:
 80066ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066b0:	ec57 6b10 	vmov	r6, r7, d0
 80066b4:	2f00      	cmp	r7, #0
 80066b6:	460c      	mov	r4, r1
 80066b8:	4619      	mov	r1, r3
 80066ba:	463b      	mov	r3, r7
 80066bc:	bfbb      	ittet	lt
 80066be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80066c2:	461f      	movlt	r7, r3
 80066c4:	2300      	movge	r3, #0
 80066c6:	232d      	movlt	r3, #45	@ 0x2d
 80066c8:	700b      	strb	r3, [r1, #0]
 80066ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80066d0:	4691      	mov	r9, r2
 80066d2:	f023 0820 	bic.w	r8, r3, #32
 80066d6:	bfbc      	itt	lt
 80066d8:	4632      	movlt	r2, r6
 80066da:	4616      	movlt	r6, r2
 80066dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066e0:	d005      	beq.n	80066ee <__cvt+0x42>
 80066e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80066e6:	d100      	bne.n	80066ea <__cvt+0x3e>
 80066e8:	3401      	adds	r4, #1
 80066ea:	2102      	movs	r1, #2
 80066ec:	e000      	b.n	80066f0 <__cvt+0x44>
 80066ee:	2103      	movs	r1, #3
 80066f0:	ab03      	add	r3, sp, #12
 80066f2:	9301      	str	r3, [sp, #4]
 80066f4:	ab02      	add	r3, sp, #8
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	ec47 6b10 	vmov	d0, r6, r7
 80066fc:	4653      	mov	r3, sl
 80066fe:	4622      	mov	r2, r4
 8006700:	f000 fe6a 	bl	80073d8 <_dtoa_r>
 8006704:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006708:	4605      	mov	r5, r0
 800670a:	d119      	bne.n	8006740 <__cvt+0x94>
 800670c:	f019 0f01 	tst.w	r9, #1
 8006710:	d00e      	beq.n	8006730 <__cvt+0x84>
 8006712:	eb00 0904 	add.w	r9, r0, r4
 8006716:	2200      	movs	r2, #0
 8006718:	2300      	movs	r3, #0
 800671a:	4630      	mov	r0, r6
 800671c:	4639      	mov	r1, r7
 800671e:	f7fa f9d3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006722:	b108      	cbz	r0, 8006728 <__cvt+0x7c>
 8006724:	f8cd 900c 	str.w	r9, [sp, #12]
 8006728:	2230      	movs	r2, #48	@ 0x30
 800672a:	9b03      	ldr	r3, [sp, #12]
 800672c:	454b      	cmp	r3, r9
 800672e:	d31e      	bcc.n	800676e <__cvt+0xc2>
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006734:	1b5b      	subs	r3, r3, r5
 8006736:	4628      	mov	r0, r5
 8006738:	6013      	str	r3, [r2, #0]
 800673a:	b004      	add	sp, #16
 800673c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006740:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006744:	eb00 0904 	add.w	r9, r0, r4
 8006748:	d1e5      	bne.n	8006716 <__cvt+0x6a>
 800674a:	7803      	ldrb	r3, [r0, #0]
 800674c:	2b30      	cmp	r3, #48	@ 0x30
 800674e:	d10a      	bne.n	8006766 <__cvt+0xba>
 8006750:	2200      	movs	r2, #0
 8006752:	2300      	movs	r3, #0
 8006754:	4630      	mov	r0, r6
 8006756:	4639      	mov	r1, r7
 8006758:	f7fa f9b6 	bl	8000ac8 <__aeabi_dcmpeq>
 800675c:	b918      	cbnz	r0, 8006766 <__cvt+0xba>
 800675e:	f1c4 0401 	rsb	r4, r4, #1
 8006762:	f8ca 4000 	str.w	r4, [sl]
 8006766:	f8da 3000 	ldr.w	r3, [sl]
 800676a:	4499      	add	r9, r3
 800676c:	e7d3      	b.n	8006716 <__cvt+0x6a>
 800676e:	1c59      	adds	r1, r3, #1
 8006770:	9103      	str	r1, [sp, #12]
 8006772:	701a      	strb	r2, [r3, #0]
 8006774:	e7d9      	b.n	800672a <__cvt+0x7e>

08006776 <__exponent>:
 8006776:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006778:	2900      	cmp	r1, #0
 800677a:	bfba      	itte	lt
 800677c:	4249      	neglt	r1, r1
 800677e:	232d      	movlt	r3, #45	@ 0x2d
 8006780:	232b      	movge	r3, #43	@ 0x2b
 8006782:	2909      	cmp	r1, #9
 8006784:	7002      	strb	r2, [r0, #0]
 8006786:	7043      	strb	r3, [r0, #1]
 8006788:	dd29      	ble.n	80067de <__exponent+0x68>
 800678a:	f10d 0307 	add.w	r3, sp, #7
 800678e:	461d      	mov	r5, r3
 8006790:	270a      	movs	r7, #10
 8006792:	461a      	mov	r2, r3
 8006794:	fbb1 f6f7 	udiv	r6, r1, r7
 8006798:	fb07 1416 	mls	r4, r7, r6, r1
 800679c:	3430      	adds	r4, #48	@ 0x30
 800679e:	f802 4c01 	strb.w	r4, [r2, #-1]
 80067a2:	460c      	mov	r4, r1
 80067a4:	2c63      	cmp	r4, #99	@ 0x63
 80067a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80067aa:	4631      	mov	r1, r6
 80067ac:	dcf1      	bgt.n	8006792 <__exponent+0x1c>
 80067ae:	3130      	adds	r1, #48	@ 0x30
 80067b0:	1e94      	subs	r4, r2, #2
 80067b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80067b6:	1c41      	adds	r1, r0, #1
 80067b8:	4623      	mov	r3, r4
 80067ba:	42ab      	cmp	r3, r5
 80067bc:	d30a      	bcc.n	80067d4 <__exponent+0x5e>
 80067be:	f10d 0309 	add.w	r3, sp, #9
 80067c2:	1a9b      	subs	r3, r3, r2
 80067c4:	42ac      	cmp	r4, r5
 80067c6:	bf88      	it	hi
 80067c8:	2300      	movhi	r3, #0
 80067ca:	3302      	adds	r3, #2
 80067cc:	4403      	add	r3, r0
 80067ce:	1a18      	subs	r0, r3, r0
 80067d0:	b003      	add	sp, #12
 80067d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80067d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80067dc:	e7ed      	b.n	80067ba <__exponent+0x44>
 80067de:	2330      	movs	r3, #48	@ 0x30
 80067e0:	3130      	adds	r1, #48	@ 0x30
 80067e2:	7083      	strb	r3, [r0, #2]
 80067e4:	70c1      	strb	r1, [r0, #3]
 80067e6:	1d03      	adds	r3, r0, #4
 80067e8:	e7f1      	b.n	80067ce <__exponent+0x58>
	...

080067ec <_printf_float>:
 80067ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f0:	b08d      	sub	sp, #52	@ 0x34
 80067f2:	460c      	mov	r4, r1
 80067f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80067f8:	4616      	mov	r6, r2
 80067fa:	461f      	mov	r7, r3
 80067fc:	4605      	mov	r5, r0
 80067fe:	f000 fcdb 	bl	80071b8 <_localeconv_r>
 8006802:	6803      	ldr	r3, [r0, #0]
 8006804:	9304      	str	r3, [sp, #16]
 8006806:	4618      	mov	r0, r3
 8006808:	f7f9 fd32 	bl	8000270 <strlen>
 800680c:	2300      	movs	r3, #0
 800680e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006810:	f8d8 3000 	ldr.w	r3, [r8]
 8006814:	9005      	str	r0, [sp, #20]
 8006816:	3307      	adds	r3, #7
 8006818:	f023 0307 	bic.w	r3, r3, #7
 800681c:	f103 0208 	add.w	r2, r3, #8
 8006820:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006824:	f8d4 b000 	ldr.w	fp, [r4]
 8006828:	f8c8 2000 	str.w	r2, [r8]
 800682c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006830:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006834:	9307      	str	r3, [sp, #28]
 8006836:	f8cd 8018 	str.w	r8, [sp, #24]
 800683a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800683e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006842:	4b9c      	ldr	r3, [pc, #624]	@ (8006ab4 <_printf_float+0x2c8>)
 8006844:	f04f 32ff 	mov.w	r2, #4294967295
 8006848:	f7fa f970 	bl	8000b2c <__aeabi_dcmpun>
 800684c:	bb70      	cbnz	r0, 80068ac <_printf_float+0xc0>
 800684e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006852:	4b98      	ldr	r3, [pc, #608]	@ (8006ab4 <_printf_float+0x2c8>)
 8006854:	f04f 32ff 	mov.w	r2, #4294967295
 8006858:	f7fa f94a 	bl	8000af0 <__aeabi_dcmple>
 800685c:	bb30      	cbnz	r0, 80068ac <_printf_float+0xc0>
 800685e:	2200      	movs	r2, #0
 8006860:	2300      	movs	r3, #0
 8006862:	4640      	mov	r0, r8
 8006864:	4649      	mov	r1, r9
 8006866:	f7fa f939 	bl	8000adc <__aeabi_dcmplt>
 800686a:	b110      	cbz	r0, 8006872 <_printf_float+0x86>
 800686c:	232d      	movs	r3, #45	@ 0x2d
 800686e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006872:	4a91      	ldr	r2, [pc, #580]	@ (8006ab8 <_printf_float+0x2cc>)
 8006874:	4b91      	ldr	r3, [pc, #580]	@ (8006abc <_printf_float+0x2d0>)
 8006876:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800687a:	bf94      	ite	ls
 800687c:	4690      	movls	r8, r2
 800687e:	4698      	movhi	r8, r3
 8006880:	2303      	movs	r3, #3
 8006882:	6123      	str	r3, [r4, #16]
 8006884:	f02b 0304 	bic.w	r3, fp, #4
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	f04f 0900 	mov.w	r9, #0
 800688e:	9700      	str	r7, [sp, #0]
 8006890:	4633      	mov	r3, r6
 8006892:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006894:	4621      	mov	r1, r4
 8006896:	4628      	mov	r0, r5
 8006898:	f000 f9d2 	bl	8006c40 <_printf_common>
 800689c:	3001      	adds	r0, #1
 800689e:	f040 808d 	bne.w	80069bc <_printf_float+0x1d0>
 80068a2:	f04f 30ff 	mov.w	r0, #4294967295
 80068a6:	b00d      	add	sp, #52	@ 0x34
 80068a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ac:	4642      	mov	r2, r8
 80068ae:	464b      	mov	r3, r9
 80068b0:	4640      	mov	r0, r8
 80068b2:	4649      	mov	r1, r9
 80068b4:	f7fa f93a 	bl	8000b2c <__aeabi_dcmpun>
 80068b8:	b140      	cbz	r0, 80068cc <_printf_float+0xe0>
 80068ba:	464b      	mov	r3, r9
 80068bc:	2b00      	cmp	r3, #0
 80068be:	bfbc      	itt	lt
 80068c0:	232d      	movlt	r3, #45	@ 0x2d
 80068c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80068c6:	4a7e      	ldr	r2, [pc, #504]	@ (8006ac0 <_printf_float+0x2d4>)
 80068c8:	4b7e      	ldr	r3, [pc, #504]	@ (8006ac4 <_printf_float+0x2d8>)
 80068ca:	e7d4      	b.n	8006876 <_printf_float+0x8a>
 80068cc:	6863      	ldr	r3, [r4, #4]
 80068ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80068d2:	9206      	str	r2, [sp, #24]
 80068d4:	1c5a      	adds	r2, r3, #1
 80068d6:	d13b      	bne.n	8006950 <_printf_float+0x164>
 80068d8:	2306      	movs	r3, #6
 80068da:	6063      	str	r3, [r4, #4]
 80068dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80068e0:	2300      	movs	r3, #0
 80068e2:	6022      	str	r2, [r4, #0]
 80068e4:	9303      	str	r3, [sp, #12]
 80068e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80068e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80068ec:	ab09      	add	r3, sp, #36	@ 0x24
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	6861      	ldr	r1, [r4, #4]
 80068f2:	ec49 8b10 	vmov	d0, r8, r9
 80068f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80068fa:	4628      	mov	r0, r5
 80068fc:	f7ff fed6 	bl	80066ac <__cvt>
 8006900:	9b06      	ldr	r3, [sp, #24]
 8006902:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006904:	2b47      	cmp	r3, #71	@ 0x47
 8006906:	4680      	mov	r8, r0
 8006908:	d129      	bne.n	800695e <_printf_float+0x172>
 800690a:	1cc8      	adds	r0, r1, #3
 800690c:	db02      	blt.n	8006914 <_printf_float+0x128>
 800690e:	6863      	ldr	r3, [r4, #4]
 8006910:	4299      	cmp	r1, r3
 8006912:	dd41      	ble.n	8006998 <_printf_float+0x1ac>
 8006914:	f1aa 0a02 	sub.w	sl, sl, #2
 8006918:	fa5f fa8a 	uxtb.w	sl, sl
 800691c:	3901      	subs	r1, #1
 800691e:	4652      	mov	r2, sl
 8006920:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006924:	9109      	str	r1, [sp, #36]	@ 0x24
 8006926:	f7ff ff26 	bl	8006776 <__exponent>
 800692a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800692c:	1813      	adds	r3, r2, r0
 800692e:	2a01      	cmp	r2, #1
 8006930:	4681      	mov	r9, r0
 8006932:	6123      	str	r3, [r4, #16]
 8006934:	dc02      	bgt.n	800693c <_printf_float+0x150>
 8006936:	6822      	ldr	r2, [r4, #0]
 8006938:	07d2      	lsls	r2, r2, #31
 800693a:	d501      	bpl.n	8006940 <_printf_float+0x154>
 800693c:	3301      	adds	r3, #1
 800693e:	6123      	str	r3, [r4, #16]
 8006940:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0a2      	beq.n	800688e <_printf_float+0xa2>
 8006948:	232d      	movs	r3, #45	@ 0x2d
 800694a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800694e:	e79e      	b.n	800688e <_printf_float+0xa2>
 8006950:	9a06      	ldr	r2, [sp, #24]
 8006952:	2a47      	cmp	r2, #71	@ 0x47
 8006954:	d1c2      	bne.n	80068dc <_printf_float+0xf0>
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1c0      	bne.n	80068dc <_printf_float+0xf0>
 800695a:	2301      	movs	r3, #1
 800695c:	e7bd      	b.n	80068da <_printf_float+0xee>
 800695e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006962:	d9db      	bls.n	800691c <_printf_float+0x130>
 8006964:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006968:	d118      	bne.n	800699c <_printf_float+0x1b0>
 800696a:	2900      	cmp	r1, #0
 800696c:	6863      	ldr	r3, [r4, #4]
 800696e:	dd0b      	ble.n	8006988 <_printf_float+0x19c>
 8006970:	6121      	str	r1, [r4, #16]
 8006972:	b913      	cbnz	r3, 800697a <_printf_float+0x18e>
 8006974:	6822      	ldr	r2, [r4, #0]
 8006976:	07d0      	lsls	r0, r2, #31
 8006978:	d502      	bpl.n	8006980 <_printf_float+0x194>
 800697a:	3301      	adds	r3, #1
 800697c:	440b      	add	r3, r1
 800697e:	6123      	str	r3, [r4, #16]
 8006980:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006982:	f04f 0900 	mov.w	r9, #0
 8006986:	e7db      	b.n	8006940 <_printf_float+0x154>
 8006988:	b913      	cbnz	r3, 8006990 <_printf_float+0x1a4>
 800698a:	6822      	ldr	r2, [r4, #0]
 800698c:	07d2      	lsls	r2, r2, #31
 800698e:	d501      	bpl.n	8006994 <_printf_float+0x1a8>
 8006990:	3302      	adds	r3, #2
 8006992:	e7f4      	b.n	800697e <_printf_float+0x192>
 8006994:	2301      	movs	r3, #1
 8006996:	e7f2      	b.n	800697e <_printf_float+0x192>
 8006998:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800699c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800699e:	4299      	cmp	r1, r3
 80069a0:	db05      	blt.n	80069ae <_printf_float+0x1c2>
 80069a2:	6823      	ldr	r3, [r4, #0]
 80069a4:	6121      	str	r1, [r4, #16]
 80069a6:	07d8      	lsls	r0, r3, #31
 80069a8:	d5ea      	bpl.n	8006980 <_printf_float+0x194>
 80069aa:	1c4b      	adds	r3, r1, #1
 80069ac:	e7e7      	b.n	800697e <_printf_float+0x192>
 80069ae:	2900      	cmp	r1, #0
 80069b0:	bfd4      	ite	le
 80069b2:	f1c1 0202 	rsble	r2, r1, #2
 80069b6:	2201      	movgt	r2, #1
 80069b8:	4413      	add	r3, r2
 80069ba:	e7e0      	b.n	800697e <_printf_float+0x192>
 80069bc:	6823      	ldr	r3, [r4, #0]
 80069be:	055a      	lsls	r2, r3, #21
 80069c0:	d407      	bmi.n	80069d2 <_printf_float+0x1e6>
 80069c2:	6923      	ldr	r3, [r4, #16]
 80069c4:	4642      	mov	r2, r8
 80069c6:	4631      	mov	r1, r6
 80069c8:	4628      	mov	r0, r5
 80069ca:	47b8      	blx	r7
 80069cc:	3001      	adds	r0, #1
 80069ce:	d12b      	bne.n	8006a28 <_printf_float+0x23c>
 80069d0:	e767      	b.n	80068a2 <_printf_float+0xb6>
 80069d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069d6:	f240 80dd 	bls.w	8006b94 <_printf_float+0x3a8>
 80069da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80069de:	2200      	movs	r2, #0
 80069e0:	2300      	movs	r3, #0
 80069e2:	f7fa f871 	bl	8000ac8 <__aeabi_dcmpeq>
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d033      	beq.n	8006a52 <_printf_float+0x266>
 80069ea:	4a37      	ldr	r2, [pc, #220]	@ (8006ac8 <_printf_float+0x2dc>)
 80069ec:	2301      	movs	r3, #1
 80069ee:	4631      	mov	r1, r6
 80069f0:	4628      	mov	r0, r5
 80069f2:	47b8      	blx	r7
 80069f4:	3001      	adds	r0, #1
 80069f6:	f43f af54 	beq.w	80068a2 <_printf_float+0xb6>
 80069fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80069fe:	4543      	cmp	r3, r8
 8006a00:	db02      	blt.n	8006a08 <_printf_float+0x21c>
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	07d8      	lsls	r0, r3, #31
 8006a06:	d50f      	bpl.n	8006a28 <_printf_float+0x23c>
 8006a08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	4628      	mov	r0, r5
 8006a10:	47b8      	blx	r7
 8006a12:	3001      	adds	r0, #1
 8006a14:	f43f af45 	beq.w	80068a2 <_printf_float+0xb6>
 8006a18:	f04f 0900 	mov.w	r9, #0
 8006a1c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a20:	f104 0a1a 	add.w	sl, r4, #26
 8006a24:	45c8      	cmp	r8, r9
 8006a26:	dc09      	bgt.n	8006a3c <_printf_float+0x250>
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	079b      	lsls	r3, r3, #30
 8006a2c:	f100 8103 	bmi.w	8006c36 <_printf_float+0x44a>
 8006a30:	68e0      	ldr	r0, [r4, #12]
 8006a32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a34:	4298      	cmp	r0, r3
 8006a36:	bfb8      	it	lt
 8006a38:	4618      	movlt	r0, r3
 8006a3a:	e734      	b.n	80068a6 <_printf_float+0xba>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	4652      	mov	r2, sl
 8006a40:	4631      	mov	r1, r6
 8006a42:	4628      	mov	r0, r5
 8006a44:	47b8      	blx	r7
 8006a46:	3001      	adds	r0, #1
 8006a48:	f43f af2b 	beq.w	80068a2 <_printf_float+0xb6>
 8006a4c:	f109 0901 	add.w	r9, r9, #1
 8006a50:	e7e8      	b.n	8006a24 <_printf_float+0x238>
 8006a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	dc39      	bgt.n	8006acc <_printf_float+0x2e0>
 8006a58:	4a1b      	ldr	r2, [pc, #108]	@ (8006ac8 <_printf_float+0x2dc>)
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4631      	mov	r1, r6
 8006a5e:	4628      	mov	r0, r5
 8006a60:	47b8      	blx	r7
 8006a62:	3001      	adds	r0, #1
 8006a64:	f43f af1d 	beq.w	80068a2 <_printf_float+0xb6>
 8006a68:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006a6c:	ea59 0303 	orrs.w	r3, r9, r3
 8006a70:	d102      	bne.n	8006a78 <_printf_float+0x28c>
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	07d9      	lsls	r1, r3, #31
 8006a76:	d5d7      	bpl.n	8006a28 <_printf_float+0x23c>
 8006a78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a7c:	4631      	mov	r1, r6
 8006a7e:	4628      	mov	r0, r5
 8006a80:	47b8      	blx	r7
 8006a82:	3001      	adds	r0, #1
 8006a84:	f43f af0d 	beq.w	80068a2 <_printf_float+0xb6>
 8006a88:	f04f 0a00 	mov.w	sl, #0
 8006a8c:	f104 0b1a 	add.w	fp, r4, #26
 8006a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a92:	425b      	negs	r3, r3
 8006a94:	4553      	cmp	r3, sl
 8006a96:	dc01      	bgt.n	8006a9c <_printf_float+0x2b0>
 8006a98:	464b      	mov	r3, r9
 8006a9a:	e793      	b.n	80069c4 <_printf_float+0x1d8>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	465a      	mov	r2, fp
 8006aa0:	4631      	mov	r1, r6
 8006aa2:	4628      	mov	r0, r5
 8006aa4:	47b8      	blx	r7
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	f43f aefb 	beq.w	80068a2 <_printf_float+0xb6>
 8006aac:	f10a 0a01 	add.w	sl, sl, #1
 8006ab0:	e7ee      	b.n	8006a90 <_printf_float+0x2a4>
 8006ab2:	bf00      	nop
 8006ab4:	7fefffff 	.word	0x7fefffff
 8006ab8:	08009d60 	.word	0x08009d60
 8006abc:	08009d64 	.word	0x08009d64
 8006ac0:	08009d68 	.word	0x08009d68
 8006ac4:	08009d6c 	.word	0x08009d6c
 8006ac8:	08009d70 	.word	0x08009d70
 8006acc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ace:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ad2:	4553      	cmp	r3, sl
 8006ad4:	bfa8      	it	ge
 8006ad6:	4653      	movge	r3, sl
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	4699      	mov	r9, r3
 8006adc:	dc36      	bgt.n	8006b4c <_printf_float+0x360>
 8006ade:	f04f 0b00 	mov.w	fp, #0
 8006ae2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ae6:	f104 021a 	add.w	r2, r4, #26
 8006aea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006aec:	9306      	str	r3, [sp, #24]
 8006aee:	eba3 0309 	sub.w	r3, r3, r9
 8006af2:	455b      	cmp	r3, fp
 8006af4:	dc31      	bgt.n	8006b5a <_printf_float+0x36e>
 8006af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af8:	459a      	cmp	sl, r3
 8006afa:	dc3a      	bgt.n	8006b72 <_printf_float+0x386>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	07da      	lsls	r2, r3, #31
 8006b00:	d437      	bmi.n	8006b72 <_printf_float+0x386>
 8006b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b04:	ebaa 0903 	sub.w	r9, sl, r3
 8006b08:	9b06      	ldr	r3, [sp, #24]
 8006b0a:	ebaa 0303 	sub.w	r3, sl, r3
 8006b0e:	4599      	cmp	r9, r3
 8006b10:	bfa8      	it	ge
 8006b12:	4699      	movge	r9, r3
 8006b14:	f1b9 0f00 	cmp.w	r9, #0
 8006b18:	dc33      	bgt.n	8006b82 <_printf_float+0x396>
 8006b1a:	f04f 0800 	mov.w	r8, #0
 8006b1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b22:	f104 0b1a 	add.w	fp, r4, #26
 8006b26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b28:	ebaa 0303 	sub.w	r3, sl, r3
 8006b2c:	eba3 0309 	sub.w	r3, r3, r9
 8006b30:	4543      	cmp	r3, r8
 8006b32:	f77f af79 	ble.w	8006a28 <_printf_float+0x23c>
 8006b36:	2301      	movs	r3, #1
 8006b38:	465a      	mov	r2, fp
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	47b8      	blx	r7
 8006b40:	3001      	adds	r0, #1
 8006b42:	f43f aeae 	beq.w	80068a2 <_printf_float+0xb6>
 8006b46:	f108 0801 	add.w	r8, r8, #1
 8006b4a:	e7ec      	b.n	8006b26 <_printf_float+0x33a>
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	4631      	mov	r1, r6
 8006b50:	4628      	mov	r0, r5
 8006b52:	47b8      	blx	r7
 8006b54:	3001      	adds	r0, #1
 8006b56:	d1c2      	bne.n	8006ade <_printf_float+0x2f2>
 8006b58:	e6a3      	b.n	80068a2 <_printf_float+0xb6>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4628      	mov	r0, r5
 8006b60:	9206      	str	r2, [sp, #24]
 8006b62:	47b8      	blx	r7
 8006b64:	3001      	adds	r0, #1
 8006b66:	f43f ae9c 	beq.w	80068a2 <_printf_float+0xb6>
 8006b6a:	9a06      	ldr	r2, [sp, #24]
 8006b6c:	f10b 0b01 	add.w	fp, fp, #1
 8006b70:	e7bb      	b.n	8006aea <_printf_float+0x2fe>
 8006b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b76:	4631      	mov	r1, r6
 8006b78:	4628      	mov	r0, r5
 8006b7a:	47b8      	blx	r7
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d1c0      	bne.n	8006b02 <_printf_float+0x316>
 8006b80:	e68f      	b.n	80068a2 <_printf_float+0xb6>
 8006b82:	9a06      	ldr	r2, [sp, #24]
 8006b84:	464b      	mov	r3, r9
 8006b86:	4442      	add	r2, r8
 8006b88:	4631      	mov	r1, r6
 8006b8a:	4628      	mov	r0, r5
 8006b8c:	47b8      	blx	r7
 8006b8e:	3001      	adds	r0, #1
 8006b90:	d1c3      	bne.n	8006b1a <_printf_float+0x32e>
 8006b92:	e686      	b.n	80068a2 <_printf_float+0xb6>
 8006b94:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b98:	f1ba 0f01 	cmp.w	sl, #1
 8006b9c:	dc01      	bgt.n	8006ba2 <_printf_float+0x3b6>
 8006b9e:	07db      	lsls	r3, r3, #31
 8006ba0:	d536      	bpl.n	8006c10 <_printf_float+0x424>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	4642      	mov	r2, r8
 8006ba6:	4631      	mov	r1, r6
 8006ba8:	4628      	mov	r0, r5
 8006baa:	47b8      	blx	r7
 8006bac:	3001      	adds	r0, #1
 8006bae:	f43f ae78 	beq.w	80068a2 <_printf_float+0xb6>
 8006bb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bb6:	4631      	mov	r1, r6
 8006bb8:	4628      	mov	r0, r5
 8006bba:	47b8      	blx	r7
 8006bbc:	3001      	adds	r0, #1
 8006bbe:	f43f ae70 	beq.w	80068a2 <_printf_float+0xb6>
 8006bc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bce:	f7f9 ff7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bd2:	b9c0      	cbnz	r0, 8006c06 <_printf_float+0x41a>
 8006bd4:	4653      	mov	r3, sl
 8006bd6:	f108 0201 	add.w	r2, r8, #1
 8006bda:	4631      	mov	r1, r6
 8006bdc:	4628      	mov	r0, r5
 8006bde:	47b8      	blx	r7
 8006be0:	3001      	adds	r0, #1
 8006be2:	d10c      	bne.n	8006bfe <_printf_float+0x412>
 8006be4:	e65d      	b.n	80068a2 <_printf_float+0xb6>
 8006be6:	2301      	movs	r3, #1
 8006be8:	465a      	mov	r2, fp
 8006bea:	4631      	mov	r1, r6
 8006bec:	4628      	mov	r0, r5
 8006bee:	47b8      	blx	r7
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	f43f ae56 	beq.w	80068a2 <_printf_float+0xb6>
 8006bf6:	f108 0801 	add.w	r8, r8, #1
 8006bfa:	45d0      	cmp	r8, sl
 8006bfc:	dbf3      	blt.n	8006be6 <_printf_float+0x3fa>
 8006bfe:	464b      	mov	r3, r9
 8006c00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c04:	e6df      	b.n	80069c6 <_printf_float+0x1da>
 8006c06:	f04f 0800 	mov.w	r8, #0
 8006c0a:	f104 0b1a 	add.w	fp, r4, #26
 8006c0e:	e7f4      	b.n	8006bfa <_printf_float+0x40e>
 8006c10:	2301      	movs	r3, #1
 8006c12:	4642      	mov	r2, r8
 8006c14:	e7e1      	b.n	8006bda <_printf_float+0x3ee>
 8006c16:	2301      	movs	r3, #1
 8006c18:	464a      	mov	r2, r9
 8006c1a:	4631      	mov	r1, r6
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	47b8      	blx	r7
 8006c20:	3001      	adds	r0, #1
 8006c22:	f43f ae3e 	beq.w	80068a2 <_printf_float+0xb6>
 8006c26:	f108 0801 	add.w	r8, r8, #1
 8006c2a:	68e3      	ldr	r3, [r4, #12]
 8006c2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006c2e:	1a5b      	subs	r3, r3, r1
 8006c30:	4543      	cmp	r3, r8
 8006c32:	dcf0      	bgt.n	8006c16 <_printf_float+0x42a>
 8006c34:	e6fc      	b.n	8006a30 <_printf_float+0x244>
 8006c36:	f04f 0800 	mov.w	r8, #0
 8006c3a:	f104 0919 	add.w	r9, r4, #25
 8006c3e:	e7f4      	b.n	8006c2a <_printf_float+0x43e>

08006c40 <_printf_common>:
 8006c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c44:	4616      	mov	r6, r2
 8006c46:	4698      	mov	r8, r3
 8006c48:	688a      	ldr	r2, [r1, #8]
 8006c4a:	690b      	ldr	r3, [r1, #16]
 8006c4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006c50:	4293      	cmp	r3, r2
 8006c52:	bfb8      	it	lt
 8006c54:	4613      	movlt	r3, r2
 8006c56:	6033      	str	r3, [r6, #0]
 8006c58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	460c      	mov	r4, r1
 8006c60:	b10a      	cbz	r2, 8006c66 <_printf_common+0x26>
 8006c62:	3301      	adds	r3, #1
 8006c64:	6033      	str	r3, [r6, #0]
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	0699      	lsls	r1, r3, #26
 8006c6a:	bf42      	ittt	mi
 8006c6c:	6833      	ldrmi	r3, [r6, #0]
 8006c6e:	3302      	addmi	r3, #2
 8006c70:	6033      	strmi	r3, [r6, #0]
 8006c72:	6825      	ldr	r5, [r4, #0]
 8006c74:	f015 0506 	ands.w	r5, r5, #6
 8006c78:	d106      	bne.n	8006c88 <_printf_common+0x48>
 8006c7a:	f104 0a19 	add.w	sl, r4, #25
 8006c7e:	68e3      	ldr	r3, [r4, #12]
 8006c80:	6832      	ldr	r2, [r6, #0]
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	42ab      	cmp	r3, r5
 8006c86:	dc26      	bgt.n	8006cd6 <_printf_common+0x96>
 8006c88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006c8c:	6822      	ldr	r2, [r4, #0]
 8006c8e:	3b00      	subs	r3, #0
 8006c90:	bf18      	it	ne
 8006c92:	2301      	movne	r3, #1
 8006c94:	0692      	lsls	r2, r2, #26
 8006c96:	d42b      	bmi.n	8006cf0 <_printf_common+0xb0>
 8006c98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006c9c:	4641      	mov	r1, r8
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	47c8      	blx	r9
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	d01e      	beq.n	8006ce4 <_printf_common+0xa4>
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	6922      	ldr	r2, [r4, #16]
 8006caa:	f003 0306 	and.w	r3, r3, #6
 8006cae:	2b04      	cmp	r3, #4
 8006cb0:	bf02      	ittt	eq
 8006cb2:	68e5      	ldreq	r5, [r4, #12]
 8006cb4:	6833      	ldreq	r3, [r6, #0]
 8006cb6:	1aed      	subeq	r5, r5, r3
 8006cb8:	68a3      	ldr	r3, [r4, #8]
 8006cba:	bf0c      	ite	eq
 8006cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cc0:	2500      	movne	r5, #0
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	bfc4      	itt	gt
 8006cc6:	1a9b      	subgt	r3, r3, r2
 8006cc8:	18ed      	addgt	r5, r5, r3
 8006cca:	2600      	movs	r6, #0
 8006ccc:	341a      	adds	r4, #26
 8006cce:	42b5      	cmp	r5, r6
 8006cd0:	d11a      	bne.n	8006d08 <_printf_common+0xc8>
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	e008      	b.n	8006ce8 <_printf_common+0xa8>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	4652      	mov	r2, sl
 8006cda:	4641      	mov	r1, r8
 8006cdc:	4638      	mov	r0, r7
 8006cde:	47c8      	blx	r9
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d103      	bne.n	8006cec <_printf_common+0xac>
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cec:	3501      	adds	r5, #1
 8006cee:	e7c6      	b.n	8006c7e <_printf_common+0x3e>
 8006cf0:	18e1      	adds	r1, r4, r3
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	2030      	movs	r0, #48	@ 0x30
 8006cf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006cfa:	4422      	add	r2, r4
 8006cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d04:	3302      	adds	r3, #2
 8006d06:	e7c7      	b.n	8006c98 <_printf_common+0x58>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	4622      	mov	r2, r4
 8006d0c:	4641      	mov	r1, r8
 8006d0e:	4638      	mov	r0, r7
 8006d10:	47c8      	blx	r9
 8006d12:	3001      	adds	r0, #1
 8006d14:	d0e6      	beq.n	8006ce4 <_printf_common+0xa4>
 8006d16:	3601      	adds	r6, #1
 8006d18:	e7d9      	b.n	8006cce <_printf_common+0x8e>
	...

08006d1c <_printf_i>:
 8006d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d20:	7e0f      	ldrb	r7, [r1, #24]
 8006d22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d24:	2f78      	cmp	r7, #120	@ 0x78
 8006d26:	4691      	mov	r9, r2
 8006d28:	4680      	mov	r8, r0
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	469a      	mov	sl, r3
 8006d2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d32:	d807      	bhi.n	8006d44 <_printf_i+0x28>
 8006d34:	2f62      	cmp	r7, #98	@ 0x62
 8006d36:	d80a      	bhi.n	8006d4e <_printf_i+0x32>
 8006d38:	2f00      	cmp	r7, #0
 8006d3a:	f000 80d2 	beq.w	8006ee2 <_printf_i+0x1c6>
 8006d3e:	2f58      	cmp	r7, #88	@ 0x58
 8006d40:	f000 80b9 	beq.w	8006eb6 <_printf_i+0x19a>
 8006d44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d4c:	e03a      	b.n	8006dc4 <_printf_i+0xa8>
 8006d4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006d52:	2b15      	cmp	r3, #21
 8006d54:	d8f6      	bhi.n	8006d44 <_printf_i+0x28>
 8006d56:	a101      	add	r1, pc, #4	@ (adr r1, 8006d5c <_printf_i+0x40>)
 8006d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d5c:	08006db5 	.word	0x08006db5
 8006d60:	08006dc9 	.word	0x08006dc9
 8006d64:	08006d45 	.word	0x08006d45
 8006d68:	08006d45 	.word	0x08006d45
 8006d6c:	08006d45 	.word	0x08006d45
 8006d70:	08006d45 	.word	0x08006d45
 8006d74:	08006dc9 	.word	0x08006dc9
 8006d78:	08006d45 	.word	0x08006d45
 8006d7c:	08006d45 	.word	0x08006d45
 8006d80:	08006d45 	.word	0x08006d45
 8006d84:	08006d45 	.word	0x08006d45
 8006d88:	08006ec9 	.word	0x08006ec9
 8006d8c:	08006df3 	.word	0x08006df3
 8006d90:	08006e83 	.word	0x08006e83
 8006d94:	08006d45 	.word	0x08006d45
 8006d98:	08006d45 	.word	0x08006d45
 8006d9c:	08006eeb 	.word	0x08006eeb
 8006da0:	08006d45 	.word	0x08006d45
 8006da4:	08006df3 	.word	0x08006df3
 8006da8:	08006d45 	.word	0x08006d45
 8006dac:	08006d45 	.word	0x08006d45
 8006db0:	08006e8b 	.word	0x08006e8b
 8006db4:	6833      	ldr	r3, [r6, #0]
 8006db6:	1d1a      	adds	r2, r3, #4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6032      	str	r2, [r6, #0]
 8006dbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e09d      	b.n	8006f04 <_printf_i+0x1e8>
 8006dc8:	6833      	ldr	r3, [r6, #0]
 8006dca:	6820      	ldr	r0, [r4, #0]
 8006dcc:	1d19      	adds	r1, r3, #4
 8006dce:	6031      	str	r1, [r6, #0]
 8006dd0:	0606      	lsls	r6, r0, #24
 8006dd2:	d501      	bpl.n	8006dd8 <_printf_i+0xbc>
 8006dd4:	681d      	ldr	r5, [r3, #0]
 8006dd6:	e003      	b.n	8006de0 <_printf_i+0xc4>
 8006dd8:	0645      	lsls	r5, r0, #25
 8006dda:	d5fb      	bpl.n	8006dd4 <_printf_i+0xb8>
 8006ddc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006de0:	2d00      	cmp	r5, #0
 8006de2:	da03      	bge.n	8006dec <_printf_i+0xd0>
 8006de4:	232d      	movs	r3, #45	@ 0x2d
 8006de6:	426d      	negs	r5, r5
 8006de8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006dec:	4859      	ldr	r0, [pc, #356]	@ (8006f54 <_printf_i+0x238>)
 8006dee:	230a      	movs	r3, #10
 8006df0:	e011      	b.n	8006e16 <_printf_i+0xfa>
 8006df2:	6821      	ldr	r1, [r4, #0]
 8006df4:	6833      	ldr	r3, [r6, #0]
 8006df6:	0608      	lsls	r0, r1, #24
 8006df8:	f853 5b04 	ldr.w	r5, [r3], #4
 8006dfc:	d402      	bmi.n	8006e04 <_printf_i+0xe8>
 8006dfe:	0649      	lsls	r1, r1, #25
 8006e00:	bf48      	it	mi
 8006e02:	b2ad      	uxthmi	r5, r5
 8006e04:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e06:	4853      	ldr	r0, [pc, #332]	@ (8006f54 <_printf_i+0x238>)
 8006e08:	6033      	str	r3, [r6, #0]
 8006e0a:	bf14      	ite	ne
 8006e0c:	230a      	movne	r3, #10
 8006e0e:	2308      	moveq	r3, #8
 8006e10:	2100      	movs	r1, #0
 8006e12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e16:	6866      	ldr	r6, [r4, #4]
 8006e18:	60a6      	str	r6, [r4, #8]
 8006e1a:	2e00      	cmp	r6, #0
 8006e1c:	bfa2      	ittt	ge
 8006e1e:	6821      	ldrge	r1, [r4, #0]
 8006e20:	f021 0104 	bicge.w	r1, r1, #4
 8006e24:	6021      	strge	r1, [r4, #0]
 8006e26:	b90d      	cbnz	r5, 8006e2c <_printf_i+0x110>
 8006e28:	2e00      	cmp	r6, #0
 8006e2a:	d04b      	beq.n	8006ec4 <_printf_i+0x1a8>
 8006e2c:	4616      	mov	r6, r2
 8006e2e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e32:	fb03 5711 	mls	r7, r3, r1, r5
 8006e36:	5dc7      	ldrb	r7, [r0, r7]
 8006e38:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e3c:	462f      	mov	r7, r5
 8006e3e:	42bb      	cmp	r3, r7
 8006e40:	460d      	mov	r5, r1
 8006e42:	d9f4      	bls.n	8006e2e <_printf_i+0x112>
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d10b      	bne.n	8006e60 <_printf_i+0x144>
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	07df      	lsls	r7, r3, #31
 8006e4c:	d508      	bpl.n	8006e60 <_printf_i+0x144>
 8006e4e:	6923      	ldr	r3, [r4, #16]
 8006e50:	6861      	ldr	r1, [r4, #4]
 8006e52:	4299      	cmp	r1, r3
 8006e54:	bfde      	ittt	le
 8006e56:	2330      	movle	r3, #48	@ 0x30
 8006e58:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e5c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006e60:	1b92      	subs	r2, r2, r6
 8006e62:	6122      	str	r2, [r4, #16]
 8006e64:	f8cd a000 	str.w	sl, [sp]
 8006e68:	464b      	mov	r3, r9
 8006e6a:	aa03      	add	r2, sp, #12
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	4640      	mov	r0, r8
 8006e70:	f7ff fee6 	bl	8006c40 <_printf_common>
 8006e74:	3001      	adds	r0, #1
 8006e76:	d14a      	bne.n	8006f0e <_printf_i+0x1f2>
 8006e78:	f04f 30ff 	mov.w	r0, #4294967295
 8006e7c:	b004      	add	sp, #16
 8006e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	f043 0320 	orr.w	r3, r3, #32
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	4833      	ldr	r0, [pc, #204]	@ (8006f58 <_printf_i+0x23c>)
 8006e8c:	2778      	movs	r7, #120	@ 0x78
 8006e8e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	6831      	ldr	r1, [r6, #0]
 8006e96:	061f      	lsls	r7, r3, #24
 8006e98:	f851 5b04 	ldr.w	r5, [r1], #4
 8006e9c:	d402      	bmi.n	8006ea4 <_printf_i+0x188>
 8006e9e:	065f      	lsls	r7, r3, #25
 8006ea0:	bf48      	it	mi
 8006ea2:	b2ad      	uxthmi	r5, r5
 8006ea4:	6031      	str	r1, [r6, #0]
 8006ea6:	07d9      	lsls	r1, r3, #31
 8006ea8:	bf44      	itt	mi
 8006eaa:	f043 0320 	orrmi.w	r3, r3, #32
 8006eae:	6023      	strmi	r3, [r4, #0]
 8006eb0:	b11d      	cbz	r5, 8006eba <_printf_i+0x19e>
 8006eb2:	2310      	movs	r3, #16
 8006eb4:	e7ac      	b.n	8006e10 <_printf_i+0xf4>
 8006eb6:	4827      	ldr	r0, [pc, #156]	@ (8006f54 <_printf_i+0x238>)
 8006eb8:	e7e9      	b.n	8006e8e <_printf_i+0x172>
 8006eba:	6823      	ldr	r3, [r4, #0]
 8006ebc:	f023 0320 	bic.w	r3, r3, #32
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	e7f6      	b.n	8006eb2 <_printf_i+0x196>
 8006ec4:	4616      	mov	r6, r2
 8006ec6:	e7bd      	b.n	8006e44 <_printf_i+0x128>
 8006ec8:	6833      	ldr	r3, [r6, #0]
 8006eca:	6825      	ldr	r5, [r4, #0]
 8006ecc:	6961      	ldr	r1, [r4, #20]
 8006ece:	1d18      	adds	r0, r3, #4
 8006ed0:	6030      	str	r0, [r6, #0]
 8006ed2:	062e      	lsls	r6, r5, #24
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	d501      	bpl.n	8006edc <_printf_i+0x1c0>
 8006ed8:	6019      	str	r1, [r3, #0]
 8006eda:	e002      	b.n	8006ee2 <_printf_i+0x1c6>
 8006edc:	0668      	lsls	r0, r5, #25
 8006ede:	d5fb      	bpl.n	8006ed8 <_printf_i+0x1bc>
 8006ee0:	8019      	strh	r1, [r3, #0]
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	6123      	str	r3, [r4, #16]
 8006ee6:	4616      	mov	r6, r2
 8006ee8:	e7bc      	b.n	8006e64 <_printf_i+0x148>
 8006eea:	6833      	ldr	r3, [r6, #0]
 8006eec:	1d1a      	adds	r2, r3, #4
 8006eee:	6032      	str	r2, [r6, #0]
 8006ef0:	681e      	ldr	r6, [r3, #0]
 8006ef2:	6862      	ldr	r2, [r4, #4]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	f7f9 f96a 	bl	80001d0 <memchr>
 8006efc:	b108      	cbz	r0, 8006f02 <_printf_i+0x1e6>
 8006efe:	1b80      	subs	r0, r0, r6
 8006f00:	6060      	str	r0, [r4, #4]
 8006f02:	6863      	ldr	r3, [r4, #4]
 8006f04:	6123      	str	r3, [r4, #16]
 8006f06:	2300      	movs	r3, #0
 8006f08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f0c:	e7aa      	b.n	8006e64 <_printf_i+0x148>
 8006f0e:	6923      	ldr	r3, [r4, #16]
 8006f10:	4632      	mov	r2, r6
 8006f12:	4649      	mov	r1, r9
 8006f14:	4640      	mov	r0, r8
 8006f16:	47d0      	blx	sl
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d0ad      	beq.n	8006e78 <_printf_i+0x15c>
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	079b      	lsls	r3, r3, #30
 8006f20:	d413      	bmi.n	8006f4a <_printf_i+0x22e>
 8006f22:	68e0      	ldr	r0, [r4, #12]
 8006f24:	9b03      	ldr	r3, [sp, #12]
 8006f26:	4298      	cmp	r0, r3
 8006f28:	bfb8      	it	lt
 8006f2a:	4618      	movlt	r0, r3
 8006f2c:	e7a6      	b.n	8006e7c <_printf_i+0x160>
 8006f2e:	2301      	movs	r3, #1
 8006f30:	4632      	mov	r2, r6
 8006f32:	4649      	mov	r1, r9
 8006f34:	4640      	mov	r0, r8
 8006f36:	47d0      	blx	sl
 8006f38:	3001      	adds	r0, #1
 8006f3a:	d09d      	beq.n	8006e78 <_printf_i+0x15c>
 8006f3c:	3501      	adds	r5, #1
 8006f3e:	68e3      	ldr	r3, [r4, #12]
 8006f40:	9903      	ldr	r1, [sp, #12]
 8006f42:	1a5b      	subs	r3, r3, r1
 8006f44:	42ab      	cmp	r3, r5
 8006f46:	dcf2      	bgt.n	8006f2e <_printf_i+0x212>
 8006f48:	e7eb      	b.n	8006f22 <_printf_i+0x206>
 8006f4a:	2500      	movs	r5, #0
 8006f4c:	f104 0619 	add.w	r6, r4, #25
 8006f50:	e7f5      	b.n	8006f3e <_printf_i+0x222>
 8006f52:	bf00      	nop
 8006f54:	08009d72 	.word	0x08009d72
 8006f58:	08009d83 	.word	0x08009d83

08006f5c <std>:
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	b510      	push	{r4, lr}
 8006f60:	4604      	mov	r4, r0
 8006f62:	e9c0 3300 	strd	r3, r3, [r0]
 8006f66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f6a:	6083      	str	r3, [r0, #8]
 8006f6c:	8181      	strh	r1, [r0, #12]
 8006f6e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006f70:	81c2      	strh	r2, [r0, #14]
 8006f72:	6183      	str	r3, [r0, #24]
 8006f74:	4619      	mov	r1, r3
 8006f76:	2208      	movs	r2, #8
 8006f78:	305c      	adds	r0, #92	@ 0x5c
 8006f7a:	f000 f914 	bl	80071a6 <memset>
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb4 <std+0x58>)
 8006f80:	6263      	str	r3, [r4, #36]	@ 0x24
 8006f82:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb8 <std+0x5c>)
 8006f84:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006f86:	4b0d      	ldr	r3, [pc, #52]	@ (8006fbc <std+0x60>)
 8006f88:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc0 <std+0x64>)
 8006f8c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc4 <std+0x68>)
 8006f90:	6224      	str	r4, [r4, #32]
 8006f92:	429c      	cmp	r4, r3
 8006f94:	d006      	beq.n	8006fa4 <std+0x48>
 8006f96:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006f9a:	4294      	cmp	r4, r2
 8006f9c:	d002      	beq.n	8006fa4 <std+0x48>
 8006f9e:	33d0      	adds	r3, #208	@ 0xd0
 8006fa0:	429c      	cmp	r4, r3
 8006fa2:	d105      	bne.n	8006fb0 <std+0x54>
 8006fa4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fac:	f000 b988 	b.w	80072c0 <__retarget_lock_init_recursive>
 8006fb0:	bd10      	pop	{r4, pc}
 8006fb2:	bf00      	nop
 8006fb4:	08007121 	.word	0x08007121
 8006fb8:	08007143 	.word	0x08007143
 8006fbc:	0800717b 	.word	0x0800717b
 8006fc0:	0800719f 	.word	0x0800719f
 8006fc4:	20000840 	.word	0x20000840

08006fc8 <stdio_exit_handler>:
 8006fc8:	4a02      	ldr	r2, [pc, #8]	@ (8006fd4 <stdio_exit_handler+0xc>)
 8006fca:	4903      	ldr	r1, [pc, #12]	@ (8006fd8 <stdio_exit_handler+0x10>)
 8006fcc:	4803      	ldr	r0, [pc, #12]	@ (8006fdc <stdio_exit_handler+0x14>)
 8006fce:	f000 b869 	b.w	80070a4 <_fwalk_sglue>
 8006fd2:	bf00      	nop
 8006fd4:	2000000c 	.word	0x2000000c
 8006fd8:	08008ab1 	.word	0x08008ab1
 8006fdc:	2000001c 	.word	0x2000001c

08006fe0 <cleanup_stdio>:
 8006fe0:	6841      	ldr	r1, [r0, #4]
 8006fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8007014 <cleanup_stdio+0x34>)
 8006fe4:	4299      	cmp	r1, r3
 8006fe6:	b510      	push	{r4, lr}
 8006fe8:	4604      	mov	r4, r0
 8006fea:	d001      	beq.n	8006ff0 <cleanup_stdio+0x10>
 8006fec:	f001 fd60 	bl	8008ab0 <_fflush_r>
 8006ff0:	68a1      	ldr	r1, [r4, #8]
 8006ff2:	4b09      	ldr	r3, [pc, #36]	@ (8007018 <cleanup_stdio+0x38>)
 8006ff4:	4299      	cmp	r1, r3
 8006ff6:	d002      	beq.n	8006ffe <cleanup_stdio+0x1e>
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f001 fd59 	bl	8008ab0 <_fflush_r>
 8006ffe:	68e1      	ldr	r1, [r4, #12]
 8007000:	4b06      	ldr	r3, [pc, #24]	@ (800701c <cleanup_stdio+0x3c>)
 8007002:	4299      	cmp	r1, r3
 8007004:	d004      	beq.n	8007010 <cleanup_stdio+0x30>
 8007006:	4620      	mov	r0, r4
 8007008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800700c:	f001 bd50 	b.w	8008ab0 <_fflush_r>
 8007010:	bd10      	pop	{r4, pc}
 8007012:	bf00      	nop
 8007014:	20000840 	.word	0x20000840
 8007018:	200008a8 	.word	0x200008a8
 800701c:	20000910 	.word	0x20000910

08007020 <global_stdio_init.part.0>:
 8007020:	b510      	push	{r4, lr}
 8007022:	4b0b      	ldr	r3, [pc, #44]	@ (8007050 <global_stdio_init.part.0+0x30>)
 8007024:	4c0b      	ldr	r4, [pc, #44]	@ (8007054 <global_stdio_init.part.0+0x34>)
 8007026:	4a0c      	ldr	r2, [pc, #48]	@ (8007058 <global_stdio_init.part.0+0x38>)
 8007028:	601a      	str	r2, [r3, #0]
 800702a:	4620      	mov	r0, r4
 800702c:	2200      	movs	r2, #0
 800702e:	2104      	movs	r1, #4
 8007030:	f7ff ff94 	bl	8006f5c <std>
 8007034:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007038:	2201      	movs	r2, #1
 800703a:	2109      	movs	r1, #9
 800703c:	f7ff ff8e 	bl	8006f5c <std>
 8007040:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007044:	2202      	movs	r2, #2
 8007046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800704a:	2112      	movs	r1, #18
 800704c:	f7ff bf86 	b.w	8006f5c <std>
 8007050:	20000978 	.word	0x20000978
 8007054:	20000840 	.word	0x20000840
 8007058:	08006fc9 	.word	0x08006fc9

0800705c <__sfp_lock_acquire>:
 800705c:	4801      	ldr	r0, [pc, #4]	@ (8007064 <__sfp_lock_acquire+0x8>)
 800705e:	f000 b930 	b.w	80072c2 <__retarget_lock_acquire_recursive>
 8007062:	bf00      	nop
 8007064:	20000981 	.word	0x20000981

08007068 <__sfp_lock_release>:
 8007068:	4801      	ldr	r0, [pc, #4]	@ (8007070 <__sfp_lock_release+0x8>)
 800706a:	f000 b92b 	b.w	80072c4 <__retarget_lock_release_recursive>
 800706e:	bf00      	nop
 8007070:	20000981 	.word	0x20000981

08007074 <__sinit>:
 8007074:	b510      	push	{r4, lr}
 8007076:	4604      	mov	r4, r0
 8007078:	f7ff fff0 	bl	800705c <__sfp_lock_acquire>
 800707c:	6a23      	ldr	r3, [r4, #32]
 800707e:	b11b      	cbz	r3, 8007088 <__sinit+0x14>
 8007080:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007084:	f7ff bff0 	b.w	8007068 <__sfp_lock_release>
 8007088:	4b04      	ldr	r3, [pc, #16]	@ (800709c <__sinit+0x28>)
 800708a:	6223      	str	r3, [r4, #32]
 800708c:	4b04      	ldr	r3, [pc, #16]	@ (80070a0 <__sinit+0x2c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1f5      	bne.n	8007080 <__sinit+0xc>
 8007094:	f7ff ffc4 	bl	8007020 <global_stdio_init.part.0>
 8007098:	e7f2      	b.n	8007080 <__sinit+0xc>
 800709a:	bf00      	nop
 800709c:	08006fe1 	.word	0x08006fe1
 80070a0:	20000978 	.word	0x20000978

080070a4 <_fwalk_sglue>:
 80070a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070a8:	4607      	mov	r7, r0
 80070aa:	4688      	mov	r8, r1
 80070ac:	4614      	mov	r4, r2
 80070ae:	2600      	movs	r6, #0
 80070b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070b4:	f1b9 0901 	subs.w	r9, r9, #1
 80070b8:	d505      	bpl.n	80070c6 <_fwalk_sglue+0x22>
 80070ba:	6824      	ldr	r4, [r4, #0]
 80070bc:	2c00      	cmp	r4, #0
 80070be:	d1f7      	bne.n	80070b0 <_fwalk_sglue+0xc>
 80070c0:	4630      	mov	r0, r6
 80070c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070c6:	89ab      	ldrh	r3, [r5, #12]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d907      	bls.n	80070dc <_fwalk_sglue+0x38>
 80070cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070d0:	3301      	adds	r3, #1
 80070d2:	d003      	beq.n	80070dc <_fwalk_sglue+0x38>
 80070d4:	4629      	mov	r1, r5
 80070d6:	4638      	mov	r0, r7
 80070d8:	47c0      	blx	r8
 80070da:	4306      	orrs	r6, r0
 80070dc:	3568      	adds	r5, #104	@ 0x68
 80070de:	e7e9      	b.n	80070b4 <_fwalk_sglue+0x10>

080070e0 <siprintf>:
 80070e0:	b40e      	push	{r1, r2, r3}
 80070e2:	b500      	push	{lr}
 80070e4:	b09c      	sub	sp, #112	@ 0x70
 80070e6:	ab1d      	add	r3, sp, #116	@ 0x74
 80070e8:	9002      	str	r0, [sp, #8]
 80070ea:	9006      	str	r0, [sp, #24]
 80070ec:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80070f0:	4809      	ldr	r0, [pc, #36]	@ (8007118 <siprintf+0x38>)
 80070f2:	9107      	str	r1, [sp, #28]
 80070f4:	9104      	str	r1, [sp, #16]
 80070f6:	4909      	ldr	r1, [pc, #36]	@ (800711c <siprintf+0x3c>)
 80070f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fc:	9105      	str	r1, [sp, #20]
 80070fe:	6800      	ldr	r0, [r0, #0]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	a902      	add	r1, sp, #8
 8007104:	f001 fb54 	bl	80087b0 <_svfiprintf_r>
 8007108:	9b02      	ldr	r3, [sp, #8]
 800710a:	2200      	movs	r2, #0
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	b01c      	add	sp, #112	@ 0x70
 8007110:	f85d eb04 	ldr.w	lr, [sp], #4
 8007114:	b003      	add	sp, #12
 8007116:	4770      	bx	lr
 8007118:	20000018 	.word	0x20000018
 800711c:	ffff0208 	.word	0xffff0208

08007120 <__sread>:
 8007120:	b510      	push	{r4, lr}
 8007122:	460c      	mov	r4, r1
 8007124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007128:	f000 f86c 	bl	8007204 <_read_r>
 800712c:	2800      	cmp	r0, #0
 800712e:	bfab      	itete	ge
 8007130:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007132:	89a3      	ldrhlt	r3, [r4, #12]
 8007134:	181b      	addge	r3, r3, r0
 8007136:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800713a:	bfac      	ite	ge
 800713c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800713e:	81a3      	strhlt	r3, [r4, #12]
 8007140:	bd10      	pop	{r4, pc}

08007142 <__swrite>:
 8007142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007146:	461f      	mov	r7, r3
 8007148:	898b      	ldrh	r3, [r1, #12]
 800714a:	05db      	lsls	r3, r3, #23
 800714c:	4605      	mov	r5, r0
 800714e:	460c      	mov	r4, r1
 8007150:	4616      	mov	r6, r2
 8007152:	d505      	bpl.n	8007160 <__swrite+0x1e>
 8007154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007158:	2302      	movs	r3, #2
 800715a:	2200      	movs	r2, #0
 800715c:	f000 f840 	bl	80071e0 <_lseek_r>
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007166:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800716a:	81a3      	strh	r3, [r4, #12]
 800716c:	4632      	mov	r2, r6
 800716e:	463b      	mov	r3, r7
 8007170:	4628      	mov	r0, r5
 8007172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007176:	f000 b867 	b.w	8007248 <_write_r>

0800717a <__sseek>:
 800717a:	b510      	push	{r4, lr}
 800717c:	460c      	mov	r4, r1
 800717e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007182:	f000 f82d 	bl	80071e0 <_lseek_r>
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	bf15      	itete	ne
 800718c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800718e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007192:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007196:	81a3      	strheq	r3, [r4, #12]
 8007198:	bf18      	it	ne
 800719a:	81a3      	strhne	r3, [r4, #12]
 800719c:	bd10      	pop	{r4, pc}

0800719e <__sclose>:
 800719e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071a2:	f000 b80d 	b.w	80071c0 <_close_r>

080071a6 <memset>:
 80071a6:	4402      	add	r2, r0
 80071a8:	4603      	mov	r3, r0
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d100      	bne.n	80071b0 <memset+0xa>
 80071ae:	4770      	bx	lr
 80071b0:	f803 1b01 	strb.w	r1, [r3], #1
 80071b4:	e7f9      	b.n	80071aa <memset+0x4>
	...

080071b8 <_localeconv_r>:
 80071b8:	4800      	ldr	r0, [pc, #0]	@ (80071bc <_localeconv_r+0x4>)
 80071ba:	4770      	bx	lr
 80071bc:	20000158 	.word	0x20000158

080071c0 <_close_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4d06      	ldr	r5, [pc, #24]	@ (80071dc <_close_r+0x1c>)
 80071c4:	2300      	movs	r3, #0
 80071c6:	4604      	mov	r4, r0
 80071c8:	4608      	mov	r0, r1
 80071ca:	602b      	str	r3, [r5, #0]
 80071cc:	f7fb fc7a 	bl	8002ac4 <_close>
 80071d0:	1c43      	adds	r3, r0, #1
 80071d2:	d102      	bne.n	80071da <_close_r+0x1a>
 80071d4:	682b      	ldr	r3, [r5, #0]
 80071d6:	b103      	cbz	r3, 80071da <_close_r+0x1a>
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	bd38      	pop	{r3, r4, r5, pc}
 80071dc:	2000097c 	.word	0x2000097c

080071e0 <_lseek_r>:
 80071e0:	b538      	push	{r3, r4, r5, lr}
 80071e2:	4d07      	ldr	r5, [pc, #28]	@ (8007200 <_lseek_r+0x20>)
 80071e4:	4604      	mov	r4, r0
 80071e6:	4608      	mov	r0, r1
 80071e8:	4611      	mov	r1, r2
 80071ea:	2200      	movs	r2, #0
 80071ec:	602a      	str	r2, [r5, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	f7fb fc8f 	bl	8002b12 <_lseek>
 80071f4:	1c43      	adds	r3, r0, #1
 80071f6:	d102      	bne.n	80071fe <_lseek_r+0x1e>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	b103      	cbz	r3, 80071fe <_lseek_r+0x1e>
 80071fc:	6023      	str	r3, [r4, #0]
 80071fe:	bd38      	pop	{r3, r4, r5, pc}
 8007200:	2000097c 	.word	0x2000097c

08007204 <_read_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	4d07      	ldr	r5, [pc, #28]	@ (8007224 <_read_r+0x20>)
 8007208:	4604      	mov	r4, r0
 800720a:	4608      	mov	r0, r1
 800720c:	4611      	mov	r1, r2
 800720e:	2200      	movs	r2, #0
 8007210:	602a      	str	r2, [r5, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	f7fb fc1d 	bl	8002a52 <_read>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d102      	bne.n	8007222 <_read_r+0x1e>
 800721c:	682b      	ldr	r3, [r5, #0]
 800721e:	b103      	cbz	r3, 8007222 <_read_r+0x1e>
 8007220:	6023      	str	r3, [r4, #0]
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	2000097c 	.word	0x2000097c

08007228 <_sbrk_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4d06      	ldr	r5, [pc, #24]	@ (8007244 <_sbrk_r+0x1c>)
 800722c:	2300      	movs	r3, #0
 800722e:	4604      	mov	r4, r0
 8007230:	4608      	mov	r0, r1
 8007232:	602b      	str	r3, [r5, #0]
 8007234:	f7fb fc7a 	bl	8002b2c <_sbrk>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d102      	bne.n	8007242 <_sbrk_r+0x1a>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	b103      	cbz	r3, 8007242 <_sbrk_r+0x1a>
 8007240:	6023      	str	r3, [r4, #0]
 8007242:	bd38      	pop	{r3, r4, r5, pc}
 8007244:	2000097c 	.word	0x2000097c

08007248 <_write_r>:
 8007248:	b538      	push	{r3, r4, r5, lr}
 800724a:	4d07      	ldr	r5, [pc, #28]	@ (8007268 <_write_r+0x20>)
 800724c:	4604      	mov	r4, r0
 800724e:	4608      	mov	r0, r1
 8007250:	4611      	mov	r1, r2
 8007252:	2200      	movs	r2, #0
 8007254:	602a      	str	r2, [r5, #0]
 8007256:	461a      	mov	r2, r3
 8007258:	f7fb fc18 	bl	8002a8c <_write>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <_write_r+0x1e>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	b103      	cbz	r3, 8007266 <_write_r+0x1e>
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	2000097c 	.word	0x2000097c

0800726c <__errno>:
 800726c:	4b01      	ldr	r3, [pc, #4]	@ (8007274 <__errno+0x8>)
 800726e:	6818      	ldr	r0, [r3, #0]
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	20000018 	.word	0x20000018

08007278 <__libc_init_array>:
 8007278:	b570      	push	{r4, r5, r6, lr}
 800727a:	4d0d      	ldr	r5, [pc, #52]	@ (80072b0 <__libc_init_array+0x38>)
 800727c:	4c0d      	ldr	r4, [pc, #52]	@ (80072b4 <__libc_init_array+0x3c>)
 800727e:	1b64      	subs	r4, r4, r5
 8007280:	10a4      	asrs	r4, r4, #2
 8007282:	2600      	movs	r6, #0
 8007284:	42a6      	cmp	r6, r4
 8007286:	d109      	bne.n	800729c <__libc_init_array+0x24>
 8007288:	4d0b      	ldr	r5, [pc, #44]	@ (80072b8 <__libc_init_array+0x40>)
 800728a:	4c0c      	ldr	r4, [pc, #48]	@ (80072bc <__libc_init_array+0x44>)
 800728c:	f001 ff9e 	bl	80091cc <_init>
 8007290:	1b64      	subs	r4, r4, r5
 8007292:	10a4      	asrs	r4, r4, #2
 8007294:	2600      	movs	r6, #0
 8007296:	42a6      	cmp	r6, r4
 8007298:	d105      	bne.n	80072a6 <__libc_init_array+0x2e>
 800729a:	bd70      	pop	{r4, r5, r6, pc}
 800729c:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a0:	4798      	blx	r3
 80072a2:	3601      	adds	r6, #1
 80072a4:	e7ee      	b.n	8007284 <__libc_init_array+0xc>
 80072a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80072aa:	4798      	blx	r3
 80072ac:	3601      	adds	r6, #1
 80072ae:	e7f2      	b.n	8007296 <__libc_init_array+0x1e>
 80072b0:	0800a0d8 	.word	0x0800a0d8
 80072b4:	0800a0d8 	.word	0x0800a0d8
 80072b8:	0800a0d8 	.word	0x0800a0d8
 80072bc:	0800a0dc 	.word	0x0800a0dc

080072c0 <__retarget_lock_init_recursive>:
 80072c0:	4770      	bx	lr

080072c2 <__retarget_lock_acquire_recursive>:
 80072c2:	4770      	bx	lr

080072c4 <__retarget_lock_release_recursive>:
 80072c4:	4770      	bx	lr

080072c6 <quorem>:
 80072c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ca:	6903      	ldr	r3, [r0, #16]
 80072cc:	690c      	ldr	r4, [r1, #16]
 80072ce:	42a3      	cmp	r3, r4
 80072d0:	4607      	mov	r7, r0
 80072d2:	db7e      	blt.n	80073d2 <quorem+0x10c>
 80072d4:	3c01      	subs	r4, #1
 80072d6:	f101 0814 	add.w	r8, r1, #20
 80072da:	00a3      	lsls	r3, r4, #2
 80072dc:	f100 0514 	add.w	r5, r0, #20
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80072e6:	9301      	str	r3, [sp, #4]
 80072e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80072ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80072f0:	3301      	adds	r3, #1
 80072f2:	429a      	cmp	r2, r3
 80072f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80072f8:	fbb2 f6f3 	udiv	r6, r2, r3
 80072fc:	d32e      	bcc.n	800735c <quorem+0x96>
 80072fe:	f04f 0a00 	mov.w	sl, #0
 8007302:	46c4      	mov	ip, r8
 8007304:	46ae      	mov	lr, r5
 8007306:	46d3      	mov	fp, sl
 8007308:	f85c 3b04 	ldr.w	r3, [ip], #4
 800730c:	b298      	uxth	r0, r3
 800730e:	fb06 a000 	mla	r0, r6, r0, sl
 8007312:	0c02      	lsrs	r2, r0, #16
 8007314:	0c1b      	lsrs	r3, r3, #16
 8007316:	fb06 2303 	mla	r3, r6, r3, r2
 800731a:	f8de 2000 	ldr.w	r2, [lr]
 800731e:	b280      	uxth	r0, r0
 8007320:	b292      	uxth	r2, r2
 8007322:	1a12      	subs	r2, r2, r0
 8007324:	445a      	add	r2, fp
 8007326:	f8de 0000 	ldr.w	r0, [lr]
 800732a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800732e:	b29b      	uxth	r3, r3
 8007330:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007334:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007338:	b292      	uxth	r2, r2
 800733a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800733e:	45e1      	cmp	r9, ip
 8007340:	f84e 2b04 	str.w	r2, [lr], #4
 8007344:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007348:	d2de      	bcs.n	8007308 <quorem+0x42>
 800734a:	9b00      	ldr	r3, [sp, #0]
 800734c:	58eb      	ldr	r3, [r5, r3]
 800734e:	b92b      	cbnz	r3, 800735c <quorem+0x96>
 8007350:	9b01      	ldr	r3, [sp, #4]
 8007352:	3b04      	subs	r3, #4
 8007354:	429d      	cmp	r5, r3
 8007356:	461a      	mov	r2, r3
 8007358:	d32f      	bcc.n	80073ba <quorem+0xf4>
 800735a:	613c      	str	r4, [r7, #16]
 800735c:	4638      	mov	r0, r7
 800735e:	f001 f8c3 	bl	80084e8 <__mcmp>
 8007362:	2800      	cmp	r0, #0
 8007364:	db25      	blt.n	80073b2 <quorem+0xec>
 8007366:	4629      	mov	r1, r5
 8007368:	2000      	movs	r0, #0
 800736a:	f858 2b04 	ldr.w	r2, [r8], #4
 800736e:	f8d1 c000 	ldr.w	ip, [r1]
 8007372:	fa1f fe82 	uxth.w	lr, r2
 8007376:	fa1f f38c 	uxth.w	r3, ip
 800737a:	eba3 030e 	sub.w	r3, r3, lr
 800737e:	4403      	add	r3, r0
 8007380:	0c12      	lsrs	r2, r2, #16
 8007382:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007386:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800738a:	b29b      	uxth	r3, r3
 800738c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007390:	45c1      	cmp	r9, r8
 8007392:	f841 3b04 	str.w	r3, [r1], #4
 8007396:	ea4f 4022 	mov.w	r0, r2, asr #16
 800739a:	d2e6      	bcs.n	800736a <quorem+0xa4>
 800739c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073a4:	b922      	cbnz	r2, 80073b0 <quorem+0xea>
 80073a6:	3b04      	subs	r3, #4
 80073a8:	429d      	cmp	r5, r3
 80073aa:	461a      	mov	r2, r3
 80073ac:	d30b      	bcc.n	80073c6 <quorem+0x100>
 80073ae:	613c      	str	r4, [r7, #16]
 80073b0:	3601      	adds	r6, #1
 80073b2:	4630      	mov	r0, r6
 80073b4:	b003      	add	sp, #12
 80073b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ba:	6812      	ldr	r2, [r2, #0]
 80073bc:	3b04      	subs	r3, #4
 80073be:	2a00      	cmp	r2, #0
 80073c0:	d1cb      	bne.n	800735a <quorem+0x94>
 80073c2:	3c01      	subs	r4, #1
 80073c4:	e7c6      	b.n	8007354 <quorem+0x8e>
 80073c6:	6812      	ldr	r2, [r2, #0]
 80073c8:	3b04      	subs	r3, #4
 80073ca:	2a00      	cmp	r2, #0
 80073cc:	d1ef      	bne.n	80073ae <quorem+0xe8>
 80073ce:	3c01      	subs	r4, #1
 80073d0:	e7ea      	b.n	80073a8 <quorem+0xe2>
 80073d2:	2000      	movs	r0, #0
 80073d4:	e7ee      	b.n	80073b4 <quorem+0xee>
	...

080073d8 <_dtoa_r>:
 80073d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073dc:	69c7      	ldr	r7, [r0, #28]
 80073de:	b099      	sub	sp, #100	@ 0x64
 80073e0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80073e4:	ec55 4b10 	vmov	r4, r5, d0
 80073e8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80073ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80073ec:	4683      	mov	fp, r0
 80073ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80073f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073f2:	b97f      	cbnz	r7, 8007414 <_dtoa_r+0x3c>
 80073f4:	2010      	movs	r0, #16
 80073f6:	f7ff f89b 	bl	8006530 <malloc>
 80073fa:	4602      	mov	r2, r0
 80073fc:	f8cb 001c 	str.w	r0, [fp, #28]
 8007400:	b920      	cbnz	r0, 800740c <_dtoa_r+0x34>
 8007402:	4ba7      	ldr	r3, [pc, #668]	@ (80076a0 <_dtoa_r+0x2c8>)
 8007404:	21ef      	movs	r1, #239	@ 0xef
 8007406:	48a7      	ldr	r0, [pc, #668]	@ (80076a4 <_dtoa_r+0x2cc>)
 8007408:	f001 fba2 	bl	8008b50 <__assert_func>
 800740c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007410:	6007      	str	r7, [r0, #0]
 8007412:	60c7      	str	r7, [r0, #12]
 8007414:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007418:	6819      	ldr	r1, [r3, #0]
 800741a:	b159      	cbz	r1, 8007434 <_dtoa_r+0x5c>
 800741c:	685a      	ldr	r2, [r3, #4]
 800741e:	604a      	str	r2, [r1, #4]
 8007420:	2301      	movs	r3, #1
 8007422:	4093      	lsls	r3, r2
 8007424:	608b      	str	r3, [r1, #8]
 8007426:	4658      	mov	r0, fp
 8007428:	f000 fe24 	bl	8008074 <_Bfree>
 800742c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007430:	2200      	movs	r2, #0
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	1e2b      	subs	r3, r5, #0
 8007436:	bfb9      	ittee	lt
 8007438:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800743c:	9303      	strlt	r3, [sp, #12]
 800743e:	2300      	movge	r3, #0
 8007440:	6033      	strge	r3, [r6, #0]
 8007442:	9f03      	ldr	r7, [sp, #12]
 8007444:	4b98      	ldr	r3, [pc, #608]	@ (80076a8 <_dtoa_r+0x2d0>)
 8007446:	bfbc      	itt	lt
 8007448:	2201      	movlt	r2, #1
 800744a:	6032      	strlt	r2, [r6, #0]
 800744c:	43bb      	bics	r3, r7
 800744e:	d112      	bne.n	8007476 <_dtoa_r+0x9e>
 8007450:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007452:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007456:	6013      	str	r3, [r2, #0]
 8007458:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800745c:	4323      	orrs	r3, r4
 800745e:	f000 854d 	beq.w	8007efc <_dtoa_r+0xb24>
 8007462:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007464:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80076bc <_dtoa_r+0x2e4>
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 854f 	beq.w	8007f0c <_dtoa_r+0xb34>
 800746e:	f10a 0303 	add.w	r3, sl, #3
 8007472:	f000 bd49 	b.w	8007f08 <_dtoa_r+0xb30>
 8007476:	ed9d 7b02 	vldr	d7, [sp, #8]
 800747a:	2200      	movs	r2, #0
 800747c:	ec51 0b17 	vmov	r0, r1, d7
 8007480:	2300      	movs	r3, #0
 8007482:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007486:	f7f9 fb1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800748a:	4680      	mov	r8, r0
 800748c:	b158      	cbz	r0, 80074a6 <_dtoa_r+0xce>
 800748e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007490:	2301      	movs	r3, #1
 8007492:	6013      	str	r3, [r2, #0]
 8007494:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007496:	b113      	cbz	r3, 800749e <_dtoa_r+0xc6>
 8007498:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800749a:	4b84      	ldr	r3, [pc, #528]	@ (80076ac <_dtoa_r+0x2d4>)
 800749c:	6013      	str	r3, [r2, #0]
 800749e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80076c0 <_dtoa_r+0x2e8>
 80074a2:	f000 bd33 	b.w	8007f0c <_dtoa_r+0xb34>
 80074a6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80074aa:	aa16      	add	r2, sp, #88	@ 0x58
 80074ac:	a917      	add	r1, sp, #92	@ 0x5c
 80074ae:	4658      	mov	r0, fp
 80074b0:	f001 f8ca 	bl	8008648 <__d2b>
 80074b4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80074b8:	4681      	mov	r9, r0
 80074ba:	2e00      	cmp	r6, #0
 80074bc:	d077      	beq.n	80075ae <_dtoa_r+0x1d6>
 80074be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074c0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80074c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074cc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80074d0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80074d4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80074d8:	4619      	mov	r1, r3
 80074da:	2200      	movs	r2, #0
 80074dc:	4b74      	ldr	r3, [pc, #464]	@ (80076b0 <_dtoa_r+0x2d8>)
 80074de:	f7f8 fed3 	bl	8000288 <__aeabi_dsub>
 80074e2:	a369      	add	r3, pc, #420	@ (adr r3, 8007688 <_dtoa_r+0x2b0>)
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	f7f9 f886 	bl	80005f8 <__aeabi_dmul>
 80074ec:	a368      	add	r3, pc, #416	@ (adr r3, 8007690 <_dtoa_r+0x2b8>)
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	f7f8 fecb 	bl	800028c <__adddf3>
 80074f6:	4604      	mov	r4, r0
 80074f8:	4630      	mov	r0, r6
 80074fa:	460d      	mov	r5, r1
 80074fc:	f7f9 f812 	bl	8000524 <__aeabi_i2d>
 8007500:	a365      	add	r3, pc, #404	@ (adr r3, 8007698 <_dtoa_r+0x2c0>)
 8007502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007506:	f7f9 f877 	bl	80005f8 <__aeabi_dmul>
 800750a:	4602      	mov	r2, r0
 800750c:	460b      	mov	r3, r1
 800750e:	4620      	mov	r0, r4
 8007510:	4629      	mov	r1, r5
 8007512:	f7f8 febb 	bl	800028c <__adddf3>
 8007516:	4604      	mov	r4, r0
 8007518:	460d      	mov	r5, r1
 800751a:	f7f9 fb1d 	bl	8000b58 <__aeabi_d2iz>
 800751e:	2200      	movs	r2, #0
 8007520:	4607      	mov	r7, r0
 8007522:	2300      	movs	r3, #0
 8007524:	4620      	mov	r0, r4
 8007526:	4629      	mov	r1, r5
 8007528:	f7f9 fad8 	bl	8000adc <__aeabi_dcmplt>
 800752c:	b140      	cbz	r0, 8007540 <_dtoa_r+0x168>
 800752e:	4638      	mov	r0, r7
 8007530:	f7f8 fff8 	bl	8000524 <__aeabi_i2d>
 8007534:	4622      	mov	r2, r4
 8007536:	462b      	mov	r3, r5
 8007538:	f7f9 fac6 	bl	8000ac8 <__aeabi_dcmpeq>
 800753c:	b900      	cbnz	r0, 8007540 <_dtoa_r+0x168>
 800753e:	3f01      	subs	r7, #1
 8007540:	2f16      	cmp	r7, #22
 8007542:	d851      	bhi.n	80075e8 <_dtoa_r+0x210>
 8007544:	4b5b      	ldr	r3, [pc, #364]	@ (80076b4 <_dtoa_r+0x2dc>)
 8007546:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007552:	f7f9 fac3 	bl	8000adc <__aeabi_dcmplt>
 8007556:	2800      	cmp	r0, #0
 8007558:	d048      	beq.n	80075ec <_dtoa_r+0x214>
 800755a:	3f01      	subs	r7, #1
 800755c:	2300      	movs	r3, #0
 800755e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007560:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007562:	1b9b      	subs	r3, r3, r6
 8007564:	1e5a      	subs	r2, r3, #1
 8007566:	bf44      	itt	mi
 8007568:	f1c3 0801 	rsbmi	r8, r3, #1
 800756c:	2300      	movmi	r3, #0
 800756e:	9208      	str	r2, [sp, #32]
 8007570:	bf54      	ite	pl
 8007572:	f04f 0800 	movpl.w	r8, #0
 8007576:	9308      	strmi	r3, [sp, #32]
 8007578:	2f00      	cmp	r7, #0
 800757a:	db39      	blt.n	80075f0 <_dtoa_r+0x218>
 800757c:	9b08      	ldr	r3, [sp, #32]
 800757e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007580:	443b      	add	r3, r7
 8007582:	9308      	str	r3, [sp, #32]
 8007584:	2300      	movs	r3, #0
 8007586:	930a      	str	r3, [sp, #40]	@ 0x28
 8007588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800758a:	2b09      	cmp	r3, #9
 800758c:	d864      	bhi.n	8007658 <_dtoa_r+0x280>
 800758e:	2b05      	cmp	r3, #5
 8007590:	bfc4      	itt	gt
 8007592:	3b04      	subgt	r3, #4
 8007594:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007598:	f1a3 0302 	sub.w	r3, r3, #2
 800759c:	bfcc      	ite	gt
 800759e:	2400      	movgt	r4, #0
 80075a0:	2401      	movle	r4, #1
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d863      	bhi.n	800766e <_dtoa_r+0x296>
 80075a6:	e8df f003 	tbb	[pc, r3]
 80075aa:	372a      	.short	0x372a
 80075ac:	5535      	.short	0x5535
 80075ae:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80075b2:	441e      	add	r6, r3
 80075b4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	bfc1      	itttt	gt
 80075bc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80075c0:	409f      	lslgt	r7, r3
 80075c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80075c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80075ca:	bfd6      	itet	le
 80075cc:	f1c3 0320 	rsble	r3, r3, #32
 80075d0:	ea47 0003 	orrgt.w	r0, r7, r3
 80075d4:	fa04 f003 	lslle.w	r0, r4, r3
 80075d8:	f7f8 ff94 	bl	8000504 <__aeabi_ui2d>
 80075dc:	2201      	movs	r2, #1
 80075de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80075e2:	3e01      	subs	r6, #1
 80075e4:	9214      	str	r2, [sp, #80]	@ 0x50
 80075e6:	e777      	b.n	80074d8 <_dtoa_r+0x100>
 80075e8:	2301      	movs	r3, #1
 80075ea:	e7b8      	b.n	800755e <_dtoa_r+0x186>
 80075ec:	9012      	str	r0, [sp, #72]	@ 0x48
 80075ee:	e7b7      	b.n	8007560 <_dtoa_r+0x188>
 80075f0:	427b      	negs	r3, r7
 80075f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80075f4:	2300      	movs	r3, #0
 80075f6:	eba8 0807 	sub.w	r8, r8, r7
 80075fa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80075fc:	e7c4      	b.n	8007588 <_dtoa_r+0x1b0>
 80075fe:	2300      	movs	r3, #0
 8007600:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007604:	2b00      	cmp	r3, #0
 8007606:	dc35      	bgt.n	8007674 <_dtoa_r+0x29c>
 8007608:	2301      	movs	r3, #1
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	9307      	str	r3, [sp, #28]
 800760e:	461a      	mov	r2, r3
 8007610:	920e      	str	r2, [sp, #56]	@ 0x38
 8007612:	e00b      	b.n	800762c <_dtoa_r+0x254>
 8007614:	2301      	movs	r3, #1
 8007616:	e7f3      	b.n	8007600 <_dtoa_r+0x228>
 8007618:	2300      	movs	r3, #0
 800761a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800761c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800761e:	18fb      	adds	r3, r7, r3
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	3301      	adds	r3, #1
 8007624:	2b01      	cmp	r3, #1
 8007626:	9307      	str	r3, [sp, #28]
 8007628:	bfb8      	it	lt
 800762a:	2301      	movlt	r3, #1
 800762c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007630:	2100      	movs	r1, #0
 8007632:	2204      	movs	r2, #4
 8007634:	f102 0514 	add.w	r5, r2, #20
 8007638:	429d      	cmp	r5, r3
 800763a:	d91f      	bls.n	800767c <_dtoa_r+0x2a4>
 800763c:	6041      	str	r1, [r0, #4]
 800763e:	4658      	mov	r0, fp
 8007640:	f000 fcd8 	bl	8007ff4 <_Balloc>
 8007644:	4682      	mov	sl, r0
 8007646:	2800      	cmp	r0, #0
 8007648:	d13c      	bne.n	80076c4 <_dtoa_r+0x2ec>
 800764a:	4b1b      	ldr	r3, [pc, #108]	@ (80076b8 <_dtoa_r+0x2e0>)
 800764c:	4602      	mov	r2, r0
 800764e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007652:	e6d8      	b.n	8007406 <_dtoa_r+0x2e>
 8007654:	2301      	movs	r3, #1
 8007656:	e7e0      	b.n	800761a <_dtoa_r+0x242>
 8007658:	2401      	movs	r4, #1
 800765a:	2300      	movs	r3, #0
 800765c:	9309      	str	r3, [sp, #36]	@ 0x24
 800765e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007660:	f04f 33ff 	mov.w	r3, #4294967295
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	9307      	str	r3, [sp, #28]
 8007668:	2200      	movs	r2, #0
 800766a:	2312      	movs	r3, #18
 800766c:	e7d0      	b.n	8007610 <_dtoa_r+0x238>
 800766e:	2301      	movs	r3, #1
 8007670:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007672:	e7f5      	b.n	8007660 <_dtoa_r+0x288>
 8007674:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007676:	9300      	str	r3, [sp, #0]
 8007678:	9307      	str	r3, [sp, #28]
 800767a:	e7d7      	b.n	800762c <_dtoa_r+0x254>
 800767c:	3101      	adds	r1, #1
 800767e:	0052      	lsls	r2, r2, #1
 8007680:	e7d8      	b.n	8007634 <_dtoa_r+0x25c>
 8007682:	bf00      	nop
 8007684:	f3af 8000 	nop.w
 8007688:	636f4361 	.word	0x636f4361
 800768c:	3fd287a7 	.word	0x3fd287a7
 8007690:	8b60c8b3 	.word	0x8b60c8b3
 8007694:	3fc68a28 	.word	0x3fc68a28
 8007698:	509f79fb 	.word	0x509f79fb
 800769c:	3fd34413 	.word	0x3fd34413
 80076a0:	08009da1 	.word	0x08009da1
 80076a4:	08009db8 	.word	0x08009db8
 80076a8:	7ff00000 	.word	0x7ff00000
 80076ac:	08009d71 	.word	0x08009d71
 80076b0:	3ff80000 	.word	0x3ff80000
 80076b4:	08009eb0 	.word	0x08009eb0
 80076b8:	08009e10 	.word	0x08009e10
 80076bc:	08009d9d 	.word	0x08009d9d
 80076c0:	08009d70 	.word	0x08009d70
 80076c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80076c8:	6018      	str	r0, [r3, #0]
 80076ca:	9b07      	ldr	r3, [sp, #28]
 80076cc:	2b0e      	cmp	r3, #14
 80076ce:	f200 80a4 	bhi.w	800781a <_dtoa_r+0x442>
 80076d2:	2c00      	cmp	r4, #0
 80076d4:	f000 80a1 	beq.w	800781a <_dtoa_r+0x442>
 80076d8:	2f00      	cmp	r7, #0
 80076da:	dd33      	ble.n	8007744 <_dtoa_r+0x36c>
 80076dc:	4bad      	ldr	r3, [pc, #692]	@ (8007994 <_dtoa_r+0x5bc>)
 80076de:	f007 020f 	and.w	r2, r7, #15
 80076e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076e6:	ed93 7b00 	vldr	d7, [r3]
 80076ea:	05f8      	lsls	r0, r7, #23
 80076ec:	ed8d 7b04 	vstr	d7, [sp, #16]
 80076f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80076f4:	d516      	bpl.n	8007724 <_dtoa_r+0x34c>
 80076f6:	4ba8      	ldr	r3, [pc, #672]	@ (8007998 <_dtoa_r+0x5c0>)
 80076f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007700:	f7f9 f8a4 	bl	800084c <__aeabi_ddiv>
 8007704:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007708:	f004 040f 	and.w	r4, r4, #15
 800770c:	2603      	movs	r6, #3
 800770e:	4da2      	ldr	r5, [pc, #648]	@ (8007998 <_dtoa_r+0x5c0>)
 8007710:	b954      	cbnz	r4, 8007728 <_dtoa_r+0x350>
 8007712:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007716:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800771a:	f7f9 f897 	bl	800084c <__aeabi_ddiv>
 800771e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007722:	e028      	b.n	8007776 <_dtoa_r+0x39e>
 8007724:	2602      	movs	r6, #2
 8007726:	e7f2      	b.n	800770e <_dtoa_r+0x336>
 8007728:	07e1      	lsls	r1, r4, #31
 800772a:	d508      	bpl.n	800773e <_dtoa_r+0x366>
 800772c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007730:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007734:	f7f8 ff60 	bl	80005f8 <__aeabi_dmul>
 8007738:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800773c:	3601      	adds	r6, #1
 800773e:	1064      	asrs	r4, r4, #1
 8007740:	3508      	adds	r5, #8
 8007742:	e7e5      	b.n	8007710 <_dtoa_r+0x338>
 8007744:	f000 80d2 	beq.w	80078ec <_dtoa_r+0x514>
 8007748:	427c      	negs	r4, r7
 800774a:	4b92      	ldr	r3, [pc, #584]	@ (8007994 <_dtoa_r+0x5bc>)
 800774c:	4d92      	ldr	r5, [pc, #584]	@ (8007998 <_dtoa_r+0x5c0>)
 800774e:	f004 020f 	and.w	r2, r4, #15
 8007752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800775e:	f7f8 ff4b 	bl	80005f8 <__aeabi_dmul>
 8007762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007766:	1124      	asrs	r4, r4, #4
 8007768:	2300      	movs	r3, #0
 800776a:	2602      	movs	r6, #2
 800776c:	2c00      	cmp	r4, #0
 800776e:	f040 80b2 	bne.w	80078d6 <_dtoa_r+0x4fe>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1d3      	bne.n	800771e <_dtoa_r+0x346>
 8007776:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007778:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800777c:	2b00      	cmp	r3, #0
 800777e:	f000 80b7 	beq.w	80078f0 <_dtoa_r+0x518>
 8007782:	4b86      	ldr	r3, [pc, #536]	@ (800799c <_dtoa_r+0x5c4>)
 8007784:	2200      	movs	r2, #0
 8007786:	4620      	mov	r0, r4
 8007788:	4629      	mov	r1, r5
 800778a:	f7f9 f9a7 	bl	8000adc <__aeabi_dcmplt>
 800778e:	2800      	cmp	r0, #0
 8007790:	f000 80ae 	beq.w	80078f0 <_dtoa_r+0x518>
 8007794:	9b07      	ldr	r3, [sp, #28]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f000 80aa 	beq.w	80078f0 <_dtoa_r+0x518>
 800779c:	9b00      	ldr	r3, [sp, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	dd37      	ble.n	8007812 <_dtoa_r+0x43a>
 80077a2:	1e7b      	subs	r3, r7, #1
 80077a4:	9304      	str	r3, [sp, #16]
 80077a6:	4620      	mov	r0, r4
 80077a8:	4b7d      	ldr	r3, [pc, #500]	@ (80079a0 <_dtoa_r+0x5c8>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	4629      	mov	r1, r5
 80077ae:	f7f8 ff23 	bl	80005f8 <__aeabi_dmul>
 80077b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077b6:	9c00      	ldr	r4, [sp, #0]
 80077b8:	3601      	adds	r6, #1
 80077ba:	4630      	mov	r0, r6
 80077bc:	f7f8 feb2 	bl	8000524 <__aeabi_i2d>
 80077c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077c4:	f7f8 ff18 	bl	80005f8 <__aeabi_dmul>
 80077c8:	4b76      	ldr	r3, [pc, #472]	@ (80079a4 <_dtoa_r+0x5cc>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	f7f8 fd5e 	bl	800028c <__adddf3>
 80077d0:	4605      	mov	r5, r0
 80077d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80077d6:	2c00      	cmp	r4, #0
 80077d8:	f040 808d 	bne.w	80078f6 <_dtoa_r+0x51e>
 80077dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e0:	4b71      	ldr	r3, [pc, #452]	@ (80079a8 <_dtoa_r+0x5d0>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	f7f8 fd50 	bl	8000288 <__aeabi_dsub>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077f0:	462a      	mov	r2, r5
 80077f2:	4633      	mov	r3, r6
 80077f4:	f7f9 f990 	bl	8000b18 <__aeabi_dcmpgt>
 80077f8:	2800      	cmp	r0, #0
 80077fa:	f040 828b 	bne.w	8007d14 <_dtoa_r+0x93c>
 80077fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007802:	462a      	mov	r2, r5
 8007804:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007808:	f7f9 f968 	bl	8000adc <__aeabi_dcmplt>
 800780c:	2800      	cmp	r0, #0
 800780e:	f040 8128 	bne.w	8007a62 <_dtoa_r+0x68a>
 8007812:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007816:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800781a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800781c:	2b00      	cmp	r3, #0
 800781e:	f2c0 815a 	blt.w	8007ad6 <_dtoa_r+0x6fe>
 8007822:	2f0e      	cmp	r7, #14
 8007824:	f300 8157 	bgt.w	8007ad6 <_dtoa_r+0x6fe>
 8007828:	4b5a      	ldr	r3, [pc, #360]	@ (8007994 <_dtoa_r+0x5bc>)
 800782a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800782e:	ed93 7b00 	vldr	d7, [r3]
 8007832:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007834:	2b00      	cmp	r3, #0
 8007836:	ed8d 7b00 	vstr	d7, [sp]
 800783a:	da03      	bge.n	8007844 <_dtoa_r+0x46c>
 800783c:	9b07      	ldr	r3, [sp, #28]
 800783e:	2b00      	cmp	r3, #0
 8007840:	f340 8101 	ble.w	8007a46 <_dtoa_r+0x66e>
 8007844:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007848:	4656      	mov	r6, sl
 800784a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800784e:	4620      	mov	r0, r4
 8007850:	4629      	mov	r1, r5
 8007852:	f7f8 fffb 	bl	800084c <__aeabi_ddiv>
 8007856:	f7f9 f97f 	bl	8000b58 <__aeabi_d2iz>
 800785a:	4680      	mov	r8, r0
 800785c:	f7f8 fe62 	bl	8000524 <__aeabi_i2d>
 8007860:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007864:	f7f8 fec8 	bl	80005f8 <__aeabi_dmul>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	4620      	mov	r0, r4
 800786e:	4629      	mov	r1, r5
 8007870:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007874:	f7f8 fd08 	bl	8000288 <__aeabi_dsub>
 8007878:	f806 4b01 	strb.w	r4, [r6], #1
 800787c:	9d07      	ldr	r5, [sp, #28]
 800787e:	eba6 040a 	sub.w	r4, r6, sl
 8007882:	42a5      	cmp	r5, r4
 8007884:	4602      	mov	r2, r0
 8007886:	460b      	mov	r3, r1
 8007888:	f040 8117 	bne.w	8007aba <_dtoa_r+0x6e2>
 800788c:	f7f8 fcfe 	bl	800028c <__adddf3>
 8007890:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007894:	4604      	mov	r4, r0
 8007896:	460d      	mov	r5, r1
 8007898:	f7f9 f93e 	bl	8000b18 <__aeabi_dcmpgt>
 800789c:	2800      	cmp	r0, #0
 800789e:	f040 80f9 	bne.w	8007a94 <_dtoa_r+0x6bc>
 80078a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078a6:	4620      	mov	r0, r4
 80078a8:	4629      	mov	r1, r5
 80078aa:	f7f9 f90d 	bl	8000ac8 <__aeabi_dcmpeq>
 80078ae:	b118      	cbz	r0, 80078b8 <_dtoa_r+0x4e0>
 80078b0:	f018 0f01 	tst.w	r8, #1
 80078b4:	f040 80ee 	bne.w	8007a94 <_dtoa_r+0x6bc>
 80078b8:	4649      	mov	r1, r9
 80078ba:	4658      	mov	r0, fp
 80078bc:	f000 fbda 	bl	8008074 <_Bfree>
 80078c0:	2300      	movs	r3, #0
 80078c2:	7033      	strb	r3, [r6, #0]
 80078c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80078c6:	3701      	adds	r7, #1
 80078c8:	601f      	str	r7, [r3, #0]
 80078ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	f000 831d 	beq.w	8007f0c <_dtoa_r+0xb34>
 80078d2:	601e      	str	r6, [r3, #0]
 80078d4:	e31a      	b.n	8007f0c <_dtoa_r+0xb34>
 80078d6:	07e2      	lsls	r2, r4, #31
 80078d8:	d505      	bpl.n	80078e6 <_dtoa_r+0x50e>
 80078da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80078de:	f7f8 fe8b 	bl	80005f8 <__aeabi_dmul>
 80078e2:	3601      	adds	r6, #1
 80078e4:	2301      	movs	r3, #1
 80078e6:	1064      	asrs	r4, r4, #1
 80078e8:	3508      	adds	r5, #8
 80078ea:	e73f      	b.n	800776c <_dtoa_r+0x394>
 80078ec:	2602      	movs	r6, #2
 80078ee:	e742      	b.n	8007776 <_dtoa_r+0x39e>
 80078f0:	9c07      	ldr	r4, [sp, #28]
 80078f2:	9704      	str	r7, [sp, #16]
 80078f4:	e761      	b.n	80077ba <_dtoa_r+0x3e2>
 80078f6:	4b27      	ldr	r3, [pc, #156]	@ (8007994 <_dtoa_r+0x5bc>)
 80078f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80078fa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078fe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007902:	4454      	add	r4, sl
 8007904:	2900      	cmp	r1, #0
 8007906:	d053      	beq.n	80079b0 <_dtoa_r+0x5d8>
 8007908:	4928      	ldr	r1, [pc, #160]	@ (80079ac <_dtoa_r+0x5d4>)
 800790a:	2000      	movs	r0, #0
 800790c:	f7f8 ff9e 	bl	800084c <__aeabi_ddiv>
 8007910:	4633      	mov	r3, r6
 8007912:	462a      	mov	r2, r5
 8007914:	f7f8 fcb8 	bl	8000288 <__aeabi_dsub>
 8007918:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800791c:	4656      	mov	r6, sl
 800791e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007922:	f7f9 f919 	bl	8000b58 <__aeabi_d2iz>
 8007926:	4605      	mov	r5, r0
 8007928:	f7f8 fdfc 	bl	8000524 <__aeabi_i2d>
 800792c:	4602      	mov	r2, r0
 800792e:	460b      	mov	r3, r1
 8007930:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007934:	f7f8 fca8 	bl	8000288 <__aeabi_dsub>
 8007938:	3530      	adds	r5, #48	@ 0x30
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007942:	f806 5b01 	strb.w	r5, [r6], #1
 8007946:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800794a:	f7f9 f8c7 	bl	8000adc <__aeabi_dcmplt>
 800794e:	2800      	cmp	r0, #0
 8007950:	d171      	bne.n	8007a36 <_dtoa_r+0x65e>
 8007952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007956:	4911      	ldr	r1, [pc, #68]	@ (800799c <_dtoa_r+0x5c4>)
 8007958:	2000      	movs	r0, #0
 800795a:	f7f8 fc95 	bl	8000288 <__aeabi_dsub>
 800795e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007962:	f7f9 f8bb 	bl	8000adc <__aeabi_dcmplt>
 8007966:	2800      	cmp	r0, #0
 8007968:	f040 8095 	bne.w	8007a96 <_dtoa_r+0x6be>
 800796c:	42a6      	cmp	r6, r4
 800796e:	f43f af50 	beq.w	8007812 <_dtoa_r+0x43a>
 8007972:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007976:	4b0a      	ldr	r3, [pc, #40]	@ (80079a0 <_dtoa_r+0x5c8>)
 8007978:	2200      	movs	r2, #0
 800797a:	f7f8 fe3d 	bl	80005f8 <__aeabi_dmul>
 800797e:	4b08      	ldr	r3, [pc, #32]	@ (80079a0 <_dtoa_r+0x5c8>)
 8007980:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007984:	2200      	movs	r2, #0
 8007986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800798a:	f7f8 fe35 	bl	80005f8 <__aeabi_dmul>
 800798e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007992:	e7c4      	b.n	800791e <_dtoa_r+0x546>
 8007994:	08009eb0 	.word	0x08009eb0
 8007998:	08009e88 	.word	0x08009e88
 800799c:	3ff00000 	.word	0x3ff00000
 80079a0:	40240000 	.word	0x40240000
 80079a4:	401c0000 	.word	0x401c0000
 80079a8:	40140000 	.word	0x40140000
 80079ac:	3fe00000 	.word	0x3fe00000
 80079b0:	4631      	mov	r1, r6
 80079b2:	4628      	mov	r0, r5
 80079b4:	f7f8 fe20 	bl	80005f8 <__aeabi_dmul>
 80079b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80079bc:	9415      	str	r4, [sp, #84]	@ 0x54
 80079be:	4656      	mov	r6, sl
 80079c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079c4:	f7f9 f8c8 	bl	8000b58 <__aeabi_d2iz>
 80079c8:	4605      	mov	r5, r0
 80079ca:	f7f8 fdab 	bl	8000524 <__aeabi_i2d>
 80079ce:	4602      	mov	r2, r0
 80079d0:	460b      	mov	r3, r1
 80079d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079d6:	f7f8 fc57 	bl	8000288 <__aeabi_dsub>
 80079da:	3530      	adds	r5, #48	@ 0x30
 80079dc:	f806 5b01 	strb.w	r5, [r6], #1
 80079e0:	4602      	mov	r2, r0
 80079e2:	460b      	mov	r3, r1
 80079e4:	42a6      	cmp	r6, r4
 80079e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079ea:	f04f 0200 	mov.w	r2, #0
 80079ee:	d124      	bne.n	8007a3a <_dtoa_r+0x662>
 80079f0:	4bac      	ldr	r3, [pc, #688]	@ (8007ca4 <_dtoa_r+0x8cc>)
 80079f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80079f6:	f7f8 fc49 	bl	800028c <__adddf3>
 80079fa:	4602      	mov	r2, r0
 80079fc:	460b      	mov	r3, r1
 80079fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a02:	f7f9 f889 	bl	8000b18 <__aeabi_dcmpgt>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	d145      	bne.n	8007a96 <_dtoa_r+0x6be>
 8007a0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a0e:	49a5      	ldr	r1, [pc, #660]	@ (8007ca4 <_dtoa_r+0x8cc>)
 8007a10:	2000      	movs	r0, #0
 8007a12:	f7f8 fc39 	bl	8000288 <__aeabi_dsub>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a1e:	f7f9 f85d 	bl	8000adc <__aeabi_dcmplt>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	f43f aef5 	beq.w	8007812 <_dtoa_r+0x43a>
 8007a28:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007a2a:	1e73      	subs	r3, r6, #1
 8007a2c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007a2e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a32:	2b30      	cmp	r3, #48	@ 0x30
 8007a34:	d0f8      	beq.n	8007a28 <_dtoa_r+0x650>
 8007a36:	9f04      	ldr	r7, [sp, #16]
 8007a38:	e73e      	b.n	80078b8 <_dtoa_r+0x4e0>
 8007a3a:	4b9b      	ldr	r3, [pc, #620]	@ (8007ca8 <_dtoa_r+0x8d0>)
 8007a3c:	f7f8 fddc 	bl	80005f8 <__aeabi_dmul>
 8007a40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a44:	e7bc      	b.n	80079c0 <_dtoa_r+0x5e8>
 8007a46:	d10c      	bne.n	8007a62 <_dtoa_r+0x68a>
 8007a48:	4b98      	ldr	r3, [pc, #608]	@ (8007cac <_dtoa_r+0x8d4>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a50:	f7f8 fdd2 	bl	80005f8 <__aeabi_dmul>
 8007a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a58:	f7f9 f854 	bl	8000b04 <__aeabi_dcmpge>
 8007a5c:	2800      	cmp	r0, #0
 8007a5e:	f000 8157 	beq.w	8007d10 <_dtoa_r+0x938>
 8007a62:	2400      	movs	r4, #0
 8007a64:	4625      	mov	r5, r4
 8007a66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a68:	43db      	mvns	r3, r3
 8007a6a:	9304      	str	r3, [sp, #16]
 8007a6c:	4656      	mov	r6, sl
 8007a6e:	2700      	movs	r7, #0
 8007a70:	4621      	mov	r1, r4
 8007a72:	4658      	mov	r0, fp
 8007a74:	f000 fafe 	bl	8008074 <_Bfree>
 8007a78:	2d00      	cmp	r5, #0
 8007a7a:	d0dc      	beq.n	8007a36 <_dtoa_r+0x65e>
 8007a7c:	b12f      	cbz	r7, 8007a8a <_dtoa_r+0x6b2>
 8007a7e:	42af      	cmp	r7, r5
 8007a80:	d003      	beq.n	8007a8a <_dtoa_r+0x6b2>
 8007a82:	4639      	mov	r1, r7
 8007a84:	4658      	mov	r0, fp
 8007a86:	f000 faf5 	bl	8008074 <_Bfree>
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	4658      	mov	r0, fp
 8007a8e:	f000 faf1 	bl	8008074 <_Bfree>
 8007a92:	e7d0      	b.n	8007a36 <_dtoa_r+0x65e>
 8007a94:	9704      	str	r7, [sp, #16]
 8007a96:	4633      	mov	r3, r6
 8007a98:	461e      	mov	r6, r3
 8007a9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007a9e:	2a39      	cmp	r2, #57	@ 0x39
 8007aa0:	d107      	bne.n	8007ab2 <_dtoa_r+0x6da>
 8007aa2:	459a      	cmp	sl, r3
 8007aa4:	d1f8      	bne.n	8007a98 <_dtoa_r+0x6c0>
 8007aa6:	9a04      	ldr	r2, [sp, #16]
 8007aa8:	3201      	adds	r2, #1
 8007aaa:	9204      	str	r2, [sp, #16]
 8007aac:	2230      	movs	r2, #48	@ 0x30
 8007aae:	f88a 2000 	strb.w	r2, [sl]
 8007ab2:	781a      	ldrb	r2, [r3, #0]
 8007ab4:	3201      	adds	r2, #1
 8007ab6:	701a      	strb	r2, [r3, #0]
 8007ab8:	e7bd      	b.n	8007a36 <_dtoa_r+0x65e>
 8007aba:	4b7b      	ldr	r3, [pc, #492]	@ (8007ca8 <_dtoa_r+0x8d0>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	f7f8 fd9b 	bl	80005f8 <__aeabi_dmul>
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	460d      	mov	r5, r1
 8007aca:	f7f8 fffd 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	f43f aebb 	beq.w	800784a <_dtoa_r+0x472>
 8007ad4:	e6f0      	b.n	80078b8 <_dtoa_r+0x4e0>
 8007ad6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ad8:	2a00      	cmp	r2, #0
 8007ada:	f000 80db 	beq.w	8007c94 <_dtoa_r+0x8bc>
 8007ade:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ae0:	2a01      	cmp	r2, #1
 8007ae2:	f300 80bf 	bgt.w	8007c64 <_dtoa_r+0x88c>
 8007ae6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007ae8:	2a00      	cmp	r2, #0
 8007aea:	f000 80b7 	beq.w	8007c5c <_dtoa_r+0x884>
 8007aee:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007af2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007af4:	4646      	mov	r6, r8
 8007af6:	9a08      	ldr	r2, [sp, #32]
 8007af8:	2101      	movs	r1, #1
 8007afa:	441a      	add	r2, r3
 8007afc:	4658      	mov	r0, fp
 8007afe:	4498      	add	r8, r3
 8007b00:	9208      	str	r2, [sp, #32]
 8007b02:	f000 fb6b 	bl	80081dc <__i2b>
 8007b06:	4605      	mov	r5, r0
 8007b08:	b15e      	cbz	r6, 8007b22 <_dtoa_r+0x74a>
 8007b0a:	9b08      	ldr	r3, [sp, #32]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dd08      	ble.n	8007b22 <_dtoa_r+0x74a>
 8007b10:	42b3      	cmp	r3, r6
 8007b12:	9a08      	ldr	r2, [sp, #32]
 8007b14:	bfa8      	it	ge
 8007b16:	4633      	movge	r3, r6
 8007b18:	eba8 0803 	sub.w	r8, r8, r3
 8007b1c:	1af6      	subs	r6, r6, r3
 8007b1e:	1ad3      	subs	r3, r2, r3
 8007b20:	9308      	str	r3, [sp, #32]
 8007b22:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b24:	b1f3      	cbz	r3, 8007b64 <_dtoa_r+0x78c>
 8007b26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f000 80b7 	beq.w	8007c9c <_dtoa_r+0x8c4>
 8007b2e:	b18c      	cbz	r4, 8007b54 <_dtoa_r+0x77c>
 8007b30:	4629      	mov	r1, r5
 8007b32:	4622      	mov	r2, r4
 8007b34:	4658      	mov	r0, fp
 8007b36:	f000 fc11 	bl	800835c <__pow5mult>
 8007b3a:	464a      	mov	r2, r9
 8007b3c:	4601      	mov	r1, r0
 8007b3e:	4605      	mov	r5, r0
 8007b40:	4658      	mov	r0, fp
 8007b42:	f000 fb61 	bl	8008208 <__multiply>
 8007b46:	4649      	mov	r1, r9
 8007b48:	9004      	str	r0, [sp, #16]
 8007b4a:	4658      	mov	r0, fp
 8007b4c:	f000 fa92 	bl	8008074 <_Bfree>
 8007b50:	9b04      	ldr	r3, [sp, #16]
 8007b52:	4699      	mov	r9, r3
 8007b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b56:	1b1a      	subs	r2, r3, r4
 8007b58:	d004      	beq.n	8007b64 <_dtoa_r+0x78c>
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	4658      	mov	r0, fp
 8007b5e:	f000 fbfd 	bl	800835c <__pow5mult>
 8007b62:	4681      	mov	r9, r0
 8007b64:	2101      	movs	r1, #1
 8007b66:	4658      	mov	r0, fp
 8007b68:	f000 fb38 	bl	80081dc <__i2b>
 8007b6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b6e:	4604      	mov	r4, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 81cf 	beq.w	8007f14 <_dtoa_r+0xb3c>
 8007b76:	461a      	mov	r2, r3
 8007b78:	4601      	mov	r1, r0
 8007b7a:	4658      	mov	r0, fp
 8007b7c:	f000 fbee 	bl	800835c <__pow5mult>
 8007b80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	4604      	mov	r4, r0
 8007b86:	f300 8095 	bgt.w	8007cb4 <_dtoa_r+0x8dc>
 8007b8a:	9b02      	ldr	r3, [sp, #8]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f040 8087 	bne.w	8007ca0 <_dtoa_r+0x8c8>
 8007b92:	9b03      	ldr	r3, [sp, #12]
 8007b94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f040 8089 	bne.w	8007cb0 <_dtoa_r+0x8d8>
 8007b9e:	9b03      	ldr	r3, [sp, #12]
 8007ba0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007ba4:	0d1b      	lsrs	r3, r3, #20
 8007ba6:	051b      	lsls	r3, r3, #20
 8007ba8:	b12b      	cbz	r3, 8007bb6 <_dtoa_r+0x7de>
 8007baa:	9b08      	ldr	r3, [sp, #32]
 8007bac:	3301      	adds	r3, #1
 8007bae:	9308      	str	r3, [sp, #32]
 8007bb0:	f108 0801 	add.w	r8, r8, #1
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 81b0 	beq.w	8007f20 <_dtoa_r+0xb48>
 8007bc0:	6923      	ldr	r3, [r4, #16]
 8007bc2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bc6:	6918      	ldr	r0, [r3, #16]
 8007bc8:	f000 fabc 	bl	8008144 <__hi0bits>
 8007bcc:	f1c0 0020 	rsb	r0, r0, #32
 8007bd0:	9b08      	ldr	r3, [sp, #32]
 8007bd2:	4418      	add	r0, r3
 8007bd4:	f010 001f 	ands.w	r0, r0, #31
 8007bd8:	d077      	beq.n	8007cca <_dtoa_r+0x8f2>
 8007bda:	f1c0 0320 	rsb	r3, r0, #32
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	dd6b      	ble.n	8007cba <_dtoa_r+0x8e2>
 8007be2:	9b08      	ldr	r3, [sp, #32]
 8007be4:	f1c0 001c 	rsb	r0, r0, #28
 8007be8:	4403      	add	r3, r0
 8007bea:	4480      	add	r8, r0
 8007bec:	4406      	add	r6, r0
 8007bee:	9308      	str	r3, [sp, #32]
 8007bf0:	f1b8 0f00 	cmp.w	r8, #0
 8007bf4:	dd05      	ble.n	8007c02 <_dtoa_r+0x82a>
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	4658      	mov	r0, fp
 8007bfc:	f000 fc08 	bl	8008410 <__lshift>
 8007c00:	4681      	mov	r9, r0
 8007c02:	9b08      	ldr	r3, [sp, #32]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	dd05      	ble.n	8007c14 <_dtoa_r+0x83c>
 8007c08:	4621      	mov	r1, r4
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	4658      	mov	r0, fp
 8007c0e:	f000 fbff 	bl	8008410 <__lshift>
 8007c12:	4604      	mov	r4, r0
 8007c14:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d059      	beq.n	8007cce <_dtoa_r+0x8f6>
 8007c1a:	4621      	mov	r1, r4
 8007c1c:	4648      	mov	r0, r9
 8007c1e:	f000 fc63 	bl	80084e8 <__mcmp>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	da53      	bge.n	8007cce <_dtoa_r+0x8f6>
 8007c26:	1e7b      	subs	r3, r7, #1
 8007c28:	9304      	str	r3, [sp, #16]
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	220a      	movs	r2, #10
 8007c30:	4658      	mov	r0, fp
 8007c32:	f000 fa41 	bl	80080b8 <__multadd>
 8007c36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c38:	4681      	mov	r9, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 8172 	beq.w	8007f24 <_dtoa_r+0xb4c>
 8007c40:	2300      	movs	r3, #0
 8007c42:	4629      	mov	r1, r5
 8007c44:	220a      	movs	r2, #10
 8007c46:	4658      	mov	r0, fp
 8007c48:	f000 fa36 	bl	80080b8 <__multadd>
 8007c4c:	9b00      	ldr	r3, [sp, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	4605      	mov	r5, r0
 8007c52:	dc67      	bgt.n	8007d24 <_dtoa_r+0x94c>
 8007c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c56:	2b02      	cmp	r3, #2
 8007c58:	dc41      	bgt.n	8007cde <_dtoa_r+0x906>
 8007c5a:	e063      	b.n	8007d24 <_dtoa_r+0x94c>
 8007c5c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007c5e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007c62:	e746      	b.n	8007af2 <_dtoa_r+0x71a>
 8007c64:	9b07      	ldr	r3, [sp, #28]
 8007c66:	1e5c      	subs	r4, r3, #1
 8007c68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c6a:	42a3      	cmp	r3, r4
 8007c6c:	bfbf      	itttt	lt
 8007c6e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007c70:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007c72:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007c74:	1ae3      	sublt	r3, r4, r3
 8007c76:	bfb4      	ite	lt
 8007c78:	18d2      	addlt	r2, r2, r3
 8007c7a:	1b1c      	subge	r4, r3, r4
 8007c7c:	9b07      	ldr	r3, [sp, #28]
 8007c7e:	bfbc      	itt	lt
 8007c80:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007c82:	2400      	movlt	r4, #0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	bfb5      	itete	lt
 8007c88:	eba8 0603 	sublt.w	r6, r8, r3
 8007c8c:	9b07      	ldrge	r3, [sp, #28]
 8007c8e:	2300      	movlt	r3, #0
 8007c90:	4646      	movge	r6, r8
 8007c92:	e730      	b.n	8007af6 <_dtoa_r+0x71e>
 8007c94:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007c96:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007c98:	4646      	mov	r6, r8
 8007c9a:	e735      	b.n	8007b08 <_dtoa_r+0x730>
 8007c9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c9e:	e75c      	b.n	8007b5a <_dtoa_r+0x782>
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	e788      	b.n	8007bb6 <_dtoa_r+0x7de>
 8007ca4:	3fe00000 	.word	0x3fe00000
 8007ca8:	40240000 	.word	0x40240000
 8007cac:	40140000 	.word	0x40140000
 8007cb0:	9b02      	ldr	r3, [sp, #8]
 8007cb2:	e780      	b.n	8007bb6 <_dtoa_r+0x7de>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cb8:	e782      	b.n	8007bc0 <_dtoa_r+0x7e8>
 8007cba:	d099      	beq.n	8007bf0 <_dtoa_r+0x818>
 8007cbc:	9a08      	ldr	r2, [sp, #32]
 8007cbe:	331c      	adds	r3, #28
 8007cc0:	441a      	add	r2, r3
 8007cc2:	4498      	add	r8, r3
 8007cc4:	441e      	add	r6, r3
 8007cc6:	9208      	str	r2, [sp, #32]
 8007cc8:	e792      	b.n	8007bf0 <_dtoa_r+0x818>
 8007cca:	4603      	mov	r3, r0
 8007ccc:	e7f6      	b.n	8007cbc <_dtoa_r+0x8e4>
 8007cce:	9b07      	ldr	r3, [sp, #28]
 8007cd0:	9704      	str	r7, [sp, #16]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	dc20      	bgt.n	8007d18 <_dtoa_r+0x940>
 8007cd6:	9300      	str	r3, [sp, #0]
 8007cd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cda:	2b02      	cmp	r3, #2
 8007cdc:	dd1e      	ble.n	8007d1c <_dtoa_r+0x944>
 8007cde:	9b00      	ldr	r3, [sp, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f47f aec0 	bne.w	8007a66 <_dtoa_r+0x68e>
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	2205      	movs	r2, #5
 8007cea:	4658      	mov	r0, fp
 8007cec:	f000 f9e4 	bl	80080b8 <__multadd>
 8007cf0:	4601      	mov	r1, r0
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	4648      	mov	r0, r9
 8007cf6:	f000 fbf7 	bl	80084e8 <__mcmp>
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	f77f aeb3 	ble.w	8007a66 <_dtoa_r+0x68e>
 8007d00:	4656      	mov	r6, sl
 8007d02:	2331      	movs	r3, #49	@ 0x31
 8007d04:	f806 3b01 	strb.w	r3, [r6], #1
 8007d08:	9b04      	ldr	r3, [sp, #16]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	9304      	str	r3, [sp, #16]
 8007d0e:	e6ae      	b.n	8007a6e <_dtoa_r+0x696>
 8007d10:	9c07      	ldr	r4, [sp, #28]
 8007d12:	9704      	str	r7, [sp, #16]
 8007d14:	4625      	mov	r5, r4
 8007d16:	e7f3      	b.n	8007d00 <_dtoa_r+0x928>
 8007d18:	9b07      	ldr	r3, [sp, #28]
 8007d1a:	9300      	str	r3, [sp, #0]
 8007d1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f000 8104 	beq.w	8007f2c <_dtoa_r+0xb54>
 8007d24:	2e00      	cmp	r6, #0
 8007d26:	dd05      	ble.n	8007d34 <_dtoa_r+0x95c>
 8007d28:	4629      	mov	r1, r5
 8007d2a:	4632      	mov	r2, r6
 8007d2c:	4658      	mov	r0, fp
 8007d2e:	f000 fb6f 	bl	8008410 <__lshift>
 8007d32:	4605      	mov	r5, r0
 8007d34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d05a      	beq.n	8007df0 <_dtoa_r+0xa18>
 8007d3a:	6869      	ldr	r1, [r5, #4]
 8007d3c:	4658      	mov	r0, fp
 8007d3e:	f000 f959 	bl	8007ff4 <_Balloc>
 8007d42:	4606      	mov	r6, r0
 8007d44:	b928      	cbnz	r0, 8007d52 <_dtoa_r+0x97a>
 8007d46:	4b84      	ldr	r3, [pc, #528]	@ (8007f58 <_dtoa_r+0xb80>)
 8007d48:	4602      	mov	r2, r0
 8007d4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d4e:	f7ff bb5a 	b.w	8007406 <_dtoa_r+0x2e>
 8007d52:	692a      	ldr	r2, [r5, #16]
 8007d54:	3202      	adds	r2, #2
 8007d56:	0092      	lsls	r2, r2, #2
 8007d58:	f105 010c 	add.w	r1, r5, #12
 8007d5c:	300c      	adds	r0, #12
 8007d5e:	f000 fee9 	bl	8008b34 <memcpy>
 8007d62:	2201      	movs	r2, #1
 8007d64:	4631      	mov	r1, r6
 8007d66:	4658      	mov	r0, fp
 8007d68:	f000 fb52 	bl	8008410 <__lshift>
 8007d6c:	f10a 0301 	add.w	r3, sl, #1
 8007d70:	9307      	str	r3, [sp, #28]
 8007d72:	9b00      	ldr	r3, [sp, #0]
 8007d74:	4453      	add	r3, sl
 8007d76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d78:	9b02      	ldr	r3, [sp, #8]
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	462f      	mov	r7, r5
 8007d80:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d82:	4605      	mov	r5, r0
 8007d84:	9b07      	ldr	r3, [sp, #28]
 8007d86:	4621      	mov	r1, r4
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	4648      	mov	r0, r9
 8007d8c:	9300      	str	r3, [sp, #0]
 8007d8e:	f7ff fa9a 	bl	80072c6 <quorem>
 8007d92:	4639      	mov	r1, r7
 8007d94:	9002      	str	r0, [sp, #8]
 8007d96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d9a:	4648      	mov	r0, r9
 8007d9c:	f000 fba4 	bl	80084e8 <__mcmp>
 8007da0:	462a      	mov	r2, r5
 8007da2:	9008      	str	r0, [sp, #32]
 8007da4:	4621      	mov	r1, r4
 8007da6:	4658      	mov	r0, fp
 8007da8:	f000 fbba 	bl	8008520 <__mdiff>
 8007dac:	68c2      	ldr	r2, [r0, #12]
 8007dae:	4606      	mov	r6, r0
 8007db0:	bb02      	cbnz	r2, 8007df4 <_dtoa_r+0xa1c>
 8007db2:	4601      	mov	r1, r0
 8007db4:	4648      	mov	r0, r9
 8007db6:	f000 fb97 	bl	80084e8 <__mcmp>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4658      	mov	r0, fp
 8007dc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007dc2:	f000 f957 	bl	8008074 <_Bfree>
 8007dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dc8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007dca:	9e07      	ldr	r6, [sp, #28]
 8007dcc:	ea43 0102 	orr.w	r1, r3, r2
 8007dd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dd2:	4319      	orrs	r1, r3
 8007dd4:	d110      	bne.n	8007df8 <_dtoa_r+0xa20>
 8007dd6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007dda:	d029      	beq.n	8007e30 <_dtoa_r+0xa58>
 8007ddc:	9b08      	ldr	r3, [sp, #32]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	dd02      	ble.n	8007de8 <_dtoa_r+0xa10>
 8007de2:	9b02      	ldr	r3, [sp, #8]
 8007de4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007de8:	9b00      	ldr	r3, [sp, #0]
 8007dea:	f883 8000 	strb.w	r8, [r3]
 8007dee:	e63f      	b.n	8007a70 <_dtoa_r+0x698>
 8007df0:	4628      	mov	r0, r5
 8007df2:	e7bb      	b.n	8007d6c <_dtoa_r+0x994>
 8007df4:	2201      	movs	r2, #1
 8007df6:	e7e1      	b.n	8007dbc <_dtoa_r+0x9e4>
 8007df8:	9b08      	ldr	r3, [sp, #32]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	db04      	blt.n	8007e08 <_dtoa_r+0xa30>
 8007dfe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e00:	430b      	orrs	r3, r1
 8007e02:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007e04:	430b      	orrs	r3, r1
 8007e06:	d120      	bne.n	8007e4a <_dtoa_r+0xa72>
 8007e08:	2a00      	cmp	r2, #0
 8007e0a:	dded      	ble.n	8007de8 <_dtoa_r+0xa10>
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	2201      	movs	r2, #1
 8007e10:	4658      	mov	r0, fp
 8007e12:	f000 fafd 	bl	8008410 <__lshift>
 8007e16:	4621      	mov	r1, r4
 8007e18:	4681      	mov	r9, r0
 8007e1a:	f000 fb65 	bl	80084e8 <__mcmp>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	dc03      	bgt.n	8007e2a <_dtoa_r+0xa52>
 8007e22:	d1e1      	bne.n	8007de8 <_dtoa_r+0xa10>
 8007e24:	f018 0f01 	tst.w	r8, #1
 8007e28:	d0de      	beq.n	8007de8 <_dtoa_r+0xa10>
 8007e2a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e2e:	d1d8      	bne.n	8007de2 <_dtoa_r+0xa0a>
 8007e30:	9a00      	ldr	r2, [sp, #0]
 8007e32:	2339      	movs	r3, #57	@ 0x39
 8007e34:	7013      	strb	r3, [r2, #0]
 8007e36:	4633      	mov	r3, r6
 8007e38:	461e      	mov	r6, r3
 8007e3a:	3b01      	subs	r3, #1
 8007e3c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e40:	2a39      	cmp	r2, #57	@ 0x39
 8007e42:	d052      	beq.n	8007eea <_dtoa_r+0xb12>
 8007e44:	3201      	adds	r2, #1
 8007e46:	701a      	strb	r2, [r3, #0]
 8007e48:	e612      	b.n	8007a70 <_dtoa_r+0x698>
 8007e4a:	2a00      	cmp	r2, #0
 8007e4c:	dd07      	ble.n	8007e5e <_dtoa_r+0xa86>
 8007e4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e52:	d0ed      	beq.n	8007e30 <_dtoa_r+0xa58>
 8007e54:	9a00      	ldr	r2, [sp, #0]
 8007e56:	f108 0301 	add.w	r3, r8, #1
 8007e5a:	7013      	strb	r3, [r2, #0]
 8007e5c:	e608      	b.n	8007a70 <_dtoa_r+0x698>
 8007e5e:	9b07      	ldr	r3, [sp, #28]
 8007e60:	9a07      	ldr	r2, [sp, #28]
 8007e62:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007e66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d028      	beq.n	8007ebe <_dtoa_r+0xae6>
 8007e6c:	4649      	mov	r1, r9
 8007e6e:	2300      	movs	r3, #0
 8007e70:	220a      	movs	r2, #10
 8007e72:	4658      	mov	r0, fp
 8007e74:	f000 f920 	bl	80080b8 <__multadd>
 8007e78:	42af      	cmp	r7, r5
 8007e7a:	4681      	mov	r9, r0
 8007e7c:	f04f 0300 	mov.w	r3, #0
 8007e80:	f04f 020a 	mov.w	r2, #10
 8007e84:	4639      	mov	r1, r7
 8007e86:	4658      	mov	r0, fp
 8007e88:	d107      	bne.n	8007e9a <_dtoa_r+0xac2>
 8007e8a:	f000 f915 	bl	80080b8 <__multadd>
 8007e8e:	4607      	mov	r7, r0
 8007e90:	4605      	mov	r5, r0
 8007e92:	9b07      	ldr	r3, [sp, #28]
 8007e94:	3301      	adds	r3, #1
 8007e96:	9307      	str	r3, [sp, #28]
 8007e98:	e774      	b.n	8007d84 <_dtoa_r+0x9ac>
 8007e9a:	f000 f90d 	bl	80080b8 <__multadd>
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4607      	mov	r7, r0
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	220a      	movs	r2, #10
 8007ea6:	4658      	mov	r0, fp
 8007ea8:	f000 f906 	bl	80080b8 <__multadd>
 8007eac:	4605      	mov	r5, r0
 8007eae:	e7f0      	b.n	8007e92 <_dtoa_r+0xaba>
 8007eb0:	9b00      	ldr	r3, [sp, #0]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	bfcc      	ite	gt
 8007eb6:	461e      	movgt	r6, r3
 8007eb8:	2601      	movle	r6, #1
 8007eba:	4456      	add	r6, sl
 8007ebc:	2700      	movs	r7, #0
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	4658      	mov	r0, fp
 8007ec4:	f000 faa4 	bl	8008410 <__lshift>
 8007ec8:	4621      	mov	r1, r4
 8007eca:	4681      	mov	r9, r0
 8007ecc:	f000 fb0c 	bl	80084e8 <__mcmp>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	dcb0      	bgt.n	8007e36 <_dtoa_r+0xa5e>
 8007ed4:	d102      	bne.n	8007edc <_dtoa_r+0xb04>
 8007ed6:	f018 0f01 	tst.w	r8, #1
 8007eda:	d1ac      	bne.n	8007e36 <_dtoa_r+0xa5e>
 8007edc:	4633      	mov	r3, r6
 8007ede:	461e      	mov	r6, r3
 8007ee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ee4:	2a30      	cmp	r2, #48	@ 0x30
 8007ee6:	d0fa      	beq.n	8007ede <_dtoa_r+0xb06>
 8007ee8:	e5c2      	b.n	8007a70 <_dtoa_r+0x698>
 8007eea:	459a      	cmp	sl, r3
 8007eec:	d1a4      	bne.n	8007e38 <_dtoa_r+0xa60>
 8007eee:	9b04      	ldr	r3, [sp, #16]
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	9304      	str	r3, [sp, #16]
 8007ef4:	2331      	movs	r3, #49	@ 0x31
 8007ef6:	f88a 3000 	strb.w	r3, [sl]
 8007efa:	e5b9      	b.n	8007a70 <_dtoa_r+0x698>
 8007efc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007efe:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007f5c <_dtoa_r+0xb84>
 8007f02:	b11b      	cbz	r3, 8007f0c <_dtoa_r+0xb34>
 8007f04:	f10a 0308 	add.w	r3, sl, #8
 8007f08:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f0a:	6013      	str	r3, [r2, #0]
 8007f0c:	4650      	mov	r0, sl
 8007f0e:	b019      	add	sp, #100	@ 0x64
 8007f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	f77f ae37 	ble.w	8007b8a <_dtoa_r+0x7b2>
 8007f1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f20:	2001      	movs	r0, #1
 8007f22:	e655      	b.n	8007bd0 <_dtoa_r+0x7f8>
 8007f24:	9b00      	ldr	r3, [sp, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	f77f aed6 	ble.w	8007cd8 <_dtoa_r+0x900>
 8007f2c:	4656      	mov	r6, sl
 8007f2e:	4621      	mov	r1, r4
 8007f30:	4648      	mov	r0, r9
 8007f32:	f7ff f9c8 	bl	80072c6 <quorem>
 8007f36:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f3a:	f806 8b01 	strb.w	r8, [r6], #1
 8007f3e:	9b00      	ldr	r3, [sp, #0]
 8007f40:	eba6 020a 	sub.w	r2, r6, sl
 8007f44:	4293      	cmp	r3, r2
 8007f46:	ddb3      	ble.n	8007eb0 <_dtoa_r+0xad8>
 8007f48:	4649      	mov	r1, r9
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	220a      	movs	r2, #10
 8007f4e:	4658      	mov	r0, fp
 8007f50:	f000 f8b2 	bl	80080b8 <__multadd>
 8007f54:	4681      	mov	r9, r0
 8007f56:	e7ea      	b.n	8007f2e <_dtoa_r+0xb56>
 8007f58:	08009e10 	.word	0x08009e10
 8007f5c:	08009d94 	.word	0x08009d94

08007f60 <_free_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4605      	mov	r5, r0
 8007f64:	2900      	cmp	r1, #0
 8007f66:	d041      	beq.n	8007fec <_free_r+0x8c>
 8007f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f6c:	1f0c      	subs	r4, r1, #4
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	bfb8      	it	lt
 8007f72:	18e4      	addlt	r4, r4, r3
 8007f74:	f7fe fb8e 	bl	8006694 <__malloc_lock>
 8007f78:	4a1d      	ldr	r2, [pc, #116]	@ (8007ff0 <_free_r+0x90>)
 8007f7a:	6813      	ldr	r3, [r2, #0]
 8007f7c:	b933      	cbnz	r3, 8007f8c <_free_r+0x2c>
 8007f7e:	6063      	str	r3, [r4, #4]
 8007f80:	6014      	str	r4, [r2, #0]
 8007f82:	4628      	mov	r0, r5
 8007f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f88:	f7fe bb8a 	b.w	80066a0 <__malloc_unlock>
 8007f8c:	42a3      	cmp	r3, r4
 8007f8e:	d908      	bls.n	8007fa2 <_free_r+0x42>
 8007f90:	6820      	ldr	r0, [r4, #0]
 8007f92:	1821      	adds	r1, r4, r0
 8007f94:	428b      	cmp	r3, r1
 8007f96:	bf01      	itttt	eq
 8007f98:	6819      	ldreq	r1, [r3, #0]
 8007f9a:	685b      	ldreq	r3, [r3, #4]
 8007f9c:	1809      	addeq	r1, r1, r0
 8007f9e:	6021      	streq	r1, [r4, #0]
 8007fa0:	e7ed      	b.n	8007f7e <_free_r+0x1e>
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	b10b      	cbz	r3, 8007fac <_free_r+0x4c>
 8007fa8:	42a3      	cmp	r3, r4
 8007faa:	d9fa      	bls.n	8007fa2 <_free_r+0x42>
 8007fac:	6811      	ldr	r1, [r2, #0]
 8007fae:	1850      	adds	r0, r2, r1
 8007fb0:	42a0      	cmp	r0, r4
 8007fb2:	d10b      	bne.n	8007fcc <_free_r+0x6c>
 8007fb4:	6820      	ldr	r0, [r4, #0]
 8007fb6:	4401      	add	r1, r0
 8007fb8:	1850      	adds	r0, r2, r1
 8007fba:	4283      	cmp	r3, r0
 8007fbc:	6011      	str	r1, [r2, #0]
 8007fbe:	d1e0      	bne.n	8007f82 <_free_r+0x22>
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	6053      	str	r3, [r2, #4]
 8007fc6:	4408      	add	r0, r1
 8007fc8:	6010      	str	r0, [r2, #0]
 8007fca:	e7da      	b.n	8007f82 <_free_r+0x22>
 8007fcc:	d902      	bls.n	8007fd4 <_free_r+0x74>
 8007fce:	230c      	movs	r3, #12
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	e7d6      	b.n	8007f82 <_free_r+0x22>
 8007fd4:	6820      	ldr	r0, [r4, #0]
 8007fd6:	1821      	adds	r1, r4, r0
 8007fd8:	428b      	cmp	r3, r1
 8007fda:	bf04      	itt	eq
 8007fdc:	6819      	ldreq	r1, [r3, #0]
 8007fde:	685b      	ldreq	r3, [r3, #4]
 8007fe0:	6063      	str	r3, [r4, #4]
 8007fe2:	bf04      	itt	eq
 8007fe4:	1809      	addeq	r1, r1, r0
 8007fe6:	6021      	streq	r1, [r4, #0]
 8007fe8:	6054      	str	r4, [r2, #4]
 8007fea:	e7ca      	b.n	8007f82 <_free_r+0x22>
 8007fec:	bd38      	pop	{r3, r4, r5, pc}
 8007fee:	bf00      	nop
 8007ff0:	2000083c 	.word	0x2000083c

08007ff4 <_Balloc>:
 8007ff4:	b570      	push	{r4, r5, r6, lr}
 8007ff6:	69c6      	ldr	r6, [r0, #28]
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	460d      	mov	r5, r1
 8007ffc:	b976      	cbnz	r6, 800801c <_Balloc+0x28>
 8007ffe:	2010      	movs	r0, #16
 8008000:	f7fe fa96 	bl	8006530 <malloc>
 8008004:	4602      	mov	r2, r0
 8008006:	61e0      	str	r0, [r4, #28]
 8008008:	b920      	cbnz	r0, 8008014 <_Balloc+0x20>
 800800a:	4b18      	ldr	r3, [pc, #96]	@ (800806c <_Balloc+0x78>)
 800800c:	4818      	ldr	r0, [pc, #96]	@ (8008070 <_Balloc+0x7c>)
 800800e:	216b      	movs	r1, #107	@ 0x6b
 8008010:	f000 fd9e 	bl	8008b50 <__assert_func>
 8008014:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008018:	6006      	str	r6, [r0, #0]
 800801a:	60c6      	str	r6, [r0, #12]
 800801c:	69e6      	ldr	r6, [r4, #28]
 800801e:	68f3      	ldr	r3, [r6, #12]
 8008020:	b183      	cbz	r3, 8008044 <_Balloc+0x50>
 8008022:	69e3      	ldr	r3, [r4, #28]
 8008024:	68db      	ldr	r3, [r3, #12]
 8008026:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800802a:	b9b8      	cbnz	r0, 800805c <_Balloc+0x68>
 800802c:	2101      	movs	r1, #1
 800802e:	fa01 f605 	lsl.w	r6, r1, r5
 8008032:	1d72      	adds	r2, r6, #5
 8008034:	0092      	lsls	r2, r2, #2
 8008036:	4620      	mov	r0, r4
 8008038:	f000 fda8 	bl	8008b8c <_calloc_r>
 800803c:	b160      	cbz	r0, 8008058 <_Balloc+0x64>
 800803e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008042:	e00e      	b.n	8008062 <_Balloc+0x6e>
 8008044:	2221      	movs	r2, #33	@ 0x21
 8008046:	2104      	movs	r1, #4
 8008048:	4620      	mov	r0, r4
 800804a:	f000 fd9f 	bl	8008b8c <_calloc_r>
 800804e:	69e3      	ldr	r3, [r4, #28]
 8008050:	60f0      	str	r0, [r6, #12]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1e4      	bne.n	8008022 <_Balloc+0x2e>
 8008058:	2000      	movs	r0, #0
 800805a:	bd70      	pop	{r4, r5, r6, pc}
 800805c:	6802      	ldr	r2, [r0, #0]
 800805e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008062:	2300      	movs	r3, #0
 8008064:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008068:	e7f7      	b.n	800805a <_Balloc+0x66>
 800806a:	bf00      	nop
 800806c:	08009da1 	.word	0x08009da1
 8008070:	08009e21 	.word	0x08009e21

08008074 <_Bfree>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	69c6      	ldr	r6, [r0, #28]
 8008078:	4605      	mov	r5, r0
 800807a:	460c      	mov	r4, r1
 800807c:	b976      	cbnz	r6, 800809c <_Bfree+0x28>
 800807e:	2010      	movs	r0, #16
 8008080:	f7fe fa56 	bl	8006530 <malloc>
 8008084:	4602      	mov	r2, r0
 8008086:	61e8      	str	r0, [r5, #28]
 8008088:	b920      	cbnz	r0, 8008094 <_Bfree+0x20>
 800808a:	4b09      	ldr	r3, [pc, #36]	@ (80080b0 <_Bfree+0x3c>)
 800808c:	4809      	ldr	r0, [pc, #36]	@ (80080b4 <_Bfree+0x40>)
 800808e:	218f      	movs	r1, #143	@ 0x8f
 8008090:	f000 fd5e 	bl	8008b50 <__assert_func>
 8008094:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008098:	6006      	str	r6, [r0, #0]
 800809a:	60c6      	str	r6, [r0, #12]
 800809c:	b13c      	cbz	r4, 80080ae <_Bfree+0x3a>
 800809e:	69eb      	ldr	r3, [r5, #28]
 80080a0:	6862      	ldr	r2, [r4, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80080a8:	6021      	str	r1, [r4, #0]
 80080aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	08009da1 	.word	0x08009da1
 80080b4:	08009e21 	.word	0x08009e21

080080b8 <__multadd>:
 80080b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080bc:	690d      	ldr	r5, [r1, #16]
 80080be:	4607      	mov	r7, r0
 80080c0:	460c      	mov	r4, r1
 80080c2:	461e      	mov	r6, r3
 80080c4:	f101 0c14 	add.w	ip, r1, #20
 80080c8:	2000      	movs	r0, #0
 80080ca:	f8dc 3000 	ldr.w	r3, [ip]
 80080ce:	b299      	uxth	r1, r3
 80080d0:	fb02 6101 	mla	r1, r2, r1, r6
 80080d4:	0c1e      	lsrs	r6, r3, #16
 80080d6:	0c0b      	lsrs	r3, r1, #16
 80080d8:	fb02 3306 	mla	r3, r2, r6, r3
 80080dc:	b289      	uxth	r1, r1
 80080de:	3001      	adds	r0, #1
 80080e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80080e4:	4285      	cmp	r5, r0
 80080e6:	f84c 1b04 	str.w	r1, [ip], #4
 80080ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80080ee:	dcec      	bgt.n	80080ca <__multadd+0x12>
 80080f0:	b30e      	cbz	r6, 8008136 <__multadd+0x7e>
 80080f2:	68a3      	ldr	r3, [r4, #8]
 80080f4:	42ab      	cmp	r3, r5
 80080f6:	dc19      	bgt.n	800812c <__multadd+0x74>
 80080f8:	6861      	ldr	r1, [r4, #4]
 80080fa:	4638      	mov	r0, r7
 80080fc:	3101      	adds	r1, #1
 80080fe:	f7ff ff79 	bl	8007ff4 <_Balloc>
 8008102:	4680      	mov	r8, r0
 8008104:	b928      	cbnz	r0, 8008112 <__multadd+0x5a>
 8008106:	4602      	mov	r2, r0
 8008108:	4b0c      	ldr	r3, [pc, #48]	@ (800813c <__multadd+0x84>)
 800810a:	480d      	ldr	r0, [pc, #52]	@ (8008140 <__multadd+0x88>)
 800810c:	21ba      	movs	r1, #186	@ 0xba
 800810e:	f000 fd1f 	bl	8008b50 <__assert_func>
 8008112:	6922      	ldr	r2, [r4, #16]
 8008114:	3202      	adds	r2, #2
 8008116:	f104 010c 	add.w	r1, r4, #12
 800811a:	0092      	lsls	r2, r2, #2
 800811c:	300c      	adds	r0, #12
 800811e:	f000 fd09 	bl	8008b34 <memcpy>
 8008122:	4621      	mov	r1, r4
 8008124:	4638      	mov	r0, r7
 8008126:	f7ff ffa5 	bl	8008074 <_Bfree>
 800812a:	4644      	mov	r4, r8
 800812c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008130:	3501      	adds	r5, #1
 8008132:	615e      	str	r6, [r3, #20]
 8008134:	6125      	str	r5, [r4, #16]
 8008136:	4620      	mov	r0, r4
 8008138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800813c:	08009e10 	.word	0x08009e10
 8008140:	08009e21 	.word	0x08009e21

08008144 <__hi0bits>:
 8008144:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008148:	4603      	mov	r3, r0
 800814a:	bf36      	itet	cc
 800814c:	0403      	lslcc	r3, r0, #16
 800814e:	2000      	movcs	r0, #0
 8008150:	2010      	movcc	r0, #16
 8008152:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008156:	bf3c      	itt	cc
 8008158:	021b      	lslcc	r3, r3, #8
 800815a:	3008      	addcc	r0, #8
 800815c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008160:	bf3c      	itt	cc
 8008162:	011b      	lslcc	r3, r3, #4
 8008164:	3004      	addcc	r0, #4
 8008166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800816a:	bf3c      	itt	cc
 800816c:	009b      	lslcc	r3, r3, #2
 800816e:	3002      	addcc	r0, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	db05      	blt.n	8008180 <__hi0bits+0x3c>
 8008174:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008178:	f100 0001 	add.w	r0, r0, #1
 800817c:	bf08      	it	eq
 800817e:	2020      	moveq	r0, #32
 8008180:	4770      	bx	lr

08008182 <__lo0bits>:
 8008182:	6803      	ldr	r3, [r0, #0]
 8008184:	4602      	mov	r2, r0
 8008186:	f013 0007 	ands.w	r0, r3, #7
 800818a:	d00b      	beq.n	80081a4 <__lo0bits+0x22>
 800818c:	07d9      	lsls	r1, r3, #31
 800818e:	d421      	bmi.n	80081d4 <__lo0bits+0x52>
 8008190:	0798      	lsls	r0, r3, #30
 8008192:	bf49      	itett	mi
 8008194:	085b      	lsrmi	r3, r3, #1
 8008196:	089b      	lsrpl	r3, r3, #2
 8008198:	2001      	movmi	r0, #1
 800819a:	6013      	strmi	r3, [r2, #0]
 800819c:	bf5c      	itt	pl
 800819e:	6013      	strpl	r3, [r2, #0]
 80081a0:	2002      	movpl	r0, #2
 80081a2:	4770      	bx	lr
 80081a4:	b299      	uxth	r1, r3
 80081a6:	b909      	cbnz	r1, 80081ac <__lo0bits+0x2a>
 80081a8:	0c1b      	lsrs	r3, r3, #16
 80081aa:	2010      	movs	r0, #16
 80081ac:	b2d9      	uxtb	r1, r3
 80081ae:	b909      	cbnz	r1, 80081b4 <__lo0bits+0x32>
 80081b0:	3008      	adds	r0, #8
 80081b2:	0a1b      	lsrs	r3, r3, #8
 80081b4:	0719      	lsls	r1, r3, #28
 80081b6:	bf04      	itt	eq
 80081b8:	091b      	lsreq	r3, r3, #4
 80081ba:	3004      	addeq	r0, #4
 80081bc:	0799      	lsls	r1, r3, #30
 80081be:	bf04      	itt	eq
 80081c0:	089b      	lsreq	r3, r3, #2
 80081c2:	3002      	addeq	r0, #2
 80081c4:	07d9      	lsls	r1, r3, #31
 80081c6:	d403      	bmi.n	80081d0 <__lo0bits+0x4e>
 80081c8:	085b      	lsrs	r3, r3, #1
 80081ca:	f100 0001 	add.w	r0, r0, #1
 80081ce:	d003      	beq.n	80081d8 <__lo0bits+0x56>
 80081d0:	6013      	str	r3, [r2, #0]
 80081d2:	4770      	bx	lr
 80081d4:	2000      	movs	r0, #0
 80081d6:	4770      	bx	lr
 80081d8:	2020      	movs	r0, #32
 80081da:	4770      	bx	lr

080081dc <__i2b>:
 80081dc:	b510      	push	{r4, lr}
 80081de:	460c      	mov	r4, r1
 80081e0:	2101      	movs	r1, #1
 80081e2:	f7ff ff07 	bl	8007ff4 <_Balloc>
 80081e6:	4602      	mov	r2, r0
 80081e8:	b928      	cbnz	r0, 80081f6 <__i2b+0x1a>
 80081ea:	4b05      	ldr	r3, [pc, #20]	@ (8008200 <__i2b+0x24>)
 80081ec:	4805      	ldr	r0, [pc, #20]	@ (8008204 <__i2b+0x28>)
 80081ee:	f240 1145 	movw	r1, #325	@ 0x145
 80081f2:	f000 fcad 	bl	8008b50 <__assert_func>
 80081f6:	2301      	movs	r3, #1
 80081f8:	6144      	str	r4, [r0, #20]
 80081fa:	6103      	str	r3, [r0, #16]
 80081fc:	bd10      	pop	{r4, pc}
 80081fe:	bf00      	nop
 8008200:	08009e10 	.word	0x08009e10
 8008204:	08009e21 	.word	0x08009e21

08008208 <__multiply>:
 8008208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820c:	4614      	mov	r4, r2
 800820e:	690a      	ldr	r2, [r1, #16]
 8008210:	6923      	ldr	r3, [r4, #16]
 8008212:	429a      	cmp	r2, r3
 8008214:	bfa8      	it	ge
 8008216:	4623      	movge	r3, r4
 8008218:	460f      	mov	r7, r1
 800821a:	bfa4      	itt	ge
 800821c:	460c      	movge	r4, r1
 800821e:	461f      	movge	r7, r3
 8008220:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008224:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008228:	68a3      	ldr	r3, [r4, #8]
 800822a:	6861      	ldr	r1, [r4, #4]
 800822c:	eb0a 0609 	add.w	r6, sl, r9
 8008230:	42b3      	cmp	r3, r6
 8008232:	b085      	sub	sp, #20
 8008234:	bfb8      	it	lt
 8008236:	3101      	addlt	r1, #1
 8008238:	f7ff fedc 	bl	8007ff4 <_Balloc>
 800823c:	b930      	cbnz	r0, 800824c <__multiply+0x44>
 800823e:	4602      	mov	r2, r0
 8008240:	4b44      	ldr	r3, [pc, #272]	@ (8008354 <__multiply+0x14c>)
 8008242:	4845      	ldr	r0, [pc, #276]	@ (8008358 <__multiply+0x150>)
 8008244:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008248:	f000 fc82 	bl	8008b50 <__assert_func>
 800824c:	f100 0514 	add.w	r5, r0, #20
 8008250:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008254:	462b      	mov	r3, r5
 8008256:	2200      	movs	r2, #0
 8008258:	4543      	cmp	r3, r8
 800825a:	d321      	bcc.n	80082a0 <__multiply+0x98>
 800825c:	f107 0114 	add.w	r1, r7, #20
 8008260:	f104 0214 	add.w	r2, r4, #20
 8008264:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008268:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800826c:	9302      	str	r3, [sp, #8]
 800826e:	1b13      	subs	r3, r2, r4
 8008270:	3b15      	subs	r3, #21
 8008272:	f023 0303 	bic.w	r3, r3, #3
 8008276:	3304      	adds	r3, #4
 8008278:	f104 0715 	add.w	r7, r4, #21
 800827c:	42ba      	cmp	r2, r7
 800827e:	bf38      	it	cc
 8008280:	2304      	movcc	r3, #4
 8008282:	9301      	str	r3, [sp, #4]
 8008284:	9b02      	ldr	r3, [sp, #8]
 8008286:	9103      	str	r1, [sp, #12]
 8008288:	428b      	cmp	r3, r1
 800828a:	d80c      	bhi.n	80082a6 <__multiply+0x9e>
 800828c:	2e00      	cmp	r6, #0
 800828e:	dd03      	ble.n	8008298 <__multiply+0x90>
 8008290:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008294:	2b00      	cmp	r3, #0
 8008296:	d05b      	beq.n	8008350 <__multiply+0x148>
 8008298:	6106      	str	r6, [r0, #16]
 800829a:	b005      	add	sp, #20
 800829c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082a0:	f843 2b04 	str.w	r2, [r3], #4
 80082a4:	e7d8      	b.n	8008258 <__multiply+0x50>
 80082a6:	f8b1 a000 	ldrh.w	sl, [r1]
 80082aa:	f1ba 0f00 	cmp.w	sl, #0
 80082ae:	d024      	beq.n	80082fa <__multiply+0xf2>
 80082b0:	f104 0e14 	add.w	lr, r4, #20
 80082b4:	46a9      	mov	r9, r5
 80082b6:	f04f 0c00 	mov.w	ip, #0
 80082ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082be:	f8d9 3000 	ldr.w	r3, [r9]
 80082c2:	fa1f fb87 	uxth.w	fp, r7
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	fb0a 330b 	mla	r3, sl, fp, r3
 80082cc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80082d0:	f8d9 7000 	ldr.w	r7, [r9]
 80082d4:	4463      	add	r3, ip
 80082d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80082da:	fb0a c70b 	mla	r7, sl, fp, ip
 80082de:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80082e8:	4572      	cmp	r2, lr
 80082ea:	f849 3b04 	str.w	r3, [r9], #4
 80082ee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80082f2:	d8e2      	bhi.n	80082ba <__multiply+0xb2>
 80082f4:	9b01      	ldr	r3, [sp, #4]
 80082f6:	f845 c003 	str.w	ip, [r5, r3]
 80082fa:	9b03      	ldr	r3, [sp, #12]
 80082fc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008300:	3104      	adds	r1, #4
 8008302:	f1b9 0f00 	cmp.w	r9, #0
 8008306:	d021      	beq.n	800834c <__multiply+0x144>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	f104 0c14 	add.w	ip, r4, #20
 800830e:	46ae      	mov	lr, r5
 8008310:	f04f 0a00 	mov.w	sl, #0
 8008314:	f8bc b000 	ldrh.w	fp, [ip]
 8008318:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800831c:	fb09 770b 	mla	r7, r9, fp, r7
 8008320:	4457      	add	r7, sl
 8008322:	b29b      	uxth	r3, r3
 8008324:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008328:	f84e 3b04 	str.w	r3, [lr], #4
 800832c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008330:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008334:	f8be 3000 	ldrh.w	r3, [lr]
 8008338:	fb09 330a 	mla	r3, r9, sl, r3
 800833c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008340:	4562      	cmp	r2, ip
 8008342:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008346:	d8e5      	bhi.n	8008314 <__multiply+0x10c>
 8008348:	9f01      	ldr	r7, [sp, #4]
 800834a:	51eb      	str	r3, [r5, r7]
 800834c:	3504      	adds	r5, #4
 800834e:	e799      	b.n	8008284 <__multiply+0x7c>
 8008350:	3e01      	subs	r6, #1
 8008352:	e79b      	b.n	800828c <__multiply+0x84>
 8008354:	08009e10 	.word	0x08009e10
 8008358:	08009e21 	.word	0x08009e21

0800835c <__pow5mult>:
 800835c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008360:	4615      	mov	r5, r2
 8008362:	f012 0203 	ands.w	r2, r2, #3
 8008366:	4607      	mov	r7, r0
 8008368:	460e      	mov	r6, r1
 800836a:	d007      	beq.n	800837c <__pow5mult+0x20>
 800836c:	4c25      	ldr	r4, [pc, #148]	@ (8008404 <__pow5mult+0xa8>)
 800836e:	3a01      	subs	r2, #1
 8008370:	2300      	movs	r3, #0
 8008372:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008376:	f7ff fe9f 	bl	80080b8 <__multadd>
 800837a:	4606      	mov	r6, r0
 800837c:	10ad      	asrs	r5, r5, #2
 800837e:	d03d      	beq.n	80083fc <__pow5mult+0xa0>
 8008380:	69fc      	ldr	r4, [r7, #28]
 8008382:	b97c      	cbnz	r4, 80083a4 <__pow5mult+0x48>
 8008384:	2010      	movs	r0, #16
 8008386:	f7fe f8d3 	bl	8006530 <malloc>
 800838a:	4602      	mov	r2, r0
 800838c:	61f8      	str	r0, [r7, #28]
 800838e:	b928      	cbnz	r0, 800839c <__pow5mult+0x40>
 8008390:	4b1d      	ldr	r3, [pc, #116]	@ (8008408 <__pow5mult+0xac>)
 8008392:	481e      	ldr	r0, [pc, #120]	@ (800840c <__pow5mult+0xb0>)
 8008394:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008398:	f000 fbda 	bl	8008b50 <__assert_func>
 800839c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80083a0:	6004      	str	r4, [r0, #0]
 80083a2:	60c4      	str	r4, [r0, #12]
 80083a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80083a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80083ac:	b94c      	cbnz	r4, 80083c2 <__pow5mult+0x66>
 80083ae:	f240 2171 	movw	r1, #625	@ 0x271
 80083b2:	4638      	mov	r0, r7
 80083b4:	f7ff ff12 	bl	80081dc <__i2b>
 80083b8:	2300      	movs	r3, #0
 80083ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80083be:	4604      	mov	r4, r0
 80083c0:	6003      	str	r3, [r0, #0]
 80083c2:	f04f 0900 	mov.w	r9, #0
 80083c6:	07eb      	lsls	r3, r5, #31
 80083c8:	d50a      	bpl.n	80083e0 <__pow5mult+0x84>
 80083ca:	4631      	mov	r1, r6
 80083cc:	4622      	mov	r2, r4
 80083ce:	4638      	mov	r0, r7
 80083d0:	f7ff ff1a 	bl	8008208 <__multiply>
 80083d4:	4631      	mov	r1, r6
 80083d6:	4680      	mov	r8, r0
 80083d8:	4638      	mov	r0, r7
 80083da:	f7ff fe4b 	bl	8008074 <_Bfree>
 80083de:	4646      	mov	r6, r8
 80083e0:	106d      	asrs	r5, r5, #1
 80083e2:	d00b      	beq.n	80083fc <__pow5mult+0xa0>
 80083e4:	6820      	ldr	r0, [r4, #0]
 80083e6:	b938      	cbnz	r0, 80083f8 <__pow5mult+0x9c>
 80083e8:	4622      	mov	r2, r4
 80083ea:	4621      	mov	r1, r4
 80083ec:	4638      	mov	r0, r7
 80083ee:	f7ff ff0b 	bl	8008208 <__multiply>
 80083f2:	6020      	str	r0, [r4, #0]
 80083f4:	f8c0 9000 	str.w	r9, [r0]
 80083f8:	4604      	mov	r4, r0
 80083fa:	e7e4      	b.n	80083c6 <__pow5mult+0x6a>
 80083fc:	4630      	mov	r0, r6
 80083fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008402:	bf00      	nop
 8008404:	08009e7c 	.word	0x08009e7c
 8008408:	08009da1 	.word	0x08009da1
 800840c:	08009e21 	.word	0x08009e21

08008410 <__lshift>:
 8008410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008414:	460c      	mov	r4, r1
 8008416:	6849      	ldr	r1, [r1, #4]
 8008418:	6923      	ldr	r3, [r4, #16]
 800841a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800841e:	68a3      	ldr	r3, [r4, #8]
 8008420:	4607      	mov	r7, r0
 8008422:	4691      	mov	r9, r2
 8008424:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008428:	f108 0601 	add.w	r6, r8, #1
 800842c:	42b3      	cmp	r3, r6
 800842e:	db0b      	blt.n	8008448 <__lshift+0x38>
 8008430:	4638      	mov	r0, r7
 8008432:	f7ff fddf 	bl	8007ff4 <_Balloc>
 8008436:	4605      	mov	r5, r0
 8008438:	b948      	cbnz	r0, 800844e <__lshift+0x3e>
 800843a:	4602      	mov	r2, r0
 800843c:	4b28      	ldr	r3, [pc, #160]	@ (80084e0 <__lshift+0xd0>)
 800843e:	4829      	ldr	r0, [pc, #164]	@ (80084e4 <__lshift+0xd4>)
 8008440:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008444:	f000 fb84 	bl	8008b50 <__assert_func>
 8008448:	3101      	adds	r1, #1
 800844a:	005b      	lsls	r3, r3, #1
 800844c:	e7ee      	b.n	800842c <__lshift+0x1c>
 800844e:	2300      	movs	r3, #0
 8008450:	f100 0114 	add.w	r1, r0, #20
 8008454:	f100 0210 	add.w	r2, r0, #16
 8008458:	4618      	mov	r0, r3
 800845a:	4553      	cmp	r3, sl
 800845c:	db33      	blt.n	80084c6 <__lshift+0xb6>
 800845e:	6920      	ldr	r0, [r4, #16]
 8008460:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008464:	f104 0314 	add.w	r3, r4, #20
 8008468:	f019 091f 	ands.w	r9, r9, #31
 800846c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008470:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008474:	d02b      	beq.n	80084ce <__lshift+0xbe>
 8008476:	f1c9 0e20 	rsb	lr, r9, #32
 800847a:	468a      	mov	sl, r1
 800847c:	2200      	movs	r2, #0
 800847e:	6818      	ldr	r0, [r3, #0]
 8008480:	fa00 f009 	lsl.w	r0, r0, r9
 8008484:	4310      	orrs	r0, r2
 8008486:	f84a 0b04 	str.w	r0, [sl], #4
 800848a:	f853 2b04 	ldr.w	r2, [r3], #4
 800848e:	459c      	cmp	ip, r3
 8008490:	fa22 f20e 	lsr.w	r2, r2, lr
 8008494:	d8f3      	bhi.n	800847e <__lshift+0x6e>
 8008496:	ebac 0304 	sub.w	r3, ip, r4
 800849a:	3b15      	subs	r3, #21
 800849c:	f023 0303 	bic.w	r3, r3, #3
 80084a0:	3304      	adds	r3, #4
 80084a2:	f104 0015 	add.w	r0, r4, #21
 80084a6:	4584      	cmp	ip, r0
 80084a8:	bf38      	it	cc
 80084aa:	2304      	movcc	r3, #4
 80084ac:	50ca      	str	r2, [r1, r3]
 80084ae:	b10a      	cbz	r2, 80084b4 <__lshift+0xa4>
 80084b0:	f108 0602 	add.w	r6, r8, #2
 80084b4:	3e01      	subs	r6, #1
 80084b6:	4638      	mov	r0, r7
 80084b8:	612e      	str	r6, [r5, #16]
 80084ba:	4621      	mov	r1, r4
 80084bc:	f7ff fdda 	bl	8008074 <_Bfree>
 80084c0:	4628      	mov	r0, r5
 80084c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80084ca:	3301      	adds	r3, #1
 80084cc:	e7c5      	b.n	800845a <__lshift+0x4a>
 80084ce:	3904      	subs	r1, #4
 80084d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80084d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80084d8:	459c      	cmp	ip, r3
 80084da:	d8f9      	bhi.n	80084d0 <__lshift+0xc0>
 80084dc:	e7ea      	b.n	80084b4 <__lshift+0xa4>
 80084de:	bf00      	nop
 80084e0:	08009e10 	.word	0x08009e10
 80084e4:	08009e21 	.word	0x08009e21

080084e8 <__mcmp>:
 80084e8:	690a      	ldr	r2, [r1, #16]
 80084ea:	4603      	mov	r3, r0
 80084ec:	6900      	ldr	r0, [r0, #16]
 80084ee:	1a80      	subs	r0, r0, r2
 80084f0:	b530      	push	{r4, r5, lr}
 80084f2:	d10e      	bne.n	8008512 <__mcmp+0x2a>
 80084f4:	3314      	adds	r3, #20
 80084f6:	3114      	adds	r1, #20
 80084f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008500:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008504:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008508:	4295      	cmp	r5, r2
 800850a:	d003      	beq.n	8008514 <__mcmp+0x2c>
 800850c:	d205      	bcs.n	800851a <__mcmp+0x32>
 800850e:	f04f 30ff 	mov.w	r0, #4294967295
 8008512:	bd30      	pop	{r4, r5, pc}
 8008514:	42a3      	cmp	r3, r4
 8008516:	d3f3      	bcc.n	8008500 <__mcmp+0x18>
 8008518:	e7fb      	b.n	8008512 <__mcmp+0x2a>
 800851a:	2001      	movs	r0, #1
 800851c:	e7f9      	b.n	8008512 <__mcmp+0x2a>
	...

08008520 <__mdiff>:
 8008520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008524:	4689      	mov	r9, r1
 8008526:	4606      	mov	r6, r0
 8008528:	4611      	mov	r1, r2
 800852a:	4648      	mov	r0, r9
 800852c:	4614      	mov	r4, r2
 800852e:	f7ff ffdb 	bl	80084e8 <__mcmp>
 8008532:	1e05      	subs	r5, r0, #0
 8008534:	d112      	bne.n	800855c <__mdiff+0x3c>
 8008536:	4629      	mov	r1, r5
 8008538:	4630      	mov	r0, r6
 800853a:	f7ff fd5b 	bl	8007ff4 <_Balloc>
 800853e:	4602      	mov	r2, r0
 8008540:	b928      	cbnz	r0, 800854e <__mdiff+0x2e>
 8008542:	4b3f      	ldr	r3, [pc, #252]	@ (8008640 <__mdiff+0x120>)
 8008544:	f240 2137 	movw	r1, #567	@ 0x237
 8008548:	483e      	ldr	r0, [pc, #248]	@ (8008644 <__mdiff+0x124>)
 800854a:	f000 fb01 	bl	8008b50 <__assert_func>
 800854e:	2301      	movs	r3, #1
 8008550:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008554:	4610      	mov	r0, r2
 8008556:	b003      	add	sp, #12
 8008558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800855c:	bfbc      	itt	lt
 800855e:	464b      	movlt	r3, r9
 8008560:	46a1      	movlt	r9, r4
 8008562:	4630      	mov	r0, r6
 8008564:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008568:	bfba      	itte	lt
 800856a:	461c      	movlt	r4, r3
 800856c:	2501      	movlt	r5, #1
 800856e:	2500      	movge	r5, #0
 8008570:	f7ff fd40 	bl	8007ff4 <_Balloc>
 8008574:	4602      	mov	r2, r0
 8008576:	b918      	cbnz	r0, 8008580 <__mdiff+0x60>
 8008578:	4b31      	ldr	r3, [pc, #196]	@ (8008640 <__mdiff+0x120>)
 800857a:	f240 2145 	movw	r1, #581	@ 0x245
 800857e:	e7e3      	b.n	8008548 <__mdiff+0x28>
 8008580:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008584:	6926      	ldr	r6, [r4, #16]
 8008586:	60c5      	str	r5, [r0, #12]
 8008588:	f109 0310 	add.w	r3, r9, #16
 800858c:	f109 0514 	add.w	r5, r9, #20
 8008590:	f104 0e14 	add.w	lr, r4, #20
 8008594:	f100 0b14 	add.w	fp, r0, #20
 8008598:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800859c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80085a0:	9301      	str	r3, [sp, #4]
 80085a2:	46d9      	mov	r9, fp
 80085a4:	f04f 0c00 	mov.w	ip, #0
 80085a8:	9b01      	ldr	r3, [sp, #4]
 80085aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80085ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80085b2:	9301      	str	r3, [sp, #4]
 80085b4:	fa1f f38a 	uxth.w	r3, sl
 80085b8:	4619      	mov	r1, r3
 80085ba:	b283      	uxth	r3, r0
 80085bc:	1acb      	subs	r3, r1, r3
 80085be:	0c00      	lsrs	r0, r0, #16
 80085c0:	4463      	add	r3, ip
 80085c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80085c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80085d0:	4576      	cmp	r6, lr
 80085d2:	f849 3b04 	str.w	r3, [r9], #4
 80085d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085da:	d8e5      	bhi.n	80085a8 <__mdiff+0x88>
 80085dc:	1b33      	subs	r3, r6, r4
 80085de:	3b15      	subs	r3, #21
 80085e0:	f023 0303 	bic.w	r3, r3, #3
 80085e4:	3415      	adds	r4, #21
 80085e6:	3304      	adds	r3, #4
 80085e8:	42a6      	cmp	r6, r4
 80085ea:	bf38      	it	cc
 80085ec:	2304      	movcc	r3, #4
 80085ee:	441d      	add	r5, r3
 80085f0:	445b      	add	r3, fp
 80085f2:	461e      	mov	r6, r3
 80085f4:	462c      	mov	r4, r5
 80085f6:	4544      	cmp	r4, r8
 80085f8:	d30e      	bcc.n	8008618 <__mdiff+0xf8>
 80085fa:	f108 0103 	add.w	r1, r8, #3
 80085fe:	1b49      	subs	r1, r1, r5
 8008600:	f021 0103 	bic.w	r1, r1, #3
 8008604:	3d03      	subs	r5, #3
 8008606:	45a8      	cmp	r8, r5
 8008608:	bf38      	it	cc
 800860a:	2100      	movcc	r1, #0
 800860c:	440b      	add	r3, r1
 800860e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008612:	b191      	cbz	r1, 800863a <__mdiff+0x11a>
 8008614:	6117      	str	r7, [r2, #16]
 8008616:	e79d      	b.n	8008554 <__mdiff+0x34>
 8008618:	f854 1b04 	ldr.w	r1, [r4], #4
 800861c:	46e6      	mov	lr, ip
 800861e:	0c08      	lsrs	r0, r1, #16
 8008620:	fa1c fc81 	uxtah	ip, ip, r1
 8008624:	4471      	add	r1, lr
 8008626:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800862a:	b289      	uxth	r1, r1
 800862c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008630:	f846 1b04 	str.w	r1, [r6], #4
 8008634:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008638:	e7dd      	b.n	80085f6 <__mdiff+0xd6>
 800863a:	3f01      	subs	r7, #1
 800863c:	e7e7      	b.n	800860e <__mdiff+0xee>
 800863e:	bf00      	nop
 8008640:	08009e10 	.word	0x08009e10
 8008644:	08009e21 	.word	0x08009e21

08008648 <__d2b>:
 8008648:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800864c:	460f      	mov	r7, r1
 800864e:	2101      	movs	r1, #1
 8008650:	ec59 8b10 	vmov	r8, r9, d0
 8008654:	4616      	mov	r6, r2
 8008656:	f7ff fccd 	bl	8007ff4 <_Balloc>
 800865a:	4604      	mov	r4, r0
 800865c:	b930      	cbnz	r0, 800866c <__d2b+0x24>
 800865e:	4602      	mov	r2, r0
 8008660:	4b23      	ldr	r3, [pc, #140]	@ (80086f0 <__d2b+0xa8>)
 8008662:	4824      	ldr	r0, [pc, #144]	@ (80086f4 <__d2b+0xac>)
 8008664:	f240 310f 	movw	r1, #783	@ 0x30f
 8008668:	f000 fa72 	bl	8008b50 <__assert_func>
 800866c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008670:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008674:	b10d      	cbz	r5, 800867a <__d2b+0x32>
 8008676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	f1b8 0300 	subs.w	r3, r8, #0
 8008680:	d023      	beq.n	80086ca <__d2b+0x82>
 8008682:	4668      	mov	r0, sp
 8008684:	9300      	str	r3, [sp, #0]
 8008686:	f7ff fd7c 	bl	8008182 <__lo0bits>
 800868a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800868e:	b1d0      	cbz	r0, 80086c6 <__d2b+0x7e>
 8008690:	f1c0 0320 	rsb	r3, r0, #32
 8008694:	fa02 f303 	lsl.w	r3, r2, r3
 8008698:	430b      	orrs	r3, r1
 800869a:	40c2      	lsrs	r2, r0
 800869c:	6163      	str	r3, [r4, #20]
 800869e:	9201      	str	r2, [sp, #4]
 80086a0:	9b01      	ldr	r3, [sp, #4]
 80086a2:	61a3      	str	r3, [r4, #24]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	bf0c      	ite	eq
 80086a8:	2201      	moveq	r2, #1
 80086aa:	2202      	movne	r2, #2
 80086ac:	6122      	str	r2, [r4, #16]
 80086ae:	b1a5      	cbz	r5, 80086da <__d2b+0x92>
 80086b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80086b4:	4405      	add	r5, r0
 80086b6:	603d      	str	r5, [r7, #0]
 80086b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80086bc:	6030      	str	r0, [r6, #0]
 80086be:	4620      	mov	r0, r4
 80086c0:	b003      	add	sp, #12
 80086c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086c6:	6161      	str	r1, [r4, #20]
 80086c8:	e7ea      	b.n	80086a0 <__d2b+0x58>
 80086ca:	a801      	add	r0, sp, #4
 80086cc:	f7ff fd59 	bl	8008182 <__lo0bits>
 80086d0:	9b01      	ldr	r3, [sp, #4]
 80086d2:	6163      	str	r3, [r4, #20]
 80086d4:	3020      	adds	r0, #32
 80086d6:	2201      	movs	r2, #1
 80086d8:	e7e8      	b.n	80086ac <__d2b+0x64>
 80086da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80086de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80086e2:	6038      	str	r0, [r7, #0]
 80086e4:	6918      	ldr	r0, [r3, #16]
 80086e6:	f7ff fd2d 	bl	8008144 <__hi0bits>
 80086ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80086ee:	e7e5      	b.n	80086bc <__d2b+0x74>
 80086f0:	08009e10 	.word	0x08009e10
 80086f4:	08009e21 	.word	0x08009e21

080086f8 <__ssputs_r>:
 80086f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086fc:	688e      	ldr	r6, [r1, #8]
 80086fe:	461f      	mov	r7, r3
 8008700:	42be      	cmp	r6, r7
 8008702:	680b      	ldr	r3, [r1, #0]
 8008704:	4682      	mov	sl, r0
 8008706:	460c      	mov	r4, r1
 8008708:	4690      	mov	r8, r2
 800870a:	d82d      	bhi.n	8008768 <__ssputs_r+0x70>
 800870c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008710:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008714:	d026      	beq.n	8008764 <__ssputs_r+0x6c>
 8008716:	6965      	ldr	r5, [r4, #20]
 8008718:	6909      	ldr	r1, [r1, #16]
 800871a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800871e:	eba3 0901 	sub.w	r9, r3, r1
 8008722:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008726:	1c7b      	adds	r3, r7, #1
 8008728:	444b      	add	r3, r9
 800872a:	106d      	asrs	r5, r5, #1
 800872c:	429d      	cmp	r5, r3
 800872e:	bf38      	it	cc
 8008730:	461d      	movcc	r5, r3
 8008732:	0553      	lsls	r3, r2, #21
 8008734:	d527      	bpl.n	8008786 <__ssputs_r+0x8e>
 8008736:	4629      	mov	r1, r5
 8008738:	f7fd ff2c 	bl	8006594 <_malloc_r>
 800873c:	4606      	mov	r6, r0
 800873e:	b360      	cbz	r0, 800879a <__ssputs_r+0xa2>
 8008740:	6921      	ldr	r1, [r4, #16]
 8008742:	464a      	mov	r2, r9
 8008744:	f000 f9f6 	bl	8008b34 <memcpy>
 8008748:	89a3      	ldrh	r3, [r4, #12]
 800874a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800874e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008752:	81a3      	strh	r3, [r4, #12]
 8008754:	6126      	str	r6, [r4, #16]
 8008756:	6165      	str	r5, [r4, #20]
 8008758:	444e      	add	r6, r9
 800875a:	eba5 0509 	sub.w	r5, r5, r9
 800875e:	6026      	str	r6, [r4, #0]
 8008760:	60a5      	str	r5, [r4, #8]
 8008762:	463e      	mov	r6, r7
 8008764:	42be      	cmp	r6, r7
 8008766:	d900      	bls.n	800876a <__ssputs_r+0x72>
 8008768:	463e      	mov	r6, r7
 800876a:	6820      	ldr	r0, [r4, #0]
 800876c:	4632      	mov	r2, r6
 800876e:	4641      	mov	r1, r8
 8008770:	f000 f9c6 	bl	8008b00 <memmove>
 8008774:	68a3      	ldr	r3, [r4, #8]
 8008776:	1b9b      	subs	r3, r3, r6
 8008778:	60a3      	str	r3, [r4, #8]
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	4433      	add	r3, r6
 800877e:	6023      	str	r3, [r4, #0]
 8008780:	2000      	movs	r0, #0
 8008782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008786:	462a      	mov	r2, r5
 8008788:	f000 fa26 	bl	8008bd8 <_realloc_r>
 800878c:	4606      	mov	r6, r0
 800878e:	2800      	cmp	r0, #0
 8008790:	d1e0      	bne.n	8008754 <__ssputs_r+0x5c>
 8008792:	6921      	ldr	r1, [r4, #16]
 8008794:	4650      	mov	r0, sl
 8008796:	f7ff fbe3 	bl	8007f60 <_free_r>
 800879a:	230c      	movs	r3, #12
 800879c:	f8ca 3000 	str.w	r3, [sl]
 80087a0:	89a3      	ldrh	r3, [r4, #12]
 80087a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087a6:	81a3      	strh	r3, [r4, #12]
 80087a8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ac:	e7e9      	b.n	8008782 <__ssputs_r+0x8a>
	...

080087b0 <_svfiprintf_r>:
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	4698      	mov	r8, r3
 80087b6:	898b      	ldrh	r3, [r1, #12]
 80087b8:	061b      	lsls	r3, r3, #24
 80087ba:	b09d      	sub	sp, #116	@ 0x74
 80087bc:	4607      	mov	r7, r0
 80087be:	460d      	mov	r5, r1
 80087c0:	4614      	mov	r4, r2
 80087c2:	d510      	bpl.n	80087e6 <_svfiprintf_r+0x36>
 80087c4:	690b      	ldr	r3, [r1, #16]
 80087c6:	b973      	cbnz	r3, 80087e6 <_svfiprintf_r+0x36>
 80087c8:	2140      	movs	r1, #64	@ 0x40
 80087ca:	f7fd fee3 	bl	8006594 <_malloc_r>
 80087ce:	6028      	str	r0, [r5, #0]
 80087d0:	6128      	str	r0, [r5, #16]
 80087d2:	b930      	cbnz	r0, 80087e2 <_svfiprintf_r+0x32>
 80087d4:	230c      	movs	r3, #12
 80087d6:	603b      	str	r3, [r7, #0]
 80087d8:	f04f 30ff 	mov.w	r0, #4294967295
 80087dc:	b01d      	add	sp, #116	@ 0x74
 80087de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e2:	2340      	movs	r3, #64	@ 0x40
 80087e4:	616b      	str	r3, [r5, #20]
 80087e6:	2300      	movs	r3, #0
 80087e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80087ea:	2320      	movs	r3, #32
 80087ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80087f4:	2330      	movs	r3, #48	@ 0x30
 80087f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008994 <_svfiprintf_r+0x1e4>
 80087fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087fe:	f04f 0901 	mov.w	r9, #1
 8008802:	4623      	mov	r3, r4
 8008804:	469a      	mov	sl, r3
 8008806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800880a:	b10a      	cbz	r2, 8008810 <_svfiprintf_r+0x60>
 800880c:	2a25      	cmp	r2, #37	@ 0x25
 800880e:	d1f9      	bne.n	8008804 <_svfiprintf_r+0x54>
 8008810:	ebba 0b04 	subs.w	fp, sl, r4
 8008814:	d00b      	beq.n	800882e <_svfiprintf_r+0x7e>
 8008816:	465b      	mov	r3, fp
 8008818:	4622      	mov	r2, r4
 800881a:	4629      	mov	r1, r5
 800881c:	4638      	mov	r0, r7
 800881e:	f7ff ff6b 	bl	80086f8 <__ssputs_r>
 8008822:	3001      	adds	r0, #1
 8008824:	f000 80a7 	beq.w	8008976 <_svfiprintf_r+0x1c6>
 8008828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800882a:	445a      	add	r2, fp
 800882c:	9209      	str	r2, [sp, #36]	@ 0x24
 800882e:	f89a 3000 	ldrb.w	r3, [sl]
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 809f 	beq.w	8008976 <_svfiprintf_r+0x1c6>
 8008838:	2300      	movs	r3, #0
 800883a:	f04f 32ff 	mov.w	r2, #4294967295
 800883e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008842:	f10a 0a01 	add.w	sl, sl, #1
 8008846:	9304      	str	r3, [sp, #16]
 8008848:	9307      	str	r3, [sp, #28]
 800884a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800884e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008850:	4654      	mov	r4, sl
 8008852:	2205      	movs	r2, #5
 8008854:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008858:	484e      	ldr	r0, [pc, #312]	@ (8008994 <_svfiprintf_r+0x1e4>)
 800885a:	f7f7 fcb9 	bl	80001d0 <memchr>
 800885e:	9a04      	ldr	r2, [sp, #16]
 8008860:	b9d8      	cbnz	r0, 800889a <_svfiprintf_r+0xea>
 8008862:	06d0      	lsls	r0, r2, #27
 8008864:	bf44      	itt	mi
 8008866:	2320      	movmi	r3, #32
 8008868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800886c:	0711      	lsls	r1, r2, #28
 800886e:	bf44      	itt	mi
 8008870:	232b      	movmi	r3, #43	@ 0x2b
 8008872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008876:	f89a 3000 	ldrb.w	r3, [sl]
 800887a:	2b2a      	cmp	r3, #42	@ 0x2a
 800887c:	d015      	beq.n	80088aa <_svfiprintf_r+0xfa>
 800887e:	9a07      	ldr	r2, [sp, #28]
 8008880:	4654      	mov	r4, sl
 8008882:	2000      	movs	r0, #0
 8008884:	f04f 0c0a 	mov.w	ip, #10
 8008888:	4621      	mov	r1, r4
 800888a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800888e:	3b30      	subs	r3, #48	@ 0x30
 8008890:	2b09      	cmp	r3, #9
 8008892:	d94b      	bls.n	800892c <_svfiprintf_r+0x17c>
 8008894:	b1b0      	cbz	r0, 80088c4 <_svfiprintf_r+0x114>
 8008896:	9207      	str	r2, [sp, #28]
 8008898:	e014      	b.n	80088c4 <_svfiprintf_r+0x114>
 800889a:	eba0 0308 	sub.w	r3, r0, r8
 800889e:	fa09 f303 	lsl.w	r3, r9, r3
 80088a2:	4313      	orrs	r3, r2
 80088a4:	9304      	str	r3, [sp, #16]
 80088a6:	46a2      	mov	sl, r4
 80088a8:	e7d2      	b.n	8008850 <_svfiprintf_r+0xa0>
 80088aa:	9b03      	ldr	r3, [sp, #12]
 80088ac:	1d19      	adds	r1, r3, #4
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	9103      	str	r1, [sp, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	bfbb      	ittet	lt
 80088b6:	425b      	neglt	r3, r3
 80088b8:	f042 0202 	orrlt.w	r2, r2, #2
 80088bc:	9307      	strge	r3, [sp, #28]
 80088be:	9307      	strlt	r3, [sp, #28]
 80088c0:	bfb8      	it	lt
 80088c2:	9204      	strlt	r2, [sp, #16]
 80088c4:	7823      	ldrb	r3, [r4, #0]
 80088c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80088c8:	d10a      	bne.n	80088e0 <_svfiprintf_r+0x130>
 80088ca:	7863      	ldrb	r3, [r4, #1]
 80088cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80088ce:	d132      	bne.n	8008936 <_svfiprintf_r+0x186>
 80088d0:	9b03      	ldr	r3, [sp, #12]
 80088d2:	1d1a      	adds	r2, r3, #4
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	9203      	str	r2, [sp, #12]
 80088d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088dc:	3402      	adds	r4, #2
 80088de:	9305      	str	r3, [sp, #20]
 80088e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089a4 <_svfiprintf_r+0x1f4>
 80088e4:	7821      	ldrb	r1, [r4, #0]
 80088e6:	2203      	movs	r2, #3
 80088e8:	4650      	mov	r0, sl
 80088ea:	f7f7 fc71 	bl	80001d0 <memchr>
 80088ee:	b138      	cbz	r0, 8008900 <_svfiprintf_r+0x150>
 80088f0:	9b04      	ldr	r3, [sp, #16]
 80088f2:	eba0 000a 	sub.w	r0, r0, sl
 80088f6:	2240      	movs	r2, #64	@ 0x40
 80088f8:	4082      	lsls	r2, r0
 80088fa:	4313      	orrs	r3, r2
 80088fc:	3401      	adds	r4, #1
 80088fe:	9304      	str	r3, [sp, #16]
 8008900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008904:	4824      	ldr	r0, [pc, #144]	@ (8008998 <_svfiprintf_r+0x1e8>)
 8008906:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800890a:	2206      	movs	r2, #6
 800890c:	f7f7 fc60 	bl	80001d0 <memchr>
 8008910:	2800      	cmp	r0, #0
 8008912:	d036      	beq.n	8008982 <_svfiprintf_r+0x1d2>
 8008914:	4b21      	ldr	r3, [pc, #132]	@ (800899c <_svfiprintf_r+0x1ec>)
 8008916:	bb1b      	cbnz	r3, 8008960 <_svfiprintf_r+0x1b0>
 8008918:	9b03      	ldr	r3, [sp, #12]
 800891a:	3307      	adds	r3, #7
 800891c:	f023 0307 	bic.w	r3, r3, #7
 8008920:	3308      	adds	r3, #8
 8008922:	9303      	str	r3, [sp, #12]
 8008924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008926:	4433      	add	r3, r6
 8008928:	9309      	str	r3, [sp, #36]	@ 0x24
 800892a:	e76a      	b.n	8008802 <_svfiprintf_r+0x52>
 800892c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008930:	460c      	mov	r4, r1
 8008932:	2001      	movs	r0, #1
 8008934:	e7a8      	b.n	8008888 <_svfiprintf_r+0xd8>
 8008936:	2300      	movs	r3, #0
 8008938:	3401      	adds	r4, #1
 800893a:	9305      	str	r3, [sp, #20]
 800893c:	4619      	mov	r1, r3
 800893e:	f04f 0c0a 	mov.w	ip, #10
 8008942:	4620      	mov	r0, r4
 8008944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008948:	3a30      	subs	r2, #48	@ 0x30
 800894a:	2a09      	cmp	r2, #9
 800894c:	d903      	bls.n	8008956 <_svfiprintf_r+0x1a6>
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0c6      	beq.n	80088e0 <_svfiprintf_r+0x130>
 8008952:	9105      	str	r1, [sp, #20]
 8008954:	e7c4      	b.n	80088e0 <_svfiprintf_r+0x130>
 8008956:	fb0c 2101 	mla	r1, ip, r1, r2
 800895a:	4604      	mov	r4, r0
 800895c:	2301      	movs	r3, #1
 800895e:	e7f0      	b.n	8008942 <_svfiprintf_r+0x192>
 8008960:	ab03      	add	r3, sp, #12
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	462a      	mov	r2, r5
 8008966:	4b0e      	ldr	r3, [pc, #56]	@ (80089a0 <_svfiprintf_r+0x1f0>)
 8008968:	a904      	add	r1, sp, #16
 800896a:	4638      	mov	r0, r7
 800896c:	f7fd ff3e 	bl	80067ec <_printf_float>
 8008970:	1c42      	adds	r2, r0, #1
 8008972:	4606      	mov	r6, r0
 8008974:	d1d6      	bne.n	8008924 <_svfiprintf_r+0x174>
 8008976:	89ab      	ldrh	r3, [r5, #12]
 8008978:	065b      	lsls	r3, r3, #25
 800897a:	f53f af2d 	bmi.w	80087d8 <_svfiprintf_r+0x28>
 800897e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008980:	e72c      	b.n	80087dc <_svfiprintf_r+0x2c>
 8008982:	ab03      	add	r3, sp, #12
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	462a      	mov	r2, r5
 8008988:	4b05      	ldr	r3, [pc, #20]	@ (80089a0 <_svfiprintf_r+0x1f0>)
 800898a:	a904      	add	r1, sp, #16
 800898c:	4638      	mov	r0, r7
 800898e:	f7fe f9c5 	bl	8006d1c <_printf_i>
 8008992:	e7ed      	b.n	8008970 <_svfiprintf_r+0x1c0>
 8008994:	08009f78 	.word	0x08009f78
 8008998:	08009f82 	.word	0x08009f82
 800899c:	080067ed 	.word	0x080067ed
 80089a0:	080086f9 	.word	0x080086f9
 80089a4:	08009f7e 	.word	0x08009f7e

080089a8 <__sflush_r>:
 80089a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b0:	0716      	lsls	r6, r2, #28
 80089b2:	4605      	mov	r5, r0
 80089b4:	460c      	mov	r4, r1
 80089b6:	d454      	bmi.n	8008a62 <__sflush_r+0xba>
 80089b8:	684b      	ldr	r3, [r1, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	dc02      	bgt.n	80089c4 <__sflush_r+0x1c>
 80089be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	dd48      	ble.n	8008a56 <__sflush_r+0xae>
 80089c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089c6:	2e00      	cmp	r6, #0
 80089c8:	d045      	beq.n	8008a56 <__sflush_r+0xae>
 80089ca:	2300      	movs	r3, #0
 80089cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089d0:	682f      	ldr	r7, [r5, #0]
 80089d2:	6a21      	ldr	r1, [r4, #32]
 80089d4:	602b      	str	r3, [r5, #0]
 80089d6:	d030      	beq.n	8008a3a <__sflush_r+0x92>
 80089d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089da:	89a3      	ldrh	r3, [r4, #12]
 80089dc:	0759      	lsls	r1, r3, #29
 80089de:	d505      	bpl.n	80089ec <__sflush_r+0x44>
 80089e0:	6863      	ldr	r3, [r4, #4]
 80089e2:	1ad2      	subs	r2, r2, r3
 80089e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089e6:	b10b      	cbz	r3, 80089ec <__sflush_r+0x44>
 80089e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089ea:	1ad2      	subs	r2, r2, r3
 80089ec:	2300      	movs	r3, #0
 80089ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089f0:	6a21      	ldr	r1, [r4, #32]
 80089f2:	4628      	mov	r0, r5
 80089f4:	47b0      	blx	r6
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	89a3      	ldrh	r3, [r4, #12]
 80089fa:	d106      	bne.n	8008a0a <__sflush_r+0x62>
 80089fc:	6829      	ldr	r1, [r5, #0]
 80089fe:	291d      	cmp	r1, #29
 8008a00:	d82b      	bhi.n	8008a5a <__sflush_r+0xb2>
 8008a02:	4a2a      	ldr	r2, [pc, #168]	@ (8008aac <__sflush_r+0x104>)
 8008a04:	410a      	asrs	r2, r1
 8008a06:	07d6      	lsls	r6, r2, #31
 8008a08:	d427      	bmi.n	8008a5a <__sflush_r+0xb2>
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	6062      	str	r2, [r4, #4]
 8008a0e:	04d9      	lsls	r1, r3, #19
 8008a10:	6922      	ldr	r2, [r4, #16]
 8008a12:	6022      	str	r2, [r4, #0]
 8008a14:	d504      	bpl.n	8008a20 <__sflush_r+0x78>
 8008a16:	1c42      	adds	r2, r0, #1
 8008a18:	d101      	bne.n	8008a1e <__sflush_r+0x76>
 8008a1a:	682b      	ldr	r3, [r5, #0]
 8008a1c:	b903      	cbnz	r3, 8008a20 <__sflush_r+0x78>
 8008a1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a22:	602f      	str	r7, [r5, #0]
 8008a24:	b1b9      	cbz	r1, 8008a56 <__sflush_r+0xae>
 8008a26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a2a:	4299      	cmp	r1, r3
 8008a2c:	d002      	beq.n	8008a34 <__sflush_r+0x8c>
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f7ff fa96 	bl	8007f60 <_free_r>
 8008a34:	2300      	movs	r3, #0
 8008a36:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a38:	e00d      	b.n	8008a56 <__sflush_r+0xae>
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	47b0      	blx	r6
 8008a40:	4602      	mov	r2, r0
 8008a42:	1c50      	adds	r0, r2, #1
 8008a44:	d1c9      	bne.n	80089da <__sflush_r+0x32>
 8008a46:	682b      	ldr	r3, [r5, #0]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d0c6      	beq.n	80089da <__sflush_r+0x32>
 8008a4c:	2b1d      	cmp	r3, #29
 8008a4e:	d001      	beq.n	8008a54 <__sflush_r+0xac>
 8008a50:	2b16      	cmp	r3, #22
 8008a52:	d11e      	bne.n	8008a92 <__sflush_r+0xea>
 8008a54:	602f      	str	r7, [r5, #0]
 8008a56:	2000      	movs	r0, #0
 8008a58:	e022      	b.n	8008aa0 <__sflush_r+0xf8>
 8008a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a5e:	b21b      	sxth	r3, r3
 8008a60:	e01b      	b.n	8008a9a <__sflush_r+0xf2>
 8008a62:	690f      	ldr	r7, [r1, #16]
 8008a64:	2f00      	cmp	r7, #0
 8008a66:	d0f6      	beq.n	8008a56 <__sflush_r+0xae>
 8008a68:	0793      	lsls	r3, r2, #30
 8008a6a:	680e      	ldr	r6, [r1, #0]
 8008a6c:	bf08      	it	eq
 8008a6e:	694b      	ldreq	r3, [r1, #20]
 8008a70:	600f      	str	r7, [r1, #0]
 8008a72:	bf18      	it	ne
 8008a74:	2300      	movne	r3, #0
 8008a76:	eba6 0807 	sub.w	r8, r6, r7
 8008a7a:	608b      	str	r3, [r1, #8]
 8008a7c:	f1b8 0f00 	cmp.w	r8, #0
 8008a80:	dde9      	ble.n	8008a56 <__sflush_r+0xae>
 8008a82:	6a21      	ldr	r1, [r4, #32]
 8008a84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a86:	4643      	mov	r3, r8
 8008a88:	463a      	mov	r2, r7
 8008a8a:	4628      	mov	r0, r5
 8008a8c:	47b0      	blx	r6
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	dc08      	bgt.n	8008aa4 <__sflush_r+0xfc>
 8008a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a9a:	81a3      	strh	r3, [r4, #12]
 8008a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aa4:	4407      	add	r7, r0
 8008aa6:	eba8 0800 	sub.w	r8, r8, r0
 8008aaa:	e7e7      	b.n	8008a7c <__sflush_r+0xd4>
 8008aac:	dfbffffe 	.word	0xdfbffffe

08008ab0 <_fflush_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	690b      	ldr	r3, [r1, #16]
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	b913      	cbnz	r3, 8008ac0 <_fflush_r+0x10>
 8008aba:	2500      	movs	r5, #0
 8008abc:	4628      	mov	r0, r5
 8008abe:	bd38      	pop	{r3, r4, r5, pc}
 8008ac0:	b118      	cbz	r0, 8008aca <_fflush_r+0x1a>
 8008ac2:	6a03      	ldr	r3, [r0, #32]
 8008ac4:	b90b      	cbnz	r3, 8008aca <_fflush_r+0x1a>
 8008ac6:	f7fe fad5 	bl	8007074 <__sinit>
 8008aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0f3      	beq.n	8008aba <_fflush_r+0xa>
 8008ad2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ad4:	07d0      	lsls	r0, r2, #31
 8008ad6:	d404      	bmi.n	8008ae2 <_fflush_r+0x32>
 8008ad8:	0599      	lsls	r1, r3, #22
 8008ada:	d402      	bmi.n	8008ae2 <_fflush_r+0x32>
 8008adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ade:	f7fe fbf0 	bl	80072c2 <__retarget_lock_acquire_recursive>
 8008ae2:	4628      	mov	r0, r5
 8008ae4:	4621      	mov	r1, r4
 8008ae6:	f7ff ff5f 	bl	80089a8 <__sflush_r>
 8008aea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008aec:	07da      	lsls	r2, r3, #31
 8008aee:	4605      	mov	r5, r0
 8008af0:	d4e4      	bmi.n	8008abc <_fflush_r+0xc>
 8008af2:	89a3      	ldrh	r3, [r4, #12]
 8008af4:	059b      	lsls	r3, r3, #22
 8008af6:	d4e1      	bmi.n	8008abc <_fflush_r+0xc>
 8008af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008afa:	f7fe fbe3 	bl	80072c4 <__retarget_lock_release_recursive>
 8008afe:	e7dd      	b.n	8008abc <_fflush_r+0xc>

08008b00 <memmove>:
 8008b00:	4288      	cmp	r0, r1
 8008b02:	b510      	push	{r4, lr}
 8008b04:	eb01 0402 	add.w	r4, r1, r2
 8008b08:	d902      	bls.n	8008b10 <memmove+0x10>
 8008b0a:	4284      	cmp	r4, r0
 8008b0c:	4623      	mov	r3, r4
 8008b0e:	d807      	bhi.n	8008b20 <memmove+0x20>
 8008b10:	1e43      	subs	r3, r0, #1
 8008b12:	42a1      	cmp	r1, r4
 8008b14:	d008      	beq.n	8008b28 <memmove+0x28>
 8008b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b1e:	e7f8      	b.n	8008b12 <memmove+0x12>
 8008b20:	4402      	add	r2, r0
 8008b22:	4601      	mov	r1, r0
 8008b24:	428a      	cmp	r2, r1
 8008b26:	d100      	bne.n	8008b2a <memmove+0x2a>
 8008b28:	bd10      	pop	{r4, pc}
 8008b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b32:	e7f7      	b.n	8008b24 <memmove+0x24>

08008b34 <memcpy>:
 8008b34:	440a      	add	r2, r1
 8008b36:	4291      	cmp	r1, r2
 8008b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b3c:	d100      	bne.n	8008b40 <memcpy+0xc>
 8008b3e:	4770      	bx	lr
 8008b40:	b510      	push	{r4, lr}
 8008b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b4a:	4291      	cmp	r1, r2
 8008b4c:	d1f9      	bne.n	8008b42 <memcpy+0xe>
 8008b4e:	bd10      	pop	{r4, pc}

08008b50 <__assert_func>:
 8008b50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b52:	4614      	mov	r4, r2
 8008b54:	461a      	mov	r2, r3
 8008b56:	4b09      	ldr	r3, [pc, #36]	@ (8008b7c <__assert_func+0x2c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4605      	mov	r5, r0
 8008b5c:	68d8      	ldr	r0, [r3, #12]
 8008b5e:	b954      	cbnz	r4, 8008b76 <__assert_func+0x26>
 8008b60:	4b07      	ldr	r3, [pc, #28]	@ (8008b80 <__assert_func+0x30>)
 8008b62:	461c      	mov	r4, r3
 8008b64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b68:	9100      	str	r1, [sp, #0]
 8008b6a:	462b      	mov	r3, r5
 8008b6c:	4905      	ldr	r1, [pc, #20]	@ (8008b84 <__assert_func+0x34>)
 8008b6e:	f000 f86f 	bl	8008c50 <fiprintf>
 8008b72:	f000 f87f 	bl	8008c74 <abort>
 8008b76:	4b04      	ldr	r3, [pc, #16]	@ (8008b88 <__assert_func+0x38>)
 8008b78:	e7f4      	b.n	8008b64 <__assert_func+0x14>
 8008b7a:	bf00      	nop
 8008b7c:	20000018 	.word	0x20000018
 8008b80:	08009fce 	.word	0x08009fce
 8008b84:	08009fa0 	.word	0x08009fa0
 8008b88:	08009f93 	.word	0x08009f93

08008b8c <_calloc_r>:
 8008b8c:	b570      	push	{r4, r5, r6, lr}
 8008b8e:	fba1 5402 	umull	r5, r4, r1, r2
 8008b92:	b93c      	cbnz	r4, 8008ba4 <_calloc_r+0x18>
 8008b94:	4629      	mov	r1, r5
 8008b96:	f7fd fcfd 	bl	8006594 <_malloc_r>
 8008b9a:	4606      	mov	r6, r0
 8008b9c:	b928      	cbnz	r0, 8008baa <_calloc_r+0x1e>
 8008b9e:	2600      	movs	r6, #0
 8008ba0:	4630      	mov	r0, r6
 8008ba2:	bd70      	pop	{r4, r5, r6, pc}
 8008ba4:	220c      	movs	r2, #12
 8008ba6:	6002      	str	r2, [r0, #0]
 8008ba8:	e7f9      	b.n	8008b9e <_calloc_r+0x12>
 8008baa:	462a      	mov	r2, r5
 8008bac:	4621      	mov	r1, r4
 8008bae:	f7fe fafa 	bl	80071a6 <memset>
 8008bb2:	e7f5      	b.n	8008ba0 <_calloc_r+0x14>

08008bb4 <__ascii_mbtowc>:
 8008bb4:	b082      	sub	sp, #8
 8008bb6:	b901      	cbnz	r1, 8008bba <__ascii_mbtowc+0x6>
 8008bb8:	a901      	add	r1, sp, #4
 8008bba:	b142      	cbz	r2, 8008bce <__ascii_mbtowc+0x1a>
 8008bbc:	b14b      	cbz	r3, 8008bd2 <__ascii_mbtowc+0x1e>
 8008bbe:	7813      	ldrb	r3, [r2, #0]
 8008bc0:	600b      	str	r3, [r1, #0]
 8008bc2:	7812      	ldrb	r2, [r2, #0]
 8008bc4:	1e10      	subs	r0, r2, #0
 8008bc6:	bf18      	it	ne
 8008bc8:	2001      	movne	r0, #1
 8008bca:	b002      	add	sp, #8
 8008bcc:	4770      	bx	lr
 8008bce:	4610      	mov	r0, r2
 8008bd0:	e7fb      	b.n	8008bca <__ascii_mbtowc+0x16>
 8008bd2:	f06f 0001 	mvn.w	r0, #1
 8008bd6:	e7f8      	b.n	8008bca <__ascii_mbtowc+0x16>

08008bd8 <_realloc_r>:
 8008bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bdc:	4680      	mov	r8, r0
 8008bde:	4615      	mov	r5, r2
 8008be0:	460c      	mov	r4, r1
 8008be2:	b921      	cbnz	r1, 8008bee <_realloc_r+0x16>
 8008be4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008be8:	4611      	mov	r1, r2
 8008bea:	f7fd bcd3 	b.w	8006594 <_malloc_r>
 8008bee:	b92a      	cbnz	r2, 8008bfc <_realloc_r+0x24>
 8008bf0:	f7ff f9b6 	bl	8007f60 <_free_r>
 8008bf4:	2400      	movs	r4, #0
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bfc:	f000 f841 	bl	8008c82 <_malloc_usable_size_r>
 8008c00:	4285      	cmp	r5, r0
 8008c02:	4606      	mov	r6, r0
 8008c04:	d802      	bhi.n	8008c0c <_realloc_r+0x34>
 8008c06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c0a:	d8f4      	bhi.n	8008bf6 <_realloc_r+0x1e>
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	4640      	mov	r0, r8
 8008c10:	f7fd fcc0 	bl	8006594 <_malloc_r>
 8008c14:	4607      	mov	r7, r0
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d0ec      	beq.n	8008bf4 <_realloc_r+0x1c>
 8008c1a:	42b5      	cmp	r5, r6
 8008c1c:	462a      	mov	r2, r5
 8008c1e:	4621      	mov	r1, r4
 8008c20:	bf28      	it	cs
 8008c22:	4632      	movcs	r2, r6
 8008c24:	f7ff ff86 	bl	8008b34 <memcpy>
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4640      	mov	r0, r8
 8008c2c:	f7ff f998 	bl	8007f60 <_free_r>
 8008c30:	463c      	mov	r4, r7
 8008c32:	e7e0      	b.n	8008bf6 <_realloc_r+0x1e>

08008c34 <__ascii_wctomb>:
 8008c34:	4603      	mov	r3, r0
 8008c36:	4608      	mov	r0, r1
 8008c38:	b141      	cbz	r1, 8008c4c <__ascii_wctomb+0x18>
 8008c3a:	2aff      	cmp	r2, #255	@ 0xff
 8008c3c:	d904      	bls.n	8008c48 <__ascii_wctomb+0x14>
 8008c3e:	228a      	movs	r2, #138	@ 0x8a
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	f04f 30ff 	mov.w	r0, #4294967295
 8008c46:	4770      	bx	lr
 8008c48:	700a      	strb	r2, [r1, #0]
 8008c4a:	2001      	movs	r0, #1
 8008c4c:	4770      	bx	lr
	...

08008c50 <fiprintf>:
 8008c50:	b40e      	push	{r1, r2, r3}
 8008c52:	b503      	push	{r0, r1, lr}
 8008c54:	4601      	mov	r1, r0
 8008c56:	ab03      	add	r3, sp, #12
 8008c58:	4805      	ldr	r0, [pc, #20]	@ (8008c70 <fiprintf+0x20>)
 8008c5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c5e:	6800      	ldr	r0, [r0, #0]
 8008c60:	9301      	str	r3, [sp, #4]
 8008c62:	f000 f83f 	bl	8008ce4 <_vfiprintf_r>
 8008c66:	b002      	add	sp, #8
 8008c68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c6c:	b003      	add	sp, #12
 8008c6e:	4770      	bx	lr
 8008c70:	20000018 	.word	0x20000018

08008c74 <abort>:
 8008c74:	b508      	push	{r3, lr}
 8008c76:	2006      	movs	r0, #6
 8008c78:	f000 fa08 	bl	800908c <raise>
 8008c7c:	2001      	movs	r0, #1
 8008c7e:	f7f9 fedd 	bl	8002a3c <_exit>

08008c82 <_malloc_usable_size_r>:
 8008c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c86:	1f18      	subs	r0, r3, #4
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	bfbc      	itt	lt
 8008c8c:	580b      	ldrlt	r3, [r1, r0]
 8008c8e:	18c0      	addlt	r0, r0, r3
 8008c90:	4770      	bx	lr

08008c92 <__sfputc_r>:
 8008c92:	6893      	ldr	r3, [r2, #8]
 8008c94:	3b01      	subs	r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	b410      	push	{r4}
 8008c9a:	6093      	str	r3, [r2, #8]
 8008c9c:	da08      	bge.n	8008cb0 <__sfputc_r+0x1e>
 8008c9e:	6994      	ldr	r4, [r2, #24]
 8008ca0:	42a3      	cmp	r3, r4
 8008ca2:	db01      	blt.n	8008ca8 <__sfputc_r+0x16>
 8008ca4:	290a      	cmp	r1, #10
 8008ca6:	d103      	bne.n	8008cb0 <__sfputc_r+0x1e>
 8008ca8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cac:	f000 b932 	b.w	8008f14 <__swbuf_r>
 8008cb0:	6813      	ldr	r3, [r2, #0]
 8008cb2:	1c58      	adds	r0, r3, #1
 8008cb4:	6010      	str	r0, [r2, #0]
 8008cb6:	7019      	strb	r1, [r3, #0]
 8008cb8:	4608      	mov	r0, r1
 8008cba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <__sfputs_r>:
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc2:	4606      	mov	r6, r0
 8008cc4:	460f      	mov	r7, r1
 8008cc6:	4614      	mov	r4, r2
 8008cc8:	18d5      	adds	r5, r2, r3
 8008cca:	42ac      	cmp	r4, r5
 8008ccc:	d101      	bne.n	8008cd2 <__sfputs_r+0x12>
 8008cce:	2000      	movs	r0, #0
 8008cd0:	e007      	b.n	8008ce2 <__sfputs_r+0x22>
 8008cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cd6:	463a      	mov	r2, r7
 8008cd8:	4630      	mov	r0, r6
 8008cda:	f7ff ffda 	bl	8008c92 <__sfputc_r>
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	d1f3      	bne.n	8008cca <__sfputs_r+0xa>
 8008ce2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ce4 <_vfiprintf_r>:
 8008ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	460d      	mov	r5, r1
 8008cea:	b09d      	sub	sp, #116	@ 0x74
 8008cec:	4614      	mov	r4, r2
 8008cee:	4698      	mov	r8, r3
 8008cf0:	4606      	mov	r6, r0
 8008cf2:	b118      	cbz	r0, 8008cfc <_vfiprintf_r+0x18>
 8008cf4:	6a03      	ldr	r3, [r0, #32]
 8008cf6:	b90b      	cbnz	r3, 8008cfc <_vfiprintf_r+0x18>
 8008cf8:	f7fe f9bc 	bl	8007074 <__sinit>
 8008cfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cfe:	07d9      	lsls	r1, r3, #31
 8008d00:	d405      	bmi.n	8008d0e <_vfiprintf_r+0x2a>
 8008d02:	89ab      	ldrh	r3, [r5, #12]
 8008d04:	059a      	lsls	r2, r3, #22
 8008d06:	d402      	bmi.n	8008d0e <_vfiprintf_r+0x2a>
 8008d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d0a:	f7fe fada 	bl	80072c2 <__retarget_lock_acquire_recursive>
 8008d0e:	89ab      	ldrh	r3, [r5, #12]
 8008d10:	071b      	lsls	r3, r3, #28
 8008d12:	d501      	bpl.n	8008d18 <_vfiprintf_r+0x34>
 8008d14:	692b      	ldr	r3, [r5, #16]
 8008d16:	b99b      	cbnz	r3, 8008d40 <_vfiprintf_r+0x5c>
 8008d18:	4629      	mov	r1, r5
 8008d1a:	4630      	mov	r0, r6
 8008d1c:	f000 f938 	bl	8008f90 <__swsetup_r>
 8008d20:	b170      	cbz	r0, 8008d40 <_vfiprintf_r+0x5c>
 8008d22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d24:	07dc      	lsls	r4, r3, #31
 8008d26:	d504      	bpl.n	8008d32 <_vfiprintf_r+0x4e>
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2c:	b01d      	add	sp, #116	@ 0x74
 8008d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d32:	89ab      	ldrh	r3, [r5, #12]
 8008d34:	0598      	lsls	r0, r3, #22
 8008d36:	d4f7      	bmi.n	8008d28 <_vfiprintf_r+0x44>
 8008d38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d3a:	f7fe fac3 	bl	80072c4 <__retarget_lock_release_recursive>
 8008d3e:	e7f3      	b.n	8008d28 <_vfiprintf_r+0x44>
 8008d40:	2300      	movs	r3, #0
 8008d42:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d44:	2320      	movs	r3, #32
 8008d46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d4e:	2330      	movs	r3, #48	@ 0x30
 8008d50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008f00 <_vfiprintf_r+0x21c>
 8008d54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d58:	f04f 0901 	mov.w	r9, #1
 8008d5c:	4623      	mov	r3, r4
 8008d5e:	469a      	mov	sl, r3
 8008d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d64:	b10a      	cbz	r2, 8008d6a <_vfiprintf_r+0x86>
 8008d66:	2a25      	cmp	r2, #37	@ 0x25
 8008d68:	d1f9      	bne.n	8008d5e <_vfiprintf_r+0x7a>
 8008d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8008d6e:	d00b      	beq.n	8008d88 <_vfiprintf_r+0xa4>
 8008d70:	465b      	mov	r3, fp
 8008d72:	4622      	mov	r2, r4
 8008d74:	4629      	mov	r1, r5
 8008d76:	4630      	mov	r0, r6
 8008d78:	f7ff ffa2 	bl	8008cc0 <__sfputs_r>
 8008d7c:	3001      	adds	r0, #1
 8008d7e:	f000 80a7 	beq.w	8008ed0 <_vfiprintf_r+0x1ec>
 8008d82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d84:	445a      	add	r2, fp
 8008d86:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d88:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 809f 	beq.w	8008ed0 <_vfiprintf_r+0x1ec>
 8008d92:	2300      	movs	r3, #0
 8008d94:	f04f 32ff 	mov.w	r2, #4294967295
 8008d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d9c:	f10a 0a01 	add.w	sl, sl, #1
 8008da0:	9304      	str	r3, [sp, #16]
 8008da2:	9307      	str	r3, [sp, #28]
 8008da4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008da8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008daa:	4654      	mov	r4, sl
 8008dac:	2205      	movs	r2, #5
 8008dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008db2:	4853      	ldr	r0, [pc, #332]	@ (8008f00 <_vfiprintf_r+0x21c>)
 8008db4:	f7f7 fa0c 	bl	80001d0 <memchr>
 8008db8:	9a04      	ldr	r2, [sp, #16]
 8008dba:	b9d8      	cbnz	r0, 8008df4 <_vfiprintf_r+0x110>
 8008dbc:	06d1      	lsls	r1, r2, #27
 8008dbe:	bf44      	itt	mi
 8008dc0:	2320      	movmi	r3, #32
 8008dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dc6:	0713      	lsls	r3, r2, #28
 8008dc8:	bf44      	itt	mi
 8008dca:	232b      	movmi	r3, #43	@ 0x2b
 8008dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8008dd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dd6:	d015      	beq.n	8008e04 <_vfiprintf_r+0x120>
 8008dd8:	9a07      	ldr	r2, [sp, #28]
 8008dda:	4654      	mov	r4, sl
 8008ddc:	2000      	movs	r0, #0
 8008dde:	f04f 0c0a 	mov.w	ip, #10
 8008de2:	4621      	mov	r1, r4
 8008de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008de8:	3b30      	subs	r3, #48	@ 0x30
 8008dea:	2b09      	cmp	r3, #9
 8008dec:	d94b      	bls.n	8008e86 <_vfiprintf_r+0x1a2>
 8008dee:	b1b0      	cbz	r0, 8008e1e <_vfiprintf_r+0x13a>
 8008df0:	9207      	str	r2, [sp, #28]
 8008df2:	e014      	b.n	8008e1e <_vfiprintf_r+0x13a>
 8008df4:	eba0 0308 	sub.w	r3, r0, r8
 8008df8:	fa09 f303 	lsl.w	r3, r9, r3
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	9304      	str	r3, [sp, #16]
 8008e00:	46a2      	mov	sl, r4
 8008e02:	e7d2      	b.n	8008daa <_vfiprintf_r+0xc6>
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	1d19      	adds	r1, r3, #4
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	9103      	str	r1, [sp, #12]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	bfbb      	ittet	lt
 8008e10:	425b      	neglt	r3, r3
 8008e12:	f042 0202 	orrlt.w	r2, r2, #2
 8008e16:	9307      	strge	r3, [sp, #28]
 8008e18:	9307      	strlt	r3, [sp, #28]
 8008e1a:	bfb8      	it	lt
 8008e1c:	9204      	strlt	r2, [sp, #16]
 8008e1e:	7823      	ldrb	r3, [r4, #0]
 8008e20:	2b2e      	cmp	r3, #46	@ 0x2e
 8008e22:	d10a      	bne.n	8008e3a <_vfiprintf_r+0x156>
 8008e24:	7863      	ldrb	r3, [r4, #1]
 8008e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e28:	d132      	bne.n	8008e90 <_vfiprintf_r+0x1ac>
 8008e2a:	9b03      	ldr	r3, [sp, #12]
 8008e2c:	1d1a      	adds	r2, r3, #4
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	9203      	str	r2, [sp, #12]
 8008e32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008e36:	3402      	adds	r4, #2
 8008e38:	9305      	str	r3, [sp, #20]
 8008e3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008f10 <_vfiprintf_r+0x22c>
 8008e3e:	7821      	ldrb	r1, [r4, #0]
 8008e40:	2203      	movs	r2, #3
 8008e42:	4650      	mov	r0, sl
 8008e44:	f7f7 f9c4 	bl	80001d0 <memchr>
 8008e48:	b138      	cbz	r0, 8008e5a <_vfiprintf_r+0x176>
 8008e4a:	9b04      	ldr	r3, [sp, #16]
 8008e4c:	eba0 000a 	sub.w	r0, r0, sl
 8008e50:	2240      	movs	r2, #64	@ 0x40
 8008e52:	4082      	lsls	r2, r0
 8008e54:	4313      	orrs	r3, r2
 8008e56:	3401      	adds	r4, #1
 8008e58:	9304      	str	r3, [sp, #16]
 8008e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e5e:	4829      	ldr	r0, [pc, #164]	@ (8008f04 <_vfiprintf_r+0x220>)
 8008e60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e64:	2206      	movs	r2, #6
 8008e66:	f7f7 f9b3 	bl	80001d0 <memchr>
 8008e6a:	2800      	cmp	r0, #0
 8008e6c:	d03f      	beq.n	8008eee <_vfiprintf_r+0x20a>
 8008e6e:	4b26      	ldr	r3, [pc, #152]	@ (8008f08 <_vfiprintf_r+0x224>)
 8008e70:	bb1b      	cbnz	r3, 8008eba <_vfiprintf_r+0x1d6>
 8008e72:	9b03      	ldr	r3, [sp, #12]
 8008e74:	3307      	adds	r3, #7
 8008e76:	f023 0307 	bic.w	r3, r3, #7
 8008e7a:	3308      	adds	r3, #8
 8008e7c:	9303      	str	r3, [sp, #12]
 8008e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e80:	443b      	add	r3, r7
 8008e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e84:	e76a      	b.n	8008d5c <_vfiprintf_r+0x78>
 8008e86:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e8a:	460c      	mov	r4, r1
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	e7a8      	b.n	8008de2 <_vfiprintf_r+0xfe>
 8008e90:	2300      	movs	r3, #0
 8008e92:	3401      	adds	r4, #1
 8008e94:	9305      	str	r3, [sp, #20]
 8008e96:	4619      	mov	r1, r3
 8008e98:	f04f 0c0a 	mov.w	ip, #10
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ea2:	3a30      	subs	r2, #48	@ 0x30
 8008ea4:	2a09      	cmp	r2, #9
 8008ea6:	d903      	bls.n	8008eb0 <_vfiprintf_r+0x1cc>
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d0c6      	beq.n	8008e3a <_vfiprintf_r+0x156>
 8008eac:	9105      	str	r1, [sp, #20]
 8008eae:	e7c4      	b.n	8008e3a <_vfiprintf_r+0x156>
 8008eb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e7f0      	b.n	8008e9c <_vfiprintf_r+0x1b8>
 8008eba:	ab03      	add	r3, sp, #12
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	462a      	mov	r2, r5
 8008ec0:	4b12      	ldr	r3, [pc, #72]	@ (8008f0c <_vfiprintf_r+0x228>)
 8008ec2:	a904      	add	r1, sp, #16
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	f7fd fc91 	bl	80067ec <_printf_float>
 8008eca:	4607      	mov	r7, r0
 8008ecc:	1c78      	adds	r0, r7, #1
 8008ece:	d1d6      	bne.n	8008e7e <_vfiprintf_r+0x19a>
 8008ed0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ed2:	07d9      	lsls	r1, r3, #31
 8008ed4:	d405      	bmi.n	8008ee2 <_vfiprintf_r+0x1fe>
 8008ed6:	89ab      	ldrh	r3, [r5, #12]
 8008ed8:	059a      	lsls	r2, r3, #22
 8008eda:	d402      	bmi.n	8008ee2 <_vfiprintf_r+0x1fe>
 8008edc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ede:	f7fe f9f1 	bl	80072c4 <__retarget_lock_release_recursive>
 8008ee2:	89ab      	ldrh	r3, [r5, #12]
 8008ee4:	065b      	lsls	r3, r3, #25
 8008ee6:	f53f af1f 	bmi.w	8008d28 <_vfiprintf_r+0x44>
 8008eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008eec:	e71e      	b.n	8008d2c <_vfiprintf_r+0x48>
 8008eee:	ab03      	add	r3, sp, #12
 8008ef0:	9300      	str	r3, [sp, #0]
 8008ef2:	462a      	mov	r2, r5
 8008ef4:	4b05      	ldr	r3, [pc, #20]	@ (8008f0c <_vfiprintf_r+0x228>)
 8008ef6:	a904      	add	r1, sp, #16
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f7fd ff0f 	bl	8006d1c <_printf_i>
 8008efe:	e7e4      	b.n	8008eca <_vfiprintf_r+0x1e6>
 8008f00:	08009f78 	.word	0x08009f78
 8008f04:	08009f82 	.word	0x08009f82
 8008f08:	080067ed 	.word	0x080067ed
 8008f0c:	08008cc1 	.word	0x08008cc1
 8008f10:	08009f7e 	.word	0x08009f7e

08008f14 <__swbuf_r>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	460e      	mov	r6, r1
 8008f18:	4614      	mov	r4, r2
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	b118      	cbz	r0, 8008f26 <__swbuf_r+0x12>
 8008f1e:	6a03      	ldr	r3, [r0, #32]
 8008f20:	b90b      	cbnz	r3, 8008f26 <__swbuf_r+0x12>
 8008f22:	f7fe f8a7 	bl	8007074 <__sinit>
 8008f26:	69a3      	ldr	r3, [r4, #24]
 8008f28:	60a3      	str	r3, [r4, #8]
 8008f2a:	89a3      	ldrh	r3, [r4, #12]
 8008f2c:	071a      	lsls	r2, r3, #28
 8008f2e:	d501      	bpl.n	8008f34 <__swbuf_r+0x20>
 8008f30:	6923      	ldr	r3, [r4, #16]
 8008f32:	b943      	cbnz	r3, 8008f46 <__swbuf_r+0x32>
 8008f34:	4621      	mov	r1, r4
 8008f36:	4628      	mov	r0, r5
 8008f38:	f000 f82a 	bl	8008f90 <__swsetup_r>
 8008f3c:	b118      	cbz	r0, 8008f46 <__swbuf_r+0x32>
 8008f3e:	f04f 37ff 	mov.w	r7, #4294967295
 8008f42:	4638      	mov	r0, r7
 8008f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f46:	6823      	ldr	r3, [r4, #0]
 8008f48:	6922      	ldr	r2, [r4, #16]
 8008f4a:	1a98      	subs	r0, r3, r2
 8008f4c:	6963      	ldr	r3, [r4, #20]
 8008f4e:	b2f6      	uxtb	r6, r6
 8008f50:	4283      	cmp	r3, r0
 8008f52:	4637      	mov	r7, r6
 8008f54:	dc05      	bgt.n	8008f62 <__swbuf_r+0x4e>
 8008f56:	4621      	mov	r1, r4
 8008f58:	4628      	mov	r0, r5
 8008f5a:	f7ff fda9 	bl	8008ab0 <_fflush_r>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d1ed      	bne.n	8008f3e <__swbuf_r+0x2a>
 8008f62:	68a3      	ldr	r3, [r4, #8]
 8008f64:	3b01      	subs	r3, #1
 8008f66:	60a3      	str	r3, [r4, #8]
 8008f68:	6823      	ldr	r3, [r4, #0]
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	6022      	str	r2, [r4, #0]
 8008f6e:	701e      	strb	r6, [r3, #0]
 8008f70:	6962      	ldr	r2, [r4, #20]
 8008f72:	1c43      	adds	r3, r0, #1
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d004      	beq.n	8008f82 <__swbuf_r+0x6e>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	07db      	lsls	r3, r3, #31
 8008f7c:	d5e1      	bpl.n	8008f42 <__swbuf_r+0x2e>
 8008f7e:	2e0a      	cmp	r6, #10
 8008f80:	d1df      	bne.n	8008f42 <__swbuf_r+0x2e>
 8008f82:	4621      	mov	r1, r4
 8008f84:	4628      	mov	r0, r5
 8008f86:	f7ff fd93 	bl	8008ab0 <_fflush_r>
 8008f8a:	2800      	cmp	r0, #0
 8008f8c:	d0d9      	beq.n	8008f42 <__swbuf_r+0x2e>
 8008f8e:	e7d6      	b.n	8008f3e <__swbuf_r+0x2a>

08008f90 <__swsetup_r>:
 8008f90:	b538      	push	{r3, r4, r5, lr}
 8008f92:	4b29      	ldr	r3, [pc, #164]	@ (8009038 <__swsetup_r+0xa8>)
 8008f94:	4605      	mov	r5, r0
 8008f96:	6818      	ldr	r0, [r3, #0]
 8008f98:	460c      	mov	r4, r1
 8008f9a:	b118      	cbz	r0, 8008fa4 <__swsetup_r+0x14>
 8008f9c:	6a03      	ldr	r3, [r0, #32]
 8008f9e:	b90b      	cbnz	r3, 8008fa4 <__swsetup_r+0x14>
 8008fa0:	f7fe f868 	bl	8007074 <__sinit>
 8008fa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fa8:	0719      	lsls	r1, r3, #28
 8008faa:	d422      	bmi.n	8008ff2 <__swsetup_r+0x62>
 8008fac:	06da      	lsls	r2, r3, #27
 8008fae:	d407      	bmi.n	8008fc0 <__swsetup_r+0x30>
 8008fb0:	2209      	movs	r2, #9
 8008fb2:	602a      	str	r2, [r5, #0]
 8008fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbe:	e033      	b.n	8009028 <__swsetup_r+0x98>
 8008fc0:	0758      	lsls	r0, r3, #29
 8008fc2:	d512      	bpl.n	8008fea <__swsetup_r+0x5a>
 8008fc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fc6:	b141      	cbz	r1, 8008fda <__swsetup_r+0x4a>
 8008fc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fcc:	4299      	cmp	r1, r3
 8008fce:	d002      	beq.n	8008fd6 <__swsetup_r+0x46>
 8008fd0:	4628      	mov	r0, r5
 8008fd2:	f7fe ffc5 	bl	8007f60 <_free_r>
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008fe0:	81a3      	strh	r3, [r4, #12]
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	6063      	str	r3, [r4, #4]
 8008fe6:	6923      	ldr	r3, [r4, #16]
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	89a3      	ldrh	r3, [r4, #12]
 8008fec:	f043 0308 	orr.w	r3, r3, #8
 8008ff0:	81a3      	strh	r3, [r4, #12]
 8008ff2:	6923      	ldr	r3, [r4, #16]
 8008ff4:	b94b      	cbnz	r3, 800900a <__swsetup_r+0x7a>
 8008ff6:	89a3      	ldrh	r3, [r4, #12]
 8008ff8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009000:	d003      	beq.n	800900a <__swsetup_r+0x7a>
 8009002:	4621      	mov	r1, r4
 8009004:	4628      	mov	r0, r5
 8009006:	f000 f883 	bl	8009110 <__smakebuf_r>
 800900a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800900e:	f013 0201 	ands.w	r2, r3, #1
 8009012:	d00a      	beq.n	800902a <__swsetup_r+0x9a>
 8009014:	2200      	movs	r2, #0
 8009016:	60a2      	str	r2, [r4, #8]
 8009018:	6962      	ldr	r2, [r4, #20]
 800901a:	4252      	negs	r2, r2
 800901c:	61a2      	str	r2, [r4, #24]
 800901e:	6922      	ldr	r2, [r4, #16]
 8009020:	b942      	cbnz	r2, 8009034 <__swsetup_r+0xa4>
 8009022:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009026:	d1c5      	bne.n	8008fb4 <__swsetup_r+0x24>
 8009028:	bd38      	pop	{r3, r4, r5, pc}
 800902a:	0799      	lsls	r1, r3, #30
 800902c:	bf58      	it	pl
 800902e:	6962      	ldrpl	r2, [r4, #20]
 8009030:	60a2      	str	r2, [r4, #8]
 8009032:	e7f4      	b.n	800901e <__swsetup_r+0x8e>
 8009034:	2000      	movs	r0, #0
 8009036:	e7f7      	b.n	8009028 <__swsetup_r+0x98>
 8009038:	20000018 	.word	0x20000018

0800903c <_raise_r>:
 800903c:	291f      	cmp	r1, #31
 800903e:	b538      	push	{r3, r4, r5, lr}
 8009040:	4605      	mov	r5, r0
 8009042:	460c      	mov	r4, r1
 8009044:	d904      	bls.n	8009050 <_raise_r+0x14>
 8009046:	2316      	movs	r3, #22
 8009048:	6003      	str	r3, [r0, #0]
 800904a:	f04f 30ff 	mov.w	r0, #4294967295
 800904e:	bd38      	pop	{r3, r4, r5, pc}
 8009050:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009052:	b112      	cbz	r2, 800905a <_raise_r+0x1e>
 8009054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009058:	b94b      	cbnz	r3, 800906e <_raise_r+0x32>
 800905a:	4628      	mov	r0, r5
 800905c:	f000 f830 	bl	80090c0 <_getpid_r>
 8009060:	4622      	mov	r2, r4
 8009062:	4601      	mov	r1, r0
 8009064:	4628      	mov	r0, r5
 8009066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800906a:	f000 b817 	b.w	800909c <_kill_r>
 800906e:	2b01      	cmp	r3, #1
 8009070:	d00a      	beq.n	8009088 <_raise_r+0x4c>
 8009072:	1c59      	adds	r1, r3, #1
 8009074:	d103      	bne.n	800907e <_raise_r+0x42>
 8009076:	2316      	movs	r3, #22
 8009078:	6003      	str	r3, [r0, #0]
 800907a:	2001      	movs	r0, #1
 800907c:	e7e7      	b.n	800904e <_raise_r+0x12>
 800907e:	2100      	movs	r1, #0
 8009080:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009084:	4620      	mov	r0, r4
 8009086:	4798      	blx	r3
 8009088:	2000      	movs	r0, #0
 800908a:	e7e0      	b.n	800904e <_raise_r+0x12>

0800908c <raise>:
 800908c:	4b02      	ldr	r3, [pc, #8]	@ (8009098 <raise+0xc>)
 800908e:	4601      	mov	r1, r0
 8009090:	6818      	ldr	r0, [r3, #0]
 8009092:	f7ff bfd3 	b.w	800903c <_raise_r>
 8009096:	bf00      	nop
 8009098:	20000018 	.word	0x20000018

0800909c <_kill_r>:
 800909c:	b538      	push	{r3, r4, r5, lr}
 800909e:	4d07      	ldr	r5, [pc, #28]	@ (80090bc <_kill_r+0x20>)
 80090a0:	2300      	movs	r3, #0
 80090a2:	4604      	mov	r4, r0
 80090a4:	4608      	mov	r0, r1
 80090a6:	4611      	mov	r1, r2
 80090a8:	602b      	str	r3, [r5, #0]
 80090aa:	f7f9 fcb7 	bl	8002a1c <_kill>
 80090ae:	1c43      	adds	r3, r0, #1
 80090b0:	d102      	bne.n	80090b8 <_kill_r+0x1c>
 80090b2:	682b      	ldr	r3, [r5, #0]
 80090b4:	b103      	cbz	r3, 80090b8 <_kill_r+0x1c>
 80090b6:	6023      	str	r3, [r4, #0]
 80090b8:	bd38      	pop	{r3, r4, r5, pc}
 80090ba:	bf00      	nop
 80090bc:	2000097c 	.word	0x2000097c

080090c0 <_getpid_r>:
 80090c0:	f7f9 bca4 	b.w	8002a0c <_getpid>

080090c4 <__swhatbuf_r>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	460c      	mov	r4, r1
 80090c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090cc:	2900      	cmp	r1, #0
 80090ce:	b096      	sub	sp, #88	@ 0x58
 80090d0:	4615      	mov	r5, r2
 80090d2:	461e      	mov	r6, r3
 80090d4:	da0d      	bge.n	80090f2 <__swhatbuf_r+0x2e>
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090dc:	f04f 0100 	mov.w	r1, #0
 80090e0:	bf14      	ite	ne
 80090e2:	2340      	movne	r3, #64	@ 0x40
 80090e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090e8:	2000      	movs	r0, #0
 80090ea:	6031      	str	r1, [r6, #0]
 80090ec:	602b      	str	r3, [r5, #0]
 80090ee:	b016      	add	sp, #88	@ 0x58
 80090f0:	bd70      	pop	{r4, r5, r6, pc}
 80090f2:	466a      	mov	r2, sp
 80090f4:	f000 f848 	bl	8009188 <_fstat_r>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	dbec      	blt.n	80090d6 <__swhatbuf_r+0x12>
 80090fc:	9901      	ldr	r1, [sp, #4]
 80090fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009102:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009106:	4259      	negs	r1, r3
 8009108:	4159      	adcs	r1, r3
 800910a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800910e:	e7eb      	b.n	80090e8 <__swhatbuf_r+0x24>

08009110 <__smakebuf_r>:
 8009110:	898b      	ldrh	r3, [r1, #12]
 8009112:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009114:	079d      	lsls	r5, r3, #30
 8009116:	4606      	mov	r6, r0
 8009118:	460c      	mov	r4, r1
 800911a:	d507      	bpl.n	800912c <__smakebuf_r+0x1c>
 800911c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	6123      	str	r3, [r4, #16]
 8009124:	2301      	movs	r3, #1
 8009126:	6163      	str	r3, [r4, #20]
 8009128:	b003      	add	sp, #12
 800912a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800912c:	ab01      	add	r3, sp, #4
 800912e:	466a      	mov	r2, sp
 8009130:	f7ff ffc8 	bl	80090c4 <__swhatbuf_r>
 8009134:	9f00      	ldr	r7, [sp, #0]
 8009136:	4605      	mov	r5, r0
 8009138:	4639      	mov	r1, r7
 800913a:	4630      	mov	r0, r6
 800913c:	f7fd fa2a 	bl	8006594 <_malloc_r>
 8009140:	b948      	cbnz	r0, 8009156 <__smakebuf_r+0x46>
 8009142:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009146:	059a      	lsls	r2, r3, #22
 8009148:	d4ee      	bmi.n	8009128 <__smakebuf_r+0x18>
 800914a:	f023 0303 	bic.w	r3, r3, #3
 800914e:	f043 0302 	orr.w	r3, r3, #2
 8009152:	81a3      	strh	r3, [r4, #12]
 8009154:	e7e2      	b.n	800911c <__smakebuf_r+0xc>
 8009156:	89a3      	ldrh	r3, [r4, #12]
 8009158:	6020      	str	r0, [r4, #0]
 800915a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800915e:	81a3      	strh	r3, [r4, #12]
 8009160:	9b01      	ldr	r3, [sp, #4]
 8009162:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009166:	b15b      	cbz	r3, 8009180 <__smakebuf_r+0x70>
 8009168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800916c:	4630      	mov	r0, r6
 800916e:	f000 f81d 	bl	80091ac <_isatty_r>
 8009172:	b128      	cbz	r0, 8009180 <__smakebuf_r+0x70>
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	f023 0303 	bic.w	r3, r3, #3
 800917a:	f043 0301 	orr.w	r3, r3, #1
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	431d      	orrs	r5, r3
 8009184:	81a5      	strh	r5, [r4, #12]
 8009186:	e7cf      	b.n	8009128 <__smakebuf_r+0x18>

08009188 <_fstat_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4d07      	ldr	r5, [pc, #28]	@ (80091a8 <_fstat_r+0x20>)
 800918c:	2300      	movs	r3, #0
 800918e:	4604      	mov	r4, r0
 8009190:	4608      	mov	r0, r1
 8009192:	4611      	mov	r1, r2
 8009194:	602b      	str	r3, [r5, #0]
 8009196:	f7f9 fca1 	bl	8002adc <_fstat>
 800919a:	1c43      	adds	r3, r0, #1
 800919c:	d102      	bne.n	80091a4 <_fstat_r+0x1c>
 800919e:	682b      	ldr	r3, [r5, #0]
 80091a0:	b103      	cbz	r3, 80091a4 <_fstat_r+0x1c>
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	bd38      	pop	{r3, r4, r5, pc}
 80091a6:	bf00      	nop
 80091a8:	2000097c 	.word	0x2000097c

080091ac <_isatty_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4d06      	ldr	r5, [pc, #24]	@ (80091c8 <_isatty_r+0x1c>)
 80091b0:	2300      	movs	r3, #0
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	602b      	str	r3, [r5, #0]
 80091b8:	f7f9 fca0 	bl	8002afc <_isatty>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d102      	bne.n	80091c6 <_isatty_r+0x1a>
 80091c0:	682b      	ldr	r3, [r5, #0]
 80091c2:	b103      	cbz	r3, 80091c6 <_isatty_r+0x1a>
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
 80091c8:	2000097c 	.word	0x2000097c

080091cc <_init>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	bf00      	nop
 80091d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d2:	bc08      	pop	{r3}
 80091d4:	469e      	mov	lr, r3
 80091d6:	4770      	bx	lr

080091d8 <_fini>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	bf00      	nop
 80091dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091de:	bc08      	pop	{r3}
 80091e0:	469e      	mov	lr, r3
 80091e2:	4770      	bx	lr
