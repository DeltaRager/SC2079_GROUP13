/*
 * helper.c
 *
 *  Created on: Sep 10, 2024
 *      Author: AD
 *
 *  Contain helper functions
 */

#include "helper.h"


/* OLED interaction */
bool is_USER_button_pressed() {
	return HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET;
}

void print_value(int x, int y, uint8_t* msg, int32_t val) {
	OLED_Clear();
	uint8_t* buf[100];
	sprintf(buf, msg, val);
	OLED_ShowString(x, y, buf);
	OLED_Refresh_Gram();
}


/* Sensors */




/* Kalman filter */
void kalman_init(kalman_t* kalman, float init_est, float est, float mea) {
	kalman->last_est = initial_est;
	kalman->s_est = s_est;
	kalman->s_mea = s_mea;
}

void kalman_update(kalman_t* kalman, float est, float mea) {
	// Kalman gain
	float gain = (kalman->est) / (kalman->est + kalman->mea);

	// Update estimate
	kalman->last_est += gain * (mea - est);
}

/* PID */
void pid_reset(pid_t* pid)  {
	pid->error_accumulate = 0;
	pid->error_old = 0;
}

void pid_init(pid_t* pid, float Kp, float Ki, float Kd) {
	pid_reset(pid);

	pid->Kp = Kp;
	pid->Ki = Ki;
	pid->Kd = Kd;
}

float pid_adjust(pid_t* pid, float error, float scale) {
	pid->error_accumulate += error;
	float error_rate = (error - pid->error_old);
	pid->error_old = error;

	return scale * (pid->Kp*error + pid->Ki*pid->error_accumulate + pid->Kd*error_rate);
}






