
MDP_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009260  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e48  080093f0  080093f0  0000a3f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a238  0800a238  0000c1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a238  0800a238  0000b238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a240  0800a240  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a240  0800a240  0000b240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a244  0800a244  0000b244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a248  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1dc  2**0
                  CONTENTS
 10 .bss          00000bfc  200001dc  200001dc  0000c1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000dd8  20000dd8  0000c1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013be5  00000000  00000000  0000c20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d67  00000000  00000000  0001fdf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001258  00000000  00000000  00022b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e69  00000000  00000000  00023db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ee1  00000000  00000000  00024c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016bb8  00000000  00000000  00048afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d270b  00000000  00000000  0005f6b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00131dbd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ea4  00000000  00000000  00131e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000cc  00000000  00000000  00137ca4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080093d8 	.word	0x080093d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080093d8 	.word	0x080093d8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <is_USER_button_pressed>:

#include "helper.h"


/*---------- OLED INTERACTION ----------*/
bool is_USER_button_pressed() {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET;
 8000f3c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f40:	4805      	ldr	r0, [pc, #20]	@ (8000f58 <is_USER_button_pressed+0x20>)
 8000f42:	f002 fc85 	bl	8003850 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	bf0c      	ite	eq
 8000f4c:	2301      	moveq	r3, #1
 8000f4e:	2300      	movne	r3, #0
 8000f50:	b2db      	uxtb	r3, r3
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40020c00 	.word	0x40020c00

08000f5c <print_OLED>:

void print_OLED(int x, int y, uint8_t* msg, bool var_exist, int32_t val) {
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b0e9      	sub	sp, #420	@ 0x1a4
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 8000f66:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 8000f6a:	6020      	str	r0, [r4, #0]
 8000f6c:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 8000f70:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 8000f74:	6001      	str	r1, [r0, #0]
 8000f76:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8000f7a:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8000f7e:	600a      	str	r2, [r1, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f86:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8000f8a:	701a      	strb	r2, [r3, #0]
	uint8_t* buf[100];

	if (var_exist) {
 8000f8c:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f90:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d00b      	beq.n	8000fb2 <print_OLED+0x56>
		sprintf(buf, msg, val);
 8000f9a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000f9e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000fa2:	f107 0010 	add.w	r0, r7, #16
 8000fa6:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8000faa:	6819      	ldr	r1, [r3, #0]
 8000fac:	f006 f8e6 	bl	800717c <siprintf>
 8000fb0:	e009      	b.n	8000fc6 <print_OLED+0x6a>
	} else {
		sprintf(buf, msg);
 8000fb2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000fb6:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8000fba:	f107 0210 	add.w	r2, r7, #16
 8000fbe:	6819      	ldr	r1, [r3, #0]
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	f006 f8db 	bl	800717c <siprintf>
	}

	OLED_ShowString(x, y, buf);
 8000fc6:	f107 0210 	add.w	r2, r7, #16
 8000fca:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000fce:	f5a3 71cc 	sub.w	r1, r3, #408	@ 0x198
 8000fd2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8000fd6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8000fda:	6809      	ldr	r1, [r1, #0]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	f001 fbc3 	bl	8002768 <OLED_ShowString>
	OLED_Refresh_Gram();
 8000fe2:	f001 fa97 	bl	8002514 <OLED_Refresh_Gram>
}
 8000fe6:	bf00      	nop
 8000fe8:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd90      	pop	{r4, r7, pc}

08000ff0 <HAL_TIM_IC_CaptureCallback>:
  delay_us(10);                                                        // wait for 10 us
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);   // pull the TRIG pin low
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim_ptr) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if (htim_ptr->Channel != HAL_TIM_ACTIVE_CHANNEL_4)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7f1b      	ldrb	r3, [r3, #28]
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d17c      	bne.n	80010fa <HAL_TIM_IC_CaptureCallback+0x10a>
    return;

  if (!is_first_captured) {                                   // If the first value is not captured
 8001000:	4b43      	ldr	r3, [pc, #268]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	f083 0301 	eor.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d01a      	beq.n	8001044 <HAL_TIM_IC_CaptureCallback+0x54>
    tc1 = HAL_TIM_ReadCapturedValue(htim_ptr, TIM_CHANNEL_4); // read the first value
 800100e:	210c      	movs	r1, #12
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f003 ffbb 	bl	8004f8c <HAL_TIM_ReadCapturedValue>
 8001016:	4603      	mov	r3, r0
 8001018:	4a3e      	ldr	r2, [pc, #248]	@ (8001114 <HAL_TIM_IC_CaptureCallback+0x124>)
 800101a:	6013      	str	r3, [r2, #0]
    is_first_captured = true;                                 // set the first captured as true
 800101c:	4b3c      	ldr	r3, [pc, #240]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0x120>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
    // Now change the polarity to falling edge
    __HAL_TIM_SET_CAPTUREPOLARITY(htim_ptr, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6a1a      	ldr	r2, [r3, #32]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 8001030:	621a      	str	r2, [r3, #32]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	6a1a      	ldr	r2, [r3, #32]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001040:	621a      	str	r2, [r3, #32]
 8001042:	e05b      	b.n	80010fc <HAL_TIM_IC_CaptureCallback+0x10c>
  } else if (is_first_captured) {                             // If the first is already captured
 8001044:	4b32      	ldr	r3, [pc, #200]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d057      	beq.n	80010fc <HAL_TIM_IC_CaptureCallback+0x10c>
    tc2 = HAL_TIM_ReadCapturedValue(htim_ptr, TIM_CHANNEL_4); // read second value
 800104c:	210c      	movs	r1, #12
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f003 ff9c 	bl	8004f8c <HAL_TIM_ReadCapturedValue>
 8001054:	4603      	mov	r3, r0
 8001056:	4a30      	ldr	r2, [pc, #192]	@ (8001118 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001058:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COUNTER(htim_ptr, 0);                       // reset the counter
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2200      	movs	r2, #0
 8001060:	625a      	str	r2, [r3, #36]	@ 0x24

    echo = (tc2 > tc1) ? (tc2 - tc1) : (64000 - tc1 + tc2);
 8001062:	4b2d      	ldr	r3, [pc, #180]	@ (8001118 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	4b2b      	ldr	r3, [pc, #172]	@ (8001114 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d905      	bls.n	800107a <HAL_TIM_IC_CaptureCallback+0x8a>
 800106e:	4b2a      	ldr	r3, [pc, #168]	@ (8001118 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b28      	ldr	r3, [pc, #160]	@ (8001114 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	e006      	b.n	8001088 <HAL_TIM_IC_CaptureCallback+0x98>
 800107a:	4b27      	ldr	r3, [pc, #156]	@ (8001118 <HAL_TIM_IC_CaptureCallback+0x128>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4b25      	ldr	r3, [pc, #148]	@ (8001114 <HAL_TIM_IC_CaptureCallback+0x124>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	f503 437a 	add.w	r3, r3, #64000	@ 0xfa00
 8001088:	4a24      	ldr	r2, [pc, #144]	@ (800111c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800108a:	6013      	str	r3, [r2, #0]
    dist = echo * 0.034/2;
 800108c:	4b23      	ldr	r3, [pc, #140]	@ (800111c <HAL_TIM_IC_CaptureCallback+0x12c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa37 	bl	8000504 <__aeabi_ui2d>
 8001096:	a31c      	add	r3, pc, #112	@ (adr r3, 8001108 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109c:	f7ff faac 	bl	80005f8 <__aeabi_dmul>
 80010a0:	4602      	mov	r2, r0
 80010a2:	460b      	mov	r3, r1
 80010a4:	4610      	mov	r0, r2
 80010a6:	4619      	mov	r1, r3
 80010a8:	f04f 0200 	mov.w	r2, #0
 80010ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010b0:	f7ff fbcc 	bl	800084c <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f7ff fd74 	bl	8000ba8 <__aeabi_d2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4a17      	ldr	r2, [pc, #92]	@ (8001120 <HAL_TIM_IC_CaptureCallback+0x130>)
 80010c4:	6013      	str	r3, [r2, #0]
    is_first_captured = false;                                // set it back to false
 80010c6:	4b12      	ldr	r3, [pc, #72]	@ (8001110 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]

    // Set polarity to rising edge
    __HAL_TIM_SET_CAPTUREPOLARITY(htim_ptr, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6a1a      	ldr	r2, [r3, #32]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80010da:	621a      	str	r2, [r3, #32]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6a12      	ldr	r2, [r2, #32]
 80010e6:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 80010e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <HAL_TIM_IC_CaptureCallback+0x134>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f022 0210 	bic.w	r2, r2, #16
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	e000      	b.n	80010fc <HAL_TIM_IC_CaptureCallback+0x10c>
    return;
 80010fa:	bf00      	nop
  }
}
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	f3af 8000 	nop.w
 8001108:	b020c49c 	.word	0xb020c49c
 800110c:	3fa16872 	.word	0x3fa16872
 8001110:	2000040c 	.word	0x2000040c
 8001114:	200003fc 	.word	0x200003fc
 8001118:	20000400 	.word	0x20000400
 800111c:	20000404 	.word	0x20000404
 8001120:	20000408 	.word	0x20000408
 8001124:	2000024c 	.word	0x2000024c

08001128 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  curr++;
 8001130:	4b0c      	ldr	r3, [pc, #48]	@ (8001164 <HAL_UART_RxCpltCallback+0x3c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	3301      	adds	r3, #1
 8001136:	4a0b      	ldr	r2, [pc, #44]	@ (8001164 <HAL_UART_RxCpltCallback+0x3c>)
 8001138:	6013      	str	r3, [r2, #0]
  cmd_buffer[curr] = receive[0];
 800113a:	4b0a      	ldr	r3, [pc, #40]	@ (8001164 <HAL_UART_RxCpltCallback+0x3c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <HAL_UART_RxCpltCallback+0x40>)
 8001140:	7811      	ldrb	r1, [r2, #0]
 8001142:	4a0a      	ldr	r2, [pc, #40]	@ (800116c <HAL_UART_RxCpltCallback+0x44>)
 8001144:	54d1      	strb	r1, [r2, r3]
  cmd_cnt++;
 8001146:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <HAL_UART_RxCpltCallback+0x48>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	b2da      	uxtb	r2, r3
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <HAL_UART_RxCpltCallback+0x48>)
 8001150:	701a      	strb	r2, [r3, #0]
  // print_OLED(0, 15, "head:", false, 0);
  // print_OLED(50, 15, "%c", true, head->dir);

  HAL_UART_Receive_IT(&huart3, receive, sizeof(receive));
 8001152:	2201      	movs	r2, #1
 8001154:	4904      	ldr	r1, [pc, #16]	@ (8001168 <HAL_UART_RxCpltCallback+0x40>)
 8001156:	4807      	ldr	r0, [pc, #28]	@ (8001174 <HAL_UART_RxCpltCallback+0x4c>)
 8001158:	f004 fbd2 	bl	8005900 <HAL_UART_Receive_IT>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000
 8001168:	200007fc 	.word	0x200007fc
 800116c:	20000410 	.word	0x20000410
 8001170:	200007f8 	.word	0x200007f8
 8001174:	200003b4 	.word	0x200003b4

08001178 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  // Turn on LED3 to check whether the STM32 board works or not
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001182:	482c      	ldr	r0, [pc, #176]	@ (8001234 <main+0xbc>)
 8001184:	f002 fb7c 	bl	8003880 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001188:	f001 ff8c 	bl	80030a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118c:	f000 f866 	bl	800125c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001190:	f000 fb44 	bl	800181c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001194:	f000 fb18 	bl	80017c8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001198:	f000 f8ec 	bl	8001374 <MX_TIM1_Init>
  MX_TIM2_Init();
 800119c:	f000 f98a 	bl	80014b4 <MX_TIM2_Init>
  MX_TIM8_Init();
 80011a0:	f000 fa66 	bl	8001670 <MX_TIM8_Init>
  MX_TIM3_Init();
 80011a4:	f000 f9da 	bl	800155c <MX_TIM3_Init>
  MX_I2C1_Init();
 80011a8:	f000 f8b6 	bl	8001318 <MX_I2C1_Init>
  MX_TIM6_Init();
 80011ac:	f000 fa2a 	bl	8001604 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // Initialize peripherals
  OLED_Init();
 80011b0:	f001 fb0c 	bl	80027cc <OLED_Init>
  motor_init(&htim8, &htim2, &htim3);
 80011b4:	4a20      	ldr	r2, [pc, #128]	@ (8001238 <main+0xc0>)
 80011b6:	4921      	ldr	r1, [pc, #132]	@ (800123c <main+0xc4>)
 80011b8:	4821      	ldr	r0, [pc, #132]	@ (8001240 <main+0xc8>)
 80011ba:	f000 fd7b 	bl	8001cb4 <motor_init>
  servo_init(&htim1);
 80011be:	4821      	ldr	r0, [pc, #132]	@ (8001244 <main+0xcc>)
 80011c0:	f001 fb90 	bl	80028e4 <servo_init>
  // sensors_init(&hi2c1, &htim4, &sensor);

  // Delay loop for generating a 10us pulse (TIM6)
  HAL_TIM_Base_Start(&htim6);
 80011c4:	4820      	ldr	r0, [pc, #128]	@ (8001248 <main+0xd0>)
 80011c6:	f003 f989 	bl	80044dc <HAL_TIM_Base_Start>
  // USER button
//  HAL_TIM_Base_Start_IT(&htim2);

  OLED_ShowString(0, 0, "Press USER btn");
 80011ca:	4a20      	ldr	r2, [pc, #128]	@ (800124c <main+0xd4>)
 80011cc:	2100      	movs	r1, #0
 80011ce:	2000      	movs	r0, #0
 80011d0:	f001 faca 	bl	8002768 <OLED_ShowString>
  OLED_ShowString(0, 15, "to continue");
 80011d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001250 <main+0xd8>)
 80011d6:	210f      	movs	r1, #15
 80011d8:	2000      	movs	r0, #0
 80011da:	f001 fac5 	bl	8002768 <OLED_ShowString>
  OLED_Refresh_Gram();
 80011de:	f001 f999 	bl	8002514 <OLED_Refresh_Gram>
  servo_set_dir(LEFT);
 80011e2:	f640 50ac 	movw	r0, #3500	@ 0xdac
 80011e6:	f001 fb8f 	bl	8002908 <servo_set_dir>
  HAL_Delay(500);
 80011ea:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80011ee:	f001 ffcb 	bl	8003188 <HAL_Delay>
  servo_set_dir(STRAIGHT);
 80011f2:	f241 206b 	movw	r0, #4715	@ 0x126b
 80011f6:	f001 fb87 	bl	8002908 <servo_set_dir>

  while (!is_USER_button_pressed());
 80011fa:	bf00      	nop
 80011fc:	f7ff fe9c 	bl	8000f38 <is_USER_button_pressed>
 8001200:	4603      	mov	r3, r0
 8001202:	f083 0301 	eor.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d1f7      	bne.n	80011fc <main+0x84>
  OLED_Clear();
 800120c:	f001 f9ba 	bl	8002584 <OLED_Clear>
  motor_set_speed(20);
 8001210:	2014      	movs	r0, #20
 8001212:	f000 fe49 	bl	8001ea8 <motor_set_speed>

  // Start the interrupt for UART3
  HAL_UART_Receive_IT(&huart3, receive, sizeof(receive));
 8001216:	2201      	movs	r2, #1
 8001218:	490e      	ldr	r1, [pc, #56]	@ (8001254 <main+0xdc>)
 800121a:	480f      	ldr	r0, [pc, #60]	@ (8001258 <main+0xe0>)
 800121c:	f004 fb70 	bl	8005900 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    forward(80);
 8001220:	2050      	movs	r0, #80	@ 0x50
 8001222:	f000 fec1 	bl	8001fa8 <forward>
    HAL_Delay(500);
 8001226:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800122a:	f001 ffad 	bl	8003188 <HAL_Delay>
    forward(80);
 800122e:	bf00      	nop
 8001230:	e7f6      	b.n	8001220 <main+0xa8>
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	200002dc 	.word	0x200002dc
 800123c:	20000294 	.word	0x20000294
 8001240:	2000036c 	.word	0x2000036c
 8001244:	2000024c 	.word	0x2000024c
 8001248:	20000324 	.word	0x20000324
 800124c:	080093f0 	.word	0x080093f0
 8001250:	08009400 	.word	0x08009400
 8001254:	200007fc 	.word	0x200007fc
 8001258:	200003b4 	.word	0x200003b4

0800125c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b094      	sub	sp, #80	@ 0x50
 8001260:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001262:	f107 0320 	add.w	r3, r7, #32
 8001266:	2230      	movs	r2, #48	@ 0x30
 8001268:	2100      	movs	r1, #0
 800126a:	4618      	mov	r0, r3
 800126c:	f005 ffe9 	bl	8007242 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	609a      	str	r2, [r3, #8]
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001280:	2300      	movs	r3, #0
 8001282:	60bb      	str	r3, [r7, #8]
 8001284:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <SystemClock_Config+0xb4>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	4a21      	ldr	r2, [pc, #132]	@ (8001310 <SystemClock_Config+0xb4>)
 800128a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <SystemClock_Config+0xb4>)
 8001292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800129c:	2300      	movs	r3, #0
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <SystemClock_Config+0xb8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001314 <SystemClock_Config+0xb8>)
 80012a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <SystemClock_Config+0xb8>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b8:	2302      	movs	r3, #2
 80012ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012bc:	2301      	movs	r3, #1
 80012be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012c0:	2310      	movs	r3, #16
 80012c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	4618      	mov	r0, r3
 80012ce:	f002 fc5d 	bl	8003b8c <HAL_RCC_OscConfig>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80012d8:	f000 fb46 	bl	8001968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012dc:	230f      	movs	r3, #15
 80012de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 fec0 	bl	800407c <HAL_RCC_ClockConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001302:	f000 fb31 	bl	8001968 <Error_Handler>
  }
}
 8001306:	bf00      	nop
 8001308:	3750      	adds	r7, #80	@ 0x50
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800
 8001314:	40007000 	.word	0x40007000

08001318 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <MX_I2C1_Init+0x50>)
 800131e:	4a13      	ldr	r2, [pc, #76]	@ (800136c <MX_I2C1_Init+0x54>)
 8001320:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001324:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <MX_I2C1_Init+0x58>)
 8001326:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <MX_I2C1_Init+0x50>)
 800132a:	2200      	movs	r2, #0
 800132c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001334:	4b0c      	ldr	r3, [pc, #48]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001336:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800133a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800133c:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <MX_I2C1_Init+0x50>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001342:	4b09      	ldr	r3, [pc, #36]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001344:	2200      	movs	r2, #0
 8001346:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001348:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <MX_I2C1_Init+0x50>)
 800134a:	2200      	movs	r2, #0
 800134c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134e:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001350:	2200      	movs	r2, #0
 8001352:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001354:	4804      	ldr	r0, [pc, #16]	@ (8001368 <MX_I2C1_Init+0x50>)
 8001356:	f002 faad 	bl	80038b4 <HAL_I2C_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001360:	f000 fb02 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200001f8 	.word	0x200001f8
 800136c:	40005400 	.word	0x40005400
 8001370:	00061a80 	.word	0x00061a80

08001374 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b096      	sub	sp, #88	@ 0x58
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	615a      	str	r2, [r3, #20]
 80013a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2220      	movs	r2, #32
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f005 ff48 	bl	8007242 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013b2:	4b3e      	ldr	r3, [pc, #248]	@ (80014ac <MX_TIM1_Init+0x138>)
 80013b4:	4a3e      	ldr	r2, [pc, #248]	@ (80014b0 <MX_TIM1_Init+0x13c>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 80013b8:	4b3c      	ldr	r3, [pc, #240]	@ (80014ac <MX_TIM1_Init+0x138>)
 80013ba:	2204      	movs	r2, #4
 80013bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b3b      	ldr	r3, [pc, #236]	@ (80014ac <MX_TIM1_Init+0x138>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 80013c4:	4b39      	ldr	r3, [pc, #228]	@ (80014ac <MX_TIM1_Init+0x138>)
 80013c6:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 80013ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013cc:	4b37      	ldr	r3, [pc, #220]	@ (80014ac <MX_TIM1_Init+0x138>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013d2:	4b36      	ldr	r3, [pc, #216]	@ (80014ac <MX_TIM1_Init+0x138>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	4b34      	ldr	r3, [pc, #208]	@ (80014ac <MX_TIM1_Init+0x138>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013de:	4833      	ldr	r0, [pc, #204]	@ (80014ac <MX_TIM1_Init+0x138>)
 80013e0:	f003 f82c 	bl	800443c <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013ea:	f000 fabd 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013f8:	4619      	mov	r1, r3
 80013fa:	482c      	ldr	r0, [pc, #176]	@ (80014ac <MX_TIM1_Init+0x138>)
 80013fc:	f003 fcfe 	bl	8004dfc <HAL_TIM_ConfigClockSource>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001406:	f000 faaf 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800140a:	4828      	ldr	r0, [pc, #160]	@ (80014ac <MX_TIM1_Init+0x138>)
 800140c:	f003 f8ce 	bl	80045ac <HAL_TIM_PWM_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001416:	f000 faa7 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001422:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001426:	4619      	mov	r1, r3
 8001428:	4820      	ldr	r0, [pc, #128]	@ (80014ac <MX_TIM1_Init+0x138>)
 800142a:	f004 f937 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001434:	f000 fa98 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001438:	2360      	movs	r3, #96	@ 0x60
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001440:	2300      	movs	r3, #0
 8001442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001444:	2300      	movs	r3, #0
 8001446:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001458:	2200      	movs	r2, #0
 800145a:	4619      	mov	r1, r3
 800145c:	4813      	ldr	r0, [pc, #76]	@ (80014ac <MX_TIM1_Init+0x138>)
 800145e:	f003 fc0b 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001468:	f000 fa7e 	bl	8001968 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001480:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001484:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	4807      	ldr	r0, [pc, #28]	@ (80014ac <MX_TIM1_Init+0x138>)
 8001490:	f004 f980 	bl	8005794 <HAL_TIMEx_ConfigBreakDeadTime>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800149a:	f000 fa65 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800149e:	4803      	ldr	r0, [pc, #12]	@ (80014ac <MX_TIM1_Init+0x138>)
 80014a0:	f001 fbcc 	bl	8002c3c <HAL_TIM_MspPostInit>

}
 80014a4:	bf00      	nop
 80014a6:	3758      	adds	r7, #88	@ 0x58
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000024c 	.word	0x2000024c
 80014b0:	40010000 	.word	0x40010000

080014b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	@ 0x30
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	2224      	movs	r2, #36	@ 0x24
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f005 febd 	bl	8007242 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014d0:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <MX_TIM2_Init+0xa4>)
 80014d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001558 <MX_TIM2_Init+0xa4>)
 80014da:	2200      	movs	r2, #0
 80014dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014de:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <MX_TIM2_Init+0xa4>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80014e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <MX_TIM2_Init+0xa4>)
 80014e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <MX_TIM2_Init+0xa4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f2:	4b19      	ldr	r3, [pc, #100]	@ (8001558 <MX_TIM2_Init+0xa4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014f8:	2303      	movs	r3, #3
 80014fa:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001500:	2301      	movs	r3, #1
 8001502:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001510:	2301      	movs	r3, #1
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	4619      	mov	r1, r3
 8001522:	480d      	ldr	r0, [pc, #52]	@ (8001558 <MX_TIM2_Init+0xa4>)
 8001524:	f003 f964 	bl	80047f0 <HAL_TIM_Encoder_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800152e:	f000 fa1b 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800153a:	1d3b      	adds	r3, r7, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4806      	ldr	r0, [pc, #24]	@ (8001558 <MX_TIM2_Init+0xa4>)
 8001540:	f004 f8ac 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800154a:	f000 fa0d 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	3730      	adds	r7, #48	@ 0x30
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000294 	.word	0x20000294

0800155c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08c      	sub	sp, #48	@ 0x30
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001562:	f107 030c 	add.w	r3, r7, #12
 8001566:	2224      	movs	r2, #36	@ 0x24
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f005 fe69 	bl	8007242 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001578:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <MX_TIM3_Init+0xa0>)
 800157a:	4a21      	ldr	r2, [pc, #132]	@ (8001600 <MX_TIM3_Init+0xa4>)
 800157c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800157e:	4b1f      	ldr	r3, [pc, #124]	@ (80015fc <MX_TIM3_Init+0xa0>)
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001584:	4b1d      	ldr	r3, [pc, #116]	@ (80015fc <MX_TIM3_Init+0xa0>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800158a:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <MX_TIM3_Init+0xa0>)
 800158c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001590:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <MX_TIM3_Init+0xa0>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001598:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <MX_TIM3_Init+0xa0>)
 800159a:	2200      	movs	r2, #0
 800159c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800159e:	2303      	movs	r3, #3
 80015a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015a2:	2300      	movs	r3, #0
 80015a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015a6:	2301      	movs	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015b2:	2300      	movs	r3, #0
 80015b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015b6:	2301      	movs	r3, #1
 80015b8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	@ (80015fc <MX_TIM3_Init+0xa0>)
 80015ca:	f003 f911 	bl	80047f0 <HAL_TIM_Encoder_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015d4:	f000 f9c8 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_TIM3_Init+0xa0>)
 80015e6:	f004 f859 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80015f0:	f000 f9ba 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3730      	adds	r7, #48	@ 0x30
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200002dc 	.word	0x200002dc
 8001600:	40000400 	.word	0x40000400

08001604 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800160a:	463b      	mov	r3, r7
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001612:	4b15      	ldr	r3, [pc, #84]	@ (8001668 <MX_TIM6_Init+0x64>)
 8001614:	4a15      	ldr	r2, [pc, #84]	@ (800166c <MX_TIM6_Init+0x68>)
 8001616:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 8001618:	4b13      	ldr	r3, [pc, #76]	@ (8001668 <MX_TIM6_Init+0x64>)
 800161a:	220f      	movs	r2, #15
 800161c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <MX_TIM6_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001624:	4b10      	ldr	r3, [pc, #64]	@ (8001668 <MX_TIM6_Init+0x64>)
 8001626:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800162a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162c:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <MX_TIM6_Init+0x64>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001632:	480d      	ldr	r0, [pc, #52]	@ (8001668 <MX_TIM6_Init+0x64>)
 8001634:	f002 ff02 	bl	800443c <HAL_TIM_Base_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800163e:	f000 f993 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001642:	2300      	movs	r3, #0
 8001644:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800164a:	463b      	mov	r3, r7
 800164c:	4619      	mov	r1, r3
 800164e:	4806      	ldr	r0, [pc, #24]	@ (8001668 <MX_TIM6_Init+0x64>)
 8001650:	f004 f824 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800165a:	f000 f985 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000324 	.word	0x20000324
 800166c:	40001000 	.word	0x40001000

08001670 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b096      	sub	sp, #88	@ 0x58
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001676:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]
 8001680:	609a      	str	r2, [r3, #8]
 8001682:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001684:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]
 800169e:	615a      	str	r2, [r3, #20]
 80016a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2220      	movs	r2, #32
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f005 fdca 	bl	8007242 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016ae:	4b44      	ldr	r3, [pc, #272]	@ (80017c0 <MX_TIM8_Init+0x150>)
 80016b0:	4a44      	ldr	r2, [pc, #272]	@ (80017c4 <MX_TIM8_Init+0x154>)
 80016b2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016b4:	4b42      	ldr	r3, [pc, #264]	@ (80017c0 <MX_TIM8_Init+0x150>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ba:	4b41      	ldr	r3, [pc, #260]	@ (80017c0 <MX_TIM8_Init+0x150>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7200-1;
 80016c0:	4b3f      	ldr	r3, [pc, #252]	@ (80017c0 <MX_TIM8_Init+0x150>)
 80016c2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80016c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c8:	4b3d      	ldr	r3, [pc, #244]	@ (80017c0 <MX_TIM8_Init+0x150>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016ce:	4b3c      	ldr	r3, [pc, #240]	@ (80017c0 <MX_TIM8_Init+0x150>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d4:	4b3a      	ldr	r3, [pc, #232]	@ (80017c0 <MX_TIM8_Init+0x150>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80016da:	4839      	ldr	r0, [pc, #228]	@ (80017c0 <MX_TIM8_Init+0x150>)
 80016dc:	f002 feae 	bl	800443c <HAL_TIM_Base_Init>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80016e6:	f000 f93f 	bl	8001968 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016f0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016f4:	4619      	mov	r1, r3
 80016f6:	4832      	ldr	r0, [pc, #200]	@ (80017c0 <MX_TIM8_Init+0x150>)
 80016f8:	f003 fb80 	bl	8004dfc <HAL_TIM_ConfigClockSource>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001702:	f000 f931 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001706:	482e      	ldr	r0, [pc, #184]	@ (80017c0 <MX_TIM8_Init+0x150>)
 8001708:	f002 ff50 	bl	80045ac <HAL_TIM_PWM_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001712:	f000 f929 	bl	8001968 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001716:	2300      	movs	r3, #0
 8001718:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171a:	2300      	movs	r3, #0
 800171c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800171e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001722:	4619      	mov	r1, r3
 8001724:	4826      	ldr	r0, [pc, #152]	@ (80017c0 <MX_TIM8_Init+0x150>)
 8001726:	f003 ffb9 	bl	800569c <HAL_TIMEx_MasterConfigSynchronization>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001730:	f000 f91a 	bl	8001968 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001734:	2360      	movs	r3, #96	@ 0x60
 8001736:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800173c:	2300      	movs	r3, #0
 800173e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001740:	2300      	movs	r3, #0
 8001742:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001750:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001754:	2200      	movs	r2, #0
 8001756:	4619      	mov	r1, r3
 8001758:	4819      	ldr	r0, [pc, #100]	@ (80017c0 <MX_TIM8_Init+0x150>)
 800175a:	f003 fa8d 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001764:	f000 f900 	bl	8001968 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176c:	2204      	movs	r2, #4
 800176e:	4619      	mov	r1, r3
 8001770:	4813      	ldr	r0, [pc, #76]	@ (80017c0 <MX_TIM8_Init+0x150>)
 8001772:	f003 fa81 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800177c:	f000 f8f4 	bl	8001968 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001780:	2300      	movs	r3, #0
 8001782:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001784:	2300      	movs	r3, #0
 8001786:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001798:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800179e:	1d3b      	adds	r3, r7, #4
 80017a0:	4619      	mov	r1, r3
 80017a2:	4807      	ldr	r0, [pc, #28]	@ (80017c0 <MX_TIM8_Init+0x150>)
 80017a4:	f003 fff6 	bl	8005794 <HAL_TIMEx_ConfigBreakDeadTime>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80017ae:	f000 f8db 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017b2:	4803      	ldr	r0, [pc, #12]	@ (80017c0 <MX_TIM8_Init+0x150>)
 80017b4:	f001 fa42 	bl	8002c3c <HAL_TIM_MspPostInit>

}
 80017b8:	bf00      	nop
 80017ba:	3758      	adds	r7, #88	@ 0x58
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	2000036c 	.word	0x2000036c
 80017c4:	40010400 	.word	0x40010400

080017c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	@ (8001818 <MX_USART3_UART_Init+0x50>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b09      	ldr	r3, [pc, #36]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b06      	ldr	r3, [pc, #24]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017fe:	4805      	ldr	r0, [pc, #20]	@ (8001814 <MX_USART3_UART_Init+0x4c>)
 8001800:	f004 f82e 	bl	8005860 <HAL_UART_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800180a:	f000 f8ad 	bl	8001968 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200003b4 	.word	0x200003b4
 8001818:	40004800 	.word	0x40004800

0800181c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	@ 0x28
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 0314 	add.w	r3, r7, #20
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b48      	ldr	r3, [pc, #288]	@ (8001958 <MX_GPIO_Init+0x13c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	4a47      	ldr	r2, [pc, #284]	@ (8001958 <MX_GPIO_Init+0x13c>)
 800183c:	f043 0310 	orr.w	r3, r3, #16
 8001840:	6313      	str	r3, [r2, #48]	@ 0x30
 8001842:	4b45      	ldr	r3, [pc, #276]	@ (8001958 <MX_GPIO_Init+0x13c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	f003 0310 	and.w	r3, r3, #16
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b41      	ldr	r3, [pc, #260]	@ (8001958 <MX_GPIO_Init+0x13c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a40      	ldr	r2, [pc, #256]	@ (8001958 <MX_GPIO_Init+0x13c>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b3e      	ldr	r3, [pc, #248]	@ (8001958 <MX_GPIO_Init+0x13c>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b3a      	ldr	r3, [pc, #232]	@ (8001958 <MX_GPIO_Init+0x13c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001872:	4a39      	ldr	r2, [pc, #228]	@ (8001958 <MX_GPIO_Init+0x13c>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	6313      	str	r3, [r2, #48]	@ 0x30
 800187a:	4b37      	ldr	r3, [pc, #220]	@ (8001958 <MX_GPIO_Init+0x13c>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	4b33      	ldr	r3, [pc, #204]	@ (8001958 <MX_GPIO_Init+0x13c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	4a32      	ldr	r2, [pc, #200]	@ (8001958 <MX_GPIO_Init+0x13c>)
 8001890:	f043 0304 	orr.w	r3, r3, #4
 8001894:	6313      	str	r3, [r2, #48]	@ 0x30
 8001896:	4b30      	ldr	r3, [pc, #192]	@ (8001958 <MX_GPIO_Init+0x13c>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	607b      	str	r3, [r7, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001958 <MX_GPIO_Init+0x13c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a2b      	ldr	r2, [pc, #172]	@ (8001958 <MX_GPIO_Init+0x13c>)
 80018ac:	f043 0302 	orr.w	r3, r3, #2
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b29      	ldr	r3, [pc, #164]	@ (8001958 <MX_GPIO_Init+0x13c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0302 	and.w	r3, r3, #2
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET_Pin|OLED_DC_Pin
 80018be:	2200      	movs	r2, #0
 80018c0:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 80018c4:	4825      	ldr	r0, [pc, #148]	@ (800195c <MX_GPIO_Init+0x140>)
 80018c6:	f001 ffdb 	bl	8003880 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_A_IN2_Pin|MOTOR_A_IN1_Pin|MOTOR_B_IN1_Pin|MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	213c      	movs	r1, #60	@ 0x3c
 80018ce:	4824      	ldr	r0, [pc, #144]	@ (8001960 <MX_GPIO_Init+0x144>)
 80018d0:	f001 ffd6 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2180      	movs	r1, #128	@ 0x80
 80018d8:	4822      	ldr	r0, [pc, #136]	@ (8001964 <MX_GPIO_Init+0x148>)
 80018da:	f001 ffd1 	bl	8003880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDIN_Pin OLED_RESET_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET_Pin|OLED_DC_Pin
 80018de:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 80018e2:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4819      	ldr	r0, [pc, #100]	@ (800195c <MX_GPIO_Init+0x140>)
 80018f8:	f001 fe0e 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_A_IN2_Pin MOTOR_A_IN1_Pin MOTOR_B_IN1_Pin MOTOR_B_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_IN2_Pin|MOTOR_A_IN1_Pin|MOTOR_B_IN1_Pin|MOTOR_B_IN2_Pin;
 80018fc:	233c      	movs	r3, #60	@ 0x3c
 80018fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	4813      	ldr	r0, [pc, #76]	@ (8001960 <MX_GPIO_Init+0x144>)
 8001914:	f001 fe00 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001918:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	480d      	ldr	r0, [pc, #52]	@ (8001964 <MX_GPIO_Init+0x148>)
 800192e:	f001 fdf3 	bl	8003518 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 8001932:	2380      	movs	r3, #128	@ 0x80
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4806      	ldr	r0, [pc, #24]	@ (8001964 <MX_GPIO_Init+0x148>)
 800194a:	f001 fde5 	bl	8003518 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800194e:	bf00      	nop
 8001950:	3728      	adds	r7, #40	@ 0x28
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800
 800195c:	40021000 	.word	0x40021000
 8001960:	40020000 	.word	0x40020000
 8001964:	40020c00 	.word	0x40020c00

08001968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196c:	b672      	cpsid	i
}
 800196e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <Error_Handler+0x8>

08001974 <PID_Control_left>:
int32_t millisOld, millisNow, dt; // to calculate I and D for PID control
int16_t Kp = 0;
float_t Kd = 0;
float_t Ki = 0;

int16_t PID_Control_left(){
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	  //Control Loop Left
	  if (abs(l_error)>2){ //more than 2 degree difference
 8001978:	4b55      	ldr	r3, [pc, #340]	@ (8001ad0 <PID_Control_left+0x15c>)
 800197a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197e:	2b00      	cmp	r3, #0
 8001980:	bfb8      	it	lt
 8001982:	425b      	neglt	r3, r3
 8001984:	b29b      	uxth	r3, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	f240 809f 	bls.w	8001aca <PID_Control_left+0x156>

    	  l_angle = (int)(l_position*360/1550);  // supposed to be 260 tick per revolution?
 800198c:	4b51      	ldr	r3, [pc, #324]	@ (8001ad4 <PID_Control_left+0x160>)
 800198e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001992:	461a      	mov	r2, r3
 8001994:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001998:	fb02 f303 	mul.w	r3, r2, r3
 800199c:	4a4e      	ldr	r2, [pc, #312]	@ (8001ad8 <PID_Control_left+0x164>)
 800199e:	fb82 1203 	smull	r1, r2, r2, r3
 80019a2:	441a      	add	r2, r3
 80019a4:	1292      	asrs	r2, r2, #10
 80019a6:	17db      	asrs	r3, r3, #31
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	4b4b      	ldr	r3, [pc, #300]	@ (8001adc <PID_Control_left+0x168>)
 80019ae:	801a      	strh	r2, [r3, #0]
  	      l_error = target_angle - l_angle;
 80019b0:	4b4b      	ldr	r3, [pc, #300]	@ (8001ae0 <PID_Control_left+0x16c>)
 80019b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	4b48      	ldr	r3, [pc, #288]	@ (8001adc <PID_Control_left+0x168>)
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	b21a      	sxth	r2, r3
 80019c6:	4b42      	ldr	r3, [pc, #264]	@ (8001ad0 <PID_Control_left+0x15c>)
 80019c8:	801a      	strh	r2, [r3, #0]

  	    if (l_error > 0)
 80019ca:	4b41      	ldr	r3, [pc, #260]	@ (8001ad0 <PID_Control_left+0x15c>)
 80019cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dd02      	ble.n	80019da <PID_Control_left+0x66>
  	    	motor_forward(); //forward
 80019d4:	f000 fa1e 	bl	8001e14 <motor_forward>
 80019d8:	e001      	b.n	80019de <PID_Control_left+0x6a>
		else
			motor_forward(); //reverse direction
 80019da:	f000 fa1b 	bl	8001e14 <motor_forward>

        millisNow = HAL_GetTick();
 80019de:	f001 fbc7 	bl	8003170 <HAL_GetTick>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae4 <PID_Control_left+0x170>)
 80019e8:	601a      	str	r2, [r3, #0]
        dt = (millisNow - millisOld); // time elapsed in millisecond
 80019ea:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae4 <PID_Control_left+0x170>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae8 <PID_Control_left+0x174>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	4a3d      	ldr	r2, [pc, #244]	@ (8001aec <PID_Control_left+0x178>)
 80019f6:	6013      	str	r3, [r2, #0]
        millisOld = millisNow; // store the current time for next round
 80019f8:	4b3a      	ldr	r3, [pc, #232]	@ (8001ae4 <PID_Control_left+0x170>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ae8 <PID_Control_left+0x174>)
 80019fe:	6013      	str	r3, [r2, #0]

        l_error_area = l_error_area + l_error*dt; // area under error for Ki
 8001a00:	4b33      	ldr	r3, [pc, #204]	@ (8001ad0 <PID_Control_left+0x15c>)
 8001a02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a06:	461a      	mov	r2, r3
 8001a08:	4b38      	ldr	r3, [pc, #224]	@ (8001aec <PID_Control_left+0x178>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	fb03 f202 	mul.w	r2, r3, r2
 8001a10:	4b37      	ldr	r3, [pc, #220]	@ (8001af0 <PID_Control_left+0x17c>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a36      	ldr	r2, [pc, #216]	@ (8001af0 <PID_Control_left+0x17c>)
 8001a18:	6013      	str	r3, [r2, #0]

        l_error_change = l_error - l_error_old; // change in error
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad0 <PID_Control_left+0x15c>)
 8001a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b34      	ldr	r3, [pc, #208]	@ (8001af4 <PID_Control_left+0x180>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	4a33      	ldr	r2, [pc, #204]	@ (8001af8 <PID_Control_left+0x184>)
 8001a2a:	6013      	str	r3, [r2, #0]
  	    l_error_old = l_error; //store the error for next round
 8001a2c:	4b28      	ldr	r3, [pc, #160]	@ (8001ad0 <PID_Control_left+0x15c>)
 8001a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b2f      	ldr	r3, [pc, #188]	@ (8001af4 <PID_Control_left+0x180>)
 8001a36:	601a      	str	r2, [r3, #0]
        l_error_rate = l_error_change/dt; // for Kd
 8001a38:	4b2f      	ldr	r3, [pc, #188]	@ (8001af8 <PID_Control_left+0x184>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001aec <PID_Control_left+0x178>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	fb92 f3f3 	sdiv	r3, r2, r3
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8001afc <PID_Control_left+0x188>)
 8001a4e:	edc3 7a00 	vstr	s15, [r3]

		l_pwm_val = (int)(l_error*Kp + l_error_area*Ki + l_error_rate*Kd);  // PID
 8001a52:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <PID_Control_left+0x15c>)
 8001a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <PID_Control_left+0x18c>)
 8001a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6c:	4b20      	ldr	r3, [pc, #128]	@ (8001af0 <PID_Control_left+0x17c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a78:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <PID_Control_left+0x190>)
 8001a7a:	edd3 7a00 	vldr	s15, [r3]
 8001a7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a86:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <PID_Control_left+0x188>)
 8001a88:	edd3 6a00 	vldr	s13, [r3]
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b08 <PID_Control_left+0x194>)
 8001a8e:	edd3 7a00 	vldr	s15, [r3]
 8001a92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a9e:	ee17 3a90 	vmov	r3, s15
 8001aa2:	b21a      	sxth	r2, r3
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <PID_Control_left+0x198>)
 8001aa6:	801a      	strh	r2, [r3, #0]

  	  //pwmVal = 2000;   // overwrite PID above, minimum pwmVal = 1000

		if (l_pwm_val > pwmMax)  // Clamp the PWM to its maximum value
 8001aa8:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <PID_Control_left+0x198>)
 8001aaa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001aae:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <PID_Control_left+0x19c>)
 8001ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dd04      	ble.n	8001ac2 <PID_Control_left+0x14e>
		   l_pwm_val = pwmMax;
 8001ab8:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <PID_Control_left+0x19c>)
 8001aba:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001abe:	4b13      	ldr	r3, [pc, #76]	@ (8001b0c <PID_Control_left+0x198>)
 8001ac0:	801a      	strh	r2, [r3, #0]

		return(l_pwm_val);
 8001ac2:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <PID_Control_left+0x198>)
 8001ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac8:	e7ff      	b.n	8001aca <PID_Control_left+0x156>

	}
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000836 	.word	0x20000836
 8001ad4:	2000082c 	.word	0x2000082c
 8001ad8:	a9200a93 	.word	0xa9200a93
 8001adc:	20000830 	.word	0x20000830
 8001ae0:	20000834 	.word	0x20000834
 8001ae4:	20000860 	.word	0x20000860
 8001ae8:	2000085c 	.word	0x2000085c
 8001aec:	20000864 	.word	0x20000864
 8001af0:	2000083c 	.word	0x2000083c
 8001af4:	20000844 	.word	0x20000844
 8001af8:	20000848 	.word	0x20000848
 8001afc:	20000854 	.word	0x20000854
 8001b00:	20000868 	.word	0x20000868
 8001b04:	20000870 	.word	0x20000870
 8001b08:	2000086c 	.word	0x2000086c
 8001b0c:	2000080e 	.word	0x2000080e
 8001b10:	20000006 	.word	0x20000006

08001b14 <PID_Control_right>:

int16_t PID_Control_right(){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	  //Control Loop Left
	  if (abs(r_error)>2){ //more than 2 degree difference
 8001b18:	4b55      	ldr	r3, [pc, #340]	@ (8001c70 <PID_Control_right+0x15c>)
 8001b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bfb8      	it	lt
 8001b22:	425b      	neglt	r3, r3
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	f240 809f 	bls.w	8001c6a <PID_Control_right+0x156>

    	  r_angle = (int)(r_position*360/1550);  // supposed to be 260 tick per revolution?
 8001b2c:	4b51      	ldr	r3, [pc, #324]	@ (8001c74 <PID_Control_right+0x160>)
 8001b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b32:	461a      	mov	r2, r3
 8001b34:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001b38:	fb02 f303 	mul.w	r3, r2, r3
 8001b3c:	4a4e      	ldr	r2, [pc, #312]	@ (8001c78 <PID_Control_right+0x164>)
 8001b3e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b42:	441a      	add	r2, r3
 8001b44:	1292      	asrs	r2, r2, #10
 8001b46:	17db      	asrs	r3, r3, #31
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	b21a      	sxth	r2, r3
 8001b4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c7c <PID_Control_right+0x168>)
 8001b4e:	801a      	strh	r2, [r3, #0]
  	      r_error = target_angle - r_angle;
 8001b50:	4b4b      	ldr	r3, [pc, #300]	@ (8001c80 <PID_Control_right+0x16c>)
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	4b48      	ldr	r3, [pc, #288]	@ (8001c7c <PID_Control_right+0x168>)
 8001b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	b21a      	sxth	r2, r3
 8001b66:	4b42      	ldr	r3, [pc, #264]	@ (8001c70 <PID_Control_right+0x15c>)
 8001b68:	801a      	strh	r2, [r3, #0]

        if (r_error > 0)
 8001b6a:	4b41      	ldr	r3, [pc, #260]	@ (8001c70 <PID_Control_right+0x15c>)
 8001b6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	dd02      	ble.n	8001b7a <PID_Control_right+0x66>
      	  motor_forward(); //forward
 8001b74:	f000 f94e 	bl	8001e14 <motor_forward>
 8001b78:	e001      	b.n	8001b7e <PID_Control_right+0x6a>
        else
        	motor_forward(); //reverse direction
 8001b7a:	f000 f94b 	bl	8001e14 <motor_forward>

        millisNow = HAL_GetTick();
 8001b7e:	f001 faf7 	bl	8003170 <HAL_GetTick>
 8001b82:	4603      	mov	r3, r0
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b3f      	ldr	r3, [pc, #252]	@ (8001c84 <PID_Control_right+0x170>)
 8001b88:	601a      	str	r2, [r3, #0]
        dt = (millisNow - millisOld); // time elapsed in millisecond
 8001b8a:	4b3e      	ldr	r3, [pc, #248]	@ (8001c84 <PID_Control_right+0x170>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c88 <PID_Control_right+0x174>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	4a3d      	ldr	r2, [pc, #244]	@ (8001c8c <PID_Control_right+0x178>)
 8001b96:	6013      	str	r3, [r2, #0]
        millisOld = millisNow; // store the current time for next round
 8001b98:	4b3a      	ldr	r3, [pc, #232]	@ (8001c84 <PID_Control_right+0x170>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a3a      	ldr	r2, [pc, #232]	@ (8001c88 <PID_Control_right+0x174>)
 8001b9e:	6013      	str	r3, [r2, #0]

        r_error_area = r_error_area + r_error*dt; // area under error for Ki
 8001ba0:	4b33      	ldr	r3, [pc, #204]	@ (8001c70 <PID_Control_right+0x15c>)
 8001ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4b38      	ldr	r3, [pc, #224]	@ (8001c8c <PID_Control_right+0x178>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	fb03 f202 	mul.w	r2, r3, r2
 8001bb0:	4b37      	ldr	r3, [pc, #220]	@ (8001c90 <PID_Control_right+0x17c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4413      	add	r3, r2
 8001bb6:	4a36      	ldr	r2, [pc, #216]	@ (8001c90 <PID_Control_right+0x17c>)
 8001bb8:	6013      	str	r3, [r2, #0]

        r_error_change = r_error - r_error_old; // change in error
 8001bba:	4b2d      	ldr	r3, [pc, #180]	@ (8001c70 <PID_Control_right+0x15c>)
 8001bbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4b34      	ldr	r3, [pc, #208]	@ (8001c94 <PID_Control_right+0x180>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	4a33      	ldr	r2, [pc, #204]	@ (8001c98 <PID_Control_right+0x184>)
 8001bca:	6013      	str	r3, [r2, #0]
  	    r_error_old = r_error; //store the error for next round
 8001bcc:	4b28      	ldr	r3, [pc, #160]	@ (8001c70 <PID_Control_right+0x15c>)
 8001bce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c94 <PID_Control_right+0x180>)
 8001bd6:	601a      	str	r2, [r3, #0]
        r_error_rate = r_error_change/dt; // for Kd
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001c98 <PID_Control_right+0x184>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8001c8c <PID_Control_right+0x178>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	fb92 f3f3 	sdiv	r3, r2, r3
 8001be4:	ee07 3a90 	vmov	s15, r3
 8001be8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bec:	4b2b      	ldr	r3, [pc, #172]	@ (8001c9c <PID_Control_right+0x188>)
 8001bee:	edc3 7a00 	vstr	s15, [r3]

		r_pwm_val = (int)(r_error*Kp + r_error_area*Ki + r_error_rate*Kd);  // PID
 8001bf2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c70 <PID_Control_right+0x15c>)
 8001bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	4b29      	ldr	r3, [pc, #164]	@ (8001ca0 <PID_Control_right+0x18c>)
 8001bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c00:	fb02 f303 	mul.w	r3, r2, r3
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c0c:	4b20      	ldr	r3, [pc, #128]	@ (8001c90 <PID_Control_right+0x17c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	ee07 3a90 	vmov	s15, r3
 8001c14:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001c18:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <PID_Control_right+0x190>)
 8001c1a:	edd3 7a00 	vldr	s15, [r3]
 8001c1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c26:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <PID_Control_right+0x188>)
 8001c28:	edd3 6a00 	vldr	s13, [r3]
 8001c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca8 <PID_Control_right+0x194>)
 8001c2e:	edd3 7a00 	vldr	s15, [r3]
 8001c32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c3e:	ee17 3a90 	vmov	r3, s15
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	4b19      	ldr	r3, [pc, #100]	@ (8001cac <PID_Control_right+0x198>)
 8001c46:	801a      	strh	r2, [r3, #0]

  	  //pwmVal = 2000;   // overwrite PID above, minimum pwmVal = 1000

		if (r_pwm_val > pwmMax)  // Clamp the PWM to its maximum value
 8001c48:	4b18      	ldr	r3, [pc, #96]	@ (8001cac <PID_Control_right+0x198>)
 8001c4a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c4e:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <PID_Control_right+0x19c>)
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dd04      	ble.n	8001c62 <PID_Control_right+0x14e>
		   r_pwm_val = pwmMax;
 8001c58:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <PID_Control_right+0x19c>)
 8001c5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001c5e:	4b13      	ldr	r3, [pc, #76]	@ (8001cac <PID_Control_right+0x198>)
 8001c60:	801a      	strh	r2, [r3, #0]

		return(r_pwm_val);
 8001c62:	4b12      	ldr	r3, [pc, #72]	@ (8001cac <PID_Control_right+0x198>)
 8001c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c68:	e7ff      	b.n	8001c6a <PID_Control_right+0x156>

	}
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000838 	.word	0x20000838
 8001c74:	2000082e 	.word	0x2000082e
 8001c78:	a9200a93 	.word	0xa9200a93
 8001c7c:	20000832 	.word	0x20000832
 8001c80:	20000834 	.word	0x20000834
 8001c84:	20000860 	.word	0x20000860
 8001c88:	2000085c 	.word	0x2000085c
 8001c8c:	20000864 	.word	0x20000864
 8001c90:	20000840 	.word	0x20000840
 8001c94:	2000084c 	.word	0x2000084c
 8001c98:	20000850 	.word	0x20000850
 8001c9c:	20000858 	.word	0x20000858
 8001ca0:	20000868 	.word	0x20000868
 8001ca4:	20000870 	.word	0x20000870
 8001ca8:	2000086c 	.word	0x2000086c
 8001cac:	20000810 	.word	0x20000810
 8001cb0:	20000006 	.word	0x20000006

08001cb4 <motor_init>:

void motor_init(TIM_HandleTypeDef* pwm, TIM_HandleTypeDef* l_enc, TIM_HandleTypeDef* r_enc) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
	// Assign timer pointers
	motor_pwm_tim = pwm;
 8001cc0:	4a3c      	ldr	r2, [pc, #240]	@ (8001db4 <motor_init+0x100>)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6013      	str	r3, [r2, #0]
	l_enc_tim = l_enc;
 8001cc6:	4a3c      	ldr	r2, [pc, #240]	@ (8001db8 <motor_init+0x104>)
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	6013      	str	r3, [r2, #0]
	r_enc_tim = r_enc;
 8001ccc:	4a3b      	ldr	r2, [pc, #236]	@ (8001dbc <motor_init+0x108>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6013      	str	r3, [r2, #0]

	// Start Encoders and PWM for L, R motors
	HAL_TIM_Encoder_Start_IT(l_enc, TIM_CHANNEL_ALL);
 8001cd2:	213c      	movs	r1, #60	@ 0x3c
 8001cd4:	68b8      	ldr	r0, [r7, #8]
 8001cd6:	f002 fe31 	bl	800493c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(r_enc, TIM_CHANNEL_ALL);
 8001cda:	213c      	movs	r1, #60	@ 0x3c
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f002 fe2d 	bl	800493c <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(pwm, L_CHANNEL);
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	f002 fcbb 	bl	8004660 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm, R_CHANNEL);
 8001cea:	2104      	movs	r1, #4
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f002 fcb7 	bl	8004660 <HAL_TIM_PWM_Start>

	l_rpm = (int)((1000/no_of_tick) * 60/1550);
 8001cf2:	4b33      	ldr	r3, [pc, #204]	@ (8001dc0 <motor_init+0x10c>)
 8001cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfe:	fb93 f2f2 	sdiv	r2, r3, r2
 8001d02:	4613      	mov	r3, r2
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	1a9b      	subs	r3, r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	4a2e      	ldr	r2, [pc, #184]	@ (8001dc4 <motor_init+0x110>)
 8001d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d10:	441a      	add	r2, r3
 8001d12:	1292      	asrs	r2, r2, #10
 8001d14:	17db      	asrs	r3, r3, #31
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc8 <motor_init+0x114>)
 8001d1c:	801a      	strh	r2, [r3, #0]
	r_rpm = (int)((1000/no_of_tick) * 60/1550);
 8001d1e:	4b28      	ldr	r3, [pc, #160]	@ (8001dc0 <motor_init+0x10c>)
 8001d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d24:	461a      	mov	r2, r3
 8001d26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d2a:	fb93 f2f2 	sdiv	r2, r3, r2
 8001d2e:	4613      	mov	r3, r2
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	1a9b      	subs	r3, r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4a23      	ldr	r2, [pc, #140]	@ (8001dc4 <motor_init+0x110>)
 8001d38:	fb82 1203 	smull	r1, r2, r2, r3
 8001d3c:	441a      	add	r2, r3
 8001d3e:	1292      	asrs	r2, r2, #10
 8001d40:	17db      	asrs	r3, r3, #31
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	b21a      	sxth	r2, r3
 8001d46:	4b21      	ldr	r3, [pc, #132]	@ (8001dcc <motor_init+0x118>)
 8001d48:	801a      	strh	r2, [r3, #0]

	l_speed = 0, r_speed = 0;
 8001d4a:	4b21      	ldr	r3, [pc, #132]	@ (8001dd0 <motor_init+0x11c>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	801a      	strh	r2, [r3, #0]
 8001d50:	4b20      	ldr	r3, [pc, #128]	@ (8001dd4 <motor_init+0x120>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	801a      	strh	r2, [r3, #0]
	l_position = 0, r_position = 0;  // see SysTick_Handler in stm32f4xx_it.c
 8001d56:	4b20      	ldr	r3, [pc, #128]	@ (8001dd8 <motor_init+0x124>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	801a      	strh	r2, [r3, #0]
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ddc <motor_init+0x128>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	801a      	strh	r2, [r3, #0]
	l_oldpos = 0, r_oldpos = 0; // see SysTick_Handler in stm32f4xx_it.c
 8001d62:	4b1f      	ldr	r3, [pc, #124]	@ (8001de0 <motor_init+0x12c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	801a      	strh	r2, [r3, #0]
 8001d68:	4b1e      	ldr	r3, [pc, #120]	@ (8001de4 <motor_init+0x130>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	801a      	strh	r2, [r3, #0]
	l_angle = 0, r_angle = 0;
 8001d6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001de8 <motor_init+0x134>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	801a      	strh	r2, [r3, #0]
 8001d74:	4b1d      	ldr	r3, [pc, #116]	@ (8001dec <motor_init+0x138>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	801a      	strh	r2, [r3, #0]
	l_pwm_val = 0, r_pwm_val = 0;
 8001d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <motor_init+0x13c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	801a      	strh	r2, [r3, #0]
 8001d80:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <motor_init+0x140>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	801a      	strh	r2, [r3, #0]

	start = 0;
 8001d86:	4b1c      	ldr	r3, [pc, #112]	@ (8001df8 <motor_init+0x144>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

	Kp = 8;       // 10
 8001d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dfc <motor_init+0x148>)
 8001d8e:	2208      	movs	r2, #8
 8001d90:	801a      	strh	r2, [r3, #0]
	Ki = 0.004;   // 0.001
 8001d92:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <motor_init+0x14c>)
 8001d94:	4a1b      	ldr	r2, [pc, #108]	@ (8001e04 <motor_init+0x150>)
 8001d96:	601a      	str	r2, [r3, #0]
	Kd = 1000;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <motor_init+0x154>)
 8001d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e0c <motor_init+0x158>)
 8001d9c:	601a      	str	r2, [r3, #0]
	millisOld = HAL_GetTick();
 8001d9e:	f001 f9e7 	bl	8003170 <HAL_GetTick>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e10 <motor_init+0x15c>)
 8001da8:	601a      	str	r2, [r3, #0]
}
 8001daa:	bf00      	nop
 8001dac:	3710      	adds	r7, #16
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000800 	.word	0x20000800
 8001db8:	20000804 	.word	0x20000804
 8001dbc:	20000808 	.word	0x20000808
 8001dc0:	20000004 	.word	0x20000004
 8001dc4:	a9200a93 	.word	0xa9200a93
 8001dc8:	2000081a 	.word	0x2000081a
 8001dcc:	2000081c 	.word	0x2000081c
 8001dd0:	20000816 	.word	0x20000816
 8001dd4:	20000818 	.word	0x20000818
 8001dd8:	2000082c 	.word	0x2000082c
 8001ddc:	2000082e 	.word	0x2000082e
 8001de0:	20000c7c 	.word	0x20000c7c
 8001de4:	20000c7e 	.word	0x20000c7e
 8001de8:	20000830 	.word	0x20000830
 8001dec:	20000832 	.word	0x20000832
 8001df0:	2000080e 	.word	0x2000080e
 8001df4:	20000810 	.word	0x20000810
 8001df8:	20000828 	.word	0x20000828
 8001dfc:	20000868 	.word	0x20000868
 8001e00:	20000870 	.word	0x20000870
 8001e04:	3b83126f 	.word	0x3b83126f
 8001e08:	2000086c 	.word	0x2000086c
 8001e0c:	447a0000 	.word	0x447a0000
 8001e10:	2000085c 	.word	0x2000085c

08001e14 <motor_forward>:

void motor_forward() {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_SET);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2108      	movs	r1, #8
 8001e1c:	4809      	ldr	r0, [pc, #36]	@ (8001e44 <motor_forward+0x30>)
 8001e1e:	f001 fd2f 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_RESET);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2104      	movs	r1, #4
 8001e26:	4807      	ldr	r0, [pc, #28]	@ (8001e44 <motor_forward+0x30>)
 8001e28:	f001 fd2a 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_SET);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	2110      	movs	r1, #16
 8001e30:	4804      	ldr	r0, [pc, #16]	@ (8001e44 <motor_forward+0x30>)
 8001e32:	f001 fd25 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2120      	movs	r1, #32
 8001e3a:	4802      	ldr	r0, [pc, #8]	@ (8001e44 <motor_forward+0x30>)
 8001e3c:	f001 fd20 	bl	8003880 <HAL_GPIO_WritePin>
}
 8001e40:	bf00      	nop
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40020000 	.word	0x40020000

08001e48 <motor_stop>:
	HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_SET);
}

void motor_stop() {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2108      	movs	r1, #8
 8001e50:	4809      	ldr	r0, [pc, #36]	@ (8001e78 <motor_stop+0x30>)
 8001e52:	f001 fd15 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_RESET);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2104      	movs	r1, #4
 8001e5a:	4807      	ldr	r0, [pc, #28]	@ (8001e78 <motor_stop+0x30>)
 8001e5c:	f001 fd10 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2110      	movs	r1, #16
 8001e64:	4804      	ldr	r0, [pc, #16]	@ (8001e78 <motor_stop+0x30>)
 8001e66:	f001 fd0b 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2120      	movs	r1, #32
 8001e6e:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <motor_stop+0x30>)
 8001e70:	f001 fd06 	bl	8003880 <HAL_GPIO_WritePin>
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40020000 	.word	0x40020000

08001e7c <get_speed_pwm>:

int16_t get_speed_pwm(uint8_t speed) {
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
	int16_t val = (int16_t)(MOTOR_PWM_MAX / 100 * speed);
 8001e86:	79fb      	ldrb	r3, [r7, #7]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	0112      	lsls	r2, r2, #4
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	81fb      	strh	r3, [r7, #14]
	return val;
 8001e96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
	...

08001ea8 <motor_set_speed>:

// Speed: 0 - 100
void motor_set_speed(uint8_t speed) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
	pwm_val_target = get_speed_pwm(speed);
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ffe1 	bl	8001e7c <get_speed_pwm>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <motor_set_speed+0x3c>)
 8001ec0:	801a      	strh	r2, [r3, #0]
	l_pwm_val = pwm_val_target;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <motor_set_speed+0x3c>)
 8001ec4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ec8:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <motor_set_speed+0x40>)
 8001eca:	801a      	strh	r2, [r3, #0]
	r_pwm_val = pwm_val_target;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <motor_set_speed+0x3c>)
 8001ece:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ed2:	4b06      	ldr	r3, [pc, #24]	@ (8001eec <motor_set_speed+0x44>)
 8001ed4:	801a      	strh	r2, [r3, #0]
	set_pwm_LR();
 8001ed6:	f000 f821 	bl	8001f1c <set_pwm_LR>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	2000080c 	.word	0x2000080c
 8001ee8:	2000080e 	.word	0x2000080e
 8001eec:	20000810 	.word	0x20000810

08001ef0 <reset_encoders>:

void reset_encoders() {
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
	// Reset timers
	__HAL_TIM_SET_COUNTER(l_enc_tim, 0);
 8001ef4:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <reset_encoders+0x24>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(r_enc_tim, 0);
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <reset_encoders+0x28>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2200      	movs	r2, #0
 8001f06:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000804 	.word	0x20000804
 8001f18:	20000808 	.word	0x20000808

08001f1c <set_pwm_LR>:

void set_pwm_LR() {
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
	// Set L, R channels
	int16_t l_temp = l_pwm_val, r_temp = r_pwm_val;
 8001f22:	4b1d      	ldr	r3, [pc, #116]	@ (8001f98 <set_pwm_LR+0x7c>)
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	80fb      	strh	r3, [r7, #6]
 8001f28:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <set_pwm_LR+0x80>)
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	80bb      	strh	r3, [r7, #4]

	if (l_temp > MOTOR_PWM_MAX) {
 8001f2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f32:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001f36:	4293      	cmp	r3, r2
 8001f38:	dd03      	ble.n	8001f42 <set_pwm_LR+0x26>
		l_temp = MOTOR_PWM_MAX;
 8001f3a:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001f3e:	80fb      	strh	r3, [r7, #6]
 8001f40:	e005      	b.n	8001f4e <set_pwm_LR+0x32>
	} else if (l_temp < MOTOR_PWM_MIN) {
 8001f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	da01      	bge.n	8001f4e <set_pwm_LR+0x32>
		l_temp = MOTOR_PWM_MIN;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	80fb      	strh	r3, [r7, #6]
	} 

	if (r_temp > MOTOR_PWM_MAX) {
 8001f4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f52:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001f56:	4293      	cmp	r3, r2
 8001f58:	dd03      	ble.n	8001f62 <set_pwm_LR+0x46>
		r_temp = MOTOR_PWM_MAX;
 8001f5a:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001f5e:	80bb      	strh	r3, [r7, #4]
 8001f60:	e005      	b.n	8001f6e <set_pwm_LR+0x52>
	} else if (r_temp < MOTOR_PWM_MIN) {
 8001f62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	da01      	bge.n	8001f6e <set_pwm_LR+0x52>
		r_temp = MOTOR_PWM_MIN;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	80bb      	strh	r3, [r7, #4]
	}

	__HAL_TIM_SET_COMPARE(motor_pwm_tim, L_CHANNEL, l_pwm_val);
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <set_pwm_LR+0x7c>)
 8001f70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f74:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <set_pwm_LR+0x84>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(motor_pwm_tim, R_CHANNEL, r_pwm_val);
 8001f7c:	4b07      	ldr	r3, [pc, #28]	@ (8001f9c <set_pwm_LR+0x80>)
 8001f7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f82:	4b07      	ldr	r3, [pc, #28]	@ (8001fa0 <set_pwm_LR+0x84>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	2000080e 	.word	0x2000080e
 8001f9c:	20000810 	.word	0x20000810
 8001fa0:	20000800 	.word	0x20000800
 8001fa4:	00000000 	.word	0x00000000

08001fa8 <forward>:
/*---------- Movement ----------*/
void stop() {
	motor_stop();
}

void forward(uint32_t distance) {
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b0a4      	sub	sp, #144	@ 0x90
 8001fac:	af02      	add	r7, sp, #8
 8001fae:	6078      	str	r0, [r7, #4]
	millisOld = HAL_GetTick();
 8001fb0:	f001 f8de 	bl	8003170 <HAL_GetTick>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b83      	ldr	r3, [pc, #524]	@ (80021c8 <forward+0x220>)
 8001fba:	601a      	str	r2, [r3, #0]

	static bool has_run = false;  // Flag to check if the function has already run
	if (has_run) return;  // Exit if the function has already been executed once
 8001fbc:	4b83      	ldr	r3, [pc, #524]	@ (80021cc <forward+0x224>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f040 8230 	bne.w	8002426 <forward+0x47e>
	has_run = true;  // Set the flag to true to prevent future runs
 8001fc6:	4b81      	ldr	r3, [pc, #516]	@ (80021cc <forward+0x224>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]

	float wheel_radius = 3.4;							// Wheel radius (cm)
 8001fcc:	4b80      	ldr	r3, [pc, #512]	@ (80021d0 <forward+0x228>)
 8001fce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    float circumference = 2 * 3.14159 * wheel_radius;	// Calculate circumference
 8001fd2:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001fd6:	f7fe fab7 	bl	8000548 <__aeabi_f2d>
 8001fda:	a379      	add	r3, pc, #484	@ (adr r3, 80021c0 <forward+0x218>)
 8001fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe0:	f7fe fb0a 	bl	80005f8 <__aeabi_dmul>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	4610      	mov	r0, r2
 8001fea:	4619      	mov	r1, r3
 8001fec:	f7fe fddc 	bl	8000ba8 <__aeabi_d2f>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    uint32_t pulses_per_rev = 1550;						// Encoder's specification: 11 ppr * 30 (30x reducer) = 1550
 8001ff6:	f240 630e 	movw	r3, #1550	@ 0x60e
 8001ffa:	67fb      	str	r3, [r7, #124]	@ 0x7c
    float pulses_per_cm = pulses_per_rev / circumference;
 8001ffc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001ffe:	ee07 3a90 	vmov	s15, r3
 8002002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002006:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800200a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800200e:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    uint32_t target_pulses = (uint32_t)(distance * pulses_per_cm);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8002020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002028:	ee17 3a90 	vmov	r3, s15
 800202c:	677b      	str	r3, [r7, #116]	@ 0x74

	target_angle = (distance * 360) / circumference;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	ee07 3a90 	vmov	s15, r3
 800203c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002040:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8002044:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002048:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800204c:	ee17 3a90 	vmov	r3, s15
 8002050:	b21a      	sxth	r2, r3
 8002052:	4b60      	ldr	r3, [pc, #384]	@ (80021d4 <forward+0x22c>)
 8002054:	801a      	strh	r2, [r3, #0]
	target_angle = target_angle/2;
 8002056:	4b5f      	ldr	r3, [pc, #380]	@ (80021d4 <forward+0x22c>)
 8002058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205c:	0fda      	lsrs	r2, r3, #31
 800205e:	4413      	add	r3, r2
 8002060:	105b      	asrs	r3, r3, #1
 8002062:	b21a      	sxth	r2, r3
 8002064:	4b5b      	ldr	r3, [pc, #364]	@ (80021d4 <forward+0x22c>)
 8002066:	801a      	strh	r2, [r3, #0]

	l_rpm = (int)((1000/no_of_tick) * 60/1550);
 8002068:	4b5b      	ldr	r3, [pc, #364]	@ (80021d8 <forward+0x230>)
 800206a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800206e:	461a      	mov	r2, r3
 8002070:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002074:	fb93 f2f2 	sdiv	r2, r3, r2
 8002078:	4613      	mov	r3, r2
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4a56      	ldr	r2, [pc, #344]	@ (80021dc <forward+0x234>)
 8002082:	fb82 1203 	smull	r1, r2, r2, r3
 8002086:	441a      	add	r2, r3
 8002088:	1292      	asrs	r2, r2, #10
 800208a:	17db      	asrs	r3, r3, #31
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	b21a      	sxth	r2, r3
 8002090:	4b53      	ldr	r3, [pc, #332]	@ (80021e0 <forward+0x238>)
 8002092:	801a      	strh	r2, [r3, #0]
	r_rpm = (int)((1000/no_of_tick) * 60/1550);
 8002094:	4b50      	ldr	r3, [pc, #320]	@ (80021d8 <forward+0x230>)
 8002096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209a:	461a      	mov	r2, r3
 800209c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020a0:	fb93 f2f2 	sdiv	r2, r3, r2
 80020a4:	4613      	mov	r3, r2
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	4a4b      	ldr	r2, [pc, #300]	@ (80021dc <forward+0x234>)
 80020ae:	fb82 1203 	smull	r1, r2, r2, r3
 80020b2:	441a      	add	r2, r3
 80020b4:	1292      	asrs	r2, r2, #10
 80020b6:	17db      	asrs	r3, r3, #31
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	b21a      	sxth	r2, r3
 80020bc:	4b49      	ldr	r3, [pc, #292]	@ (80021e4 <forward+0x23c>)
 80020be:	801a      	strh	r2, [r3, #0]

	l_speed = 0, r_speed = 0;
 80020c0:	4b49      	ldr	r3, [pc, #292]	@ (80021e8 <forward+0x240>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	801a      	strh	r2, [r3, #0]
 80020c6:	4b49      	ldr	r3, [pc, #292]	@ (80021ec <forward+0x244>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	801a      	strh	r2, [r3, #0]
	l_position = 0, r_position = 0;  // see SysTick_Handler in stm32f4xx_it.c
 80020cc:	4b48      	ldr	r3, [pc, #288]	@ (80021f0 <forward+0x248>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	801a      	strh	r2, [r3, #0]
 80020d2:	4b48      	ldr	r3, [pc, #288]	@ (80021f4 <forward+0x24c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	801a      	strh	r2, [r3, #0]
	l_oldpos = 0, r_oldpos = 0; // see SysTick_Handler in stm32f4xx_it.c
 80020d8:	4b47      	ldr	r3, [pc, #284]	@ (80021f8 <forward+0x250>)
 80020da:	2200      	movs	r2, #0
 80020dc:	801a      	strh	r2, [r3, #0]
 80020de:	4b47      	ldr	r3, [pc, #284]	@ (80021fc <forward+0x254>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	801a      	strh	r2, [r3, #0]
	l_angle = 0, r_angle = 0;
 80020e4:	4b46      	ldr	r3, [pc, #280]	@ (8002200 <forward+0x258>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	801a      	strh	r2, [r3, #0]
 80020ea:	4b46      	ldr	r3, [pc, #280]	@ (8002204 <forward+0x25c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	801a      	strh	r2, [r3, #0]
	l_pwm_val = 0, r_pwm_val = 0;
 80020f0:	4b45      	ldr	r3, [pc, #276]	@ (8002208 <forward+0x260>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	801a      	strh	r2, [r3, #0]
 80020f6:	4b45      	ldr	r3, [pc, #276]	@ (800220c <forward+0x264>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	801a      	strh	r2, [r3, #0]

	l_err = 0, r_err = 0;// for checking whether error has settle down near to zero
 80020fc:	4b44      	ldr	r3, [pc, #272]	@ (8002210 <forward+0x268>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	4b44      	ldr	r3, [pc, #272]	@ (8002214 <forward+0x26c>)
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
	l_error_old = 0, r_error_old = 0;
 8002108:	4b43      	ldr	r3, [pc, #268]	@ (8002218 <forward+0x270>)
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	4b43      	ldr	r3, [pc, #268]	@ (800221c <forward+0x274>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
	l_error_area = 0, r_error_area = 0;
 8002114:	4b42      	ldr	r3, [pc, #264]	@ (8002220 <forward+0x278>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	4b42      	ldr	r3, [pc, #264]	@ (8002224 <forward+0x27c>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

	l_error = target_angle - l_angle;
 8002120:	4b2c      	ldr	r3, [pc, #176]	@ (80021d4 <forward+0x22c>)
 8002122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002126:	b29a      	uxth	r2, r3
 8002128:	4b35      	ldr	r3, [pc, #212]	@ (8002200 <forward+0x258>)
 800212a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212e:	b29b      	uxth	r3, r3
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	b29b      	uxth	r3, r3
 8002134:	b21a      	sxth	r2, r3
 8002136:	4b3c      	ldr	r3, [pc, #240]	@ (8002228 <forward+0x280>)
 8002138:	801a      	strh	r2, [r3, #0]
	r_error = target_angle - r_angle;
 800213a:	4b26      	ldr	r3, [pc, #152]	@ (80021d4 <forward+0x22c>)
 800213c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b30      	ldr	r3, [pc, #192]	@ (8002204 <forward+0x25c>)
 8002144:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002148:	b29b      	uxth	r3, r3
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	b29b      	uxth	r3, r3
 800214e:	b21a      	sxth	r2, r3
 8002150:	4b36      	ldr	r3, [pc, #216]	@ (800222c <forward+0x284>)
 8002152:	801a      	strh	r2, [r3, #0]

    servo_set_dir(STRAIGHT);
 8002154:	f241 206b 	movw	r0, #4715	@ 0x126b
 8002158:	f000 fbd6 	bl	8002908 <servo_set_dir>
    HAL_Delay(500);
 800215c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002160:	f001 f812 	bl	8003188 <HAL_Delay>
	uint8_t buf[100];
    sprintf(buf, "target_pulse: %u", target_pulses);
 8002164:	f107 0308 	add.w	r3, r7, #8
 8002168:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800216a:	4931      	ldr	r1, [pc, #196]	@ (8002230 <forward+0x288>)
 800216c:	4618      	mov	r0, r3
 800216e:	f005 f805 	bl	800717c <siprintf>
	OLED_Clear();
 8002172:	f000 fa07 	bl	8002584 <OLED_Clear>
	OLED_ShowString(0, 15, buf);
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	461a      	mov	r2, r3
 800217c:	210f      	movs	r1, #15
 800217e:	2000      	movs	r0, #0
 8002180:	f000 faf2 	bl	8002768 <OLED_ShowString>
	OLED_Refresh_Gram();
 8002184:	f000 f9c6 	bl	8002514 <OLED_Refresh_Gram>
	HAL_Delay(500);
 8002188:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800218c:	f000 fffc 	bl	8003188 <HAL_Delay>

    // Reset encoder count
    reset_encoders();
 8002190:	f7ff feae 	bl	8001ef0 <reset_encoders>
    	// Initialize to 65535 after resetting the encoder
    uint32_t l_encoder_cnt = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	673b      	str	r3, [r7, #112]	@ 0x70
	uint32_t r_encoder_cnt = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // Move forward
    motor_forward();
 800219c:	f7ff fe3a 	bl	8001e14 <motor_forward>
    OLED_Clear();
 80021a0:	f000 f9f0 	bl	8002584 <OLED_Clear>
	print_OLED(0, 0, "ta: %ld", true, target_angle);
 80021a4:	4b0b      	ldr	r3, [pc, #44]	@ (80021d4 <forward+0x22c>)
 80021a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	4a21      	ldr	r2, [pc, #132]	@ (8002234 <forward+0x28c>)
 80021b0:	2100      	movs	r1, #0
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7fe fed2 	bl	8000f5c <print_OLED>

	start = 1;
 80021b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002238 <forward+0x290>)
 80021ba:	2201      	movs	r2, #1
 80021bc:	601a      	str	r2, [r3, #0]

    while (start) {
 80021be:	e12a      	b.n	8002416 <forward+0x46e>
 80021c0:	f01b866e 	.word	0xf01b866e
 80021c4:	401921f9 	.word	0x401921f9
 80021c8:	2000085c 	.word	0x2000085c
 80021cc:	20000874 	.word	0x20000874
 80021d0:	4059999a 	.word	0x4059999a
 80021d4:	20000834 	.word	0x20000834
 80021d8:	20000004 	.word	0x20000004
 80021dc:	a9200a93 	.word	0xa9200a93
 80021e0:	2000081a 	.word	0x2000081a
 80021e4:	2000081c 	.word	0x2000081c
 80021e8:	20000816 	.word	0x20000816
 80021ec:	20000818 	.word	0x20000818
 80021f0:	2000082c 	.word	0x2000082c
 80021f4:	2000082e 	.word	0x2000082e
 80021f8:	20000c7c 	.word	0x20000c7c
 80021fc:	20000c7e 	.word	0x20000c7e
 8002200:	20000830 	.word	0x20000830
 8002204:	20000832 	.word	0x20000832
 8002208:	2000080e 	.word	0x2000080e
 800220c:	20000810 	.word	0x20000810
 8002210:	20000820 	.word	0x20000820
 8002214:	20000824 	.word	0x20000824
 8002218:	20000844 	.word	0x20000844
 800221c:	2000084c 	.word	0x2000084c
 8002220:	2000083c 	.word	0x2000083c
 8002224:	20000840 	.word	0x20000840
 8002228:	20000836 	.word	0x20000836
 800222c:	20000838 	.word	0x20000838
 8002230:	0800940c 	.word	0x0800940c
 8002234:	08009420 	.word	0x08009420
 8002238:	20000828 	.word	0x20000828

    	l_encoder_cnt = __HAL_TIM_GET_COUNTER(l_enc_tim);
 800223c:	4b7c      	ldr	r3, [pc, #496]	@ (8002430 <forward+0x488>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	673b      	str	r3, [r7, #112]	@ 0x70
    	r_encoder_cnt = __HAL_TIM_GET_COUNTER(r_enc_tim);
 8002246:	4b7b      	ldr	r3, [pc, #492]	@ (8002434 <forward+0x48c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	66fb      	str	r3, [r7, #108]	@ 0x6c

		r_count = (int16_t)r_encoder_cnt;
 8002250:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002252:	b21a      	sxth	r2, r3
 8002254:	4b78      	ldr	r3, [pc, #480]	@ (8002438 <forward+0x490>)
 8002256:	801a      	strh	r2, [r3, #0]
		r_position = r_count/4;  //x1 Encoding
 8002258:	4b77      	ldr	r3, [pc, #476]	@ (8002438 <forward+0x490>)
 800225a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800225e:	2b00      	cmp	r3, #0
 8002260:	da00      	bge.n	8002264 <forward+0x2bc>
 8002262:	3303      	adds	r3, #3
 8002264:	109b      	asrs	r3, r3, #2
 8002266:	b21a      	sxth	r2, r3
 8002268:	4b74      	ldr	r3, [pc, #464]	@ (800243c <forward+0x494>)
 800226a:	801a      	strh	r2, [r3, #0]
		r_angle = r_count/2;
 800226c:	4b72      	ldr	r3, [pc, #456]	@ (8002438 <forward+0x490>)
 800226e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002272:	0fda      	lsrs	r2, r3, #31
 8002274:	4413      	add	r3, r2
 8002276:	105b      	asrs	r3, r3, #1
 8002278:	b21a      	sxth	r2, r3
 800227a:	4b71      	ldr	r3, [pc, #452]	@ (8002440 <forward+0x498>)
 800227c:	801a      	strh	r2, [r3, #0]

		l_encoder_cnt = 65535 - l_encoder_cnt;
 800227e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002280:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8002284:	33ff      	adds	r3, #255	@ 0xff
 8002286:	673b      	str	r3, [r7, #112]	@ 0x70
		l_count = (int16_t)l_encoder_cnt; // 1550 - 360deg
 8002288:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800228a:	b21a      	sxth	r2, r3
 800228c:	4b6d      	ldr	r3, [pc, #436]	@ (8002444 <forward+0x49c>)
 800228e:	801a      	strh	r2, [r3, #0]
		l_position = l_count/4;  //x1 Encoding
 8002290:	4b6c      	ldr	r3, [pc, #432]	@ (8002444 <forward+0x49c>)
 8002292:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002296:	2b00      	cmp	r3, #0
 8002298:	da00      	bge.n	800229c <forward+0x2f4>
 800229a:	3303      	adds	r3, #3
 800229c:	109b      	asrs	r3, r3, #2
 800229e:	b21a      	sxth	r2, r3
 80022a0:	4b69      	ldr	r3, [pc, #420]	@ (8002448 <forward+0x4a0>)
 80022a2:	801a      	strh	r2, [r3, #0]
		l_angle = l_count/2;
 80022a4:	4b67      	ldr	r3, [pc, #412]	@ (8002444 <forward+0x49c>)
 80022a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022aa:	0fda      	lsrs	r2, r3, #31
 80022ac:	4413      	add	r3, r2
 80022ae:	105b      	asrs	r3, r3, #1
 80022b0:	b21a      	sxth	r2, r3
 80022b2:	4b66      	ldr	r3, [pc, #408]	@ (800244c <forward+0x4a4>)
 80022b4:	801a      	strh	r2, [r3, #0]


		l_pwm_val = PID_Control_left();
 80022b6:	f7ff fb5d 	bl	8001974 <PID_Control_left>
 80022ba:	4603      	mov	r3, r0
 80022bc:	461a      	mov	r2, r3
 80022be:	4b64      	ldr	r3, [pc, #400]	@ (8002450 <forward+0x4a8>)
 80022c0:	801a      	strh	r2, [r3, #0]
		r_pwm_val = PID_Control_right();
 80022c2:	f7ff fc27 	bl	8001b14 <PID_Control_right>
 80022c6:	4603      	mov	r3, r0
 80022c8:	461a      	mov	r2, r3
 80022ca:	4b62      	ldr	r3, [pc, #392]	@ (8002454 <forward+0x4ac>)
 80022cc:	801a      	strh	r2, [r3, #0]


		__HAL_TIM_SET_COMPARE(motor_pwm_tim, L_CHANNEL, l_pwm_val);
 80022ce:	4b60      	ldr	r3, [pc, #384]	@ (8002450 <forward+0x4a8>)
 80022d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022d4:	4b60      	ldr	r3, [pc, #384]	@ (8002458 <forward+0x4b0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(motor_pwm_tim, R_CHANNEL, r_pwm_val);
 80022dc:	4b5d      	ldr	r3, [pc, #372]	@ (8002454 <forward+0x4ac>)
 80022de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002458 <forward+0x4b0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	639a      	str	r2, [r3, #56]	@ 0x38



		if (abs(l_error) < 10){ // error is less than 3 deg
 80022ea:	4b5c      	ldr	r3, [pc, #368]	@ (800245c <forward+0x4b4>)
 80022ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bfb8      	it	lt
 80022f4:	425b      	neglt	r3, r3
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	2b09      	cmp	r3, #9
 80022fa:	d823      	bhi.n	8002344 <forward+0x39c>
	      l_err++; // to keep track how long it has reached steady state
 80022fc:	4b58      	ldr	r3, [pc, #352]	@ (8002460 <forward+0x4b8>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3301      	adds	r3, #1
 8002302:	4a57      	ldr	r2, [pc, #348]	@ (8002460 <forward+0x4b8>)
 8002304:	6013      	str	r3, [r2, #0]
	      l_angle = (int)(l_position*360/1550);  //calculate the angle
 8002306:	4b50      	ldr	r3, [pc, #320]	@ (8002448 <forward+0x4a0>)
 8002308:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230c:	461a      	mov	r2, r3
 800230e:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8002312:	fb02 f303 	mul.w	r3, r2, r3
 8002316:	4a53      	ldr	r2, [pc, #332]	@ (8002464 <forward+0x4bc>)
 8002318:	fb82 1203 	smull	r1, r2, r2, r3
 800231c:	441a      	add	r2, r3
 800231e:	1292      	asrs	r2, r2, #10
 8002320:	17db      	asrs	r3, r3, #31
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	b21a      	sxth	r2, r3
 8002326:	4b49      	ldr	r3, [pc, #292]	@ (800244c <forward+0x4a4>)
 8002328:	801a      	strh	r2, [r3, #0]
	      l_error = target_angle - l_angle; // calculate the error
 800232a:	4b4f      	ldr	r3, [pc, #316]	@ (8002468 <forward+0x4c0>)
 800232c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002330:	b29a      	uxth	r2, r3
 8002332:	4b46      	ldr	r3, [pc, #280]	@ (800244c <forward+0x4a4>)
 8002334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002338:	b29b      	uxth	r3, r3
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	b29b      	uxth	r3, r3
 800233e:	b21a      	sxth	r2, r3
 8002340:	4b46      	ldr	r3, [pc, #280]	@ (800245c <forward+0x4b4>)
 8002342:	801a      	strh	r2, [r3, #0]
		}

		if (abs(r_error) < 10){ // error is less than 3 deg
 8002344:	4b49      	ldr	r3, [pc, #292]	@ (800246c <forward+0x4c4>)
 8002346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800234a:	2b00      	cmp	r3, #0
 800234c:	bfb8      	it	lt
 800234e:	425b      	neglt	r3, r3
 8002350:	b29b      	uxth	r3, r3
 8002352:	2b09      	cmp	r3, #9
 8002354:	d823      	bhi.n	800239e <forward+0x3f6>
	      r_err++; // to keep track how long it has reached steady state
 8002356:	4b46      	ldr	r3, [pc, #280]	@ (8002470 <forward+0x4c8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3301      	adds	r3, #1
 800235c:	4a44      	ldr	r2, [pc, #272]	@ (8002470 <forward+0x4c8>)
 800235e:	6013      	str	r3, [r2, #0]
	      r_angle = (int)(r_position*360/1550);  //calculate the angle
 8002360:	4b36      	ldr	r3, [pc, #216]	@ (800243c <forward+0x494>)
 8002362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002366:	461a      	mov	r2, r3
 8002368:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	4a3c      	ldr	r2, [pc, #240]	@ (8002464 <forward+0x4bc>)
 8002372:	fb82 1203 	smull	r1, r2, r2, r3
 8002376:	441a      	add	r2, r3
 8002378:	1292      	asrs	r2, r2, #10
 800237a:	17db      	asrs	r3, r3, #31
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	b21a      	sxth	r2, r3
 8002380:	4b2f      	ldr	r3, [pc, #188]	@ (8002440 <forward+0x498>)
 8002382:	801a      	strh	r2, [r3, #0]
	      r_error = target_angle - r_angle; // calculate the error
 8002384:	4b38      	ldr	r3, [pc, #224]	@ (8002468 <forward+0x4c0>)
 8002386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238a:	b29a      	uxth	r2, r3
 800238c:	4b2c      	ldr	r3, [pc, #176]	@ (8002440 <forward+0x498>)
 800238e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002392:	b29b      	uxth	r3, r3
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	b29b      	uxth	r3, r3
 8002398:	b21a      	sxth	r2, r3
 800239a:	4b34      	ldr	r3, [pc, #208]	@ (800246c <forward+0x4c4>)
 800239c:	801a      	strh	r2, [r3, #0]
		}

		if (l_err > 3) { // error has settled to within the acceptance ranges
 800239e:	4b30      	ldr	r3, [pc, #192]	@ (8002460 <forward+0x4b8>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	dd09      	ble.n	80023ba <forward+0x412>
	   	 	l_pwm_val = 0; //stop
 80023a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <forward+0x4a8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	801a      	strh	r2, [r3, #0]
   	     	__HAL_TIM_SET_COMPARE(motor_pwm_tim, L_CHANNEL, l_pwm_val);
 80023ac:	4b28      	ldr	r3, [pc, #160]	@ (8002450 <forward+0x4a8>)
 80023ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023b2:	4b29      	ldr	r3, [pc, #164]	@ (8002458 <forward+0x4b0>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		if (r_err > 3) { // error has settled to within the acceptance ranges
 80023ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002470 <forward+0x4c8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2b03      	cmp	r3, #3
 80023c0:	dd09      	ble.n	80023d6 <forward+0x42e>
	   	 	r_pwm_val = 0; //stop
 80023c2:	4b24      	ldr	r3, [pc, #144]	@ (8002454 <forward+0x4ac>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	801a      	strh	r2, [r3, #0]
   	     	__HAL_TIM_SET_COMPARE(motor_pwm_tim, R_CHANNEL, r_pwm_val);
 80023c8:	4b22      	ldr	r3, [pc, #136]	@ (8002454 <forward+0x4ac>)
 80023ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023ce:	4b22      	ldr	r3, [pc, #136]	@ (8002458 <forward+0x4b0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	639a      	str	r2, [r3, #56]	@ 0x38
		}

		if (r_pwm_val < 1000) {
 80023d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002454 <forward+0x4ac>)
 80023d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023e0:	da02      	bge.n	80023e8 <forward+0x440>
			start = 0;
 80023e2:	4b24      	ldr	r3, [pc, #144]	@ (8002474 <forward+0x4cc>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
		}

		print_OLED(0, 15, "l: %ld", true, l_angle);
 80023e8:	4b18      	ldr	r3, [pc, #96]	@ (800244c <forward+0x4a4>)
 80023ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	2301      	movs	r3, #1
 80023f2:	4a21      	ldr	r2, [pc, #132]	@ (8002478 <forward+0x4d0>)
 80023f4:	210f      	movs	r1, #15
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7fe fdb0 	bl	8000f5c <print_OLED>
		print_OLED(0, 30, "r: %ld", true, r_angle);
 80023fc:	4b10      	ldr	r3, [pc, #64]	@ (8002440 <forward+0x498>)
 80023fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	2301      	movs	r3, #1
 8002406:	4a1d      	ldr	r2, [pc, #116]	@ (800247c <forward+0x4d4>)
 8002408:	211e      	movs	r1, #30
 800240a:	2000      	movs	r0, #0
 800240c:	f7fe fda6 	bl	8000f5c <print_OLED>

		HAL_Delay(15);
 8002410:	200f      	movs	r0, #15
 8002412:	f000 feb9 	bl	8003188 <HAL_Delay>
    while (start) {
 8002416:	4b17      	ldr	r3, [pc, #92]	@ (8002474 <forward+0x4cc>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	f47f af0e 	bne.w	800223c <forward+0x294>
        // OLED_ShowString(0, 30, buf);
		// OLED_Refresh_Gram();
    }

    // Stop the motors when the target distance is reached
    motor_stop();
 8002420:	f7ff fd12 	bl	8001e48 <motor_stop>
 8002424:	e000      	b.n	8002428 <forward+0x480>
	if (has_run) return;  // Exit if the function has already been executed once
 8002426:	bf00      	nop
}
 8002428:	3788      	adds	r7, #136	@ 0x88
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000804 	.word	0x20000804
 8002434:	20000808 	.word	0x20000808
 8002438:	20000814 	.word	0x20000814
 800243c:	2000082e 	.word	0x2000082e
 8002440:	20000832 	.word	0x20000832
 8002444:	20000812 	.word	0x20000812
 8002448:	2000082c 	.word	0x2000082c
 800244c:	20000830 	.word	0x20000830
 8002450:	2000080e 	.word	0x2000080e
 8002454:	20000810 	.word	0x20000810
 8002458:	20000800 	.word	0x20000800
 800245c:	20000836 	.word	0x20000836
 8002460:	20000820 	.word	0x20000820
 8002464:	a9200a93 	.word	0xa9200a93
 8002468:	20000834 	.word	0x20000834
 800246c:	20000838 	.word	0x20000838
 8002470:	20000824 	.word	0x20000824
 8002474:	20000828 	.word	0x20000828
 8002478:	08009428 	.word	0x08009428
 800247c:	08009430 	.word	0x08009430

08002480 <OLED_WR_Byte>:
			   1 => sending data
			   0 => sending command
Output  : none

**************************************************************************/
void OLED_WR_Byte(uint8_t dat, uint8_t DataCmd) {
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	460a      	mov	r2, r1
 800248a:	71fb      	strb	r3, [r7, #7]
 800248c:	4613      	mov	r3, r2
 800248e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if (DataCmd == 1) {		// Data write
 8002490:	79bb      	ldrb	r3, [r7, #6]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d106      	bne.n	80024a4 <OLED_WR_Byte+0x24>
		OLED_RS_Set();		// Set the D/C# line
 8002496:	2201      	movs	r2, #1
 8002498:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800249c:	481c      	ldr	r0, [pc, #112]	@ (8002510 <OLED_WR_Byte+0x90>)
 800249e:	f001 f9ef 	bl	8003880 <HAL_GPIO_WritePin>
 80024a2:	e005      	b.n	80024b0 <OLED_WR_Byte+0x30>
	} else {				// Command write
		OLED_RS_Clr();
 80024a4:	2200      	movs	r2, #0
 80024a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80024aa:	4819      	ldr	r0, [pc, #100]	@ (8002510 <OLED_WR_Byte+0x90>)
 80024ac:	f001 f9e8 	bl	8003880 <HAL_GPIO_WritePin>
	}						// Clear the D/C# line

	for(i = 0; i < 8 ; i++) {
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
 80024b4:	e01e      	b.n	80024f4 <OLED_WR_Byte+0x74>
		OLED_SCLK_Clr();
 80024b6:	2200      	movs	r2, #0
 80024b8:	2120      	movs	r1, #32
 80024ba:	4815      	ldr	r0, [pc, #84]	@ (8002510 <OLED_WR_Byte+0x90>)
 80024bc:	f001 f9e0 	bl	8003880 <HAL_GPIO_WritePin>
		(dat & 0x80) ? OLED_SDIN_Set(): OLED_SDIN_Clr();
 80024c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	da05      	bge.n	80024d4 <OLED_WR_Byte+0x54>
 80024c8:	2201      	movs	r2, #1
 80024ca:	2140      	movs	r1, #64	@ 0x40
 80024cc:	4810      	ldr	r0, [pc, #64]	@ (8002510 <OLED_WR_Byte+0x90>)
 80024ce:	f001 f9d7 	bl	8003880 <HAL_GPIO_WritePin>
 80024d2:	e004      	b.n	80024de <OLED_WR_Byte+0x5e>
 80024d4:	2200      	movs	r2, #0
 80024d6:	2140      	movs	r1, #64	@ 0x40
 80024d8:	480d      	ldr	r0, [pc, #52]	@ (8002510 <OLED_WR_Byte+0x90>)
 80024da:	f001 f9d1 	bl	8003880 <HAL_GPIO_WritePin>
		dat <<= 1;
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	71fb      	strb	r3, [r7, #7]
		OLED_SCLK_Set();
 80024e4:	2201      	movs	r2, #1
 80024e6:	2120      	movs	r1, #32
 80024e8:	4809      	ldr	r0, [pc, #36]	@ (8002510 <OLED_WR_Byte+0x90>)
 80024ea:	f001 f9c9 	bl	8003880 <HAL_GPIO_WritePin>
	for(i = 0; i < 8 ; i++) {
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	3301      	adds	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	7bfb      	ldrb	r3, [r7, #15]
 80024f6:	2b07      	cmp	r3, #7
 80024f8:	d9dd      	bls.n	80024b6 <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();			// Keep the D/C# line high upon exit
 80024fa:	2201      	movs	r2, #1
 80024fc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002500:	4803      	ldr	r0, [pc, #12]	@ (8002510 <OLED_WR_Byte+0x90>)
 8002502:	f001 f9bd 	bl	8003880 <HAL_GPIO_WritePin>
}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40021000 	.word	0x40021000

08002514 <OLED_Refresh_Gram>:

// **************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram() {
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i = 0; i < 8; i++){
 800251a:	2300      	movs	r3, #0
 800251c:	71fb      	strb	r3, [r7, #7]
 800251e:	e026      	b.n	800256e <OLED_Refresh_Gram+0x5a>
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	3b50      	subs	r3, #80	@ 0x50
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2100      	movs	r1, #0
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ffa9 	bl	8002480 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 800252e:	2100      	movs	r1, #0
 8002530:	2000      	movs	r0, #0
 8002532:	f7ff ffa5 	bl	8002480 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 8002536:	2100      	movs	r1, #0
 8002538:	2010      	movs	r0, #16
 800253a:	f7ff ffa1 	bl	8002480 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800253e:	2300      	movs	r3, #0
 8002540:	71bb      	strb	r3, [r7, #6]
 8002542:	e00d      	b.n	8002560 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 8002544:	79ba      	ldrb	r2, [r7, #6]
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	490d      	ldr	r1, [pc, #52]	@ (8002580 <OLED_Refresh_Gram+0x6c>)
 800254a:	00d2      	lsls	r2, r2, #3
 800254c:	440a      	add	r2, r1
 800254e:	4413      	add	r3, r2
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2101      	movs	r1, #1
 8002554:	4618      	mov	r0, r3
 8002556:	f7ff ff93 	bl	8002480 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800255a:	79bb      	ldrb	r3, [r7, #6]
 800255c:	3301      	adds	r3, #1
 800255e:	71bb      	strb	r3, [r7, #6]
 8002560:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002564:	2b00      	cmp	r3, #0
 8002566:	daed      	bge.n	8002544 <OLED_Refresh_Gram+0x30>
	for(i = 0; i < 8; i++){
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	3301      	adds	r3, #1
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	2b07      	cmp	r3, #7
 8002572:	d9d5      	bls.n	8002520 <OLED_Refresh_Gram+0xc>
	}
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000878 	.word	0x20000878

08002584 <OLED_Clear>:

// **************************************************************************
// Clear OLED
void OLED_Clear() {
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for(i = 0; i < 8; i++)
 800258a:	2300      	movs	r3, #0
 800258c:	71fb      	strb	r3, [r7, #7]
 800258e:	e014      	b.n	80025ba <OLED_Clear+0x36>
		for(n = 0; n < 128; n++)
 8002590:	2300      	movs	r3, #0
 8002592:	71bb      	strb	r3, [r7, #6]
 8002594:	e00a      	b.n	80025ac <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 8002596:	79ba      	ldrb	r2, [r7, #6]
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	490c      	ldr	r1, [pc, #48]	@ (80025cc <OLED_Clear+0x48>)
 800259c:	00d2      	lsls	r2, r2, #3
 800259e:	440a      	add	r2, r1
 80025a0:	4413      	add	r3, r2
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
		for(n = 0; n < 128; n++)
 80025a6:	79bb      	ldrb	r3, [r7, #6]
 80025a8:	3301      	adds	r3, #1
 80025aa:	71bb      	strb	r3, [r7, #6]
 80025ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	daf0      	bge.n	8002596 <OLED_Clear+0x12>
	for(i = 0; i < 8; i++)
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	3301      	adds	r3, #1
 80025b8:	71fb      	strb	r3, [r7, #7]
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	2b07      	cmp	r3, #7
 80025be:	d9e7      	bls.n	8002590 <OLED_Clear+0xc>
	OLED_Refresh_Gram();	// Refresh
 80025c0:	f7ff ffa8 	bl	8002514 <OLED_Refresh_Gram>
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000878 	.word	0x20000878

080025d0 <OLED_DrawPoint>:
	OLED_WR_Byte(0XAE, OLED_CMD);	// DISPLAY OFF
}

// **************************************************************************
// Draw A Point
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t) {
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
 80025da:	460b      	mov	r3, r1
 80025dc:	71bb      	strb	r3, [r7, #6]
 80025de:	4613      	mov	r3, r2
 80025e0:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73fb      	strb	r3, [r7, #15]

	if (x > 127 || y > 63)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	db41      	blt.n	8002672 <OLED_DrawPoint+0xa2>
 80025ee:	79bb      	ldrb	r3, [r7, #6]
 80025f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80025f2:	d83e      	bhi.n	8002672 <OLED_DrawPoint+0xa2>
		return;		// Out of reach

	pos = 7 - y/8;
 80025f4:	79bb      	ldrb	r3, [r7, #6]
 80025f6:	08db      	lsrs	r3, r3, #3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f1c3 0307 	rsb	r3, r3, #7
 80025fe:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 8002600:	79bb      	ldrb	r3, [r7, #6]
 8002602:	f003 0307 	and.w	r3, r3, #7
 8002606:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7-bx);
 8002608:	7b7b      	ldrb	r3, [r7, #13]
 800260a:	f1c3 0307 	rsb	r3, r3, #7
 800260e:	2201      	movs	r2, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	73fb      	strb	r3, [r7, #15]

	if (t) {
 8002616:	797b      	ldrb	r3, [r7, #5]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d012      	beq.n	8002642 <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 800261c:	79fa      	ldrb	r2, [r7, #7]
 800261e:	7bbb      	ldrb	r3, [r7, #14]
 8002620:	4917      	ldr	r1, [pc, #92]	@ (8002680 <OLED_DrawPoint+0xb0>)
 8002622:	00d2      	lsls	r2, r2, #3
 8002624:	440a      	add	r2, r1
 8002626:	4413      	add	r3, r2
 8002628:	7818      	ldrb	r0, [r3, #0]
 800262a:	79fa      	ldrb	r2, [r7, #7]
 800262c:	7bbb      	ldrb	r3, [r7, #14]
 800262e:	7bf9      	ldrb	r1, [r7, #15]
 8002630:	4301      	orrs	r1, r0
 8002632:	b2c8      	uxtb	r0, r1
 8002634:	4912      	ldr	r1, [pc, #72]	@ (8002680 <OLED_DrawPoint+0xb0>)
 8002636:	00d2      	lsls	r2, r2, #3
 8002638:	440a      	add	r2, r1
 800263a:	4413      	add	r3, r2
 800263c:	4602      	mov	r2, r0
 800263e:	701a      	strb	r2, [r3, #0]
 8002640:	e018      	b.n	8002674 <OLED_DrawPoint+0xa4>
	} else {
		OLED_GRAM[x][pos] &= ~temp;
 8002642:	79fa      	ldrb	r2, [r7, #7]
 8002644:	7bbb      	ldrb	r3, [r7, #14]
 8002646:	490e      	ldr	r1, [pc, #56]	@ (8002680 <OLED_DrawPoint+0xb0>)
 8002648:	00d2      	lsls	r2, r2, #3
 800264a:	440a      	add	r2, r1
 800264c:	4413      	add	r3, r2
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	b25a      	sxtb	r2, r3
 8002652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002656:	43db      	mvns	r3, r3
 8002658:	b25b      	sxtb	r3, r3
 800265a:	4013      	ands	r3, r2
 800265c:	b259      	sxtb	r1, r3
 800265e:	79fa      	ldrb	r2, [r7, #7]
 8002660:	7bbb      	ldrb	r3, [r7, #14]
 8002662:	b2c8      	uxtb	r0, r1
 8002664:	4906      	ldr	r1, [pc, #24]	@ (8002680 <OLED_DrawPoint+0xb0>)
 8002666:	00d2      	lsls	r2, r2, #3
 8002668:	440a      	add	r2, r1
 800266a:	4413      	add	r3, r2
 800266c:	4602      	mov	r2, r0
 800266e:	701a      	strb	r2, [r3, #0]
 8002670:	e000      	b.n	8002674 <OLED_DrawPoint+0xa4>
		return;		// Out of reach
 8002672:	bf00      	nop
	}
}
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000878 	.word	0x20000878

08002684 <OLED_ShowChar>:

// **************************************************************************
// Show Char
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode) {
 8002684:	b590      	push	{r4, r7, lr}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	4604      	mov	r4, r0
 800268c:	4608      	mov	r0, r1
 800268e:	4611      	mov	r1, r2
 8002690:	461a      	mov	r2, r3
 8002692:	4623      	mov	r3, r4
 8002694:	71fb      	strb	r3, [r7, #7]
 8002696:	4603      	mov	r3, r0
 8002698:	71bb      	strb	r3, [r7, #6]
 800269a:	460b      	mov	r3, r1
 800269c:	717b      	strb	r3, [r7, #5]
 800269e:	4613      	mov	r3, r2
 80026a0:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 80026a2:	79bb      	ldrb	r3, [r7, #6]
 80026a4:	733b      	strb	r3, [r7, #12]

	chr = chr - ' ';
 80026a6:	797b      	ldrb	r3, [r7, #5]
 80026a8:	3b20      	subs	r3, #32
 80026aa:	717b      	strb	r3, [r7, #5]
    for(t = 0; t < size; t++) {
 80026ac:	2300      	movs	r3, #0
 80026ae:	73bb      	strb	r3, [r7, #14]
 80026b0:	e04d      	b.n	800274e <OLED_ShowChar+0xca>
		if (size == 12)
 80026b2:	793b      	ldrb	r3, [r7, #4]
 80026b4:	2b0c      	cmp	r3, #12
 80026b6:	d10b      	bne.n	80026d0 <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t];		// 1206 Size
 80026b8:	797a      	ldrb	r2, [r7, #5]
 80026ba:	7bb9      	ldrb	r1, [r7, #14]
 80026bc:	4828      	ldr	r0, [pc, #160]	@ (8002760 <OLED_ShowChar+0xdc>)
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	4403      	add	r3, r0
 80026c8:	440b      	add	r3, r1
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	73fb      	strb	r3, [r7, #15]
 80026ce:	e007      	b.n	80026e0 <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t];		// 1608 Size
 80026d0:	797a      	ldrb	r2, [r7, #5]
 80026d2:	7bbb      	ldrb	r3, [r7, #14]
 80026d4:	4923      	ldr	r1, [pc, #140]	@ (8002764 <OLED_ShowChar+0xe0>)
 80026d6:	0112      	lsls	r2, r2, #4
 80026d8:	440a      	add	r2, r1
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	73fb      	strb	r3, [r7, #15]

        for(t1 = 0; t1 < 8; t1++) {
 80026e0:	2300      	movs	r3, #0
 80026e2:	737b      	strb	r3, [r7, #13]
 80026e4:	e02d      	b.n	8002742 <OLED_ShowChar+0xbe>
			if (temp & 0x80) {
 80026e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	da07      	bge.n	80026fe <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 80026ee:	f897 2020 	ldrb.w	r2, [r7, #32]
 80026f2:	79b9      	ldrb	r1, [r7, #6]
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7ff ff6a 	bl	80025d0 <OLED_DrawPoint>
 80026fc:	e00c      	b.n	8002718 <OLED_ShowChar+0x94>
			} else {
				OLED_DrawPoint(x, y, !mode);
 80026fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf0c      	ite	eq
 8002706:	2301      	moveq	r3, #1
 8002708:	2300      	movne	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	79b9      	ldrb	r1, [r7, #6]
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ff5c 	bl	80025d0 <OLED_DrawPoint>
			}

			temp <<= 1;
 8002718:	7bfb      	ldrb	r3, [r7, #15]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
			y++;
 800271e:	79bb      	ldrb	r3, [r7, #6]
 8002720:	3301      	adds	r3, #1
 8002722:	71bb      	strb	r3, [r7, #6]

			if((y - y0) == size) {
 8002724:	79ba      	ldrb	r2, [r7, #6]
 8002726:	7b3b      	ldrb	r3, [r7, #12]
 8002728:	1ad2      	subs	r2, r2, r3
 800272a:	793b      	ldrb	r3, [r7, #4]
 800272c:	429a      	cmp	r2, r3
 800272e:	d105      	bne.n	800273c <OLED_ShowChar+0xb8>
				y = y0;
 8002730:	7b3b      	ldrb	r3, [r7, #12]
 8002732:	71bb      	strb	r3, [r7, #6]
				x++;
 8002734:	79fb      	ldrb	r3, [r7, #7]
 8002736:	3301      	adds	r3, #1
 8002738:	71fb      	strb	r3, [r7, #7]
				break;
 800273a:	e005      	b.n	8002748 <OLED_ShowChar+0xc4>
        for(t1 = 0; t1 < 8; t1++) {
 800273c:	7b7b      	ldrb	r3, [r7, #13]
 800273e:	3301      	adds	r3, #1
 8002740:	737b      	strb	r3, [r7, #13]
 8002742:	7b7b      	ldrb	r3, [r7, #13]
 8002744:	2b07      	cmp	r3, #7
 8002746:	d9ce      	bls.n	80026e6 <OLED_ShowChar+0x62>
    for(t = 0; t < size; t++) {
 8002748:	7bbb      	ldrb	r3, [r7, #14]
 800274a:	3301      	adds	r3, #1
 800274c:	73bb      	strb	r3, [r7, #14]
 800274e:	7bba      	ldrb	r2, [r7, #14]
 8002750:	793b      	ldrb	r3, [r7, #4]
 8002752:	429a      	cmp	r2, r3
 8002754:	d3ad      	bcc.n	80026b2 <OLED_ShowChar+0x2e>
			}
		}
    }
}
 8002756:	bf00      	nop
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	bd90      	pop	{r4, r7, pc}
 8002760:	0800944c 	.word	0x0800944c
 8002764:	080098c0 	.word	0x080098c0

08002768 <OLED_ShowString>:
	}
}

// **************************************************************************
// Show The String
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af02      	add	r7, sp, #8
 800276e:	4603      	mov	r3, r0
 8002770:	603a      	str	r2, [r7, #0]
 8002772:	71fb      	strb	r3, [r7, #7]
 8002774:	460b      	mov	r3, r1
 8002776:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
    while (*p != '\0') {
 8002778:	e01f      	b.n	80027ba <OLED_ShowString+0x52>
        if (x > MAX_CHAR_POSX){
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	2b7a      	cmp	r3, #122	@ 0x7a
 800277e:	d904      	bls.n	800278a <OLED_ShowString+0x22>
        	x = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	71fb      	strb	r3, [r7, #7]
        	y += 16;
 8002784:	79bb      	ldrb	r3, [r7, #6]
 8002786:	3310      	adds	r3, #16
 8002788:	71bb      	strb	r3, [r7, #6]
        }

        if (y > MAX_CHAR_POSY) {
 800278a:	79bb      	ldrb	r3, [r7, #6]
 800278c:	2b3a      	cmp	r3, #58	@ 0x3a
 800278e:	d905      	bls.n	800279c <OLED_ShowString+0x34>
        	y = x = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	71fb      	strb	r3, [r7, #7]
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	71bb      	strb	r3, [r7, #6]
        	OLED_Clear();
 8002798:	f7ff fef4 	bl	8002584 <OLED_Clear>
        }

        OLED_ShowChar(x, y, *p, 12, 1);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	781a      	ldrb	r2, [r3, #0]
 80027a0:	79b9      	ldrb	r1, [r7, #6]
 80027a2:	79f8      	ldrb	r0, [r7, #7]
 80027a4:	2301      	movs	r3, #1
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	230c      	movs	r3, #12
 80027aa:	f7ff ff6b 	bl	8002684 <OLED_ShowChar>
        x += 8;
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	3308      	adds	r3, #8
 80027b2:	71fb      	strb	r3, [r7, #7]
        p++;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	3301      	adds	r3, #1
 80027b8:	603b      	str	r3, [r7, #0]
    while (*p != '\0') {
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1db      	bne.n	800277a <OLED_ShowString+0x12>
    }
}
 80027c2:	bf00      	nop
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <OLED_Init>:

void OLED_Init() {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80027d0:	f001 f9b4 	bl	8003b3c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);	// turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles
 80027d4:	4b41      	ldr	r3, [pc, #260]	@ (80028dc <OLED_Init+0x110>)
 80027d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d8:	4a40      	ldr	r2, [pc, #256]	@ (80028dc <OLED_Init+0x110>)
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e0:	4b3e      	ldr	r3, [pc, #248]	@ (80028dc <OLED_Init+0x110>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e4:	4a3d      	ldr	r2, [pc, #244]	@ (80028dc <OLED_Init+0x110>)
 80027e6:	f023 0304 	bic.w	r3, r3, #4
 80027ea:	6713      	str	r3, [r2, #112]	@ 0x70
										// LSE oscillator switch off to let PC13 PC14 PC15 be IO


	HAL_PWR_DisableBkUpAccess();
 80027ec:	f001 f9ba 	bl	8003b64 <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 80027f0:	2200      	movs	r2, #0
 80027f2:	2180      	movs	r1, #128	@ 0x80
 80027f4:	483a      	ldr	r0, [pc, #232]	@ (80028e0 <OLED_Init+0x114>)
 80027f6:	f001 f843 	bl	8003880 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80027fa:	2064      	movs	r0, #100	@ 0x64
 80027fc:	f000 fcc4 	bl	8003188 <HAL_Delay>
	OLED_RST_Set();
 8002800:	2201      	movs	r2, #1
 8002802:	2180      	movs	r1, #128	@ 0x80
 8002804:	4836      	ldr	r0, [pc, #216]	@ (80028e0 <OLED_Init+0x114>)
 8002806:	f001 f83b 	bl	8003880 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD);	// Off Display
 800280a:	2100      	movs	r1, #0
 800280c:	20ae      	movs	r0, #174	@ 0xae
 800280e:	f7ff fe37 	bl	8002480 <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD);	// Set Oscillator Division
 8002812:	2100      	movs	r1, #0
 8002814:	20d5      	movs	r0, #213	@ 0xd5
 8002816:	f7ff fe33 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);		// [3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800281a:	2100      	movs	r1, #0
 800281c:	2050      	movs	r0, #80	@ 0x50
 800281e:	f7ff fe2f 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD);	// multiplex ratio
 8002822:	2100      	movs	r1, #0
 8002824:	20a8      	movs	r0, #168	@ 0xa8
 8002826:	f7ff fe2b 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD);	// duty = 0X3F(1/64)
 800282a:	2100      	movs	r1, #0
 800282c:	203f      	movs	r0, #63	@ 0x3f
 800282e:	f7ff fe27 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD);	// set display offset
 8002832:	2100      	movs	r1, #0
 8002834:	20d3      	movs	r0, #211	@ 0xd3
 8002836:	f7ff fe23 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD);	// 0
 800283a:	2100      	movs	r1, #0
 800283c:	2000      	movs	r0, #0
 800283e:	f7ff fe1f 	bl	8002480 <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD);	// set display start line [5:0]- from 0-63. RESET
 8002842:	2100      	movs	r1, #0
 8002844:	2040      	movs	r0, #64	@ 0x40
 8002846:	f7ff fe1b 	bl	8002480 <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD);	// Set charge pump
 800284a:	2100      	movs	r1, #0
 800284c:	208d      	movs	r0, #141	@ 0x8d
 800284e:	f7ff fe17 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); 	// Enable Charge Pump
 8002852:	2100      	movs	r1, #0
 8002854:	2014      	movs	r0, #20
 8002856:	f7ff fe13 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD);	// Set Memory Addressing Mode
 800285a:	2100      	movs	r1, #0
 800285c:	2020      	movs	r0, #32
 800285e:	f7ff fe0f 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD);	// Page Addressing Mode (RESET)
 8002862:	2100      	movs	r1, #0
 8002864:	2002      	movs	r0, #2
 8002866:	f7ff fe0b 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD);	// Set segment remap, bit0:0,0->0;1,0->127;
 800286a:	2100      	movs	r1, #0
 800286c:	20a1      	movs	r0, #161	@ 0xa1
 800286e:	f7ff fe07 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD);	// Set COM Output Scan Direction
 8002872:	2100      	movs	r1, #0
 8002874:	20c0      	movs	r0, #192	@ 0xc0
 8002876:	f7ff fe03 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD);	// Set COM Pins
 800287a:	2100      	movs	r1, #0
 800287c:	20da      	movs	r0, #218	@ 0xda
 800287e:	f7ff fdff 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);	// [5:4] setting
 8002882:	2100      	movs	r1, #0
 8002884:	2012      	movs	r0, #18
 8002886:	f7ff fdfb 	bl	8002480 <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD);	// Contrast Control
 800288a:	2100      	movs	r1, #0
 800288c:	2081      	movs	r0, #129	@ 0x81
 800288e:	f7ff fdf7 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD);	// 1~256; Default: 0X7F
 8002892:	2100      	movs	r1, #0
 8002894:	20ef      	movs	r0, #239	@ 0xef
 8002896:	f7ff fdf3 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD);	// Set Pre-charge Period
 800289a:	2100      	movs	r1, #0
 800289c:	20d9      	movs	r0, #217	@ 0xd9
 800289e:	f7ff fdef 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD);	// [3:0],PHASE 1;[7:4],PHASE 2;
 80028a2:	2100      	movs	r1, #0
 80028a4:	20f1      	movs	r0, #241	@ 0xf1
 80028a6:	f7ff fdeb 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD);	// Set VCOMH
 80028aa:	2100      	movs	r1, #0
 80028ac:	20db      	movs	r0, #219	@ 0xdb
 80028ae:	f7ff fde7 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD);	// [6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80028b2:	2100      	movs	r1, #0
 80028b4:	2030      	movs	r0, #48	@ 0x30
 80028b6:	f7ff fde3 	bl	8002480 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD);	// Enable display outputs according to the GDDRAM contents
 80028ba:	2100      	movs	r1, #0
 80028bc:	20a4      	movs	r0, #164	@ 0xa4
 80028be:	f7ff fddf 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD);	// Set normal display
 80028c2:	2100      	movs	r1, #0
 80028c4:	20a6      	movs	r0, #166	@ 0xa6
 80028c6:	f7ff fddb 	bl	8002480 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);	// DISPLAY ON
 80028ca:	2100      	movs	r1, #0
 80028cc:	20af      	movs	r0, #175	@ 0xaf
 80028ce:	f7ff fdd7 	bl	8002480 <OLED_WR_Byte>
	OLED_Clear();
 80028d2:	f7ff fe57 	bl	8002584 <OLED_Clear>
}
 80028d6:	bf00      	nop
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40021000 	.word	0x40021000

080028e4 <servo_init>:
#include "servo.h"


TIM_HandleTypeDef* pwm_tim;

void servo_init(TIM_HandleTypeDef* pwm) {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	pwm_tim = pwm;
 80028ec:	4a05      	ldr	r2, [pc, #20]	@ (8002904 <servo_init+0x20>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pwm, SERVO_PWM_CHANNEL);
 80028f2:	2100      	movs	r1, #0
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f001 feb3 	bl	8004660 <HAL_TIM_PWM_Start>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000c78 	.word	0x20000c78

08002908 <servo_set_dir>:

void servo_set_dir(uint32_t val) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
	HAL_Delay(500);
 8002910:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002914:	f000 fc38 	bl	8003188 <HAL_Delay>
	pwm_tim->Instance->CCR1 = val;
 8002918:	4b04      	ldr	r3, [pc, #16]	@ (800292c <servo_set_dir+0x24>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000c78 	.word	0x20000c78

08002930 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	4b10      	ldr	r3, [pc, #64]	@ (800297c <HAL_MspInit+0x4c>)
 800293c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293e:	4a0f      	ldr	r2, [pc, #60]	@ (800297c <HAL_MspInit+0x4c>)
 8002940:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002944:	6453      	str	r3, [r2, #68]	@ 0x44
 8002946:	4b0d      	ldr	r3, [pc, #52]	@ (800297c <HAL_MspInit+0x4c>)
 8002948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800294a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	4b09      	ldr	r3, [pc, #36]	@ (800297c <HAL_MspInit+0x4c>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	4a08      	ldr	r2, [pc, #32]	@ (800297c <HAL_MspInit+0x4c>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002960:	6413      	str	r3, [r2, #64]	@ 0x40
 8002962:	4b06      	ldr	r3, [pc, #24]	@ (800297c <HAL_MspInit+0x4c>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800

08002980 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	@ 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a19      	ldr	r2, [pc, #100]	@ (8002a04 <HAL_I2C_MspInit+0x84>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d12c      	bne.n	80029fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	4b18      	ldr	r3, [pc, #96]	@ (8002a08 <HAL_I2C_MspInit+0x88>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029aa:	4a17      	ldr	r2, [pc, #92]	@ (8002a08 <HAL_I2C_MspInit+0x88>)
 80029ac:	f043 0302 	orr.w	r3, r3, #2
 80029b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b2:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <HAL_I2C_MspInit+0x88>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 80029be:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80029c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029c4:	2312      	movs	r3, #18
 80029c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029cc:	2303      	movs	r3, #3
 80029ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029d0:	2304      	movs	r3, #4
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	4619      	mov	r1, r3
 80029da:	480c      	ldr	r0, [pc, #48]	@ (8002a0c <HAL_I2C_MspInit+0x8c>)
 80029dc:	f000 fd9c 	bl	8003518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029e0:	2300      	movs	r3, #0
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <HAL_I2C_MspInit+0x88>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	4a07      	ldr	r2, [pc, #28]	@ (8002a08 <HAL_I2C_MspInit+0x88>)
 80029ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f0:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <HAL_I2C_MspInit+0x88>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029f8:	60fb      	str	r3, [r7, #12]
 80029fa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80029fc:	bf00      	nop
 80029fe:	3728      	adds	r7, #40	@ 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40005400 	.word	0x40005400
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020400 	.word	0x40020400

08002a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08c      	sub	sp, #48	@ 0x30
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a31      	ldr	r2, [pc, #196]	@ (8002af4 <HAL_TIM_Base_MspInit+0xe4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d135      	bne.n	8002a9e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	4b30      	ldr	r3, [pc, #192]	@ (8002af8 <HAL_TIM_Base_MspInit+0xe8>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8002af8 <HAL_TIM_Base_MspInit+0xe8>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a42:	4b2d      	ldr	r3, [pc, #180]	@ (8002af8 <HAL_TIM_Base_MspInit+0xe8>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	61bb      	str	r3, [r7, #24]
 8002a4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	4b29      	ldr	r3, [pc, #164]	@ (8002af8 <HAL_TIM_Base_MspInit+0xe8>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	4a28      	ldr	r2, [pc, #160]	@ (8002af8 <HAL_TIM_Base_MspInit+0xe8>)
 8002a58:	f043 0310 	orr.w	r3, r3, #16
 8002a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a5e:	4b26      	ldr	r3, [pc, #152]	@ (8002af8 <HAL_TIM_Base_MspInit+0xe8>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	617b      	str	r3, [r7, #20]
 8002a68:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a70:	2302      	movs	r3, #2
 8002a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a74:	2300      	movs	r3, #0
 8002a76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a80:	f107 031c 	add.w	r3, r7, #28
 8002a84:	4619      	mov	r1, r3
 8002a86:	481d      	ldr	r0, [pc, #116]	@ (8002afc <HAL_TIM_Base_MspInit+0xec>)
 8002a88:	f000 fd46 	bl	8003518 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	201b      	movs	r0, #27
 8002a92:	f000 fc78 	bl	8003386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002a96:	201b      	movs	r0, #27
 8002a98:	f000 fc91 	bl	80033be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002a9c:	e026      	b.n	8002aec <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM6)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a17      	ldr	r2, [pc, #92]	@ (8002b00 <HAL_TIM_Base_MspInit+0xf0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d10e      	bne.n	8002ac6 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	4b12      	ldr	r3, [pc, #72]	@ (8002af8 <HAL_TIM_Base_MspInit+0xe8>)
 8002aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab0:	4a11      	ldr	r2, [pc, #68]	@ (8002af8 <HAL_TIM_Base_MspInit+0xe8>)
 8002ab2:	f043 0310 	orr.w	r3, r3, #16
 8002ab6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <HAL_TIM_Base_MspInit+0xe8>)
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	f003 0310 	and.w	r3, r3, #16
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	693b      	ldr	r3, [r7, #16]
}
 8002ac4:	e012      	b.n	8002aec <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM8)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a0e      	ldr	r2, [pc, #56]	@ (8002b04 <HAL_TIM_Base_MspInit+0xf4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d10d      	bne.n	8002aec <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <HAL_TIM_Base_MspInit+0xe8>)
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad8:	4a07      	ldr	r2, [pc, #28]	@ (8002af8 <HAL_TIM_Base_MspInit+0xe8>)
 8002ada:	f043 0302 	orr.w	r3, r3, #2
 8002ade:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <HAL_TIM_Base_MspInit+0xe8>)
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
}
 8002aec:	bf00      	nop
 8002aee:	3730      	adds	r7, #48	@ 0x30
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40010000 	.word	0x40010000
 8002af8:	40023800 	.word	0x40023800
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40001000 	.word	0x40001000
 8002b04:	40010400 	.word	0x40010400

08002b08 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08c      	sub	sp, #48	@ 0x30
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 031c 	add.w	r3, r7, #28
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b28:	d14b      	bne.n	8002bc2 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b32:	4a3e      	ldr	r2, [pc, #248]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b3a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	4b38      	ldr	r3, [pc, #224]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	4a37      	ldr	r2, [pc, #220]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b56:	4b35      	ldr	r3, [pc, #212]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	617b      	str	r3, [r7, #20]
 8002b60:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	4b31      	ldr	r3, [pc, #196]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	4a30      	ldr	r2, [pc, #192]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002b6c:	f043 0302 	orr.w	r3, r3, #2
 8002b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b72:	4b2e      	ldr	r3, [pc, #184]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_CH1_Pin;
 8002b7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b84:	2302      	movs	r3, #2
 8002b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b90:	2301      	movs	r3, #1
 8002b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_A_CH1_GPIO_Port, &GPIO_InitStruct);
 8002b94:	f107 031c 	add.w	r3, r7, #28
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4825      	ldr	r0, [pc, #148]	@ (8002c30 <HAL_TIM_Encoder_MspInit+0x128>)
 8002b9c:	f000 fcbc 	bl	8003518 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_A_CH2_Pin;
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_A_CH2_GPIO_Port, &GPIO_InitStruct);
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	4619      	mov	r1, r3
 8002bba:	481e      	ldr	r0, [pc, #120]	@ (8002c34 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002bbc:	f000 fcac 	bl	8003518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002bc0:	e030      	b.n	8002c24 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c38 <HAL_TIM_Encoder_MspInit+0x130>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d12b      	bne.n	8002c24 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	4b16      	ldr	r3, [pc, #88]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd4:	4a15      	ldr	r2, [pc, #84]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002bd6:	f043 0302 	orr.w	r3, r3, #2
 8002bda:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bdc:	4b13      	ldr	r3, [pc, #76]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
 8002bec:	4b0f      	ldr	r3, [pc, #60]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <HAL_TIM_Encoder_MspInit+0x124>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_B_CH1_Pin|MOTOR_B_CH2_Pin;
 8002c04:	23c0      	movs	r3, #192	@ 0xc0
 8002c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	2300      	movs	r3, #0
 8002c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c14:	2302      	movs	r3, #2
 8002c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c18:	f107 031c 	add.w	r3, r7, #28
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4804      	ldr	r0, [pc, #16]	@ (8002c30 <HAL_TIM_Encoder_MspInit+0x128>)
 8002c20:	f000 fc7a 	bl	8003518 <HAL_GPIO_Init>
}
 8002c24:	bf00      	nop
 8002c26:	3730      	adds	r7, #48	@ 0x30
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40020000 	.word	0x40020000
 8002c34:	40020400 	.word	0x40020400
 8002c38:	40000400 	.word	0x40000400

08002c3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	@ 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 0314 	add.w	r3, r7, #20
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a24      	ldr	r2, [pc, #144]	@ (8002cec <HAL_TIM_MspPostInit+0xb0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d11f      	bne.n	8002c9e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	4b23      	ldr	r3, [pc, #140]	@ (8002cf0 <HAL_TIM_MspPostInit+0xb4>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c66:	4a22      	ldr	r2, [pc, #136]	@ (8002cf0 <HAL_TIM_MspPostInit+0xb4>)
 8002c68:	f043 0310 	orr.w	r3, r3, #16
 8002c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c6e:	4b20      	ldr	r3, [pc, #128]	@ (8002cf0 <HAL_TIM_MspPostInit+0xb4>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8002c7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c80:	2302      	movs	r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	4619      	mov	r1, r3
 8002c96:	4817      	ldr	r0, [pc, #92]	@ (8002cf4 <HAL_TIM_MspPostInit+0xb8>)
 8002c98:	f000 fc3e 	bl	8003518 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002c9c:	e022      	b.n	8002ce4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a15      	ldr	r2, [pc, #84]	@ (8002cf8 <HAL_TIM_MspPostInit+0xbc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d11d      	bne.n	8002ce4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	4b10      	ldr	r3, [pc, #64]	@ (8002cf0 <HAL_TIM_MspPostInit+0xb4>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb0:	4a0f      	ldr	r2, [pc, #60]	@ (8002cf0 <HAL_TIM_MspPostInit+0xb4>)
 8002cb2:	f043 0304 	orr.w	r3, r3, #4
 8002cb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf0 <HAL_TIM_MspPostInit+0xb4>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_A_PWM_Pin|MOTOR_B_PWM_Pin;
 8002cc4:	23c0      	movs	r3, #192	@ 0xc0
 8002cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4807      	ldr	r0, [pc, #28]	@ (8002cfc <HAL_TIM_MspPostInit+0xc0>)
 8002ce0:	f000 fc1a 	bl	8003518 <HAL_GPIO_Init>
}
 8002ce4:	bf00      	nop
 8002ce6:	3728      	adds	r7, #40	@ 0x28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40010000 	.word	0x40010000
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40010400 	.word	0x40010400
 8002cfc:	40020800 	.word	0x40020800

08002d00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08a      	sub	sp, #40	@ 0x28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d08:	f107 0314 	add.w	r3, r7, #20
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	605a      	str	r2, [r3, #4]
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	60da      	str	r2, [r3, #12]
 8002d16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8002d94 <HAL_UART_MspInit+0x94>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d134      	bne.n	8002d8c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
 8002d26:	4b1c      	ldr	r3, [pc, #112]	@ (8002d98 <HAL_UART_MspInit+0x98>)
 8002d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8002d98 <HAL_UART_MspInit+0x98>)
 8002d2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d32:	4b19      	ldr	r3, [pc, #100]	@ (8002d98 <HAL_UART_MspInit+0x98>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	4b15      	ldr	r3, [pc, #84]	@ (8002d98 <HAL_UART_MspInit+0x98>)
 8002d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d46:	4a14      	ldr	r2, [pc, #80]	@ (8002d98 <HAL_UART_MspInit+0x98>)
 8002d48:	f043 0304 	orr.w	r3, r3, #4
 8002d4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d4e:	4b12      	ldr	r3, [pc, #72]	@ (8002d98 <HAL_UART_MspInit+0x98>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d5a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d60:	2302      	movs	r3, #2
 8002d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d6c:	2307      	movs	r3, #7
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d70:	f107 0314 	add.w	r3, r7, #20
 8002d74:	4619      	mov	r1, r3
 8002d76:	4809      	ldr	r0, [pc, #36]	@ (8002d9c <HAL_UART_MspInit+0x9c>)
 8002d78:	f000 fbce 	bl	8003518 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2100      	movs	r1, #0
 8002d80:	2027      	movs	r0, #39	@ 0x27
 8002d82:	f000 fb00 	bl	8003386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d86:	2027      	movs	r0, #39	@ 0x27
 8002d88:	f000 fb19 	bl	80033be <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002d8c:	bf00      	nop
 8002d8e:	3728      	adds	r7, #40	@ 0x28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	40004800 	.word	0x40004800
 8002d98:	40023800 	.word	0x40023800
 8002d9c:	40020800 	.word	0x40020800

08002da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002da4:	bf00      	nop
 8002da6:	e7fd      	b.n	8002da4 <NMI_Handler+0x4>

08002da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dac:	bf00      	nop
 8002dae:	e7fd      	b.n	8002dac <HardFault_Handler+0x4>

08002db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002db4:	bf00      	nop
 8002db6:	e7fd      	b.n	8002db4 <MemManage_Handler+0x4>

08002db8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dbc:	bf00      	nop
 8002dbe:	e7fd      	b.n	8002dbc <BusFault_Handler+0x4>

08002dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc4:	bf00      	nop
 8002dc6:	e7fd      	b.n	8002dc4 <UsageFault_Handler+0x4>

08002dc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dda:	bf00      	nop
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002de8:	bf00      	nop
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  tick++;
 8002df8:	4b17      	ldr	r3, [pc, #92]	@ (8002e58 <SysTick_Handler+0x64>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	4a16      	ldr	r2, [pc, #88]	@ (8002e58 <SysTick_Handler+0x64>)
 8002e00:	6013      	str	r3, [r2, #0]
		if (tick == no_of_tick)	{ // assuming 1 msec tick, calculate speed every 50 msec?
 8002e02:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <SysTick_Handler+0x64>)
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	4b15      	ldr	r3, [pc, #84]	@ (8002e5c <SysTick_Handler+0x68>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d120      	bne.n	8002e50 <SysTick_Handler+0x5c>
	//		speed = ((position - oldpos)*20*60/180);  // number of ticks/sec * 60 sec  diveide by 180 ticks per round
			l_speed = (l_position - l_oldpos); // change in position
 8002e0e:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <SysTick_Handler+0x6c>)
 8002e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b13      	ldr	r3, [pc, #76]	@ (8002e64 <SysTick_Handler+0x70>)
 8002e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	4a12      	ldr	r2, [pc, #72]	@ (8002e68 <SysTick_Handler+0x74>)
 8002e20:	6013      	str	r3, [r2, #0]
			l_oldpos = l_position;
 8002e22:	4b0f      	ldr	r3, [pc, #60]	@ (8002e60 <SysTick_Handler+0x6c>)
 8002e24:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e28:	4b0e      	ldr	r3, [pc, #56]	@ (8002e64 <SysTick_Handler+0x70>)
 8002e2a:	801a      	strh	r2, [r3, #0]

	    r_speed = (r_position - r_oldpos); // change in position
 8002e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8002e6c <SysTick_Handler+0x78>)
 8002e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e32:	461a      	mov	r2, r3
 8002e34:	4b0e      	ldr	r3, [pc, #56]	@ (8002e70 <SysTick_Handler+0x7c>)
 8002e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002e74 <SysTick_Handler+0x80>)
 8002e3e:	6013      	str	r3, [r2, #0]
			r_oldpos = r_position;
 8002e40:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <SysTick_Handler+0x78>)
 8002e42:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002e46:	4b0a      	ldr	r3, [pc, #40]	@ (8002e70 <SysTick_Handler+0x7c>)
 8002e48:	801a      	strh	r2, [r3, #0]
			tick = 0;
 8002e4a:	4b03      	ldr	r3, [pc, #12]	@ (8002e58 <SysTick_Handler+0x64>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]
			//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10); // LED
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e50:	f000 f97a 	bl	8003148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e54:	bf00      	nop
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000c80 	.word	0x20000c80
 8002e5c:	20000004 	.word	0x20000004
 8002e60:	2000082c 	.word	0x2000082c
 8002e64:	20000c7c 	.word	0x20000c7c
 8002e68:	20000816 	.word	0x20000816
 8002e6c:	2000082e 	.word	0x2000082e
 8002e70:	20000c7e 	.word	0x20000c7e
 8002e74:	20000818 	.word	0x20000818

08002e78 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e7c:	4802      	ldr	r0, [pc, #8]	@ (8002e88 <TIM1_CC_IRQHandler+0x10>)
 8002e7e:	f001 fe0b 	bl	8004a98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	2000024c 	.word	0x2000024c

08002e8c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e90:	4802      	ldr	r0, [pc, #8]	@ (8002e9c <USART3_IRQHandler+0x10>)
 8002e92:	f002 fd5b 	bl	800594c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200003b4 	.word	0x200003b4

08002ea0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return 1;
 8002ea4:	2301      	movs	r3, #1
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <_kill>:

int _kill(int pid, int sig)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002eba:	f004 fa15 	bl	80072e8 <__errno>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2216      	movs	r2, #22
 8002ec2:	601a      	str	r2, [r3, #0]
  return -1;
 8002ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <_exit>:

void _exit (int status)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff ffe7 	bl	8002eb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002ee2:	bf00      	nop
 8002ee4:	e7fd      	b.n	8002ee2 <_exit+0x12>

08002ee6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b086      	sub	sp, #24
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	60f8      	str	r0, [r7, #12]
 8002eee:	60b9      	str	r1, [r7, #8]
 8002ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e00a      	b.n	8002f0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ef8:	f3af 8000 	nop.w
 8002efc:	4601      	mov	r1, r0
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	60ba      	str	r2, [r7, #8]
 8002f04:	b2ca      	uxtb	r2, r1
 8002f06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	617b      	str	r3, [r7, #20]
 8002f0e:	697a      	ldr	r2, [r7, #20]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	429a      	cmp	r2, r3
 8002f14:	dbf0      	blt.n	8002ef8 <_read+0x12>
  }

  return len;
 8002f16:	687b      	ldr	r3, [r7, #4]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	e009      	b.n	8002f46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	60ba      	str	r2, [r7, #8]
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	3301      	adds	r3, #1
 8002f44:	617b      	str	r3, [r7, #20]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	dbf1      	blt.n	8002f32 <_write+0x12>
  }
  return len;
 8002f4e:	687b      	ldr	r3, [r7, #4]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_close>:

int _close(int file)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f80:	605a      	str	r2, [r3, #4]
  return 0;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <_isatty>:

int _isatty(int file)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f98:	2301      	movs	r3, #1
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b085      	sub	sp, #20
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fc8:	4a14      	ldr	r2, [pc, #80]	@ (800301c <_sbrk+0x5c>)
 8002fca:	4b15      	ldr	r3, [pc, #84]	@ (8003020 <_sbrk+0x60>)
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fd4:	4b13      	ldr	r3, [pc, #76]	@ (8003024 <_sbrk+0x64>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fdc:	4b11      	ldr	r3, [pc, #68]	@ (8003024 <_sbrk+0x64>)
 8002fde:	4a12      	ldr	r2, [pc, #72]	@ (8003028 <_sbrk+0x68>)
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fe2:	4b10      	ldr	r3, [pc, #64]	@ (8003024 <_sbrk+0x64>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d207      	bcs.n	8003000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ff0:	f004 f97a 	bl	80072e8 <__errno>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	220c      	movs	r2, #12
 8002ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8002ffe:	e009      	b.n	8003014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003000:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <_sbrk+0x64>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003006:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <_sbrk+0x64>)
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4413      	add	r3, r2
 800300e:	4a05      	ldr	r2, [pc, #20]	@ (8003024 <_sbrk+0x64>)
 8003010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003012:	68fb      	ldr	r3, [r7, #12]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3718      	adds	r7, #24
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}
 800301c:	20020000 	.word	0x20020000
 8003020:	00000400 	.word	0x00000400
 8003024:	20000c84 	.word	0x20000c84
 8003028:	20000dd8 	.word	0x20000dd8

0800302c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003030:	4b06      	ldr	r3, [pc, #24]	@ (800304c <SystemInit+0x20>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003036:	4a05      	ldr	r2, [pc, #20]	@ (800304c <SystemInit+0x20>)
 8003038:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800303c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003040:	bf00      	nop
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003050:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003088 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003054:	f7ff ffea 	bl	800302c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003058:	480c      	ldr	r0, [pc, #48]	@ (800308c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800305a:	490d      	ldr	r1, [pc, #52]	@ (8003090 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800305c:	4a0d      	ldr	r2, [pc, #52]	@ (8003094 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003060:	e002      	b.n	8003068 <LoopCopyDataInit>

08003062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003066:	3304      	adds	r3, #4

08003068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800306a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800306c:	d3f9      	bcc.n	8003062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800306e:	4a0a      	ldr	r2, [pc, #40]	@ (8003098 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003070:	4c0a      	ldr	r4, [pc, #40]	@ (800309c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003074:	e001      	b.n	800307a <LoopFillZerobss>

08003076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003078:	3204      	adds	r2, #4

0800307a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800307a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800307c:	d3fb      	bcc.n	8003076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800307e:	f004 f939 	bl	80072f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003082:	f7fe f879 	bl	8001178 <main>
  bx  lr    
 8003086:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800308c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003090:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003094:	0800a248 	.word	0x0800a248
  ldr r2, =_sbss
 8003098:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800309c:	20000dd8 	.word	0x20000dd8

080030a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030a0:	e7fe      	b.n	80030a0 <ADC_IRQHandler>
	...

080030a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030a8:	4b0e      	ldr	r3, [pc, #56]	@ (80030e4 <HAL_Init+0x40>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0d      	ldr	r2, [pc, #52]	@ (80030e4 <HAL_Init+0x40>)
 80030ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030b4:	4b0b      	ldr	r3, [pc, #44]	@ (80030e4 <HAL_Init+0x40>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a0a      	ldr	r2, [pc, #40]	@ (80030e4 <HAL_Init+0x40>)
 80030ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030c0:	4b08      	ldr	r3, [pc, #32]	@ (80030e4 <HAL_Init+0x40>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a07      	ldr	r2, [pc, #28]	@ (80030e4 <HAL_Init+0x40>)
 80030c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030cc:	2003      	movs	r0, #3
 80030ce:	f000 f94f 	bl	8003370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030d2:	200f      	movs	r0, #15
 80030d4:	f000 f808 	bl	80030e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030d8:	f7ff fc2a 	bl	8002930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	40023c00 	.word	0x40023c00

080030e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030f0:	4b12      	ldr	r3, [pc, #72]	@ (800313c <HAL_InitTick+0x54>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	4b12      	ldr	r3, [pc, #72]	@ (8003140 <HAL_InitTick+0x58>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	4619      	mov	r1, r3
 80030fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003102:	fbb2 f3f3 	udiv	r3, r2, r3
 8003106:	4618      	mov	r0, r3
 8003108:	f000 f967 	bl	80033da <HAL_SYSTICK_Config>
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e00e      	b.n	8003134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b0f      	cmp	r3, #15
 800311a:	d80a      	bhi.n	8003132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800311c:	2200      	movs	r2, #0
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	f04f 30ff 	mov.w	r0, #4294967295
 8003124:	f000 f92f 	bl	8003386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003128:	4a06      	ldr	r2, [pc, #24]	@ (8003144 <HAL_InitTick+0x5c>)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800312e:	2300      	movs	r3, #0
 8003130:	e000      	b.n	8003134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	20000008 	.word	0x20000008
 8003140:	20000010 	.word	0x20000010
 8003144:	2000000c 	.word	0x2000000c

08003148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800314c:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <HAL_IncTick+0x20>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	461a      	mov	r2, r3
 8003152:	4b06      	ldr	r3, [pc, #24]	@ (800316c <HAL_IncTick+0x24>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4413      	add	r3, r2
 8003158:	4a04      	ldr	r2, [pc, #16]	@ (800316c <HAL_IncTick+0x24>)
 800315a:	6013      	str	r3, [r2, #0]
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000010 	.word	0x20000010
 800316c:	20000c88 	.word	0x20000c88

08003170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003170:	b480      	push	{r7}
 8003172:	af00      	add	r7, sp, #0
  return uwTick;
 8003174:	4b03      	ldr	r3, [pc, #12]	@ (8003184 <HAL_GetTick+0x14>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000c88 	.word	0x20000c88

08003188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003190:	f7ff ffee 	bl	8003170 <HAL_GetTick>
 8003194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d005      	beq.n	80031ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031a2:	4b0a      	ldr	r3, [pc, #40]	@ (80031cc <HAL_Delay+0x44>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	461a      	mov	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	4413      	add	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ae:	bf00      	nop
 80031b0:	f7ff ffde 	bl	8003170 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d8f7      	bhi.n	80031b0 <HAL_Delay+0x28>
  {
  }
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000010 	.word	0x20000010

080031d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003214 <__NVIC_SetPriorityGrouping+0x44>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031ec:	4013      	ands	r3, r2
 80031ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003202:	4a04      	ldr	r2, [pc, #16]	@ (8003214 <__NVIC_SetPriorityGrouping+0x44>)
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	60d3      	str	r3, [r2, #12]
}
 8003208:	bf00      	nop
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800321c:	4b04      	ldr	r3, [pc, #16]	@ (8003230 <__NVIC_GetPriorityGrouping+0x18>)
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	0a1b      	lsrs	r3, r3, #8
 8003222:	f003 0307 	and.w	r3, r3, #7
}
 8003226:	4618      	mov	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800323e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003242:	2b00      	cmp	r3, #0
 8003244:	db0b      	blt.n	800325e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	f003 021f 	and.w	r2, r3, #31
 800324c:	4907      	ldr	r1, [pc, #28]	@ (800326c <__NVIC_EnableIRQ+0x38>)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2001      	movs	r0, #1
 8003256:	fa00 f202 	lsl.w	r2, r0, r2
 800325a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	e000e100 	.word	0xe000e100

08003270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	4603      	mov	r3, r0
 8003278:	6039      	str	r1, [r7, #0]
 800327a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800327c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003280:	2b00      	cmp	r3, #0
 8003282:	db0a      	blt.n	800329a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	b2da      	uxtb	r2, r3
 8003288:	490c      	ldr	r1, [pc, #48]	@ (80032bc <__NVIC_SetPriority+0x4c>)
 800328a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328e:	0112      	lsls	r2, r2, #4
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	440b      	add	r3, r1
 8003294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003298:	e00a      	b.n	80032b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	4908      	ldr	r1, [pc, #32]	@ (80032c0 <__NVIC_SetPriority+0x50>)
 80032a0:	79fb      	ldrb	r3, [r7, #7]
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	3b04      	subs	r3, #4
 80032a8:	0112      	lsls	r2, r2, #4
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	440b      	add	r3, r1
 80032ae:	761a      	strb	r2, [r3, #24]
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr
 80032bc:	e000e100 	.word	0xe000e100
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b089      	sub	sp, #36	@ 0x24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f1c3 0307 	rsb	r3, r3, #7
 80032de:	2b04      	cmp	r3, #4
 80032e0:	bf28      	it	cs
 80032e2:	2304      	movcs	r3, #4
 80032e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3304      	adds	r3, #4
 80032ea:	2b06      	cmp	r3, #6
 80032ec:	d902      	bls.n	80032f4 <NVIC_EncodePriority+0x30>
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	3b03      	subs	r3, #3
 80032f2:	e000      	b.n	80032f6 <NVIC_EncodePriority+0x32>
 80032f4:	2300      	movs	r3, #0
 80032f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	f04f 32ff 	mov.w	r2, #4294967295
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43da      	mvns	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	401a      	ands	r2, r3
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800330c:	f04f 31ff 	mov.w	r1, #4294967295
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fa01 f303 	lsl.w	r3, r1, r3
 8003316:	43d9      	mvns	r1, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800331c:	4313      	orrs	r3, r2
         );
}
 800331e:	4618      	mov	r0, r3
 8003320:	3724      	adds	r7, #36	@ 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
	...

0800332c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	3b01      	subs	r3, #1
 8003338:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800333c:	d301      	bcc.n	8003342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800333e:	2301      	movs	r3, #1
 8003340:	e00f      	b.n	8003362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003342:	4a0a      	ldr	r2, [pc, #40]	@ (800336c <SysTick_Config+0x40>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3b01      	subs	r3, #1
 8003348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800334a:	210f      	movs	r1, #15
 800334c:	f04f 30ff 	mov.w	r0, #4294967295
 8003350:	f7ff ff8e 	bl	8003270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003354:	4b05      	ldr	r3, [pc, #20]	@ (800336c <SysTick_Config+0x40>)
 8003356:	2200      	movs	r2, #0
 8003358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800335a:	4b04      	ldr	r3, [pc, #16]	@ (800336c <SysTick_Config+0x40>)
 800335c:	2207      	movs	r2, #7
 800335e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3708      	adds	r7, #8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	e000e010 	.word	0xe000e010

08003370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff ff29 	bl	80031d0 <__NVIC_SetPriorityGrouping>
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}

08003386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003386:	b580      	push	{r7, lr}
 8003388:	b086      	sub	sp, #24
 800338a:	af00      	add	r7, sp, #0
 800338c:	4603      	mov	r3, r0
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003398:	f7ff ff3e 	bl	8003218 <__NVIC_GetPriorityGrouping>
 800339c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	6978      	ldr	r0, [r7, #20]
 80033a4:	f7ff ff8e 	bl	80032c4 <NVIC_EncodePriority>
 80033a8:	4602      	mov	r2, r0
 80033aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff ff5d 	bl	8003270 <__NVIC_SetPriority>
}
 80033b6:	bf00      	nop
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff31 	bl	8003234 <__NVIC_EnableIRQ>
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f7ff ffa2 	bl	800332c <SysTick_Config>
 80033e8:	4603      	mov	r3, r0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033fe:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7ff feb6 	bl	8003170 <HAL_GetTick>
 8003404:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d008      	beq.n	8003424 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2280      	movs	r2, #128	@ 0x80
 8003416:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e052      	b.n	80034ca <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0216 	bic.w	r2, r2, #22
 8003432:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003442:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	2b00      	cmp	r3, #0
 800344a:	d103      	bne.n	8003454 <HAL_DMA_Abort+0x62>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0208 	bic.w	r2, r2, #8
 8003462:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0201 	bic.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003474:	e013      	b.n	800349e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003476:	f7ff fe7b 	bl	8003170 <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b05      	cmp	r3, #5
 8003482:	d90c      	bls.n	800349e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2203      	movs	r2, #3
 800348e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e015      	b.n	80034ca <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1e4      	bne.n	8003476 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b0:	223f      	movs	r2, #63	@ 0x3f
 80034b2:	409a      	lsls	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3710      	adds	r7, #16
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b083      	sub	sp, #12
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d004      	beq.n	80034f0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2280      	movs	r2, #128	@ 0x80
 80034ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e00c      	b.n	800350a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2205      	movs	r2, #5
 80034f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0201 	bic.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
	...

08003518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003518:	b480      	push	{r7}
 800351a:	b089      	sub	sp, #36	@ 0x24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003526:	2300      	movs	r3, #0
 8003528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	e16b      	b.n	800380c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003534:	2201      	movs	r2, #1
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003548:	693a      	ldr	r2, [r7, #16]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	429a      	cmp	r2, r3
 800354e:	f040 815a 	bne.w	8003806 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d005      	beq.n	800356a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003566:	2b02      	cmp	r3, #2
 8003568:	d130      	bne.n	80035cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	2203      	movs	r2, #3
 8003576:	fa02 f303 	lsl.w	r3, r2, r3
 800357a:	43db      	mvns	r3, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4013      	ands	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	69ba      	ldr	r2, [r7, #24]
 8003590:	4313      	orrs	r3, r2
 8003592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80035a0:	2201      	movs	r2, #1
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	69ba      	ldr	r2, [r7, #24]
 80035ac:	4013      	ands	r3, r2
 80035ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	091b      	lsrs	r3, r3, #4
 80035b6:	f003 0201 	and.w	r2, r3, #1
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d017      	beq.n	8003608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2203      	movs	r2, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d123      	bne.n	800365c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	08da      	lsrs	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3208      	adds	r2, #8
 800361c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	220f      	movs	r2, #15
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4013      	ands	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4313      	orrs	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	08da      	lsrs	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3208      	adds	r2, #8
 8003656:	69b9      	ldr	r1, [r7, #24]
 8003658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	69ba      	ldr	r2, [r7, #24]
 8003670:	4013      	ands	r3, r2
 8003672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0203 	and.w	r2, r3, #3
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4313      	orrs	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80b4 	beq.w	8003806 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	4b60      	ldr	r3, [pc, #384]	@ (8003824 <HAL_GPIO_Init+0x30c>)
 80036a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a6:	4a5f      	ldr	r2, [pc, #380]	@ (8003824 <HAL_GPIO_Init+0x30c>)
 80036a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80036ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003824 <HAL_GPIO_Init+0x30c>)
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80036ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003828 <HAL_GPIO_Init+0x310>)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	089b      	lsrs	r3, r3, #2
 80036c0:	3302      	adds	r3, #2
 80036c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	f003 0303 	and.w	r3, r3, #3
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	220f      	movs	r2, #15
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a52      	ldr	r2, [pc, #328]	@ (800382c <HAL_GPIO_Init+0x314>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d02b      	beq.n	800373e <HAL_GPIO_Init+0x226>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a51      	ldr	r2, [pc, #324]	@ (8003830 <HAL_GPIO_Init+0x318>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d025      	beq.n	800373a <HAL_GPIO_Init+0x222>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a50      	ldr	r2, [pc, #320]	@ (8003834 <HAL_GPIO_Init+0x31c>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d01f      	beq.n	8003736 <HAL_GPIO_Init+0x21e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003838 <HAL_GPIO_Init+0x320>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d019      	beq.n	8003732 <HAL_GPIO_Init+0x21a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a4e      	ldr	r2, [pc, #312]	@ (800383c <HAL_GPIO_Init+0x324>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d013      	beq.n	800372e <HAL_GPIO_Init+0x216>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a4d      	ldr	r2, [pc, #308]	@ (8003840 <HAL_GPIO_Init+0x328>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00d      	beq.n	800372a <HAL_GPIO_Init+0x212>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a4c      	ldr	r2, [pc, #304]	@ (8003844 <HAL_GPIO_Init+0x32c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d007      	beq.n	8003726 <HAL_GPIO_Init+0x20e>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a4b      	ldr	r2, [pc, #300]	@ (8003848 <HAL_GPIO_Init+0x330>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d101      	bne.n	8003722 <HAL_GPIO_Init+0x20a>
 800371e:	2307      	movs	r3, #7
 8003720:	e00e      	b.n	8003740 <HAL_GPIO_Init+0x228>
 8003722:	2308      	movs	r3, #8
 8003724:	e00c      	b.n	8003740 <HAL_GPIO_Init+0x228>
 8003726:	2306      	movs	r3, #6
 8003728:	e00a      	b.n	8003740 <HAL_GPIO_Init+0x228>
 800372a:	2305      	movs	r3, #5
 800372c:	e008      	b.n	8003740 <HAL_GPIO_Init+0x228>
 800372e:	2304      	movs	r3, #4
 8003730:	e006      	b.n	8003740 <HAL_GPIO_Init+0x228>
 8003732:	2303      	movs	r3, #3
 8003734:	e004      	b.n	8003740 <HAL_GPIO_Init+0x228>
 8003736:	2302      	movs	r3, #2
 8003738:	e002      	b.n	8003740 <HAL_GPIO_Init+0x228>
 800373a:	2301      	movs	r3, #1
 800373c:	e000      	b.n	8003740 <HAL_GPIO_Init+0x228>
 800373e:	2300      	movs	r3, #0
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	f002 0203 	and.w	r2, r2, #3
 8003746:	0092      	lsls	r2, r2, #2
 8003748:	4093      	lsls	r3, r2
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	4313      	orrs	r3, r2
 800374e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003750:	4935      	ldr	r1, [pc, #212]	@ (8003828 <HAL_GPIO_Init+0x310>)
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	089b      	lsrs	r3, r3, #2
 8003756:	3302      	adds	r3, #2
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800375e:	4b3b      	ldr	r3, [pc, #236]	@ (800384c <HAL_GPIO_Init+0x334>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003782:	4a32      	ldr	r2, [pc, #200]	@ (800384c <HAL_GPIO_Init+0x334>)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003788:	4b30      	ldr	r3, [pc, #192]	@ (800384c <HAL_GPIO_Init+0x334>)
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037ac:	4a27      	ldr	r2, [pc, #156]	@ (800384c <HAL_GPIO_Init+0x334>)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037b2:	4b26      	ldr	r3, [pc, #152]	@ (800384c <HAL_GPIO_Init+0x334>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	43db      	mvns	r3, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4013      	ands	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037d6:	4a1d      	ldr	r2, [pc, #116]	@ (800384c <HAL_GPIO_Init+0x334>)
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037dc:	4b1b      	ldr	r3, [pc, #108]	@ (800384c <HAL_GPIO_Init+0x334>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d003      	beq.n	8003800 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003800:	4a12      	ldr	r2, [pc, #72]	@ (800384c <HAL_GPIO_Init+0x334>)
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3301      	adds	r3, #1
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	2b0f      	cmp	r3, #15
 8003810:	f67f ae90 	bls.w	8003534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3724      	adds	r7, #36	@ 0x24
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40023800 	.word	0x40023800
 8003828:	40013800 	.word	0x40013800
 800382c:	40020000 	.word	0x40020000
 8003830:	40020400 	.word	0x40020400
 8003834:	40020800 	.word	0x40020800
 8003838:	40020c00 	.word	0x40020c00
 800383c:	40021000 	.word	0x40021000
 8003840:	40021400 	.word	0x40021400
 8003844:	40021800 	.word	0x40021800
 8003848:	40021c00 	.word	0x40021c00
 800384c:	40013c00 	.word	0x40013c00

08003850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	887b      	ldrh	r3, [r7, #2]
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003868:	2301      	movs	r3, #1
 800386a:	73fb      	strb	r3, [r7, #15]
 800386c:	e001      	b.n	8003872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003872:	7bfb      	ldrb	r3, [r7, #15]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	460b      	mov	r3, r1
 800388a:	807b      	strh	r3, [r7, #2]
 800388c:	4613      	mov	r3, r2
 800388e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003890:	787b      	ldrb	r3, [r7, #1]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003896:	887a      	ldrh	r2, [r7, #2]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800389c:	e003      	b.n	80038a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800389e:	887b      	ldrh	r3, [r7, #2]
 80038a0:	041a      	lsls	r2, r3, #16
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	619a      	str	r2, [r3, #24]
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
	...

080038b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e12b      	b.n	8003b1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7ff f850 	bl	8002980 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	@ 0x24
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0201 	bic.w	r2, r2, #1
 80038f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003906:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003916:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003918:	f000 fd68 	bl	80043ec <HAL_RCC_GetPCLK1Freq>
 800391c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	4a81      	ldr	r2, [pc, #516]	@ (8003b28 <HAL_I2C_Init+0x274>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d807      	bhi.n	8003938 <HAL_I2C_Init+0x84>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	4a80      	ldr	r2, [pc, #512]	@ (8003b2c <HAL_I2C_Init+0x278>)
 800392c:	4293      	cmp	r3, r2
 800392e:	bf94      	ite	ls
 8003930:	2301      	movls	r3, #1
 8003932:	2300      	movhi	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e006      	b.n	8003946 <HAL_I2C_Init+0x92>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	4a7d      	ldr	r2, [pc, #500]	@ (8003b30 <HAL_I2C_Init+0x27c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	bf94      	ite	ls
 8003940:	2301      	movls	r3, #1
 8003942:	2300      	movhi	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e0e7      	b.n	8003b1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4a78      	ldr	r2, [pc, #480]	@ (8003b34 <HAL_I2C_Init+0x280>)
 8003952:	fba2 2303 	umull	r2, r3, r2, r3
 8003956:	0c9b      	lsrs	r3, r3, #18
 8003958:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	430a      	orrs	r2, r1
 800396c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	4a6a      	ldr	r2, [pc, #424]	@ (8003b28 <HAL_I2C_Init+0x274>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d802      	bhi.n	8003988 <HAL_I2C_Init+0xd4>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	3301      	adds	r3, #1
 8003986:	e009      	b.n	800399c <HAL_I2C_Init+0xe8>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	4a69      	ldr	r2, [pc, #420]	@ (8003b38 <HAL_I2C_Init+0x284>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	099b      	lsrs	r3, r3, #6
 800399a:	3301      	adds	r3, #1
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	430b      	orrs	r3, r1
 80039a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80039ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	495c      	ldr	r1, [pc, #368]	@ (8003b28 <HAL_I2C_Init+0x274>)
 80039b8:	428b      	cmp	r3, r1
 80039ba:	d819      	bhi.n	80039f0 <HAL_I2C_Init+0x13c>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	1e59      	subs	r1, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	005b      	lsls	r3, r3, #1
 80039c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039ca:	1c59      	adds	r1, r3, #1
 80039cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80039d0:	400b      	ands	r3, r1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00a      	beq.n	80039ec <HAL_I2C_Init+0x138>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1e59      	subs	r1, r3, #1
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80039e4:	3301      	adds	r3, #1
 80039e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ea:	e051      	b.n	8003a90 <HAL_I2C_Init+0x1dc>
 80039ec:	2304      	movs	r3, #4
 80039ee:	e04f      	b.n	8003a90 <HAL_I2C_Init+0x1dc>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d111      	bne.n	8003a1c <HAL_I2C_Init+0x168>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	1e58      	subs	r0, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	460b      	mov	r3, r1
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	440b      	add	r3, r1
 8003a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bf0c      	ite	eq
 8003a14:	2301      	moveq	r3, #1
 8003a16:	2300      	movne	r3, #0
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	e012      	b.n	8003a42 <HAL_I2C_Init+0x18e>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	1e58      	subs	r0, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	460b      	mov	r3, r1
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	440b      	add	r3, r1
 8003a2a:	0099      	lsls	r1, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a32:	3301      	adds	r3, #1
 8003a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	bf0c      	ite	eq
 8003a3c:	2301      	moveq	r3, #1
 8003a3e:	2300      	movne	r3, #0
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <HAL_I2C_Init+0x196>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e022      	b.n	8003a90 <HAL_I2C_Init+0x1dc>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10e      	bne.n	8003a70 <HAL_I2C_Init+0x1bc>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	1e58      	subs	r0, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	440b      	add	r3, r1
 8003a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a64:	3301      	adds	r3, #1
 8003a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a6e:	e00f      	b.n	8003a90 <HAL_I2C_Init+0x1dc>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	1e58      	subs	r0, r3, #1
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6859      	ldr	r1, [r3, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	0099      	lsls	r1, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a86:	3301      	adds	r3, #1
 8003a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	6809      	ldr	r1, [r1, #0]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	69da      	ldr	r2, [r3, #28]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	430a      	orrs	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003abe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	6911      	ldr	r1, [r2, #16]
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68d2      	ldr	r2, [r2, #12]
 8003aca:	4311      	orrs	r1, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	430a      	orrs	r2, r1
 8003aee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f042 0201 	orr.w	r2, r2, #1
 8003afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003b1c:	2300      	movs	r3, #0
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	000186a0 	.word	0x000186a0
 8003b2c:	001e847f 	.word	0x001e847f
 8003b30:	003d08ff 	.word	0x003d08ff
 8003b34:	431bde83 	.word	0x431bde83
 8003b38:	10624dd3 	.word	0x10624dd3

08003b3c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003b42:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <HAL_PWR_EnableBkUpAccess+0x20>)
 8003b44:	2201      	movs	r2, #1
 8003b46:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <HAL_PWR_EnableBkUpAccess+0x24>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003b4e:	687b      	ldr	r3, [r7, #4]
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	420e0020 	.word	0x420e0020
 8003b60:	40007000 	.word	0x40007000

08003b64 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8003b6a:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <HAL_PWR_DisableBkUpAccess+0x20>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003b70:	4b05      	ldr	r3, [pc, #20]	@ (8003b88 <HAL_PWR_DisableBkUpAccess+0x24>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003b76:	687b      	ldr	r3, [r7, #4]
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	420e0020 	.word	0x420e0020
 8003b88:	40007000 	.word	0x40007000

08003b8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b086      	sub	sp, #24
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e267      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0301 	and.w	r3, r3, #1
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d075      	beq.n	8003c96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003baa:	4b88      	ldr	r3, [pc, #544]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f003 030c 	and.w	r3, r3, #12
 8003bb2:	2b04      	cmp	r3, #4
 8003bb4:	d00c      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bb6:	4b85      	ldr	r3, [pc, #532]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d112      	bne.n	8003be8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc2:	4b82      	ldr	r3, [pc, #520]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bce:	d10b      	bne.n	8003be8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd0:	4b7e      	ldr	r3, [pc, #504]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d05b      	beq.n	8003c94 <HAL_RCC_OscConfig+0x108>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d157      	bne.n	8003c94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e242      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf0:	d106      	bne.n	8003c00 <HAL_RCC_OscConfig+0x74>
 8003bf2:	4b76      	ldr	r3, [pc, #472]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a75      	ldr	r2, [pc, #468]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bfc:	6013      	str	r3, [r2, #0]
 8003bfe:	e01d      	b.n	8003c3c <HAL_RCC_OscConfig+0xb0>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c08:	d10c      	bne.n	8003c24 <HAL_RCC_OscConfig+0x98>
 8003c0a:	4b70      	ldr	r3, [pc, #448]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a6f      	ldr	r2, [pc, #444]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	4b6d      	ldr	r3, [pc, #436]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a6c      	ldr	r2, [pc, #432]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e00b      	b.n	8003c3c <HAL_RCC_OscConfig+0xb0>
 8003c24:	4b69      	ldr	r3, [pc, #420]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a68      	ldr	r2, [pc, #416]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	4b66      	ldr	r3, [pc, #408]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a65      	ldr	r2, [pc, #404]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d013      	beq.n	8003c6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7ff fa94 	bl	8003170 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c4c:	f7ff fa90 	bl	8003170 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b64      	cmp	r3, #100	@ 0x64
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e207      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5e:	4b5b      	ldr	r3, [pc, #364]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0xc0>
 8003c6a:	e014      	b.n	8003c96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7ff fa80 	bl	8003170 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c74:	f7ff fa7c 	bl	8003170 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	@ 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e1f3      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c86:	4b51      	ldr	r3, [pc, #324]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0xe8>
 8003c92:	e000      	b.n	8003c96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 0302 	and.w	r3, r3, #2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d063      	beq.n	8003d6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 030c 	and.w	r3, r3, #12
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cae:	4b47      	ldr	r3, [pc, #284]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d11c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cba:	4b44      	ldr	r3, [pc, #272]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d116      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc6:	4b41      	ldr	r3, [pc, #260]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_RCC_OscConfig+0x152>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d001      	beq.n	8003cde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e1c7      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cde:	4b3b      	ldr	r3, [pc, #236]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4937      	ldr	r1, [pc, #220]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf2:	e03a      	b.n	8003d6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d020      	beq.n	8003d3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cfc:	4b34      	ldr	r3, [pc, #208]	@ (8003dd0 <HAL_RCC_OscConfig+0x244>)
 8003cfe:	2201      	movs	r2, #1
 8003d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d02:	f7ff fa35 	bl	8003170 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d08:	e008      	b.n	8003d1c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0a:	f7ff fa31 	bl	8003170 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	2b02      	cmp	r3, #2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e1a8      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0f0      	beq.n	8003d0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d28:	4b28      	ldr	r3, [pc, #160]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	4925      	ldr	r1, [pc, #148]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	600b      	str	r3, [r1, #0]
 8003d3c:	e015      	b.n	8003d6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3e:	4b24      	ldr	r3, [pc, #144]	@ (8003dd0 <HAL_RCC_OscConfig+0x244>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7ff fa14 	bl	8003170 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d4c:	f7ff fa10 	bl	8003170 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e187      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d036      	beq.n	8003de4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d016      	beq.n	8003dac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7e:	4b15      	ldr	r3, [pc, #84]	@ (8003dd4 <HAL_RCC_OscConfig+0x248>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7ff f9f4 	bl	8003170 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8c:	f7ff f9f0 	bl	8003170 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e167      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003dcc <HAL_RCC_OscConfig+0x240>)
 8003da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da2:	f003 0302 	and.w	r3, r3, #2
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d0f0      	beq.n	8003d8c <HAL_RCC_OscConfig+0x200>
 8003daa:	e01b      	b.n	8003de4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dac:	4b09      	ldr	r3, [pc, #36]	@ (8003dd4 <HAL_RCC_OscConfig+0x248>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db2:	f7ff f9dd 	bl	8003170 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db8:	e00e      	b.n	8003dd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dba:	f7ff f9d9 	bl	8003170 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d907      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e150      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
 8003dcc:	40023800 	.word	0x40023800
 8003dd0:	42470000 	.word	0x42470000
 8003dd4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd8:	4b88      	ldr	r3, [pc, #544]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003dda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1ea      	bne.n	8003dba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 8097 	beq.w	8003f20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003df6:	4b81      	ldr	r3, [pc, #516]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10f      	bne.n	8003e22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]
 8003e06:	4b7d      	ldr	r3, [pc, #500]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0a:	4a7c      	ldr	r2, [pc, #496]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e10:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e12:	4b7a      	ldr	r3, [pc, #488]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e22:	4b77      	ldr	r3, [pc, #476]	@ (8004000 <HAL_RCC_OscConfig+0x474>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d118      	bne.n	8003e60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2e:	4b74      	ldr	r3, [pc, #464]	@ (8004000 <HAL_RCC_OscConfig+0x474>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a73      	ldr	r2, [pc, #460]	@ (8004000 <HAL_RCC_OscConfig+0x474>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3a:	f7ff f999 	bl	8003170 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e42:	f7ff f995 	bl	8003170 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e10c      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	4b6a      	ldr	r3, [pc, #424]	@ (8004000 <HAL_RCC_OscConfig+0x474>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x2ea>
 8003e68:	4b64      	ldr	r3, [pc, #400]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6c:	4a63      	ldr	r2, [pc, #396]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e74:	e01c      	b.n	8003eb0 <HAL_RCC_OscConfig+0x324>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x30c>
 8003e7e:	4b5f      	ldr	r3, [pc, #380]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e82:	4a5e      	ldr	r2, [pc, #376]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e84:	f043 0304 	orr.w	r3, r3, #4
 8003e88:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e8a:	4b5c      	ldr	r3, [pc, #368]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e8e:	4a5b      	ldr	r2, [pc, #364]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCC_OscConfig+0x324>
 8003e98:	4b58      	ldr	r3, [pc, #352]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e9c:	4a57      	ldr	r2, [pc, #348]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003e9e:	f023 0301 	bic.w	r3, r3, #1
 8003ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ea4:	4b55      	ldr	r3, [pc, #340]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea8:	4a54      	ldr	r2, [pc, #336]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003eaa:	f023 0304 	bic.w	r3, r3, #4
 8003eae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d015      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eb8:	f7ff f95a 	bl	8003170 <HAL_GetTick>
 8003ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ebe:	e00a      	b.n	8003ed6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec0:	f7ff f956 	bl	8003170 <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e0cb      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ed6:	4b49      	ldr	r3, [pc, #292]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0ee      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x334>
 8003ee2:	e014      	b.n	8003f0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee4:	f7ff f944 	bl	8003170 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eea:	e00a      	b.n	8003f02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eec:	f7ff f940 	bl	8003170 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e0b5      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f02:	4b3e      	ldr	r3, [pc, #248]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1ee      	bne.n	8003eec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d105      	bne.n	8003f20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f14:	4b39      	ldr	r3, [pc, #228]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f18:	4a38      	ldr	r2, [pc, #224]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003f1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80a1 	beq.w	800406c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f2a:	4b34      	ldr	r3, [pc, #208]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d05c      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d141      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3e:	4b31      	ldr	r3, [pc, #196]	@ (8004004 <HAL_RCC_OscConfig+0x478>)
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f44:	f7ff f914 	bl	8003170 <HAL_GetTick>
 8003f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4a:	e008      	b.n	8003f5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f4c:	f7ff f910 	bl	8003170 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e087      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5e:	4b27      	ldr	r3, [pc, #156]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1f0      	bne.n	8003f4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69da      	ldr	r2, [r3, #28]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f78:	019b      	lsls	r3, r3, #6
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f80:	085b      	lsrs	r3, r3, #1
 8003f82:	3b01      	subs	r3, #1
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8c:	061b      	lsls	r3, r3, #24
 8003f8e:	491b      	ldr	r1, [pc, #108]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f94:	4b1b      	ldr	r3, [pc, #108]	@ (8004004 <HAL_RCC_OscConfig+0x478>)
 8003f96:	2201      	movs	r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9a:	f7ff f8e9 	bl	8003170 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fa2:	f7ff f8e5 	bl	8003170 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e05c      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb4:	4b11      	ldr	r3, [pc, #68]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x416>
 8003fc0:	e054      	b.n	800406c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc2:	4b10      	ldr	r3, [pc, #64]	@ (8004004 <HAL_RCC_OscConfig+0x478>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7ff f8d2 	bl	8003170 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7ff f8ce 	bl	8003170 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e045      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe2:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <HAL_RCC_OscConfig+0x470>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x444>
 8003fee:	e03d      	b.n	800406c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d107      	bne.n	8004008 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e038      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
 8003ffc:	40023800 	.word	0x40023800
 8004000:	40007000 	.word	0x40007000
 8004004:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004008:	4b1b      	ldr	r3, [pc, #108]	@ (8004078 <HAL_RCC_OscConfig+0x4ec>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d028      	beq.n	8004068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004020:	429a      	cmp	r2, r3
 8004022:	d121      	bne.n	8004068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402e:	429a      	cmp	r2, r3
 8004030:	d11a      	bne.n	8004068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004038:	4013      	ands	r3, r2
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800403e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004040:	4293      	cmp	r3, r2
 8004042:	d111      	bne.n	8004068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800404e:	085b      	lsrs	r3, r3, #1
 8004050:	3b01      	subs	r3, #1
 8004052:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004054:	429a      	cmp	r2, r3
 8004056:	d107      	bne.n	8004068 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004062:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3718      	adds	r7, #24
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40023800 	.word	0x40023800

0800407c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d101      	bne.n	8004090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	e0cc      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004090:	4b68      	ldr	r3, [pc, #416]	@ (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d90c      	bls.n	80040b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409e:	4b65      	ldr	r3, [pc, #404]	@ (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b63      	ldr	r3, [pc, #396]	@ (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0b8      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0302 	and.w	r3, r3, #2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0304 	and.w	r3, r3, #4
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d0:	4b59      	ldr	r3, [pc, #356]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	4a58      	ldr	r2, [pc, #352]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80040da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040e8:	4b53      	ldr	r3, [pc, #332]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	4a52      	ldr	r2, [pc, #328]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80040f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f4:	4b50      	ldr	r3, [pc, #320]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	494d      	ldr	r1, [pc, #308]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 8004102:	4313      	orrs	r3, r2
 8004104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d044      	beq.n	800419c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b01      	cmp	r3, #1
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411a:	4b47      	ldr	r3, [pc, #284]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d119      	bne.n	800415a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e07f      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2b02      	cmp	r3, #2
 8004130:	d003      	beq.n	800413a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004136:	2b03      	cmp	r3, #3
 8004138:	d107      	bne.n	800414a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413a:	4b3f      	ldr	r3, [pc, #252]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e06f      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414a:	4b3b      	ldr	r3, [pc, #236]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e067      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800415a:	4b37      	ldr	r3, [pc, #220]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f023 0203 	bic.w	r2, r3, #3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	4934      	ldr	r1, [pc, #208]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	4313      	orrs	r3, r2
 800416a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800416c:	f7ff f800 	bl	8003170 <HAL_GetTick>
 8004170:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004172:	e00a      	b.n	800418a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004174:	f7fe fffc 	bl	8003170 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004182:	4293      	cmp	r3, r2
 8004184:	d901      	bls.n	800418a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e04f      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418a:	4b2b      	ldr	r3, [pc, #172]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 020c 	and.w	r2, r3, #12
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	429a      	cmp	r2, r3
 800419a:	d1eb      	bne.n	8004174 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800419c:	4b25      	ldr	r3, [pc, #148]	@ (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0307 	and.w	r3, r3, #7
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d20c      	bcs.n	80041c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041aa:	4b22      	ldr	r3, [pc, #136]	@ (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	b2d2      	uxtb	r2, r2
 80041b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b2:	4b20      	ldr	r3, [pc, #128]	@ (8004234 <HAL_RCC_ClockConfig+0x1b8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0307 	and.w	r3, r3, #7
 80041ba:	683a      	ldr	r2, [r7, #0]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d001      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e032      	b.n	800422a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d0:	4b19      	ldr	r3, [pc, #100]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	4916      	ldr	r1, [pc, #88]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ee:	4b12      	ldr	r3, [pc, #72]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	490e      	ldr	r1, [pc, #56]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004202:	f000 f821 	bl	8004248 <HAL_RCC_GetSysClockFreq>
 8004206:	4602      	mov	r2, r0
 8004208:	4b0b      	ldr	r3, [pc, #44]	@ (8004238 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	091b      	lsrs	r3, r3, #4
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	490a      	ldr	r1, [pc, #40]	@ (800423c <HAL_RCC_ClockConfig+0x1c0>)
 8004214:	5ccb      	ldrb	r3, [r1, r3]
 8004216:	fa22 f303 	lsr.w	r3, r2, r3
 800421a:	4a09      	ldr	r2, [pc, #36]	@ (8004240 <HAL_RCC_ClockConfig+0x1c4>)
 800421c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800421e:	4b09      	ldr	r3, [pc, #36]	@ (8004244 <HAL_RCC_ClockConfig+0x1c8>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe ff60 	bl	80030e8 <HAL_InitTick>

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023c00 	.word	0x40023c00
 8004238:	40023800 	.word	0x40023800
 800423c:	08009eb0 	.word	0x08009eb0
 8004240:	20000008 	.word	0x20000008
 8004244:	2000000c 	.word	0x2000000c

08004248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800424c:	b090      	sub	sp, #64	@ 0x40
 800424e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004250:	2300      	movs	r3, #0
 8004252:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004258:	2300      	movs	r3, #0
 800425a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004260:	4b59      	ldr	r3, [pc, #356]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b08      	cmp	r3, #8
 800426a:	d00d      	beq.n	8004288 <HAL_RCC_GetSysClockFreq+0x40>
 800426c:	2b08      	cmp	r3, #8
 800426e:	f200 80a1 	bhi.w	80043b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_RCC_GetSysClockFreq+0x34>
 8004276:	2b04      	cmp	r3, #4
 8004278:	d003      	beq.n	8004282 <HAL_RCC_GetSysClockFreq+0x3a>
 800427a:	e09b      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800427c:	4b53      	ldr	r3, [pc, #332]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x184>)
 800427e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004280:	e09b      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004282:	4b53      	ldr	r3, [pc, #332]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004284:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004286:	e098      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004288:	4b4f      	ldr	r3, [pc, #316]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004290:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004292:	4b4d      	ldr	r3, [pc, #308]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d028      	beq.n	80042f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800429e:	4b4a      	ldr	r3, [pc, #296]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	099b      	lsrs	r3, r3, #6
 80042a4:	2200      	movs	r2, #0
 80042a6:	623b      	str	r3, [r7, #32]
 80042a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80042b0:	2100      	movs	r1, #0
 80042b2:	4b47      	ldr	r3, [pc, #284]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80042b4:	fb03 f201 	mul.w	r2, r3, r1
 80042b8:	2300      	movs	r3, #0
 80042ba:	fb00 f303 	mul.w	r3, r0, r3
 80042be:	4413      	add	r3, r2
 80042c0:	4a43      	ldr	r2, [pc, #268]	@ (80043d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80042c2:	fba0 1202 	umull	r1, r2, r0, r2
 80042c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042c8:	460a      	mov	r2, r1
 80042ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80042cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042ce:	4413      	add	r3, r2
 80042d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042d4:	2200      	movs	r2, #0
 80042d6:	61bb      	str	r3, [r7, #24]
 80042d8:	61fa      	str	r2, [r7, #28]
 80042da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80042e2:	f7fc fcb1 	bl	8000c48 <__aeabi_uldivmod>
 80042e6:	4602      	mov	r2, r0
 80042e8:	460b      	mov	r3, r1
 80042ea:	4613      	mov	r3, r2
 80042ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042ee:	e053      	b.n	8004398 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f0:	4b35      	ldr	r3, [pc, #212]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	099b      	lsrs	r3, r3, #6
 80042f6:	2200      	movs	r2, #0
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	617a      	str	r2, [r7, #20]
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004302:	f04f 0b00 	mov.w	fp, #0
 8004306:	4652      	mov	r2, sl
 8004308:	465b      	mov	r3, fp
 800430a:	f04f 0000 	mov.w	r0, #0
 800430e:	f04f 0100 	mov.w	r1, #0
 8004312:	0159      	lsls	r1, r3, #5
 8004314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004318:	0150      	lsls	r0, r2, #5
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	ebb2 080a 	subs.w	r8, r2, sl
 8004322:	eb63 090b 	sbc.w	r9, r3, fp
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	f04f 0300 	mov.w	r3, #0
 800432e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004332:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004336:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800433a:	ebb2 0408 	subs.w	r4, r2, r8
 800433e:	eb63 0509 	sbc.w	r5, r3, r9
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	00eb      	lsls	r3, r5, #3
 800434c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004350:	00e2      	lsls	r2, r4, #3
 8004352:	4614      	mov	r4, r2
 8004354:	461d      	mov	r5, r3
 8004356:	eb14 030a 	adds.w	r3, r4, sl
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	eb45 030b 	adc.w	r3, r5, fp
 8004360:	607b      	str	r3, [r7, #4]
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800436e:	4629      	mov	r1, r5
 8004370:	028b      	lsls	r3, r1, #10
 8004372:	4621      	mov	r1, r4
 8004374:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004378:	4621      	mov	r1, r4
 800437a:	028a      	lsls	r2, r1, #10
 800437c:	4610      	mov	r0, r2
 800437e:	4619      	mov	r1, r3
 8004380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004382:	2200      	movs	r2, #0
 8004384:	60bb      	str	r3, [r7, #8]
 8004386:	60fa      	str	r2, [r7, #12]
 8004388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800438c:	f7fc fc5c 	bl	8000c48 <__aeabi_uldivmod>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4613      	mov	r3, r2
 8004396:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004398:	4b0b      	ldr	r3, [pc, #44]	@ (80043c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	3301      	adds	r3, #1
 80043a4:	005b      	lsls	r3, r3, #1
 80043a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80043a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043b2:	e002      	b.n	80043ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043b4:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <HAL_RCC_GetSysClockFreq+0x184>)
 80043b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80043b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3740      	adds	r7, #64	@ 0x40
 80043c0:	46bd      	mov	sp, r7
 80043c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043c6:	bf00      	nop
 80043c8:	40023800 	.word	0x40023800
 80043cc:	00f42400 	.word	0x00f42400
 80043d0:	017d7840 	.word	0x017d7840

080043d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043d4:	b480      	push	{r7}
 80043d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043d8:	4b03      	ldr	r3, [pc, #12]	@ (80043e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043da:	681b      	ldr	r3, [r3, #0]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000008 	.word	0x20000008

080043ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80043f0:	f7ff fff0 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 80043f4:	4602      	mov	r2, r0
 80043f6:	4b05      	ldr	r3, [pc, #20]	@ (800440c <HAL_RCC_GetPCLK1Freq+0x20>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	0a9b      	lsrs	r3, r3, #10
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	4903      	ldr	r1, [pc, #12]	@ (8004410 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004402:	5ccb      	ldrb	r3, [r1, r3]
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004408:	4618      	mov	r0, r3
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40023800 	.word	0x40023800
 8004410:	08009ec0 	.word	0x08009ec0

08004414 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004418:	f7ff ffdc 	bl	80043d4 <HAL_RCC_GetHCLKFreq>
 800441c:	4602      	mov	r2, r0
 800441e:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	0b5b      	lsrs	r3, r3, #13
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	4903      	ldr	r1, [pc, #12]	@ (8004438 <HAL_RCC_GetPCLK2Freq+0x24>)
 800442a:	5ccb      	ldrb	r3, [r1, r3]
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004430:	4618      	mov	r0, r3
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40023800 	.word	0x40023800
 8004438:	08009ec0 	.word	0x08009ec0

0800443c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e041      	b.n	80044d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d106      	bne.n	8004468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7fe fad4 	bl	8002a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3304      	adds	r3, #4
 8004478:	4619      	mov	r1, r3
 800447a:	4610      	mov	r0, r2
 800447c:	f000 fdf2 	bl	8005064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3708      	adds	r7, #8
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d001      	beq.n	80044f4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e046      	b.n	8004582 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a23      	ldr	r2, [pc, #140]	@ (8004590 <HAL_TIM_Base_Start+0xb4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d022      	beq.n	800454c <HAL_TIM_Base_Start+0x70>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800450e:	d01d      	beq.n	800454c <HAL_TIM_Base_Start+0x70>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1f      	ldr	r2, [pc, #124]	@ (8004594 <HAL_TIM_Base_Start+0xb8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d018      	beq.n	800454c <HAL_TIM_Base_Start+0x70>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a1e      	ldr	r2, [pc, #120]	@ (8004598 <HAL_TIM_Base_Start+0xbc>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d013      	beq.n	800454c <HAL_TIM_Base_Start+0x70>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a1c      	ldr	r2, [pc, #112]	@ (800459c <HAL_TIM_Base_Start+0xc0>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d00e      	beq.n	800454c <HAL_TIM_Base_Start+0x70>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a1b      	ldr	r2, [pc, #108]	@ (80045a0 <HAL_TIM_Base_Start+0xc4>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d009      	beq.n	800454c <HAL_TIM_Base_Start+0x70>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a19      	ldr	r2, [pc, #100]	@ (80045a4 <HAL_TIM_Base_Start+0xc8>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d004      	beq.n	800454c <HAL_TIM_Base_Start+0x70>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a18      	ldr	r2, [pc, #96]	@ (80045a8 <HAL_TIM_Base_Start+0xcc>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d111      	bne.n	8004570 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b06      	cmp	r3, #6
 800455c:	d010      	beq.n	8004580 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f042 0201 	orr.w	r2, r2, #1
 800456c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800456e:	e007      	b.n	8004580 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
 800458e:	bf00      	nop
 8004590:	40010000 	.word	0x40010000
 8004594:	40000400 	.word	0x40000400
 8004598:	40000800 	.word	0x40000800
 800459c:	40000c00 	.word	0x40000c00
 80045a0:	40010400 	.word	0x40010400
 80045a4:	40014000 	.word	0x40014000
 80045a8:	40001800 	.word	0x40001800

080045ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e041      	b.n	8004642 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f839 	bl	800464a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f000 fd3a 	bl	8005064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}

0800464a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004652:	bf00      	nop
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d109      	bne.n	8004684 <HAL_TIM_PWM_Start+0x24>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b01      	cmp	r3, #1
 800467a:	bf14      	ite	ne
 800467c:	2301      	movne	r3, #1
 800467e:	2300      	moveq	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	e022      	b.n	80046ca <HAL_TIM_PWM_Start+0x6a>
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	2b04      	cmp	r3, #4
 8004688:	d109      	bne.n	800469e <HAL_TIM_PWM_Start+0x3e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b01      	cmp	r3, #1
 8004694:	bf14      	ite	ne
 8004696:	2301      	movne	r3, #1
 8004698:	2300      	moveq	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	e015      	b.n	80046ca <HAL_TIM_PWM_Start+0x6a>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b08      	cmp	r3, #8
 80046a2:	d109      	bne.n	80046b8 <HAL_TIM_PWM_Start+0x58>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	bf14      	ite	ne
 80046b0:	2301      	movne	r3, #1
 80046b2:	2300      	moveq	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	e008      	b.n	80046ca <HAL_TIM_PWM_Start+0x6a>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	bf14      	ite	ne
 80046c4:	2301      	movne	r3, #1
 80046c6:	2300      	moveq	r3, #0
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e07c      	b.n	80047cc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d104      	bne.n	80046e2 <HAL_TIM_PWM_Start+0x82>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2202      	movs	r2, #2
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046e0:	e013      	b.n	800470a <HAL_TIM_PWM_Start+0xaa>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2b04      	cmp	r3, #4
 80046e6:	d104      	bne.n	80046f2 <HAL_TIM_PWM_Start+0x92>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046f0:	e00b      	b.n	800470a <HAL_TIM_PWM_Start+0xaa>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d104      	bne.n	8004702 <HAL_TIM_PWM_Start+0xa2>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2202      	movs	r2, #2
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004700:	e003      	b.n	800470a <HAL_TIM_PWM_Start+0xaa>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2201      	movs	r2, #1
 8004710:	6839      	ldr	r1, [r7, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 ff9c 	bl	8005650 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a2d      	ldr	r2, [pc, #180]	@ (80047d4 <HAL_TIM_PWM_Start+0x174>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d004      	beq.n	800472c <HAL_TIM_PWM_Start+0xcc>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a2c      	ldr	r2, [pc, #176]	@ (80047d8 <HAL_TIM_PWM_Start+0x178>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d101      	bne.n	8004730 <HAL_TIM_PWM_Start+0xd0>
 800472c:	2301      	movs	r3, #1
 800472e:	e000      	b.n	8004732 <HAL_TIM_PWM_Start+0xd2>
 8004730:	2300      	movs	r3, #0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004744:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a22      	ldr	r2, [pc, #136]	@ (80047d4 <HAL_TIM_PWM_Start+0x174>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d022      	beq.n	8004796 <HAL_TIM_PWM_Start+0x136>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004758:	d01d      	beq.n	8004796 <HAL_TIM_PWM_Start+0x136>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a1f      	ldr	r2, [pc, #124]	@ (80047dc <HAL_TIM_PWM_Start+0x17c>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d018      	beq.n	8004796 <HAL_TIM_PWM_Start+0x136>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a1d      	ldr	r2, [pc, #116]	@ (80047e0 <HAL_TIM_PWM_Start+0x180>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d013      	beq.n	8004796 <HAL_TIM_PWM_Start+0x136>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a1c      	ldr	r2, [pc, #112]	@ (80047e4 <HAL_TIM_PWM_Start+0x184>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d00e      	beq.n	8004796 <HAL_TIM_PWM_Start+0x136>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a16      	ldr	r2, [pc, #88]	@ (80047d8 <HAL_TIM_PWM_Start+0x178>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d009      	beq.n	8004796 <HAL_TIM_PWM_Start+0x136>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a18      	ldr	r2, [pc, #96]	@ (80047e8 <HAL_TIM_PWM_Start+0x188>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d004      	beq.n	8004796 <HAL_TIM_PWM_Start+0x136>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a16      	ldr	r2, [pc, #88]	@ (80047ec <HAL_TIM_PWM_Start+0x18c>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d111      	bne.n	80047ba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2b06      	cmp	r3, #6
 80047a6:	d010      	beq.n	80047ca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b8:	e007      	b.n	80047ca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40010000 	.word	0x40010000
 80047d8:	40010400 	.word	0x40010400
 80047dc:	40000400 	.word	0x40000400
 80047e0:	40000800 	.word	0x40000800
 80047e4:	40000c00 	.word	0x40000c00
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40001800 	.word	0x40001800

080047f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e097      	b.n	8004934 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d106      	bne.n	800481e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f7fe f975 	bl	8002b08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2202      	movs	r2, #2
 8004822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004834:	f023 0307 	bic.w	r3, r3, #7
 8004838:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3304      	adds	r3, #4
 8004842:	4619      	mov	r1, r3
 8004844:	4610      	mov	r0, r2
 8004846:	f000 fc0d 	bl	8005064 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	697a      	ldr	r2, [r7, #20]
 8004868:	4313      	orrs	r3, r2
 800486a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	689a      	ldr	r2, [r3, #8]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	021b      	lsls	r3, r3, #8
 8004882:	4313      	orrs	r3, r2
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004890:	f023 030c 	bic.w	r3, r3, #12
 8004894:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800489c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	021b      	lsls	r3, r3, #8
 80048ac:	4313      	orrs	r3, r2
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	011a      	lsls	r2, r3, #4
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	031b      	lsls	r3, r3, #12
 80048c0:	4313      	orrs	r3, r2
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80048ce:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80048d6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685a      	ldr	r2, [r3, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	011b      	lsls	r3, r3, #4
 80048e2:	4313      	orrs	r3, r2
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800494c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004954:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800495c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004964:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d110      	bne.n	800498e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800496c:	7bfb      	ldrb	r3, [r7, #15]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d102      	bne.n	8004978 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004972:	7b7b      	ldrb	r3, [r7, #13]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d001      	beq.n	800497c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e089      	b.n	8004a90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2202      	movs	r2, #2
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800498c:	e031      	b.n	80049f2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	2b04      	cmp	r3, #4
 8004992:	d110      	bne.n	80049b6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004994:	7bbb      	ldrb	r3, [r7, #14]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d102      	bne.n	80049a0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800499a:	7b3b      	ldrb	r3, [r7, #12]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d001      	beq.n	80049a4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e075      	b.n	8004a90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80049b4:	e01d      	b.n	80049f2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d108      	bne.n	80049ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049bc:	7bbb      	ldrb	r3, [r7, #14]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d105      	bne.n	80049ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049c2:	7b7b      	ldrb	r3, [r7, #13]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d102      	bne.n	80049ce <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049c8:	7b3b      	ldrb	r3, [r7, #12]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d001      	beq.n	80049d2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e05e      	b.n	8004a90 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2202      	movs	r2, #2
 80049d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2202      	movs	r2, #2
 80049de:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2202      	movs	r2, #2
 80049e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <HAL_TIM_Encoder_Start_IT+0xc4>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d010      	beq.n	8004a20 <HAL_TIM_Encoder_Start_IT+0xe4>
 80049fe:	e01f      	b.n	8004a40 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2201      	movs	r2, #1
 8004a06:	2100      	movs	r1, #0
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fe21 	bl	8005650 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 0202 	orr.w	r2, r2, #2
 8004a1c:	60da      	str	r2, [r3, #12]
      break;
 8004a1e:	e02e      	b.n	8004a7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2201      	movs	r2, #1
 8004a26:	2104      	movs	r1, #4
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fe11 	bl	8005650 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0204 	orr.w	r2, r2, #4
 8004a3c:	60da      	str	r2, [r3, #12]
      break;
 8004a3e:	e01e      	b.n	8004a7e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2201      	movs	r2, #1
 8004a46:	2100      	movs	r1, #0
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fe01 	bl	8005650 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2201      	movs	r2, #1
 8004a54:	2104      	movs	r1, #4
 8004a56:	4618      	mov	r0, r3
 8004a58:	f000 fdfa 	bl	8005650 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f042 0202 	orr.w	r2, r2, #2
 8004a6a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68da      	ldr	r2, [r3, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0204 	orr.w	r2, r2, #4
 8004a7a:	60da      	str	r2, [r3, #12]
      break;
 8004a7c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0201 	orr.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	691b      	ldr	r3, [r3, #16]
 8004aae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d020      	beq.n	8004afc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01b      	beq.n	8004afc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0202 	mvn.w	r2, #2
 8004acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	f003 0303 	and.w	r3, r3, #3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fc fa84 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8004ae8:	e005      	b.n	8004af6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fa9c 	bl	8005028 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 faa3 	bl	800503c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d020      	beq.n	8004b48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d01b      	beq.n	8004b48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0204 	mvn.w	r2, #4
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f7fc fa5e 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa76 	bl	8005028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fa7d 	bl	800503c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d020      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f003 0308 	and.w	r3, r3, #8
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01b      	beq.n	8004b94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f06f 0208 	mvn.w	r2, #8
 8004b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2204      	movs	r2, #4
 8004b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fc fa38 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8004b80:	e005      	b.n	8004b8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 fa50 	bl	8005028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 fa57 	bl	800503c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0310 	and.w	r3, r3, #16
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d020      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01b      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0210 	mvn.w	r2, #16
 8004bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2208      	movs	r2, #8
 8004bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fc fa12 	bl	8000ff0 <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fa2a 	bl	8005028 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fa31 	bl	800503c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00c      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0201 	mvn.w	r2, #1
 8004bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa08 	bl	8005014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00c      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fe12 	bl	800584c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00c      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fa02 	bl	8005050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	f003 0320 	and.w	r3, r3, #32
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00c      	beq.n	8004c70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f003 0320 	and.w	r3, r3, #32
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f06f 0220 	mvn.w	r2, #32
 8004c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fde4 	bl	8005838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e0ae      	b.n	8004df4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	f200 809f 	bhi.w	8004de4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004ce1 	.word	0x08004ce1
 8004cb0:	08004de5 	.word	0x08004de5
 8004cb4:	08004de5 	.word	0x08004de5
 8004cb8:	08004de5 	.word	0x08004de5
 8004cbc:	08004d21 	.word	0x08004d21
 8004cc0:	08004de5 	.word	0x08004de5
 8004cc4:	08004de5 	.word	0x08004de5
 8004cc8:	08004de5 	.word	0x08004de5
 8004ccc:	08004d63 	.word	0x08004d63
 8004cd0:	08004de5 	.word	0x08004de5
 8004cd4:	08004de5 	.word	0x08004de5
 8004cd8:	08004de5 	.word	0x08004de5
 8004cdc:	08004da3 	.word	0x08004da3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fa68 	bl	80051bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0208 	orr.w	r2, r2, #8
 8004cfa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 0204 	bic.w	r2, r2, #4
 8004d0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6999      	ldr	r1, [r3, #24]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	691a      	ldr	r2, [r3, #16]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	430a      	orrs	r2, r1
 8004d1c:	619a      	str	r2, [r3, #24]
      break;
 8004d1e:	e064      	b.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fab8 	bl	800529c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	699a      	ldr	r2, [r3, #24]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	699a      	ldr	r2, [r3, #24]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6999      	ldr	r1, [r3, #24]
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	021a      	lsls	r2, r3, #8
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	430a      	orrs	r2, r1
 8004d5e:	619a      	str	r2, [r3, #24]
      break;
 8004d60:	e043      	b.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68b9      	ldr	r1, [r7, #8]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 fb0d 	bl	8005388 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69da      	ldr	r2, [r3, #28]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0208 	orr.w	r2, r2, #8
 8004d7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0204 	bic.w	r2, r2, #4
 8004d8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69d9      	ldr	r1, [r3, #28]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	61da      	str	r2, [r3, #28]
      break;
 8004da0:	e023      	b.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68b9      	ldr	r1, [r7, #8]
 8004da8:	4618      	mov	r0, r3
 8004daa:	f000 fb61 	bl	8005470 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69da      	ldr	r2, [r3, #28]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	69da      	ldr	r2, [r3, #28]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69d9      	ldr	r1, [r3, #28]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	021a      	lsls	r2, r3, #8
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	61da      	str	r2, [r3, #28]
      break;
 8004de2:	e002      	b.n	8004dea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	75fb      	strb	r3, [r7, #23]
      break;
 8004de8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3718      	adds	r7, #24
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d101      	bne.n	8004e18 <HAL_TIM_ConfigClockSource+0x1c>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e0b4      	b.n	8004f82 <HAL_TIM_ConfigClockSource+0x186>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2202      	movs	r2, #2
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004e36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e50:	d03e      	beq.n	8004ed0 <HAL_TIM_ConfigClockSource+0xd4>
 8004e52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e56:	f200 8087 	bhi.w	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e5e:	f000 8086 	beq.w	8004f6e <HAL_TIM_ConfigClockSource+0x172>
 8004e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e66:	d87f      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e68:	2b70      	cmp	r3, #112	@ 0x70
 8004e6a:	d01a      	beq.n	8004ea2 <HAL_TIM_ConfigClockSource+0xa6>
 8004e6c:	2b70      	cmp	r3, #112	@ 0x70
 8004e6e:	d87b      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e70:	2b60      	cmp	r3, #96	@ 0x60
 8004e72:	d050      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x11a>
 8004e74:	2b60      	cmp	r3, #96	@ 0x60
 8004e76:	d877      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e78:	2b50      	cmp	r3, #80	@ 0x50
 8004e7a:	d03c      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0xfa>
 8004e7c:	2b50      	cmp	r3, #80	@ 0x50
 8004e7e:	d873      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e80:	2b40      	cmp	r3, #64	@ 0x40
 8004e82:	d058      	beq.n	8004f36 <HAL_TIM_ConfigClockSource+0x13a>
 8004e84:	2b40      	cmp	r3, #64	@ 0x40
 8004e86:	d86f      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e88:	2b30      	cmp	r3, #48	@ 0x30
 8004e8a:	d064      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x15a>
 8004e8c:	2b30      	cmp	r3, #48	@ 0x30
 8004e8e:	d86b      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e90:	2b20      	cmp	r3, #32
 8004e92:	d060      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x15a>
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d867      	bhi.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d05c      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x15a>
 8004e9c:	2b10      	cmp	r3, #16
 8004e9e:	d05a      	beq.n	8004f56 <HAL_TIM_ConfigClockSource+0x15a>
 8004ea0:	e062      	b.n	8004f68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004eb2:	f000 fbad 	bl	8005610 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ec4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	609a      	str	r2, [r3, #8]
      break;
 8004ece:	e04f      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ee0:	f000 fb96 	bl	8005610 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004ef2:	609a      	str	r2, [r3, #8]
      break;
 8004ef4:	e03c      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f02:	461a      	mov	r2, r3
 8004f04:	f000 fb0a 	bl	800551c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2150      	movs	r1, #80	@ 0x50
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fb63 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8004f14:	e02c      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f22:	461a      	mov	r2, r3
 8004f24:	f000 fb29 	bl	800557a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2160      	movs	r1, #96	@ 0x60
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f000 fb53 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8004f34:	e01c      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f42:	461a      	mov	r2, r3
 8004f44:	f000 faea 	bl	800551c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2140      	movs	r1, #64	@ 0x40
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fb43 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8004f54:	e00c      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4610      	mov	r0, r2
 8004f62:	f000 fb3a 	bl	80055da <TIM_ITRx_SetConfig>
      break;
 8004f66:	e003      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f6c:	e000      	b.n	8004f70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b0c      	cmp	r3, #12
 8004f9e:	d831      	bhi.n	8005004 <HAL_TIM_ReadCapturedValue+0x78>
 8004fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fa8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8004fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa6:	bf00      	nop
 8004fa8:	08004fdd 	.word	0x08004fdd
 8004fac:	08005005 	.word	0x08005005
 8004fb0:	08005005 	.word	0x08005005
 8004fb4:	08005005 	.word	0x08005005
 8004fb8:	08004fe7 	.word	0x08004fe7
 8004fbc:	08005005 	.word	0x08005005
 8004fc0:	08005005 	.word	0x08005005
 8004fc4:	08005005 	.word	0x08005005
 8004fc8:	08004ff1 	.word	0x08004ff1
 8004fcc:	08005005 	.word	0x08005005
 8004fd0:	08005005 	.word	0x08005005
 8004fd4:	08005005 	.word	0x08005005
 8004fd8:	08004ffb 	.word	0x08004ffb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe2:	60fb      	str	r3, [r7, #12]

      break;
 8004fe4:	e00f      	b.n	8005006 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fec:	60fb      	str	r3, [r7, #12]

      break;
 8004fee:	e00a      	b.n	8005006 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff6:	60fb      	str	r3, [r7, #12]

      break;
 8004ff8:	e005      	b.n	8005006 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005000:	60fb      	str	r3, [r7, #12]

      break;
 8005002:	e000      	b.n	8005006 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005004:	bf00      	nop
  }

  return tmpreg;
 8005006:	68fb      	ldr	r3, [r7, #12]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a46      	ldr	r2, [pc, #280]	@ (8005190 <TIM_Base_SetConfig+0x12c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d013      	beq.n	80050a4 <TIM_Base_SetConfig+0x40>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005082:	d00f      	beq.n	80050a4 <TIM_Base_SetConfig+0x40>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a43      	ldr	r2, [pc, #268]	@ (8005194 <TIM_Base_SetConfig+0x130>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00b      	beq.n	80050a4 <TIM_Base_SetConfig+0x40>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a42      	ldr	r2, [pc, #264]	@ (8005198 <TIM_Base_SetConfig+0x134>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d007      	beq.n	80050a4 <TIM_Base_SetConfig+0x40>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a41      	ldr	r2, [pc, #260]	@ (800519c <TIM_Base_SetConfig+0x138>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_Base_SetConfig+0x40>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a40      	ldr	r2, [pc, #256]	@ (80051a0 <TIM_Base_SetConfig+0x13c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d108      	bne.n	80050b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a35      	ldr	r2, [pc, #212]	@ (8005190 <TIM_Base_SetConfig+0x12c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d02b      	beq.n	8005116 <TIM_Base_SetConfig+0xb2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c4:	d027      	beq.n	8005116 <TIM_Base_SetConfig+0xb2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a32      	ldr	r2, [pc, #200]	@ (8005194 <TIM_Base_SetConfig+0x130>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d023      	beq.n	8005116 <TIM_Base_SetConfig+0xb2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a31      	ldr	r2, [pc, #196]	@ (8005198 <TIM_Base_SetConfig+0x134>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d01f      	beq.n	8005116 <TIM_Base_SetConfig+0xb2>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a30      	ldr	r2, [pc, #192]	@ (800519c <TIM_Base_SetConfig+0x138>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d01b      	beq.n	8005116 <TIM_Base_SetConfig+0xb2>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	4a2f      	ldr	r2, [pc, #188]	@ (80051a0 <TIM_Base_SetConfig+0x13c>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d017      	beq.n	8005116 <TIM_Base_SetConfig+0xb2>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2e      	ldr	r2, [pc, #184]	@ (80051a4 <TIM_Base_SetConfig+0x140>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d013      	beq.n	8005116 <TIM_Base_SetConfig+0xb2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2d      	ldr	r2, [pc, #180]	@ (80051a8 <TIM_Base_SetConfig+0x144>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00f      	beq.n	8005116 <TIM_Base_SetConfig+0xb2>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2c      	ldr	r2, [pc, #176]	@ (80051ac <TIM_Base_SetConfig+0x148>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00b      	beq.n	8005116 <TIM_Base_SetConfig+0xb2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2b      	ldr	r2, [pc, #172]	@ (80051b0 <TIM_Base_SetConfig+0x14c>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d007      	beq.n	8005116 <TIM_Base_SetConfig+0xb2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2a      	ldr	r2, [pc, #168]	@ (80051b4 <TIM_Base_SetConfig+0x150>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d003      	beq.n	8005116 <TIM_Base_SetConfig+0xb2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a29      	ldr	r2, [pc, #164]	@ (80051b8 <TIM_Base_SetConfig+0x154>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d108      	bne.n	8005128 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800511c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a10      	ldr	r2, [pc, #64]	@ (8005190 <TIM_Base_SetConfig+0x12c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d003      	beq.n	800515c <TIM_Base_SetConfig+0xf8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a12      	ldr	r2, [pc, #72]	@ (80051a0 <TIM_Base_SetConfig+0x13c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d103      	bne.n	8005164 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b01      	cmp	r3, #1
 8005174:	d105      	bne.n	8005182 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f023 0201 	bic.w	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	611a      	str	r2, [r3, #16]
  }
}
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40010000 	.word	0x40010000
 8005194:	40000400 	.word	0x40000400
 8005198:	40000800 	.word	0x40000800
 800519c:	40000c00 	.word	0x40000c00
 80051a0:	40010400 	.word	0x40010400
 80051a4:	40014000 	.word	0x40014000
 80051a8:	40014400 	.word	0x40014400
 80051ac:	40014800 	.word	0x40014800
 80051b0:	40001800 	.word	0x40001800
 80051b4:	40001c00 	.word	0x40001c00
 80051b8:	40002000 	.word	0x40002000

080051bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051bc:	b480      	push	{r7}
 80051be:	b087      	sub	sp, #28
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	f023 0201 	bic.w	r2, r3, #1
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f023 0303 	bic.w	r3, r3, #3
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f023 0302 	bic.w	r3, r3, #2
 8005204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a20      	ldr	r2, [pc, #128]	@ (8005294 <TIM_OC1_SetConfig+0xd8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_OC1_SetConfig+0x64>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a1f      	ldr	r2, [pc, #124]	@ (8005298 <TIM_OC1_SetConfig+0xdc>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d10c      	bne.n	800523a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f023 0308 	bic.w	r3, r3, #8
 8005226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	4313      	orrs	r3, r2
 8005230:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	f023 0304 	bic.w	r3, r3, #4
 8005238:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a15      	ldr	r2, [pc, #84]	@ (8005294 <TIM_OC1_SetConfig+0xd8>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d003      	beq.n	800524a <TIM_OC1_SetConfig+0x8e>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a14      	ldr	r2, [pc, #80]	@ (8005298 <TIM_OC1_SetConfig+0xdc>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d111      	bne.n	800526e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	621a      	str	r2, [r3, #32]
}
 8005288:	bf00      	nop
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	40010000 	.word	0x40010000
 8005298:	40010400 	.word	0x40010400

0800529c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800529c:	b480      	push	{r7}
 800529e:	b087      	sub	sp, #28
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a1b      	ldr	r3, [r3, #32]
 80052aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a1b      	ldr	r3, [r3, #32]
 80052b0:	f023 0210 	bic.w	r2, r3, #16
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	021b      	lsls	r3, r3, #8
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f023 0320 	bic.w	r3, r3, #32
 80052e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	011b      	lsls	r3, r3, #4
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a22      	ldr	r2, [pc, #136]	@ (8005380 <TIM_OC2_SetConfig+0xe4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_OC2_SetConfig+0x68>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a21      	ldr	r2, [pc, #132]	@ (8005384 <TIM_OC2_SetConfig+0xe8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d10d      	bne.n	8005320 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800530a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	011b      	lsls	r3, r3, #4
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005318:	697b      	ldr	r3, [r7, #20]
 800531a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800531e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4a17      	ldr	r2, [pc, #92]	@ (8005380 <TIM_OC2_SetConfig+0xe4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d003      	beq.n	8005330 <TIM_OC2_SetConfig+0x94>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a16      	ldr	r2, [pc, #88]	@ (8005384 <TIM_OC2_SetConfig+0xe8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d113      	bne.n	8005358 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005336:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800533e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	4313      	orrs	r3, r2
 800534a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	699b      	ldr	r3, [r3, #24]
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	693a      	ldr	r2, [r7, #16]
 8005354:	4313      	orrs	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685a      	ldr	r2, [r3, #4]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	621a      	str	r2, [r3, #32]
}
 8005372:	bf00      	nop
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40010000 	.word	0x40010000
 8005384:	40010400 	.word	0x40010400

08005388 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69db      	ldr	r3, [r3, #28]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0303 	bic.w	r3, r3, #3
 80053be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	021b      	lsls	r3, r3, #8
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a21      	ldr	r2, [pc, #132]	@ (8005468 <TIM_OC3_SetConfig+0xe0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d003      	beq.n	80053ee <TIM_OC3_SetConfig+0x66>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a20      	ldr	r2, [pc, #128]	@ (800546c <TIM_OC3_SetConfig+0xe4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d10d      	bne.n	800540a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	021b      	lsls	r3, r3, #8
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	4313      	orrs	r3, r2
 8005400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a16      	ldr	r2, [pc, #88]	@ (8005468 <TIM_OC3_SetConfig+0xe0>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_OC3_SetConfig+0x92>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a15      	ldr	r2, [pc, #84]	@ (800546c <TIM_OC3_SetConfig+0xe4>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d113      	bne.n	8005442 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005420:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005428:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	695b      	ldr	r3, [r3, #20]
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4313      	orrs	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	621a      	str	r2, [r3, #32]
}
 800545c:	bf00      	nop
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40010000 	.word	0x40010000
 800546c:	40010400 	.word	0x40010400

08005470 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	69db      	ldr	r3, [r3, #28]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800549e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	031b      	lsls	r3, r3, #12
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a12      	ldr	r2, [pc, #72]	@ (8005514 <TIM_OC4_SetConfig+0xa4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_OC4_SetConfig+0x68>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a11      	ldr	r2, [pc, #68]	@ (8005518 <TIM_OC4_SetConfig+0xa8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d109      	bne.n	80054ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80054de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	019b      	lsls	r3, r3, #6
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40010000 	.word	0x40010000
 8005518:	40010400 	.word	0x40010400

0800551c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800551c:	b480      	push	{r7}
 800551e:	b087      	sub	sp, #28
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	f023 0201 	bic.w	r2, r3, #1
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005546:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f023 030a 	bic.w	r3, r3, #10
 8005558:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4313      	orrs	r3, r2
 8005560:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	621a      	str	r2, [r3, #32]
}
 800556e:	bf00      	nop
 8005570:	371c      	adds	r7, #28
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557a:	b480      	push	{r7}
 800557c:	b087      	sub	sp, #28
 800557e:	af00      	add	r7, sp, #0
 8005580:	60f8      	str	r0, [r7, #12]
 8005582:	60b9      	str	r1, [r7, #8]
 8005584:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	f023 0210 	bic.w	r2, r3, #16
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80055a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	031b      	lsls	r3, r3, #12
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80055b6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
 80055e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f043 0307 	orr.w	r3, r3, #7
 80055fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	609a      	str	r2, [r3, #8]
}
 8005604:	bf00      	nop
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005610:	b480      	push	{r7}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	60f8      	str	r0, [r7, #12]
 8005618:	60b9      	str	r1, [r7, #8]
 800561a:	607a      	str	r2, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800562a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	021a      	lsls	r2, r3, #8
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	431a      	orrs	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4313      	orrs	r3, r2
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	609a      	str	r2, [r3, #8]
}
 8005644:	bf00      	nop
 8005646:	371c      	adds	r7, #28
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	f003 031f 	and.w	r3, r3, #31
 8005662:	2201      	movs	r2, #1
 8005664:	fa02 f303 	lsl.w	r3, r2, r3
 8005668:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a1a      	ldr	r2, [r3, #32]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	43db      	mvns	r3, r3
 8005672:	401a      	ands	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a1a      	ldr	r2, [r3, #32]
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f003 031f 	and.w	r3, r3, #31
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	fa01 f303 	lsl.w	r3, r1, r3
 8005688:	431a      	orrs	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	621a      	str	r2, [r3, #32]
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
	...

0800569c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e05a      	b.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2202      	movs	r2, #2
 80056c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a21      	ldr	r2, [pc, #132]	@ (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d022      	beq.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005700:	d01d      	beq.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1d      	ldr	r2, [pc, #116]	@ (800577c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d018      	beq.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1b      	ldr	r2, [pc, #108]	@ (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d013      	beq.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1a      	ldr	r2, [pc, #104]	@ (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00e      	beq.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a18      	ldr	r2, [pc, #96]	@ (8005788 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d009      	beq.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a17      	ldr	r2, [pc, #92]	@ (800578c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d004      	beq.n	800573e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a15      	ldr	r2, [pc, #84]	@ (8005790 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d10c      	bne.n	8005758 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005744:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	68ba      	ldr	r2, [r7, #8]
 800574c:	4313      	orrs	r3, r2
 800574e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40010000 	.word	0x40010000
 800577c:	40000400 	.word	0x40000400
 8005780:	40000800 	.word	0x40000800
 8005784:	40000c00 	.word	0x40000c00
 8005788:	40010400 	.word	0x40010400
 800578c:	40014000 	.word	0x40014000
 8005790:	40001800 	.word	0x40001800

08005794 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e03d      	b.n	800582c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	4313      	orrs	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3714      	adds	r7, #20
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e042      	b.n	80058f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fd fa3a 	bl	8002d00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2224      	movs	r2, #36	@ 0x24
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fcdb 	bl	8006260 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	4613      	mov	r3, r2
 800590c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b20      	cmp	r3, #32
 8005918:	d112      	bne.n	8005940 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_UART_Receive_IT+0x26>
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e00b      	b.n	8005942 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2200      	movs	r2, #0
 800592e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005930:	88fb      	ldrh	r3, [r7, #6]
 8005932:	461a      	mov	r2, r3
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 faba 	bl	8005eb0 <UART_Start_Receive_IT>
 800593c:	4603      	mov	r3, r0
 800593e:	e000      	b.n	8005942 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005940:	2302      	movs	r3, #2
  }
}
 8005942:	4618      	mov	r0, r3
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}
	...

0800594c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b0ba      	sub	sp, #232	@ 0xe8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005972:	2300      	movs	r3, #0
 8005974:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005978:	2300      	movs	r3, #0
 800597a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800598a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10f      	bne.n	80059b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d009      	beq.n	80059b2 <HAL_UART_IRQHandler+0x66>
 800599e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fb99 	bl	80060e2 <UART_Receive_IT>
      return;
 80059b0:	e25b      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 80de 	beq.w	8005b78 <HAL_UART_IRQHandler+0x22c>
 80059bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 80d1 	beq.w	8005b78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <HAL_UART_IRQHandler+0xae>
 80059e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f2:	f043 0201 	orr.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <HAL_UART_IRQHandler+0xd2>
 8005a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a16:	f043 0202 	orr.w	r2, r3, #2
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_UART_IRQHandler+0xf6>
 8005a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3a:	f043 0204 	orr.w	r2, r3, #4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d011      	beq.n	8005a72 <HAL_UART_IRQHandler+0x126>
 8005a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6a:	f043 0208 	orr.w	r2, r3, #8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 81f2 	beq.w	8005e60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <HAL_UART_IRQHandler+0x14e>
 8005a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a8c:	f003 0320 	and.w	r3, r3, #32
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fb24 	bl	80060e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa4:	2b40      	cmp	r3, #64	@ 0x40
 8005aa6:	bf0c      	ite	eq
 8005aa8:	2301      	moveq	r3, #1
 8005aaa:	2300      	movne	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d103      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x17a>
 8005abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d04f      	beq.n	8005b66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fa2c 	bl	8005f24 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad6:	2b40      	cmp	r3, #64	@ 0x40
 8005ad8:	d141      	bne.n	8005b5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3314      	adds	r3, #20
 8005ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005af4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3314      	adds	r3, #20
 8005b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1d9      	bne.n	8005ada <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d013      	beq.n	8005b56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b32:	4a7e      	ldr	r2, [pc, #504]	@ (8005d2c <HAL_UART_IRQHandler+0x3e0>)
 8005b34:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fd fcc9 	bl	80034d2 <HAL_DMA_Abort_IT>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d016      	beq.n	8005b74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b50:	4610      	mov	r0, r2
 8005b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	e00e      	b.n	8005b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f994 	bl	8005e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	e00a      	b.n	8005b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f990 	bl	8005e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b64:	e006      	b.n	8005b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f98c 	bl	8005e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005b72:	e175      	b.n	8005e60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b74:	bf00      	nop
    return;
 8005b76:	e173      	b.n	8005e60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 814f 	bne.w	8005e20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 8148 	beq.w	8005e20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8141 	beq.w	8005e20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60bb      	str	r3, [r7, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	60bb      	str	r3, [r7, #8]
 8005bb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbe:	2b40      	cmp	r3, #64	@ 0x40
 8005bc0:	f040 80b6 	bne.w	8005d30 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 8145 	beq.w	8005e64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005be2:	429a      	cmp	r2, r3
 8005be4:	f080 813e 	bcs.w	8005e64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bfa:	f000 8088 	beq.w	8005d0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	330c      	adds	r3, #12
 8005c04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	330c      	adds	r3, #12
 8005c26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1d9      	bne.n	8005bfe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3314      	adds	r3, #20
 8005c50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c5c:	f023 0301 	bic.w	r3, r3, #1
 8005c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3314      	adds	r3, #20
 8005c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e1      	bne.n	8005c4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3314      	adds	r3, #20
 8005c8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3314      	adds	r3, #20
 8005ca6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005caa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005cac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005cb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e3      	bne.n	8005c86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd6:	e853 3f00 	ldrex	r3, [r3]
 8005cda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cde:	f023 0310 	bic.w	r3, r3, #16
 8005ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005cf0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cf2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e3      	bne.n	8005ccc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fd fb72 	bl	80033f2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2202      	movs	r2, #2
 8005d12:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f8b7 	bl	8005e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d2a:	e09b      	b.n	8005e64 <HAL_UART_IRQHandler+0x518>
 8005d2c:	08005feb 	.word	0x08005feb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 808e 	beq.w	8005e68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 8089 	beq.w	8005e68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	330c      	adds	r3, #12
 8005d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	330c      	adds	r3, #12
 8005d76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005d7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e3      	bne.n	8005d56 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3314      	adds	r3, #20
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	f023 0301 	bic.w	r3, r3, #1
 8005da4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3314      	adds	r3, #20
 8005dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005db2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e3      	bne.n	8005d8e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	330c      	adds	r3, #12
 8005dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0310 	bic.w	r3, r3, #16
 8005dea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005df8:	61fa      	str	r2, [r7, #28]
 8005dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	69b9      	ldr	r1, [r7, #24]
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	617b      	str	r3, [r7, #20]
   return(result);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e3      	bne.n	8005dd4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f83d 	bl	8005e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e1e:	e023      	b.n	8005e68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d009      	beq.n	8005e40 <HAL_UART_IRQHandler+0x4f4>
 8005e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f8ea 	bl	8006012 <UART_Transmit_IT>
    return;
 8005e3e:	e014      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00e      	beq.n	8005e6a <HAL_UART_IRQHandler+0x51e>
 8005e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f92a 	bl	80060b2 <UART_EndTransmit_IT>
    return;
 8005e5e:	e004      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
    return;
 8005e60:	bf00      	nop
 8005e62:	e002      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8005e64:	bf00      	nop
 8005e66:	e000      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8005e68:	bf00      	nop
  }
}
 8005e6a:	37e8      	adds	r7, #232	@ 0xe8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	68ba      	ldr	r2, [r7, #8]
 8005ec2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	88fa      	ldrh	r2, [r7, #6]
 8005ec8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	88fa      	ldrh	r2, [r7, #6]
 8005ece:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2222      	movs	r2, #34	@ 0x22
 8005eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d007      	beq.n	8005ef6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ef4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695a      	ldr	r2, [r3, #20]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0201 	orr.w	r2, r2, #1
 8005f04:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0220 	orr.w	r2, r2, #32
 8005f14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3714      	adds	r7, #20
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b095      	sub	sp, #84	@ 0x54
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	330c      	adds	r3, #12
 8005f32:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f36:	e853 3f00 	ldrex	r3, [r3]
 8005f3a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f4c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e5      	bne.n	8005f2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3314      	adds	r3, #20
 8005f66:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	6a3b      	ldr	r3, [r7, #32]
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f023 0301 	bic.w	r3, r3, #1
 8005f76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3314      	adds	r3, #20
 8005f7e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f80:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e5      	bne.n	8005f60 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d119      	bne.n	8005fd0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	330c      	adds	r3, #12
 8005fa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	f023 0310 	bic.w	r3, r3, #16
 8005fb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fbc:	61ba      	str	r2, [r7, #24]
 8005fbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6979      	ldr	r1, [r7, #20]
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	613b      	str	r3, [r7, #16]
   return(result);
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e5      	bne.n	8005f9c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005fde:	bf00      	nop
 8005fe0:	3754      	adds	r7, #84	@ 0x54
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b084      	sub	sp, #16
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2200      	movs	r2, #0
 8006002:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7ff ff3d 	bl	8005e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800600a:	bf00      	nop
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}

08006012 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006012:	b480      	push	{r7}
 8006014:	b085      	sub	sp, #20
 8006016:	af00      	add	r7, sp, #0
 8006018:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b21      	cmp	r3, #33	@ 0x21
 8006024:	d13e      	bne.n	80060a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800602e:	d114      	bne.n	800605a <UART_Transmit_IT+0x48>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d110      	bne.n	800605a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6a1b      	ldr	r3, [r3, #32]
 800603c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	461a      	mov	r2, r3
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800604c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	1c9a      	adds	r2, r3, #2
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	621a      	str	r2, [r3, #32]
 8006058:	e008      	b.n	800606c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	1c59      	adds	r1, r3, #1
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6211      	str	r1, [r2, #32]
 8006064:	781a      	ldrb	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29b      	uxth	r3, r3
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	4619      	mov	r1, r3
 800607a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10f      	bne.n	80060a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800608e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800609e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	e000      	b.n	80060a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060a4:	2302      	movs	r3, #2
  }
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b082      	sub	sp, #8
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68da      	ldr	r2, [r3, #12]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80060c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f7ff fecc 	bl	8005e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3708      	adds	r7, #8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b08c      	sub	sp, #48	@ 0x30
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b22      	cmp	r3, #34	@ 0x22
 80060f4:	f040 80ae 	bne.w	8006254 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006100:	d117      	bne.n	8006132 <UART_Receive_IT+0x50>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d113      	bne.n	8006132 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006112:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	b29b      	uxth	r3, r3
 800611c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006120:	b29a      	uxth	r2, r3
 8006122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006124:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612a:	1c9a      	adds	r2, r3, #2
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006130:	e026      	b.n	8006180 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006136:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006138:	2300      	movs	r3, #0
 800613a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006144:	d007      	beq.n	8006156 <UART_Receive_IT+0x74>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d10a      	bne.n	8006164 <UART_Receive_IT+0x82>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	b2da      	uxtb	r2, r3
 800615e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	e008      	b.n	8006176 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	b2db      	uxtb	r3, r3
 800616c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006170:	b2da      	uxtb	r2, r3
 8006172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006174:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b01      	subs	r3, #1
 8006188:	b29b      	uxth	r3, r3
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	4619      	mov	r1, r3
 800618e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006190:	2b00      	cmp	r3, #0
 8006192:	d15d      	bne.n	8006250 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68da      	ldr	r2, [r3, #12]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0220 	bic.w	r2, r2, #32
 80061a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695a      	ldr	r2, [r3, #20]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 0201 	bic.w	r2, r2, #1
 80061c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2220      	movs	r2, #32
 80061c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d135      	bne.n	8006246 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	330c      	adds	r3, #12
 80061e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	e853 3f00 	ldrex	r3, [r3]
 80061ee:	613b      	str	r3, [r7, #16]
   return(result);
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f023 0310 	bic.w	r3, r3, #16
 80061f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	330c      	adds	r3, #12
 80061fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006200:	623a      	str	r2, [r7, #32]
 8006202:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	69f9      	ldr	r1, [r7, #28]
 8006206:	6a3a      	ldr	r2, [r7, #32]
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	61bb      	str	r3, [r7, #24]
   return(result);
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e5      	bne.n	80061e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0310 	and.w	r3, r3, #16
 800621e:	2b10      	cmp	r3, #16
 8006220:	d10a      	bne.n	8006238 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff fe2a 	bl	8005e98 <HAL_UARTEx_RxEventCallback>
 8006244:	e002      	b.n	800624c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7fa ff6e 	bl	8001128 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	e002      	b.n	8006256 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006250:	2300      	movs	r3, #0
 8006252:	e000      	b.n	8006256 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	3730      	adds	r7, #48	@ 0x30
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006260:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006264:	b0c0      	sub	sp, #256	@ 0x100
 8006266:	af00      	add	r7, sp, #0
 8006268:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800627c:	68d9      	ldr	r1, [r3, #12]
 800627e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	ea40 0301 	orr.w	r3, r0, r1
 8006288:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800628a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	431a      	orrs	r2, r3
 8006298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	431a      	orrs	r2, r3
 80062a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80062b8:	f021 010c 	bic.w	r1, r1, #12
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80062c6:	430b      	orrs	r3, r1
 80062c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80062d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062da:	6999      	ldr	r1, [r3, #24]
 80062dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	ea40 0301 	orr.w	r3, r0, r1
 80062e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	4b8f      	ldr	r3, [pc, #572]	@ (800652c <UART_SetConfig+0x2cc>)
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d005      	beq.n	8006300 <UART_SetConfig+0xa0>
 80062f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b8d      	ldr	r3, [pc, #564]	@ (8006530 <UART_SetConfig+0x2d0>)
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d104      	bne.n	800630a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006300:	f7fe f888 	bl	8004414 <HAL_RCC_GetPCLK2Freq>
 8006304:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006308:	e003      	b.n	8006312 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800630a:	f7fe f86f 	bl	80043ec <HAL_RCC_GetPCLK1Freq>
 800630e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006316:	69db      	ldr	r3, [r3, #28]
 8006318:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800631c:	f040 810c 	bne.w	8006538 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006320:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006324:	2200      	movs	r2, #0
 8006326:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800632a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800632e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006332:	4622      	mov	r2, r4
 8006334:	462b      	mov	r3, r5
 8006336:	1891      	adds	r1, r2, r2
 8006338:	65b9      	str	r1, [r7, #88]	@ 0x58
 800633a:	415b      	adcs	r3, r3
 800633c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800633e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006342:	4621      	mov	r1, r4
 8006344:	eb12 0801 	adds.w	r8, r2, r1
 8006348:	4629      	mov	r1, r5
 800634a:	eb43 0901 	adc.w	r9, r3, r1
 800634e:	f04f 0200 	mov.w	r2, #0
 8006352:	f04f 0300 	mov.w	r3, #0
 8006356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800635a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800635e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006362:	4690      	mov	r8, r2
 8006364:	4699      	mov	r9, r3
 8006366:	4623      	mov	r3, r4
 8006368:	eb18 0303 	adds.w	r3, r8, r3
 800636c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006370:	462b      	mov	r3, r5
 8006372:	eb49 0303 	adc.w	r3, r9, r3
 8006376:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800637a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006386:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800638a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800638e:	460b      	mov	r3, r1
 8006390:	18db      	adds	r3, r3, r3
 8006392:	653b      	str	r3, [r7, #80]	@ 0x50
 8006394:	4613      	mov	r3, r2
 8006396:	eb42 0303 	adc.w	r3, r2, r3
 800639a:	657b      	str	r3, [r7, #84]	@ 0x54
 800639c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80063a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80063a4:	f7fa fc50 	bl	8000c48 <__aeabi_uldivmod>
 80063a8:	4602      	mov	r2, r0
 80063aa:	460b      	mov	r3, r1
 80063ac:	4b61      	ldr	r3, [pc, #388]	@ (8006534 <UART_SetConfig+0x2d4>)
 80063ae:	fba3 2302 	umull	r2, r3, r3, r2
 80063b2:	095b      	lsrs	r3, r3, #5
 80063b4:	011c      	lsls	r4, r3, #4
 80063b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063ba:	2200      	movs	r2, #0
 80063bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80063c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80063c8:	4642      	mov	r2, r8
 80063ca:	464b      	mov	r3, r9
 80063cc:	1891      	adds	r1, r2, r2
 80063ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80063d0:	415b      	adcs	r3, r3
 80063d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80063d8:	4641      	mov	r1, r8
 80063da:	eb12 0a01 	adds.w	sl, r2, r1
 80063de:	4649      	mov	r1, r9
 80063e0:	eb43 0b01 	adc.w	fp, r3, r1
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	f04f 0300 	mov.w	r3, #0
 80063ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80063f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80063f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063f8:	4692      	mov	sl, r2
 80063fa:	469b      	mov	fp, r3
 80063fc:	4643      	mov	r3, r8
 80063fe:	eb1a 0303 	adds.w	r3, sl, r3
 8006402:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006406:	464b      	mov	r3, r9
 8006408:	eb4b 0303 	adc.w	r3, fp, r3
 800640c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800641c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006420:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006424:	460b      	mov	r3, r1
 8006426:	18db      	adds	r3, r3, r3
 8006428:	643b      	str	r3, [r7, #64]	@ 0x40
 800642a:	4613      	mov	r3, r2
 800642c:	eb42 0303 	adc.w	r3, r2, r3
 8006430:	647b      	str	r3, [r7, #68]	@ 0x44
 8006432:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006436:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800643a:	f7fa fc05 	bl	8000c48 <__aeabi_uldivmod>
 800643e:	4602      	mov	r2, r0
 8006440:	460b      	mov	r3, r1
 8006442:	4611      	mov	r1, r2
 8006444:	4b3b      	ldr	r3, [pc, #236]	@ (8006534 <UART_SetConfig+0x2d4>)
 8006446:	fba3 2301 	umull	r2, r3, r3, r1
 800644a:	095b      	lsrs	r3, r3, #5
 800644c:	2264      	movs	r2, #100	@ 0x64
 800644e:	fb02 f303 	mul.w	r3, r2, r3
 8006452:	1acb      	subs	r3, r1, r3
 8006454:	00db      	lsls	r3, r3, #3
 8006456:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800645a:	4b36      	ldr	r3, [pc, #216]	@ (8006534 <UART_SetConfig+0x2d4>)
 800645c:	fba3 2302 	umull	r2, r3, r3, r2
 8006460:	095b      	lsrs	r3, r3, #5
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006468:	441c      	add	r4, r3
 800646a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800646e:	2200      	movs	r2, #0
 8006470:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006474:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006478:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800647c:	4642      	mov	r2, r8
 800647e:	464b      	mov	r3, r9
 8006480:	1891      	adds	r1, r2, r2
 8006482:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006484:	415b      	adcs	r3, r3
 8006486:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006488:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800648c:	4641      	mov	r1, r8
 800648e:	1851      	adds	r1, r2, r1
 8006490:	6339      	str	r1, [r7, #48]	@ 0x30
 8006492:	4649      	mov	r1, r9
 8006494:	414b      	adcs	r3, r1
 8006496:	637b      	str	r3, [r7, #52]	@ 0x34
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80064a4:	4659      	mov	r1, fp
 80064a6:	00cb      	lsls	r3, r1, #3
 80064a8:	4651      	mov	r1, sl
 80064aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ae:	4651      	mov	r1, sl
 80064b0:	00ca      	lsls	r2, r1, #3
 80064b2:	4610      	mov	r0, r2
 80064b4:	4619      	mov	r1, r3
 80064b6:	4603      	mov	r3, r0
 80064b8:	4642      	mov	r2, r8
 80064ba:	189b      	adds	r3, r3, r2
 80064bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064c0:	464b      	mov	r3, r9
 80064c2:	460a      	mov	r2, r1
 80064c4:	eb42 0303 	adc.w	r3, r2, r3
 80064c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80064cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80064d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80064dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80064e0:	460b      	mov	r3, r1
 80064e2:	18db      	adds	r3, r3, r3
 80064e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064e6:	4613      	mov	r3, r2
 80064e8:	eb42 0303 	adc.w	r3, r2, r3
 80064ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80064f6:	f7fa fba7 	bl	8000c48 <__aeabi_uldivmod>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006534 <UART_SetConfig+0x2d4>)
 8006500:	fba3 1302 	umull	r1, r3, r3, r2
 8006504:	095b      	lsrs	r3, r3, #5
 8006506:	2164      	movs	r1, #100	@ 0x64
 8006508:	fb01 f303 	mul.w	r3, r1, r3
 800650c:	1ad3      	subs	r3, r2, r3
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	3332      	adds	r3, #50	@ 0x32
 8006512:	4a08      	ldr	r2, [pc, #32]	@ (8006534 <UART_SetConfig+0x2d4>)
 8006514:	fba2 2303 	umull	r2, r3, r2, r3
 8006518:	095b      	lsrs	r3, r3, #5
 800651a:	f003 0207 	and.w	r2, r3, #7
 800651e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4422      	add	r2, r4
 8006526:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006528:	e106      	b.n	8006738 <UART_SetConfig+0x4d8>
 800652a:	bf00      	nop
 800652c:	40011000 	.word	0x40011000
 8006530:	40011400 	.word	0x40011400
 8006534:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800653c:	2200      	movs	r2, #0
 800653e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006542:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006546:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800654a:	4642      	mov	r2, r8
 800654c:	464b      	mov	r3, r9
 800654e:	1891      	adds	r1, r2, r2
 8006550:	6239      	str	r1, [r7, #32]
 8006552:	415b      	adcs	r3, r3
 8006554:	627b      	str	r3, [r7, #36]	@ 0x24
 8006556:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800655a:	4641      	mov	r1, r8
 800655c:	1854      	adds	r4, r2, r1
 800655e:	4649      	mov	r1, r9
 8006560:	eb43 0501 	adc.w	r5, r3, r1
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	00eb      	lsls	r3, r5, #3
 800656e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006572:	00e2      	lsls	r2, r4, #3
 8006574:	4614      	mov	r4, r2
 8006576:	461d      	mov	r5, r3
 8006578:	4643      	mov	r3, r8
 800657a:	18e3      	adds	r3, r4, r3
 800657c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006580:	464b      	mov	r3, r9
 8006582:	eb45 0303 	adc.w	r3, r5, r3
 8006586:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800658a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006596:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800659a:	f04f 0200 	mov.w	r2, #0
 800659e:	f04f 0300 	mov.w	r3, #0
 80065a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80065a6:	4629      	mov	r1, r5
 80065a8:	008b      	lsls	r3, r1, #2
 80065aa:	4621      	mov	r1, r4
 80065ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065b0:	4621      	mov	r1, r4
 80065b2:	008a      	lsls	r2, r1, #2
 80065b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80065b8:	f7fa fb46 	bl	8000c48 <__aeabi_uldivmod>
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	4b60      	ldr	r3, [pc, #384]	@ (8006744 <UART_SetConfig+0x4e4>)
 80065c2:	fba3 2302 	umull	r2, r3, r3, r2
 80065c6:	095b      	lsrs	r3, r3, #5
 80065c8:	011c      	lsls	r4, r3, #4
 80065ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065ce:	2200      	movs	r2, #0
 80065d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80065d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80065d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80065dc:	4642      	mov	r2, r8
 80065de:	464b      	mov	r3, r9
 80065e0:	1891      	adds	r1, r2, r2
 80065e2:	61b9      	str	r1, [r7, #24]
 80065e4:	415b      	adcs	r3, r3
 80065e6:	61fb      	str	r3, [r7, #28]
 80065e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065ec:	4641      	mov	r1, r8
 80065ee:	1851      	adds	r1, r2, r1
 80065f0:	6139      	str	r1, [r7, #16]
 80065f2:	4649      	mov	r1, r9
 80065f4:	414b      	adcs	r3, r1
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	f04f 0200 	mov.w	r2, #0
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006604:	4659      	mov	r1, fp
 8006606:	00cb      	lsls	r3, r1, #3
 8006608:	4651      	mov	r1, sl
 800660a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800660e:	4651      	mov	r1, sl
 8006610:	00ca      	lsls	r2, r1, #3
 8006612:	4610      	mov	r0, r2
 8006614:	4619      	mov	r1, r3
 8006616:	4603      	mov	r3, r0
 8006618:	4642      	mov	r2, r8
 800661a:	189b      	adds	r3, r3, r2
 800661c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006620:	464b      	mov	r3, r9
 8006622:	460a      	mov	r2, r1
 8006624:	eb42 0303 	adc.w	r3, r2, r3
 8006628:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800662c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006636:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006638:	f04f 0200 	mov.w	r2, #0
 800663c:	f04f 0300 	mov.w	r3, #0
 8006640:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006644:	4649      	mov	r1, r9
 8006646:	008b      	lsls	r3, r1, #2
 8006648:	4641      	mov	r1, r8
 800664a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800664e:	4641      	mov	r1, r8
 8006650:	008a      	lsls	r2, r1, #2
 8006652:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006656:	f7fa faf7 	bl	8000c48 <__aeabi_uldivmod>
 800665a:	4602      	mov	r2, r0
 800665c:	460b      	mov	r3, r1
 800665e:	4611      	mov	r1, r2
 8006660:	4b38      	ldr	r3, [pc, #224]	@ (8006744 <UART_SetConfig+0x4e4>)
 8006662:	fba3 2301 	umull	r2, r3, r3, r1
 8006666:	095b      	lsrs	r3, r3, #5
 8006668:	2264      	movs	r2, #100	@ 0x64
 800666a:	fb02 f303 	mul.w	r3, r2, r3
 800666e:	1acb      	subs	r3, r1, r3
 8006670:	011b      	lsls	r3, r3, #4
 8006672:	3332      	adds	r3, #50	@ 0x32
 8006674:	4a33      	ldr	r2, [pc, #204]	@ (8006744 <UART_SetConfig+0x4e4>)
 8006676:	fba2 2303 	umull	r2, r3, r2, r3
 800667a:	095b      	lsrs	r3, r3, #5
 800667c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006680:	441c      	add	r4, r3
 8006682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006686:	2200      	movs	r2, #0
 8006688:	673b      	str	r3, [r7, #112]	@ 0x70
 800668a:	677a      	str	r2, [r7, #116]	@ 0x74
 800668c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006690:	4642      	mov	r2, r8
 8006692:	464b      	mov	r3, r9
 8006694:	1891      	adds	r1, r2, r2
 8006696:	60b9      	str	r1, [r7, #8]
 8006698:	415b      	adcs	r3, r3
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066a0:	4641      	mov	r1, r8
 80066a2:	1851      	adds	r1, r2, r1
 80066a4:	6039      	str	r1, [r7, #0]
 80066a6:	4649      	mov	r1, r9
 80066a8:	414b      	adcs	r3, r1
 80066aa:	607b      	str	r3, [r7, #4]
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066b8:	4659      	mov	r1, fp
 80066ba:	00cb      	lsls	r3, r1, #3
 80066bc:	4651      	mov	r1, sl
 80066be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066c2:	4651      	mov	r1, sl
 80066c4:	00ca      	lsls	r2, r1, #3
 80066c6:	4610      	mov	r0, r2
 80066c8:	4619      	mov	r1, r3
 80066ca:	4603      	mov	r3, r0
 80066cc:	4642      	mov	r2, r8
 80066ce:	189b      	adds	r3, r3, r2
 80066d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066d2:	464b      	mov	r3, r9
 80066d4:	460a      	mov	r2, r1
 80066d6:	eb42 0303 	adc.w	r3, r2, r3
 80066da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80066e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80066f4:	4649      	mov	r1, r9
 80066f6:	008b      	lsls	r3, r1, #2
 80066f8:	4641      	mov	r1, r8
 80066fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066fe:	4641      	mov	r1, r8
 8006700:	008a      	lsls	r2, r1, #2
 8006702:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006706:	f7fa fa9f 	bl	8000c48 <__aeabi_uldivmod>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4b0d      	ldr	r3, [pc, #52]	@ (8006744 <UART_SetConfig+0x4e4>)
 8006710:	fba3 1302 	umull	r1, r3, r3, r2
 8006714:	095b      	lsrs	r3, r3, #5
 8006716:	2164      	movs	r1, #100	@ 0x64
 8006718:	fb01 f303 	mul.w	r3, r1, r3
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	3332      	adds	r3, #50	@ 0x32
 8006722:	4a08      	ldr	r2, [pc, #32]	@ (8006744 <UART_SetConfig+0x4e4>)
 8006724:	fba2 2303 	umull	r2, r3, r2, r3
 8006728:	095b      	lsrs	r3, r3, #5
 800672a:	f003 020f 	and.w	r2, r3, #15
 800672e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4422      	add	r2, r4
 8006736:	609a      	str	r2, [r3, #8]
}
 8006738:	bf00      	nop
 800673a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800673e:	46bd      	mov	sp, r7
 8006740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006744:	51eb851f 	.word	0x51eb851f

08006748 <__cvt>:
 8006748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800674c:	ec57 6b10 	vmov	r6, r7, d0
 8006750:	2f00      	cmp	r7, #0
 8006752:	460c      	mov	r4, r1
 8006754:	4619      	mov	r1, r3
 8006756:	463b      	mov	r3, r7
 8006758:	bfbb      	ittet	lt
 800675a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800675e:	461f      	movlt	r7, r3
 8006760:	2300      	movge	r3, #0
 8006762:	232d      	movlt	r3, #45	@ 0x2d
 8006764:	700b      	strb	r3, [r1, #0]
 8006766:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006768:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800676c:	4691      	mov	r9, r2
 800676e:	f023 0820 	bic.w	r8, r3, #32
 8006772:	bfbc      	itt	lt
 8006774:	4632      	movlt	r2, r6
 8006776:	4616      	movlt	r6, r2
 8006778:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800677c:	d005      	beq.n	800678a <__cvt+0x42>
 800677e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006782:	d100      	bne.n	8006786 <__cvt+0x3e>
 8006784:	3401      	adds	r4, #1
 8006786:	2102      	movs	r1, #2
 8006788:	e000      	b.n	800678c <__cvt+0x44>
 800678a:	2103      	movs	r1, #3
 800678c:	ab03      	add	r3, sp, #12
 800678e:	9301      	str	r3, [sp, #4]
 8006790:	ab02      	add	r3, sp, #8
 8006792:	9300      	str	r3, [sp, #0]
 8006794:	ec47 6b10 	vmov	d0, r6, r7
 8006798:	4653      	mov	r3, sl
 800679a:	4622      	mov	r2, r4
 800679c:	f000 fe5c 	bl	8007458 <_dtoa_r>
 80067a0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80067a4:	4605      	mov	r5, r0
 80067a6:	d119      	bne.n	80067dc <__cvt+0x94>
 80067a8:	f019 0f01 	tst.w	r9, #1
 80067ac:	d00e      	beq.n	80067cc <__cvt+0x84>
 80067ae:	eb00 0904 	add.w	r9, r0, r4
 80067b2:	2200      	movs	r2, #0
 80067b4:	2300      	movs	r3, #0
 80067b6:	4630      	mov	r0, r6
 80067b8:	4639      	mov	r1, r7
 80067ba:	f7fa f985 	bl	8000ac8 <__aeabi_dcmpeq>
 80067be:	b108      	cbz	r0, 80067c4 <__cvt+0x7c>
 80067c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80067c4:	2230      	movs	r2, #48	@ 0x30
 80067c6:	9b03      	ldr	r3, [sp, #12]
 80067c8:	454b      	cmp	r3, r9
 80067ca:	d31e      	bcc.n	800680a <__cvt+0xc2>
 80067cc:	9b03      	ldr	r3, [sp, #12]
 80067ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067d0:	1b5b      	subs	r3, r3, r5
 80067d2:	4628      	mov	r0, r5
 80067d4:	6013      	str	r3, [r2, #0]
 80067d6:	b004      	add	sp, #16
 80067d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067e0:	eb00 0904 	add.w	r9, r0, r4
 80067e4:	d1e5      	bne.n	80067b2 <__cvt+0x6a>
 80067e6:	7803      	ldrb	r3, [r0, #0]
 80067e8:	2b30      	cmp	r3, #48	@ 0x30
 80067ea:	d10a      	bne.n	8006802 <__cvt+0xba>
 80067ec:	2200      	movs	r2, #0
 80067ee:	2300      	movs	r3, #0
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f7fa f968 	bl	8000ac8 <__aeabi_dcmpeq>
 80067f8:	b918      	cbnz	r0, 8006802 <__cvt+0xba>
 80067fa:	f1c4 0401 	rsb	r4, r4, #1
 80067fe:	f8ca 4000 	str.w	r4, [sl]
 8006802:	f8da 3000 	ldr.w	r3, [sl]
 8006806:	4499      	add	r9, r3
 8006808:	e7d3      	b.n	80067b2 <__cvt+0x6a>
 800680a:	1c59      	adds	r1, r3, #1
 800680c:	9103      	str	r1, [sp, #12]
 800680e:	701a      	strb	r2, [r3, #0]
 8006810:	e7d9      	b.n	80067c6 <__cvt+0x7e>

08006812 <__exponent>:
 8006812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006814:	2900      	cmp	r1, #0
 8006816:	bfba      	itte	lt
 8006818:	4249      	neglt	r1, r1
 800681a:	232d      	movlt	r3, #45	@ 0x2d
 800681c:	232b      	movge	r3, #43	@ 0x2b
 800681e:	2909      	cmp	r1, #9
 8006820:	7002      	strb	r2, [r0, #0]
 8006822:	7043      	strb	r3, [r0, #1]
 8006824:	dd29      	ble.n	800687a <__exponent+0x68>
 8006826:	f10d 0307 	add.w	r3, sp, #7
 800682a:	461d      	mov	r5, r3
 800682c:	270a      	movs	r7, #10
 800682e:	461a      	mov	r2, r3
 8006830:	fbb1 f6f7 	udiv	r6, r1, r7
 8006834:	fb07 1416 	mls	r4, r7, r6, r1
 8006838:	3430      	adds	r4, #48	@ 0x30
 800683a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800683e:	460c      	mov	r4, r1
 8006840:	2c63      	cmp	r4, #99	@ 0x63
 8006842:	f103 33ff 	add.w	r3, r3, #4294967295
 8006846:	4631      	mov	r1, r6
 8006848:	dcf1      	bgt.n	800682e <__exponent+0x1c>
 800684a:	3130      	adds	r1, #48	@ 0x30
 800684c:	1e94      	subs	r4, r2, #2
 800684e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006852:	1c41      	adds	r1, r0, #1
 8006854:	4623      	mov	r3, r4
 8006856:	42ab      	cmp	r3, r5
 8006858:	d30a      	bcc.n	8006870 <__exponent+0x5e>
 800685a:	f10d 0309 	add.w	r3, sp, #9
 800685e:	1a9b      	subs	r3, r3, r2
 8006860:	42ac      	cmp	r4, r5
 8006862:	bf88      	it	hi
 8006864:	2300      	movhi	r3, #0
 8006866:	3302      	adds	r3, #2
 8006868:	4403      	add	r3, r0
 800686a:	1a18      	subs	r0, r3, r0
 800686c:	b003      	add	sp, #12
 800686e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006870:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006874:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006878:	e7ed      	b.n	8006856 <__exponent+0x44>
 800687a:	2330      	movs	r3, #48	@ 0x30
 800687c:	3130      	adds	r1, #48	@ 0x30
 800687e:	7083      	strb	r3, [r0, #2]
 8006880:	70c1      	strb	r1, [r0, #3]
 8006882:	1d03      	adds	r3, r0, #4
 8006884:	e7f1      	b.n	800686a <__exponent+0x58>
	...

08006888 <_printf_float>:
 8006888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800688c:	b08d      	sub	sp, #52	@ 0x34
 800688e:	460c      	mov	r4, r1
 8006890:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006894:	4616      	mov	r6, r2
 8006896:	461f      	mov	r7, r3
 8006898:	4605      	mov	r5, r0
 800689a:	f000 fcdb 	bl	8007254 <_localeconv_r>
 800689e:	6803      	ldr	r3, [r0, #0]
 80068a0:	9304      	str	r3, [sp, #16]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f7f9 fce4 	bl	8000270 <strlen>
 80068a8:	2300      	movs	r3, #0
 80068aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80068ac:	f8d8 3000 	ldr.w	r3, [r8]
 80068b0:	9005      	str	r0, [sp, #20]
 80068b2:	3307      	adds	r3, #7
 80068b4:	f023 0307 	bic.w	r3, r3, #7
 80068b8:	f103 0208 	add.w	r2, r3, #8
 80068bc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80068c0:	f8d4 b000 	ldr.w	fp, [r4]
 80068c4:	f8c8 2000 	str.w	r2, [r8]
 80068c8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068cc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80068d0:	9307      	str	r3, [sp, #28]
 80068d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80068d6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80068da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068de:	4b9c      	ldr	r3, [pc, #624]	@ (8006b50 <_printf_float+0x2c8>)
 80068e0:	f04f 32ff 	mov.w	r2, #4294967295
 80068e4:	f7fa f922 	bl	8000b2c <__aeabi_dcmpun>
 80068e8:	bb70      	cbnz	r0, 8006948 <_printf_float+0xc0>
 80068ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068ee:	4b98      	ldr	r3, [pc, #608]	@ (8006b50 <_printf_float+0x2c8>)
 80068f0:	f04f 32ff 	mov.w	r2, #4294967295
 80068f4:	f7fa f8fc 	bl	8000af0 <__aeabi_dcmple>
 80068f8:	bb30      	cbnz	r0, 8006948 <_printf_float+0xc0>
 80068fa:	2200      	movs	r2, #0
 80068fc:	2300      	movs	r3, #0
 80068fe:	4640      	mov	r0, r8
 8006900:	4649      	mov	r1, r9
 8006902:	f7fa f8eb 	bl	8000adc <__aeabi_dcmplt>
 8006906:	b110      	cbz	r0, 800690e <_printf_float+0x86>
 8006908:	232d      	movs	r3, #45	@ 0x2d
 800690a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800690e:	4a91      	ldr	r2, [pc, #580]	@ (8006b54 <_printf_float+0x2cc>)
 8006910:	4b91      	ldr	r3, [pc, #580]	@ (8006b58 <_printf_float+0x2d0>)
 8006912:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006916:	bf94      	ite	ls
 8006918:	4690      	movls	r8, r2
 800691a:	4698      	movhi	r8, r3
 800691c:	2303      	movs	r3, #3
 800691e:	6123      	str	r3, [r4, #16]
 8006920:	f02b 0304 	bic.w	r3, fp, #4
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	f04f 0900 	mov.w	r9, #0
 800692a:	9700      	str	r7, [sp, #0]
 800692c:	4633      	mov	r3, r6
 800692e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006930:	4621      	mov	r1, r4
 8006932:	4628      	mov	r0, r5
 8006934:	f000 f9d2 	bl	8006cdc <_printf_common>
 8006938:	3001      	adds	r0, #1
 800693a:	f040 808d 	bne.w	8006a58 <_printf_float+0x1d0>
 800693e:	f04f 30ff 	mov.w	r0, #4294967295
 8006942:	b00d      	add	sp, #52	@ 0x34
 8006944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006948:	4642      	mov	r2, r8
 800694a:	464b      	mov	r3, r9
 800694c:	4640      	mov	r0, r8
 800694e:	4649      	mov	r1, r9
 8006950:	f7fa f8ec 	bl	8000b2c <__aeabi_dcmpun>
 8006954:	b140      	cbz	r0, 8006968 <_printf_float+0xe0>
 8006956:	464b      	mov	r3, r9
 8006958:	2b00      	cmp	r3, #0
 800695a:	bfbc      	itt	lt
 800695c:	232d      	movlt	r3, #45	@ 0x2d
 800695e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006962:	4a7e      	ldr	r2, [pc, #504]	@ (8006b5c <_printf_float+0x2d4>)
 8006964:	4b7e      	ldr	r3, [pc, #504]	@ (8006b60 <_printf_float+0x2d8>)
 8006966:	e7d4      	b.n	8006912 <_printf_float+0x8a>
 8006968:	6863      	ldr	r3, [r4, #4]
 800696a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800696e:	9206      	str	r2, [sp, #24]
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	d13b      	bne.n	80069ec <_printf_float+0x164>
 8006974:	2306      	movs	r3, #6
 8006976:	6063      	str	r3, [r4, #4]
 8006978:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800697c:	2300      	movs	r3, #0
 800697e:	6022      	str	r2, [r4, #0]
 8006980:	9303      	str	r3, [sp, #12]
 8006982:	ab0a      	add	r3, sp, #40	@ 0x28
 8006984:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006988:	ab09      	add	r3, sp, #36	@ 0x24
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	6861      	ldr	r1, [r4, #4]
 800698e:	ec49 8b10 	vmov	d0, r8, r9
 8006992:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006996:	4628      	mov	r0, r5
 8006998:	f7ff fed6 	bl	8006748 <__cvt>
 800699c:	9b06      	ldr	r3, [sp, #24]
 800699e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069a0:	2b47      	cmp	r3, #71	@ 0x47
 80069a2:	4680      	mov	r8, r0
 80069a4:	d129      	bne.n	80069fa <_printf_float+0x172>
 80069a6:	1cc8      	adds	r0, r1, #3
 80069a8:	db02      	blt.n	80069b0 <_printf_float+0x128>
 80069aa:	6863      	ldr	r3, [r4, #4]
 80069ac:	4299      	cmp	r1, r3
 80069ae:	dd41      	ble.n	8006a34 <_printf_float+0x1ac>
 80069b0:	f1aa 0a02 	sub.w	sl, sl, #2
 80069b4:	fa5f fa8a 	uxtb.w	sl, sl
 80069b8:	3901      	subs	r1, #1
 80069ba:	4652      	mov	r2, sl
 80069bc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80069c0:	9109      	str	r1, [sp, #36]	@ 0x24
 80069c2:	f7ff ff26 	bl	8006812 <__exponent>
 80069c6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069c8:	1813      	adds	r3, r2, r0
 80069ca:	2a01      	cmp	r2, #1
 80069cc:	4681      	mov	r9, r0
 80069ce:	6123      	str	r3, [r4, #16]
 80069d0:	dc02      	bgt.n	80069d8 <_printf_float+0x150>
 80069d2:	6822      	ldr	r2, [r4, #0]
 80069d4:	07d2      	lsls	r2, r2, #31
 80069d6:	d501      	bpl.n	80069dc <_printf_float+0x154>
 80069d8:	3301      	adds	r3, #1
 80069da:	6123      	str	r3, [r4, #16]
 80069dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0a2      	beq.n	800692a <_printf_float+0xa2>
 80069e4:	232d      	movs	r3, #45	@ 0x2d
 80069e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069ea:	e79e      	b.n	800692a <_printf_float+0xa2>
 80069ec:	9a06      	ldr	r2, [sp, #24]
 80069ee:	2a47      	cmp	r2, #71	@ 0x47
 80069f0:	d1c2      	bne.n	8006978 <_printf_float+0xf0>
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1c0      	bne.n	8006978 <_printf_float+0xf0>
 80069f6:	2301      	movs	r3, #1
 80069f8:	e7bd      	b.n	8006976 <_printf_float+0xee>
 80069fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069fe:	d9db      	bls.n	80069b8 <_printf_float+0x130>
 8006a00:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006a04:	d118      	bne.n	8006a38 <_printf_float+0x1b0>
 8006a06:	2900      	cmp	r1, #0
 8006a08:	6863      	ldr	r3, [r4, #4]
 8006a0a:	dd0b      	ble.n	8006a24 <_printf_float+0x19c>
 8006a0c:	6121      	str	r1, [r4, #16]
 8006a0e:	b913      	cbnz	r3, 8006a16 <_printf_float+0x18e>
 8006a10:	6822      	ldr	r2, [r4, #0]
 8006a12:	07d0      	lsls	r0, r2, #31
 8006a14:	d502      	bpl.n	8006a1c <_printf_float+0x194>
 8006a16:	3301      	adds	r3, #1
 8006a18:	440b      	add	r3, r1
 8006a1a:	6123      	str	r3, [r4, #16]
 8006a1c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a1e:	f04f 0900 	mov.w	r9, #0
 8006a22:	e7db      	b.n	80069dc <_printf_float+0x154>
 8006a24:	b913      	cbnz	r3, 8006a2c <_printf_float+0x1a4>
 8006a26:	6822      	ldr	r2, [r4, #0]
 8006a28:	07d2      	lsls	r2, r2, #31
 8006a2a:	d501      	bpl.n	8006a30 <_printf_float+0x1a8>
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	e7f4      	b.n	8006a1a <_printf_float+0x192>
 8006a30:	2301      	movs	r3, #1
 8006a32:	e7f2      	b.n	8006a1a <_printf_float+0x192>
 8006a34:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a3a:	4299      	cmp	r1, r3
 8006a3c:	db05      	blt.n	8006a4a <_printf_float+0x1c2>
 8006a3e:	6823      	ldr	r3, [r4, #0]
 8006a40:	6121      	str	r1, [r4, #16]
 8006a42:	07d8      	lsls	r0, r3, #31
 8006a44:	d5ea      	bpl.n	8006a1c <_printf_float+0x194>
 8006a46:	1c4b      	adds	r3, r1, #1
 8006a48:	e7e7      	b.n	8006a1a <_printf_float+0x192>
 8006a4a:	2900      	cmp	r1, #0
 8006a4c:	bfd4      	ite	le
 8006a4e:	f1c1 0202 	rsble	r2, r1, #2
 8006a52:	2201      	movgt	r2, #1
 8006a54:	4413      	add	r3, r2
 8006a56:	e7e0      	b.n	8006a1a <_printf_float+0x192>
 8006a58:	6823      	ldr	r3, [r4, #0]
 8006a5a:	055a      	lsls	r2, r3, #21
 8006a5c:	d407      	bmi.n	8006a6e <_printf_float+0x1e6>
 8006a5e:	6923      	ldr	r3, [r4, #16]
 8006a60:	4642      	mov	r2, r8
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	d12b      	bne.n	8006ac4 <_printf_float+0x23c>
 8006a6c:	e767      	b.n	800693e <_printf_float+0xb6>
 8006a6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a72:	f240 80dd 	bls.w	8006c30 <_printf_float+0x3a8>
 8006a76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	f7fa f823 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	d033      	beq.n	8006aee <_printf_float+0x266>
 8006a86:	4a37      	ldr	r2, [pc, #220]	@ (8006b64 <_printf_float+0x2dc>)
 8006a88:	2301      	movs	r3, #1
 8006a8a:	4631      	mov	r1, r6
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b8      	blx	r7
 8006a90:	3001      	adds	r0, #1
 8006a92:	f43f af54 	beq.w	800693e <_printf_float+0xb6>
 8006a96:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006a9a:	4543      	cmp	r3, r8
 8006a9c:	db02      	blt.n	8006aa4 <_printf_float+0x21c>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	07d8      	lsls	r0, r3, #31
 8006aa2:	d50f      	bpl.n	8006ac4 <_printf_float+0x23c>
 8006aa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006aa8:	4631      	mov	r1, r6
 8006aaa:	4628      	mov	r0, r5
 8006aac:	47b8      	blx	r7
 8006aae:	3001      	adds	r0, #1
 8006ab0:	f43f af45 	beq.w	800693e <_printf_float+0xb6>
 8006ab4:	f04f 0900 	mov.w	r9, #0
 8006ab8:	f108 38ff 	add.w	r8, r8, #4294967295
 8006abc:	f104 0a1a 	add.w	sl, r4, #26
 8006ac0:	45c8      	cmp	r8, r9
 8006ac2:	dc09      	bgt.n	8006ad8 <_printf_float+0x250>
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	079b      	lsls	r3, r3, #30
 8006ac8:	f100 8103 	bmi.w	8006cd2 <_printf_float+0x44a>
 8006acc:	68e0      	ldr	r0, [r4, #12]
 8006ace:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ad0:	4298      	cmp	r0, r3
 8006ad2:	bfb8      	it	lt
 8006ad4:	4618      	movlt	r0, r3
 8006ad6:	e734      	b.n	8006942 <_printf_float+0xba>
 8006ad8:	2301      	movs	r3, #1
 8006ada:	4652      	mov	r2, sl
 8006adc:	4631      	mov	r1, r6
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b8      	blx	r7
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	f43f af2b 	beq.w	800693e <_printf_float+0xb6>
 8006ae8:	f109 0901 	add.w	r9, r9, #1
 8006aec:	e7e8      	b.n	8006ac0 <_printf_float+0x238>
 8006aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	dc39      	bgt.n	8006b68 <_printf_float+0x2e0>
 8006af4:	4a1b      	ldr	r2, [pc, #108]	@ (8006b64 <_printf_float+0x2dc>)
 8006af6:	2301      	movs	r3, #1
 8006af8:	4631      	mov	r1, r6
 8006afa:	4628      	mov	r0, r5
 8006afc:	47b8      	blx	r7
 8006afe:	3001      	adds	r0, #1
 8006b00:	f43f af1d 	beq.w	800693e <_printf_float+0xb6>
 8006b04:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006b08:	ea59 0303 	orrs.w	r3, r9, r3
 8006b0c:	d102      	bne.n	8006b14 <_printf_float+0x28c>
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	07d9      	lsls	r1, r3, #31
 8006b12:	d5d7      	bpl.n	8006ac4 <_printf_float+0x23c>
 8006b14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b18:	4631      	mov	r1, r6
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	47b8      	blx	r7
 8006b1e:	3001      	adds	r0, #1
 8006b20:	f43f af0d 	beq.w	800693e <_printf_float+0xb6>
 8006b24:	f04f 0a00 	mov.w	sl, #0
 8006b28:	f104 0b1a 	add.w	fp, r4, #26
 8006b2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b2e:	425b      	negs	r3, r3
 8006b30:	4553      	cmp	r3, sl
 8006b32:	dc01      	bgt.n	8006b38 <_printf_float+0x2b0>
 8006b34:	464b      	mov	r3, r9
 8006b36:	e793      	b.n	8006a60 <_printf_float+0x1d8>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	465a      	mov	r2, fp
 8006b3c:	4631      	mov	r1, r6
 8006b3e:	4628      	mov	r0, r5
 8006b40:	47b8      	blx	r7
 8006b42:	3001      	adds	r0, #1
 8006b44:	f43f aefb 	beq.w	800693e <_printf_float+0xb6>
 8006b48:	f10a 0a01 	add.w	sl, sl, #1
 8006b4c:	e7ee      	b.n	8006b2c <_printf_float+0x2a4>
 8006b4e:	bf00      	nop
 8006b50:	7fefffff 	.word	0x7fefffff
 8006b54:	08009ec8 	.word	0x08009ec8
 8006b58:	08009ecc 	.word	0x08009ecc
 8006b5c:	08009ed0 	.word	0x08009ed0
 8006b60:	08009ed4 	.word	0x08009ed4
 8006b64:	08009ed8 	.word	0x08009ed8
 8006b68:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b6a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b6e:	4553      	cmp	r3, sl
 8006b70:	bfa8      	it	ge
 8006b72:	4653      	movge	r3, sl
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	4699      	mov	r9, r3
 8006b78:	dc36      	bgt.n	8006be8 <_printf_float+0x360>
 8006b7a:	f04f 0b00 	mov.w	fp, #0
 8006b7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b82:	f104 021a 	add.w	r2, r4, #26
 8006b86:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b88:	9306      	str	r3, [sp, #24]
 8006b8a:	eba3 0309 	sub.w	r3, r3, r9
 8006b8e:	455b      	cmp	r3, fp
 8006b90:	dc31      	bgt.n	8006bf6 <_printf_float+0x36e>
 8006b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b94:	459a      	cmp	sl, r3
 8006b96:	dc3a      	bgt.n	8006c0e <_printf_float+0x386>
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	07da      	lsls	r2, r3, #31
 8006b9c:	d437      	bmi.n	8006c0e <_printf_float+0x386>
 8006b9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba0:	ebaa 0903 	sub.w	r9, sl, r3
 8006ba4:	9b06      	ldr	r3, [sp, #24]
 8006ba6:	ebaa 0303 	sub.w	r3, sl, r3
 8006baa:	4599      	cmp	r9, r3
 8006bac:	bfa8      	it	ge
 8006bae:	4699      	movge	r9, r3
 8006bb0:	f1b9 0f00 	cmp.w	r9, #0
 8006bb4:	dc33      	bgt.n	8006c1e <_printf_float+0x396>
 8006bb6:	f04f 0800 	mov.w	r8, #0
 8006bba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006bbe:	f104 0b1a 	add.w	fp, r4, #26
 8006bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bc4:	ebaa 0303 	sub.w	r3, sl, r3
 8006bc8:	eba3 0309 	sub.w	r3, r3, r9
 8006bcc:	4543      	cmp	r3, r8
 8006bce:	f77f af79 	ble.w	8006ac4 <_printf_float+0x23c>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	465a      	mov	r2, fp
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4628      	mov	r0, r5
 8006bda:	47b8      	blx	r7
 8006bdc:	3001      	adds	r0, #1
 8006bde:	f43f aeae 	beq.w	800693e <_printf_float+0xb6>
 8006be2:	f108 0801 	add.w	r8, r8, #1
 8006be6:	e7ec      	b.n	8006bc2 <_printf_float+0x33a>
 8006be8:	4642      	mov	r2, r8
 8006bea:	4631      	mov	r1, r6
 8006bec:	4628      	mov	r0, r5
 8006bee:	47b8      	blx	r7
 8006bf0:	3001      	adds	r0, #1
 8006bf2:	d1c2      	bne.n	8006b7a <_printf_float+0x2f2>
 8006bf4:	e6a3      	b.n	800693e <_printf_float+0xb6>
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	4631      	mov	r1, r6
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	9206      	str	r2, [sp, #24]
 8006bfe:	47b8      	blx	r7
 8006c00:	3001      	adds	r0, #1
 8006c02:	f43f ae9c 	beq.w	800693e <_printf_float+0xb6>
 8006c06:	9a06      	ldr	r2, [sp, #24]
 8006c08:	f10b 0b01 	add.w	fp, fp, #1
 8006c0c:	e7bb      	b.n	8006b86 <_printf_float+0x2fe>
 8006c0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c12:	4631      	mov	r1, r6
 8006c14:	4628      	mov	r0, r5
 8006c16:	47b8      	blx	r7
 8006c18:	3001      	adds	r0, #1
 8006c1a:	d1c0      	bne.n	8006b9e <_printf_float+0x316>
 8006c1c:	e68f      	b.n	800693e <_printf_float+0xb6>
 8006c1e:	9a06      	ldr	r2, [sp, #24]
 8006c20:	464b      	mov	r3, r9
 8006c22:	4442      	add	r2, r8
 8006c24:	4631      	mov	r1, r6
 8006c26:	4628      	mov	r0, r5
 8006c28:	47b8      	blx	r7
 8006c2a:	3001      	adds	r0, #1
 8006c2c:	d1c3      	bne.n	8006bb6 <_printf_float+0x32e>
 8006c2e:	e686      	b.n	800693e <_printf_float+0xb6>
 8006c30:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c34:	f1ba 0f01 	cmp.w	sl, #1
 8006c38:	dc01      	bgt.n	8006c3e <_printf_float+0x3b6>
 8006c3a:	07db      	lsls	r3, r3, #31
 8006c3c:	d536      	bpl.n	8006cac <_printf_float+0x424>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4642      	mov	r2, r8
 8006c42:	4631      	mov	r1, r6
 8006c44:	4628      	mov	r0, r5
 8006c46:	47b8      	blx	r7
 8006c48:	3001      	adds	r0, #1
 8006c4a:	f43f ae78 	beq.w	800693e <_printf_float+0xb6>
 8006c4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c52:	4631      	mov	r1, r6
 8006c54:	4628      	mov	r0, r5
 8006c56:	47b8      	blx	r7
 8006c58:	3001      	adds	r0, #1
 8006c5a:	f43f ae70 	beq.w	800693e <_printf_float+0xb6>
 8006c5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c62:	2200      	movs	r2, #0
 8006c64:	2300      	movs	r3, #0
 8006c66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c6a:	f7f9 ff2d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c6e:	b9c0      	cbnz	r0, 8006ca2 <_printf_float+0x41a>
 8006c70:	4653      	mov	r3, sl
 8006c72:	f108 0201 	add.w	r2, r8, #1
 8006c76:	4631      	mov	r1, r6
 8006c78:	4628      	mov	r0, r5
 8006c7a:	47b8      	blx	r7
 8006c7c:	3001      	adds	r0, #1
 8006c7e:	d10c      	bne.n	8006c9a <_printf_float+0x412>
 8006c80:	e65d      	b.n	800693e <_printf_float+0xb6>
 8006c82:	2301      	movs	r3, #1
 8006c84:	465a      	mov	r2, fp
 8006c86:	4631      	mov	r1, r6
 8006c88:	4628      	mov	r0, r5
 8006c8a:	47b8      	blx	r7
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	f43f ae56 	beq.w	800693e <_printf_float+0xb6>
 8006c92:	f108 0801 	add.w	r8, r8, #1
 8006c96:	45d0      	cmp	r8, sl
 8006c98:	dbf3      	blt.n	8006c82 <_printf_float+0x3fa>
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ca0:	e6df      	b.n	8006a62 <_printf_float+0x1da>
 8006ca2:	f04f 0800 	mov.w	r8, #0
 8006ca6:	f104 0b1a 	add.w	fp, r4, #26
 8006caa:	e7f4      	b.n	8006c96 <_printf_float+0x40e>
 8006cac:	2301      	movs	r3, #1
 8006cae:	4642      	mov	r2, r8
 8006cb0:	e7e1      	b.n	8006c76 <_printf_float+0x3ee>
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	464a      	mov	r2, r9
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b8      	blx	r7
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	f43f ae3e 	beq.w	800693e <_printf_float+0xb6>
 8006cc2:	f108 0801 	add.w	r8, r8, #1
 8006cc6:	68e3      	ldr	r3, [r4, #12]
 8006cc8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cca:	1a5b      	subs	r3, r3, r1
 8006ccc:	4543      	cmp	r3, r8
 8006cce:	dcf0      	bgt.n	8006cb2 <_printf_float+0x42a>
 8006cd0:	e6fc      	b.n	8006acc <_printf_float+0x244>
 8006cd2:	f04f 0800 	mov.w	r8, #0
 8006cd6:	f104 0919 	add.w	r9, r4, #25
 8006cda:	e7f4      	b.n	8006cc6 <_printf_float+0x43e>

08006cdc <_printf_common>:
 8006cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce0:	4616      	mov	r6, r2
 8006ce2:	4698      	mov	r8, r3
 8006ce4:	688a      	ldr	r2, [r1, #8]
 8006ce6:	690b      	ldr	r3, [r1, #16]
 8006ce8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cec:	4293      	cmp	r3, r2
 8006cee:	bfb8      	it	lt
 8006cf0:	4613      	movlt	r3, r2
 8006cf2:	6033      	str	r3, [r6, #0]
 8006cf4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cf8:	4607      	mov	r7, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	b10a      	cbz	r2, 8006d02 <_printf_common+0x26>
 8006cfe:	3301      	adds	r3, #1
 8006d00:	6033      	str	r3, [r6, #0]
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	0699      	lsls	r1, r3, #26
 8006d06:	bf42      	ittt	mi
 8006d08:	6833      	ldrmi	r3, [r6, #0]
 8006d0a:	3302      	addmi	r3, #2
 8006d0c:	6033      	strmi	r3, [r6, #0]
 8006d0e:	6825      	ldr	r5, [r4, #0]
 8006d10:	f015 0506 	ands.w	r5, r5, #6
 8006d14:	d106      	bne.n	8006d24 <_printf_common+0x48>
 8006d16:	f104 0a19 	add.w	sl, r4, #25
 8006d1a:	68e3      	ldr	r3, [r4, #12]
 8006d1c:	6832      	ldr	r2, [r6, #0]
 8006d1e:	1a9b      	subs	r3, r3, r2
 8006d20:	42ab      	cmp	r3, r5
 8006d22:	dc26      	bgt.n	8006d72 <_printf_common+0x96>
 8006d24:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d28:	6822      	ldr	r2, [r4, #0]
 8006d2a:	3b00      	subs	r3, #0
 8006d2c:	bf18      	it	ne
 8006d2e:	2301      	movne	r3, #1
 8006d30:	0692      	lsls	r2, r2, #26
 8006d32:	d42b      	bmi.n	8006d8c <_printf_common+0xb0>
 8006d34:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d38:	4641      	mov	r1, r8
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	47c8      	blx	r9
 8006d3e:	3001      	adds	r0, #1
 8006d40:	d01e      	beq.n	8006d80 <_printf_common+0xa4>
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	6922      	ldr	r2, [r4, #16]
 8006d46:	f003 0306 	and.w	r3, r3, #6
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	bf02      	ittt	eq
 8006d4e:	68e5      	ldreq	r5, [r4, #12]
 8006d50:	6833      	ldreq	r3, [r6, #0]
 8006d52:	1aed      	subeq	r5, r5, r3
 8006d54:	68a3      	ldr	r3, [r4, #8]
 8006d56:	bf0c      	ite	eq
 8006d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d5c:	2500      	movne	r5, #0
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	bfc4      	itt	gt
 8006d62:	1a9b      	subgt	r3, r3, r2
 8006d64:	18ed      	addgt	r5, r5, r3
 8006d66:	2600      	movs	r6, #0
 8006d68:	341a      	adds	r4, #26
 8006d6a:	42b5      	cmp	r5, r6
 8006d6c:	d11a      	bne.n	8006da4 <_printf_common+0xc8>
 8006d6e:	2000      	movs	r0, #0
 8006d70:	e008      	b.n	8006d84 <_printf_common+0xa8>
 8006d72:	2301      	movs	r3, #1
 8006d74:	4652      	mov	r2, sl
 8006d76:	4641      	mov	r1, r8
 8006d78:	4638      	mov	r0, r7
 8006d7a:	47c8      	blx	r9
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	d103      	bne.n	8006d88 <_printf_common+0xac>
 8006d80:	f04f 30ff 	mov.w	r0, #4294967295
 8006d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d88:	3501      	adds	r5, #1
 8006d8a:	e7c6      	b.n	8006d1a <_printf_common+0x3e>
 8006d8c:	18e1      	adds	r1, r4, r3
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	2030      	movs	r0, #48	@ 0x30
 8006d92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d96:	4422      	add	r2, r4
 8006d98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d9c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006da0:	3302      	adds	r3, #2
 8006da2:	e7c7      	b.n	8006d34 <_printf_common+0x58>
 8006da4:	2301      	movs	r3, #1
 8006da6:	4622      	mov	r2, r4
 8006da8:	4641      	mov	r1, r8
 8006daa:	4638      	mov	r0, r7
 8006dac:	47c8      	blx	r9
 8006dae:	3001      	adds	r0, #1
 8006db0:	d0e6      	beq.n	8006d80 <_printf_common+0xa4>
 8006db2:	3601      	adds	r6, #1
 8006db4:	e7d9      	b.n	8006d6a <_printf_common+0x8e>
	...

08006db8 <_printf_i>:
 8006db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dbc:	7e0f      	ldrb	r7, [r1, #24]
 8006dbe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006dc0:	2f78      	cmp	r7, #120	@ 0x78
 8006dc2:	4691      	mov	r9, r2
 8006dc4:	4680      	mov	r8, r0
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	469a      	mov	sl, r3
 8006dca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006dce:	d807      	bhi.n	8006de0 <_printf_i+0x28>
 8006dd0:	2f62      	cmp	r7, #98	@ 0x62
 8006dd2:	d80a      	bhi.n	8006dea <_printf_i+0x32>
 8006dd4:	2f00      	cmp	r7, #0
 8006dd6:	f000 80d2 	beq.w	8006f7e <_printf_i+0x1c6>
 8006dda:	2f58      	cmp	r7, #88	@ 0x58
 8006ddc:	f000 80b9 	beq.w	8006f52 <_printf_i+0x19a>
 8006de0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006de4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006de8:	e03a      	b.n	8006e60 <_printf_i+0xa8>
 8006dea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dee:	2b15      	cmp	r3, #21
 8006df0:	d8f6      	bhi.n	8006de0 <_printf_i+0x28>
 8006df2:	a101      	add	r1, pc, #4	@ (adr r1, 8006df8 <_printf_i+0x40>)
 8006df4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006df8:	08006e51 	.word	0x08006e51
 8006dfc:	08006e65 	.word	0x08006e65
 8006e00:	08006de1 	.word	0x08006de1
 8006e04:	08006de1 	.word	0x08006de1
 8006e08:	08006de1 	.word	0x08006de1
 8006e0c:	08006de1 	.word	0x08006de1
 8006e10:	08006e65 	.word	0x08006e65
 8006e14:	08006de1 	.word	0x08006de1
 8006e18:	08006de1 	.word	0x08006de1
 8006e1c:	08006de1 	.word	0x08006de1
 8006e20:	08006de1 	.word	0x08006de1
 8006e24:	08006f65 	.word	0x08006f65
 8006e28:	08006e8f 	.word	0x08006e8f
 8006e2c:	08006f1f 	.word	0x08006f1f
 8006e30:	08006de1 	.word	0x08006de1
 8006e34:	08006de1 	.word	0x08006de1
 8006e38:	08006f87 	.word	0x08006f87
 8006e3c:	08006de1 	.word	0x08006de1
 8006e40:	08006e8f 	.word	0x08006e8f
 8006e44:	08006de1 	.word	0x08006de1
 8006e48:	08006de1 	.word	0x08006de1
 8006e4c:	08006f27 	.word	0x08006f27
 8006e50:	6833      	ldr	r3, [r6, #0]
 8006e52:	1d1a      	adds	r2, r3, #4
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	6032      	str	r2, [r6, #0]
 8006e58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e60:	2301      	movs	r3, #1
 8006e62:	e09d      	b.n	8006fa0 <_printf_i+0x1e8>
 8006e64:	6833      	ldr	r3, [r6, #0]
 8006e66:	6820      	ldr	r0, [r4, #0]
 8006e68:	1d19      	adds	r1, r3, #4
 8006e6a:	6031      	str	r1, [r6, #0]
 8006e6c:	0606      	lsls	r6, r0, #24
 8006e6e:	d501      	bpl.n	8006e74 <_printf_i+0xbc>
 8006e70:	681d      	ldr	r5, [r3, #0]
 8006e72:	e003      	b.n	8006e7c <_printf_i+0xc4>
 8006e74:	0645      	lsls	r5, r0, #25
 8006e76:	d5fb      	bpl.n	8006e70 <_printf_i+0xb8>
 8006e78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e7c:	2d00      	cmp	r5, #0
 8006e7e:	da03      	bge.n	8006e88 <_printf_i+0xd0>
 8006e80:	232d      	movs	r3, #45	@ 0x2d
 8006e82:	426d      	negs	r5, r5
 8006e84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e88:	4859      	ldr	r0, [pc, #356]	@ (8006ff0 <_printf_i+0x238>)
 8006e8a:	230a      	movs	r3, #10
 8006e8c:	e011      	b.n	8006eb2 <_printf_i+0xfa>
 8006e8e:	6821      	ldr	r1, [r4, #0]
 8006e90:	6833      	ldr	r3, [r6, #0]
 8006e92:	0608      	lsls	r0, r1, #24
 8006e94:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e98:	d402      	bmi.n	8006ea0 <_printf_i+0xe8>
 8006e9a:	0649      	lsls	r1, r1, #25
 8006e9c:	bf48      	it	mi
 8006e9e:	b2ad      	uxthmi	r5, r5
 8006ea0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006ea2:	4853      	ldr	r0, [pc, #332]	@ (8006ff0 <_printf_i+0x238>)
 8006ea4:	6033      	str	r3, [r6, #0]
 8006ea6:	bf14      	ite	ne
 8006ea8:	230a      	movne	r3, #10
 8006eaa:	2308      	moveq	r3, #8
 8006eac:	2100      	movs	r1, #0
 8006eae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006eb2:	6866      	ldr	r6, [r4, #4]
 8006eb4:	60a6      	str	r6, [r4, #8]
 8006eb6:	2e00      	cmp	r6, #0
 8006eb8:	bfa2      	ittt	ge
 8006eba:	6821      	ldrge	r1, [r4, #0]
 8006ebc:	f021 0104 	bicge.w	r1, r1, #4
 8006ec0:	6021      	strge	r1, [r4, #0]
 8006ec2:	b90d      	cbnz	r5, 8006ec8 <_printf_i+0x110>
 8006ec4:	2e00      	cmp	r6, #0
 8006ec6:	d04b      	beq.n	8006f60 <_printf_i+0x1a8>
 8006ec8:	4616      	mov	r6, r2
 8006eca:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ece:	fb03 5711 	mls	r7, r3, r1, r5
 8006ed2:	5dc7      	ldrb	r7, [r0, r7]
 8006ed4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ed8:	462f      	mov	r7, r5
 8006eda:	42bb      	cmp	r3, r7
 8006edc:	460d      	mov	r5, r1
 8006ede:	d9f4      	bls.n	8006eca <_printf_i+0x112>
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d10b      	bne.n	8006efc <_printf_i+0x144>
 8006ee4:	6823      	ldr	r3, [r4, #0]
 8006ee6:	07df      	lsls	r7, r3, #31
 8006ee8:	d508      	bpl.n	8006efc <_printf_i+0x144>
 8006eea:	6923      	ldr	r3, [r4, #16]
 8006eec:	6861      	ldr	r1, [r4, #4]
 8006eee:	4299      	cmp	r1, r3
 8006ef0:	bfde      	ittt	le
 8006ef2:	2330      	movle	r3, #48	@ 0x30
 8006ef4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ef8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006efc:	1b92      	subs	r2, r2, r6
 8006efe:	6122      	str	r2, [r4, #16]
 8006f00:	f8cd a000 	str.w	sl, [sp]
 8006f04:	464b      	mov	r3, r9
 8006f06:	aa03      	add	r2, sp, #12
 8006f08:	4621      	mov	r1, r4
 8006f0a:	4640      	mov	r0, r8
 8006f0c:	f7ff fee6 	bl	8006cdc <_printf_common>
 8006f10:	3001      	adds	r0, #1
 8006f12:	d14a      	bne.n	8006faa <_printf_i+0x1f2>
 8006f14:	f04f 30ff 	mov.w	r0, #4294967295
 8006f18:	b004      	add	sp, #16
 8006f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	f043 0320 	orr.w	r3, r3, #32
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	4833      	ldr	r0, [pc, #204]	@ (8006ff4 <_printf_i+0x23c>)
 8006f28:	2778      	movs	r7, #120	@ 0x78
 8006f2a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	6831      	ldr	r1, [r6, #0]
 8006f32:	061f      	lsls	r7, r3, #24
 8006f34:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f38:	d402      	bmi.n	8006f40 <_printf_i+0x188>
 8006f3a:	065f      	lsls	r7, r3, #25
 8006f3c:	bf48      	it	mi
 8006f3e:	b2ad      	uxthmi	r5, r5
 8006f40:	6031      	str	r1, [r6, #0]
 8006f42:	07d9      	lsls	r1, r3, #31
 8006f44:	bf44      	itt	mi
 8006f46:	f043 0320 	orrmi.w	r3, r3, #32
 8006f4a:	6023      	strmi	r3, [r4, #0]
 8006f4c:	b11d      	cbz	r5, 8006f56 <_printf_i+0x19e>
 8006f4e:	2310      	movs	r3, #16
 8006f50:	e7ac      	b.n	8006eac <_printf_i+0xf4>
 8006f52:	4827      	ldr	r0, [pc, #156]	@ (8006ff0 <_printf_i+0x238>)
 8006f54:	e7e9      	b.n	8006f2a <_printf_i+0x172>
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	f023 0320 	bic.w	r3, r3, #32
 8006f5c:	6023      	str	r3, [r4, #0]
 8006f5e:	e7f6      	b.n	8006f4e <_printf_i+0x196>
 8006f60:	4616      	mov	r6, r2
 8006f62:	e7bd      	b.n	8006ee0 <_printf_i+0x128>
 8006f64:	6833      	ldr	r3, [r6, #0]
 8006f66:	6825      	ldr	r5, [r4, #0]
 8006f68:	6961      	ldr	r1, [r4, #20]
 8006f6a:	1d18      	adds	r0, r3, #4
 8006f6c:	6030      	str	r0, [r6, #0]
 8006f6e:	062e      	lsls	r6, r5, #24
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	d501      	bpl.n	8006f78 <_printf_i+0x1c0>
 8006f74:	6019      	str	r1, [r3, #0]
 8006f76:	e002      	b.n	8006f7e <_printf_i+0x1c6>
 8006f78:	0668      	lsls	r0, r5, #25
 8006f7a:	d5fb      	bpl.n	8006f74 <_printf_i+0x1bc>
 8006f7c:	8019      	strh	r1, [r3, #0]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	6123      	str	r3, [r4, #16]
 8006f82:	4616      	mov	r6, r2
 8006f84:	e7bc      	b.n	8006f00 <_printf_i+0x148>
 8006f86:	6833      	ldr	r3, [r6, #0]
 8006f88:	1d1a      	adds	r2, r3, #4
 8006f8a:	6032      	str	r2, [r6, #0]
 8006f8c:	681e      	ldr	r6, [r3, #0]
 8006f8e:	6862      	ldr	r2, [r4, #4]
 8006f90:	2100      	movs	r1, #0
 8006f92:	4630      	mov	r0, r6
 8006f94:	f7f9 f91c 	bl	80001d0 <memchr>
 8006f98:	b108      	cbz	r0, 8006f9e <_printf_i+0x1e6>
 8006f9a:	1b80      	subs	r0, r0, r6
 8006f9c:	6060      	str	r0, [r4, #4]
 8006f9e:	6863      	ldr	r3, [r4, #4]
 8006fa0:	6123      	str	r3, [r4, #16]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fa8:	e7aa      	b.n	8006f00 <_printf_i+0x148>
 8006faa:	6923      	ldr	r3, [r4, #16]
 8006fac:	4632      	mov	r2, r6
 8006fae:	4649      	mov	r1, r9
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	47d0      	blx	sl
 8006fb4:	3001      	adds	r0, #1
 8006fb6:	d0ad      	beq.n	8006f14 <_printf_i+0x15c>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	079b      	lsls	r3, r3, #30
 8006fbc:	d413      	bmi.n	8006fe6 <_printf_i+0x22e>
 8006fbe:	68e0      	ldr	r0, [r4, #12]
 8006fc0:	9b03      	ldr	r3, [sp, #12]
 8006fc2:	4298      	cmp	r0, r3
 8006fc4:	bfb8      	it	lt
 8006fc6:	4618      	movlt	r0, r3
 8006fc8:	e7a6      	b.n	8006f18 <_printf_i+0x160>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	4632      	mov	r2, r6
 8006fce:	4649      	mov	r1, r9
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	47d0      	blx	sl
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d09d      	beq.n	8006f14 <_printf_i+0x15c>
 8006fd8:	3501      	adds	r5, #1
 8006fda:	68e3      	ldr	r3, [r4, #12]
 8006fdc:	9903      	ldr	r1, [sp, #12]
 8006fde:	1a5b      	subs	r3, r3, r1
 8006fe0:	42ab      	cmp	r3, r5
 8006fe2:	dcf2      	bgt.n	8006fca <_printf_i+0x212>
 8006fe4:	e7eb      	b.n	8006fbe <_printf_i+0x206>
 8006fe6:	2500      	movs	r5, #0
 8006fe8:	f104 0619 	add.w	r6, r4, #25
 8006fec:	e7f5      	b.n	8006fda <_printf_i+0x222>
 8006fee:	bf00      	nop
 8006ff0:	08009eda 	.word	0x08009eda
 8006ff4:	08009eeb 	.word	0x08009eeb

08006ff8 <std>:
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	b510      	push	{r4, lr}
 8006ffc:	4604      	mov	r4, r0
 8006ffe:	e9c0 3300 	strd	r3, r3, [r0]
 8007002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007006:	6083      	str	r3, [r0, #8]
 8007008:	8181      	strh	r1, [r0, #12]
 800700a:	6643      	str	r3, [r0, #100]	@ 0x64
 800700c:	81c2      	strh	r2, [r0, #14]
 800700e:	6183      	str	r3, [r0, #24]
 8007010:	4619      	mov	r1, r3
 8007012:	2208      	movs	r2, #8
 8007014:	305c      	adds	r0, #92	@ 0x5c
 8007016:	f000 f914 	bl	8007242 <memset>
 800701a:	4b0d      	ldr	r3, [pc, #52]	@ (8007050 <std+0x58>)
 800701c:	6263      	str	r3, [r4, #36]	@ 0x24
 800701e:	4b0d      	ldr	r3, [pc, #52]	@ (8007054 <std+0x5c>)
 8007020:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007022:	4b0d      	ldr	r3, [pc, #52]	@ (8007058 <std+0x60>)
 8007024:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007026:	4b0d      	ldr	r3, [pc, #52]	@ (800705c <std+0x64>)
 8007028:	6323      	str	r3, [r4, #48]	@ 0x30
 800702a:	4b0d      	ldr	r3, [pc, #52]	@ (8007060 <std+0x68>)
 800702c:	6224      	str	r4, [r4, #32]
 800702e:	429c      	cmp	r4, r3
 8007030:	d006      	beq.n	8007040 <std+0x48>
 8007032:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007036:	4294      	cmp	r4, r2
 8007038:	d002      	beq.n	8007040 <std+0x48>
 800703a:	33d0      	adds	r3, #208	@ 0xd0
 800703c:	429c      	cmp	r4, r3
 800703e:	d105      	bne.n	800704c <std+0x54>
 8007040:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007048:	f000 b978 	b.w	800733c <__retarget_lock_init_recursive>
 800704c:	bd10      	pop	{r4, pc}
 800704e:	bf00      	nop
 8007050:	080071bd 	.word	0x080071bd
 8007054:	080071df 	.word	0x080071df
 8007058:	08007217 	.word	0x08007217
 800705c:	0800723b 	.word	0x0800723b
 8007060:	20000c8c 	.word	0x20000c8c

08007064 <stdio_exit_handler>:
 8007064:	4a02      	ldr	r2, [pc, #8]	@ (8007070 <stdio_exit_handler+0xc>)
 8007066:	4903      	ldr	r1, [pc, #12]	@ (8007074 <stdio_exit_handler+0x10>)
 8007068:	4803      	ldr	r0, [pc, #12]	@ (8007078 <stdio_exit_handler+0x14>)
 800706a:	f000 b869 	b.w	8007140 <_fwalk_sglue>
 800706e:	bf00      	nop
 8007070:	20000014 	.word	0x20000014
 8007074:	08008c9d 	.word	0x08008c9d
 8007078:	20000024 	.word	0x20000024

0800707c <cleanup_stdio>:
 800707c:	6841      	ldr	r1, [r0, #4]
 800707e:	4b0c      	ldr	r3, [pc, #48]	@ (80070b0 <cleanup_stdio+0x34>)
 8007080:	4299      	cmp	r1, r3
 8007082:	b510      	push	{r4, lr}
 8007084:	4604      	mov	r4, r0
 8007086:	d001      	beq.n	800708c <cleanup_stdio+0x10>
 8007088:	f001 fe08 	bl	8008c9c <_fflush_r>
 800708c:	68a1      	ldr	r1, [r4, #8]
 800708e:	4b09      	ldr	r3, [pc, #36]	@ (80070b4 <cleanup_stdio+0x38>)
 8007090:	4299      	cmp	r1, r3
 8007092:	d002      	beq.n	800709a <cleanup_stdio+0x1e>
 8007094:	4620      	mov	r0, r4
 8007096:	f001 fe01 	bl	8008c9c <_fflush_r>
 800709a:	68e1      	ldr	r1, [r4, #12]
 800709c:	4b06      	ldr	r3, [pc, #24]	@ (80070b8 <cleanup_stdio+0x3c>)
 800709e:	4299      	cmp	r1, r3
 80070a0:	d004      	beq.n	80070ac <cleanup_stdio+0x30>
 80070a2:	4620      	mov	r0, r4
 80070a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070a8:	f001 bdf8 	b.w	8008c9c <_fflush_r>
 80070ac:	bd10      	pop	{r4, pc}
 80070ae:	bf00      	nop
 80070b0:	20000c8c 	.word	0x20000c8c
 80070b4:	20000cf4 	.word	0x20000cf4
 80070b8:	20000d5c 	.word	0x20000d5c

080070bc <global_stdio_init.part.0>:
 80070bc:	b510      	push	{r4, lr}
 80070be:	4b0b      	ldr	r3, [pc, #44]	@ (80070ec <global_stdio_init.part.0+0x30>)
 80070c0:	4c0b      	ldr	r4, [pc, #44]	@ (80070f0 <global_stdio_init.part.0+0x34>)
 80070c2:	4a0c      	ldr	r2, [pc, #48]	@ (80070f4 <global_stdio_init.part.0+0x38>)
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	4620      	mov	r0, r4
 80070c8:	2200      	movs	r2, #0
 80070ca:	2104      	movs	r1, #4
 80070cc:	f7ff ff94 	bl	8006ff8 <std>
 80070d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070d4:	2201      	movs	r2, #1
 80070d6:	2109      	movs	r1, #9
 80070d8:	f7ff ff8e 	bl	8006ff8 <std>
 80070dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070e0:	2202      	movs	r2, #2
 80070e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e6:	2112      	movs	r1, #18
 80070e8:	f7ff bf86 	b.w	8006ff8 <std>
 80070ec:	20000dc4 	.word	0x20000dc4
 80070f0:	20000c8c 	.word	0x20000c8c
 80070f4:	08007065 	.word	0x08007065

080070f8 <__sfp_lock_acquire>:
 80070f8:	4801      	ldr	r0, [pc, #4]	@ (8007100 <__sfp_lock_acquire+0x8>)
 80070fa:	f000 b920 	b.w	800733e <__retarget_lock_acquire_recursive>
 80070fe:	bf00      	nop
 8007100:	20000dcd 	.word	0x20000dcd

08007104 <__sfp_lock_release>:
 8007104:	4801      	ldr	r0, [pc, #4]	@ (800710c <__sfp_lock_release+0x8>)
 8007106:	f000 b91b 	b.w	8007340 <__retarget_lock_release_recursive>
 800710a:	bf00      	nop
 800710c:	20000dcd 	.word	0x20000dcd

08007110 <__sinit>:
 8007110:	b510      	push	{r4, lr}
 8007112:	4604      	mov	r4, r0
 8007114:	f7ff fff0 	bl	80070f8 <__sfp_lock_acquire>
 8007118:	6a23      	ldr	r3, [r4, #32]
 800711a:	b11b      	cbz	r3, 8007124 <__sinit+0x14>
 800711c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007120:	f7ff bff0 	b.w	8007104 <__sfp_lock_release>
 8007124:	4b04      	ldr	r3, [pc, #16]	@ (8007138 <__sinit+0x28>)
 8007126:	6223      	str	r3, [r4, #32]
 8007128:	4b04      	ldr	r3, [pc, #16]	@ (800713c <__sinit+0x2c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1f5      	bne.n	800711c <__sinit+0xc>
 8007130:	f7ff ffc4 	bl	80070bc <global_stdio_init.part.0>
 8007134:	e7f2      	b.n	800711c <__sinit+0xc>
 8007136:	bf00      	nop
 8007138:	0800707d 	.word	0x0800707d
 800713c:	20000dc4 	.word	0x20000dc4

08007140 <_fwalk_sglue>:
 8007140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007144:	4607      	mov	r7, r0
 8007146:	4688      	mov	r8, r1
 8007148:	4614      	mov	r4, r2
 800714a:	2600      	movs	r6, #0
 800714c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007150:	f1b9 0901 	subs.w	r9, r9, #1
 8007154:	d505      	bpl.n	8007162 <_fwalk_sglue+0x22>
 8007156:	6824      	ldr	r4, [r4, #0]
 8007158:	2c00      	cmp	r4, #0
 800715a:	d1f7      	bne.n	800714c <_fwalk_sglue+0xc>
 800715c:	4630      	mov	r0, r6
 800715e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007162:	89ab      	ldrh	r3, [r5, #12]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d907      	bls.n	8007178 <_fwalk_sglue+0x38>
 8007168:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800716c:	3301      	adds	r3, #1
 800716e:	d003      	beq.n	8007178 <_fwalk_sglue+0x38>
 8007170:	4629      	mov	r1, r5
 8007172:	4638      	mov	r0, r7
 8007174:	47c0      	blx	r8
 8007176:	4306      	orrs	r6, r0
 8007178:	3568      	adds	r5, #104	@ 0x68
 800717a:	e7e9      	b.n	8007150 <_fwalk_sglue+0x10>

0800717c <siprintf>:
 800717c:	b40e      	push	{r1, r2, r3}
 800717e:	b500      	push	{lr}
 8007180:	b09c      	sub	sp, #112	@ 0x70
 8007182:	ab1d      	add	r3, sp, #116	@ 0x74
 8007184:	9002      	str	r0, [sp, #8]
 8007186:	9006      	str	r0, [sp, #24]
 8007188:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800718c:	4809      	ldr	r0, [pc, #36]	@ (80071b4 <siprintf+0x38>)
 800718e:	9107      	str	r1, [sp, #28]
 8007190:	9104      	str	r1, [sp, #16]
 8007192:	4909      	ldr	r1, [pc, #36]	@ (80071b8 <siprintf+0x3c>)
 8007194:	f853 2b04 	ldr.w	r2, [r3], #4
 8007198:	9105      	str	r1, [sp, #20]
 800719a:	6800      	ldr	r0, [r0, #0]
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	a902      	add	r1, sp, #8
 80071a0:	f001 fbfc 	bl	800899c <_svfiprintf_r>
 80071a4:	9b02      	ldr	r3, [sp, #8]
 80071a6:	2200      	movs	r2, #0
 80071a8:	701a      	strb	r2, [r3, #0]
 80071aa:	b01c      	add	sp, #112	@ 0x70
 80071ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80071b0:	b003      	add	sp, #12
 80071b2:	4770      	bx	lr
 80071b4:	20000020 	.word	0x20000020
 80071b8:	ffff0208 	.word	0xffff0208

080071bc <__sread>:
 80071bc:	b510      	push	{r4, lr}
 80071be:	460c      	mov	r4, r1
 80071c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c4:	f000 f86c 	bl	80072a0 <_read_r>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	bfab      	itete	ge
 80071cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071ce:	89a3      	ldrhlt	r3, [r4, #12]
 80071d0:	181b      	addge	r3, r3, r0
 80071d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071d6:	bfac      	ite	ge
 80071d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071da:	81a3      	strhlt	r3, [r4, #12]
 80071dc:	bd10      	pop	{r4, pc}

080071de <__swrite>:
 80071de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e2:	461f      	mov	r7, r3
 80071e4:	898b      	ldrh	r3, [r1, #12]
 80071e6:	05db      	lsls	r3, r3, #23
 80071e8:	4605      	mov	r5, r0
 80071ea:	460c      	mov	r4, r1
 80071ec:	4616      	mov	r6, r2
 80071ee:	d505      	bpl.n	80071fc <__swrite+0x1e>
 80071f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f4:	2302      	movs	r3, #2
 80071f6:	2200      	movs	r2, #0
 80071f8:	f000 f840 	bl	800727c <_lseek_r>
 80071fc:	89a3      	ldrh	r3, [r4, #12]
 80071fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007202:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007206:	81a3      	strh	r3, [r4, #12]
 8007208:	4632      	mov	r2, r6
 800720a:	463b      	mov	r3, r7
 800720c:	4628      	mov	r0, r5
 800720e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007212:	f000 b857 	b.w	80072c4 <_write_r>

08007216 <__sseek>:
 8007216:	b510      	push	{r4, lr}
 8007218:	460c      	mov	r4, r1
 800721a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800721e:	f000 f82d 	bl	800727c <_lseek_r>
 8007222:	1c43      	adds	r3, r0, #1
 8007224:	89a3      	ldrh	r3, [r4, #12]
 8007226:	bf15      	itete	ne
 8007228:	6560      	strne	r0, [r4, #84]	@ 0x54
 800722a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800722e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007232:	81a3      	strheq	r3, [r4, #12]
 8007234:	bf18      	it	ne
 8007236:	81a3      	strhne	r3, [r4, #12]
 8007238:	bd10      	pop	{r4, pc}

0800723a <__sclose>:
 800723a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800723e:	f000 b80d 	b.w	800725c <_close_r>

08007242 <memset>:
 8007242:	4402      	add	r2, r0
 8007244:	4603      	mov	r3, r0
 8007246:	4293      	cmp	r3, r2
 8007248:	d100      	bne.n	800724c <memset+0xa>
 800724a:	4770      	bx	lr
 800724c:	f803 1b01 	strb.w	r1, [r3], #1
 8007250:	e7f9      	b.n	8007246 <memset+0x4>
	...

08007254 <_localeconv_r>:
 8007254:	4800      	ldr	r0, [pc, #0]	@ (8007258 <_localeconv_r+0x4>)
 8007256:	4770      	bx	lr
 8007258:	20000160 	.word	0x20000160

0800725c <_close_r>:
 800725c:	b538      	push	{r3, r4, r5, lr}
 800725e:	4d06      	ldr	r5, [pc, #24]	@ (8007278 <_close_r+0x1c>)
 8007260:	2300      	movs	r3, #0
 8007262:	4604      	mov	r4, r0
 8007264:	4608      	mov	r0, r1
 8007266:	602b      	str	r3, [r5, #0]
 8007268:	f7fb fe76 	bl	8002f58 <_close>
 800726c:	1c43      	adds	r3, r0, #1
 800726e:	d102      	bne.n	8007276 <_close_r+0x1a>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	b103      	cbz	r3, 8007276 <_close_r+0x1a>
 8007274:	6023      	str	r3, [r4, #0]
 8007276:	bd38      	pop	{r3, r4, r5, pc}
 8007278:	20000dc8 	.word	0x20000dc8

0800727c <_lseek_r>:
 800727c:	b538      	push	{r3, r4, r5, lr}
 800727e:	4d07      	ldr	r5, [pc, #28]	@ (800729c <_lseek_r+0x20>)
 8007280:	4604      	mov	r4, r0
 8007282:	4608      	mov	r0, r1
 8007284:	4611      	mov	r1, r2
 8007286:	2200      	movs	r2, #0
 8007288:	602a      	str	r2, [r5, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	f7fb fe8b 	bl	8002fa6 <_lseek>
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	d102      	bne.n	800729a <_lseek_r+0x1e>
 8007294:	682b      	ldr	r3, [r5, #0]
 8007296:	b103      	cbz	r3, 800729a <_lseek_r+0x1e>
 8007298:	6023      	str	r3, [r4, #0]
 800729a:	bd38      	pop	{r3, r4, r5, pc}
 800729c:	20000dc8 	.word	0x20000dc8

080072a0 <_read_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4d07      	ldr	r5, [pc, #28]	@ (80072c0 <_read_r+0x20>)
 80072a4:	4604      	mov	r4, r0
 80072a6:	4608      	mov	r0, r1
 80072a8:	4611      	mov	r1, r2
 80072aa:	2200      	movs	r2, #0
 80072ac:	602a      	str	r2, [r5, #0]
 80072ae:	461a      	mov	r2, r3
 80072b0:	f7fb fe19 	bl	8002ee6 <_read>
 80072b4:	1c43      	adds	r3, r0, #1
 80072b6:	d102      	bne.n	80072be <_read_r+0x1e>
 80072b8:	682b      	ldr	r3, [r5, #0]
 80072ba:	b103      	cbz	r3, 80072be <_read_r+0x1e>
 80072bc:	6023      	str	r3, [r4, #0]
 80072be:	bd38      	pop	{r3, r4, r5, pc}
 80072c0:	20000dc8 	.word	0x20000dc8

080072c4 <_write_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	4d07      	ldr	r5, [pc, #28]	@ (80072e4 <_write_r+0x20>)
 80072c8:	4604      	mov	r4, r0
 80072ca:	4608      	mov	r0, r1
 80072cc:	4611      	mov	r1, r2
 80072ce:	2200      	movs	r2, #0
 80072d0:	602a      	str	r2, [r5, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	f7fb fe24 	bl	8002f20 <_write>
 80072d8:	1c43      	adds	r3, r0, #1
 80072da:	d102      	bne.n	80072e2 <_write_r+0x1e>
 80072dc:	682b      	ldr	r3, [r5, #0]
 80072de:	b103      	cbz	r3, 80072e2 <_write_r+0x1e>
 80072e0:	6023      	str	r3, [r4, #0]
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	20000dc8 	.word	0x20000dc8

080072e8 <__errno>:
 80072e8:	4b01      	ldr	r3, [pc, #4]	@ (80072f0 <__errno+0x8>)
 80072ea:	6818      	ldr	r0, [r3, #0]
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	20000020 	.word	0x20000020

080072f4 <__libc_init_array>:
 80072f4:	b570      	push	{r4, r5, r6, lr}
 80072f6:	4d0d      	ldr	r5, [pc, #52]	@ (800732c <__libc_init_array+0x38>)
 80072f8:	4c0d      	ldr	r4, [pc, #52]	@ (8007330 <__libc_init_array+0x3c>)
 80072fa:	1b64      	subs	r4, r4, r5
 80072fc:	10a4      	asrs	r4, r4, #2
 80072fe:	2600      	movs	r6, #0
 8007300:	42a6      	cmp	r6, r4
 8007302:	d109      	bne.n	8007318 <__libc_init_array+0x24>
 8007304:	4d0b      	ldr	r5, [pc, #44]	@ (8007334 <__libc_init_array+0x40>)
 8007306:	4c0c      	ldr	r4, [pc, #48]	@ (8007338 <__libc_init_array+0x44>)
 8007308:	f002 f866 	bl	80093d8 <_init>
 800730c:	1b64      	subs	r4, r4, r5
 800730e:	10a4      	asrs	r4, r4, #2
 8007310:	2600      	movs	r6, #0
 8007312:	42a6      	cmp	r6, r4
 8007314:	d105      	bne.n	8007322 <__libc_init_array+0x2e>
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	f855 3b04 	ldr.w	r3, [r5], #4
 800731c:	4798      	blx	r3
 800731e:	3601      	adds	r6, #1
 8007320:	e7ee      	b.n	8007300 <__libc_init_array+0xc>
 8007322:	f855 3b04 	ldr.w	r3, [r5], #4
 8007326:	4798      	blx	r3
 8007328:	3601      	adds	r6, #1
 800732a:	e7f2      	b.n	8007312 <__libc_init_array+0x1e>
 800732c:	0800a240 	.word	0x0800a240
 8007330:	0800a240 	.word	0x0800a240
 8007334:	0800a240 	.word	0x0800a240
 8007338:	0800a244 	.word	0x0800a244

0800733c <__retarget_lock_init_recursive>:
 800733c:	4770      	bx	lr

0800733e <__retarget_lock_acquire_recursive>:
 800733e:	4770      	bx	lr

08007340 <__retarget_lock_release_recursive>:
 8007340:	4770      	bx	lr

08007342 <quorem>:
 8007342:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007346:	6903      	ldr	r3, [r0, #16]
 8007348:	690c      	ldr	r4, [r1, #16]
 800734a:	42a3      	cmp	r3, r4
 800734c:	4607      	mov	r7, r0
 800734e:	db7e      	blt.n	800744e <quorem+0x10c>
 8007350:	3c01      	subs	r4, #1
 8007352:	f101 0814 	add.w	r8, r1, #20
 8007356:	00a3      	lsls	r3, r4, #2
 8007358:	f100 0514 	add.w	r5, r0, #20
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007362:	9301      	str	r3, [sp, #4]
 8007364:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007368:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800736c:	3301      	adds	r3, #1
 800736e:	429a      	cmp	r2, r3
 8007370:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007374:	fbb2 f6f3 	udiv	r6, r2, r3
 8007378:	d32e      	bcc.n	80073d8 <quorem+0x96>
 800737a:	f04f 0a00 	mov.w	sl, #0
 800737e:	46c4      	mov	ip, r8
 8007380:	46ae      	mov	lr, r5
 8007382:	46d3      	mov	fp, sl
 8007384:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007388:	b298      	uxth	r0, r3
 800738a:	fb06 a000 	mla	r0, r6, r0, sl
 800738e:	0c02      	lsrs	r2, r0, #16
 8007390:	0c1b      	lsrs	r3, r3, #16
 8007392:	fb06 2303 	mla	r3, r6, r3, r2
 8007396:	f8de 2000 	ldr.w	r2, [lr]
 800739a:	b280      	uxth	r0, r0
 800739c:	b292      	uxth	r2, r2
 800739e:	1a12      	subs	r2, r2, r0
 80073a0:	445a      	add	r2, fp
 80073a2:	f8de 0000 	ldr.w	r0, [lr]
 80073a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80073b0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80073b4:	b292      	uxth	r2, r2
 80073b6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80073ba:	45e1      	cmp	r9, ip
 80073bc:	f84e 2b04 	str.w	r2, [lr], #4
 80073c0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80073c4:	d2de      	bcs.n	8007384 <quorem+0x42>
 80073c6:	9b00      	ldr	r3, [sp, #0]
 80073c8:	58eb      	ldr	r3, [r5, r3]
 80073ca:	b92b      	cbnz	r3, 80073d8 <quorem+0x96>
 80073cc:	9b01      	ldr	r3, [sp, #4]
 80073ce:	3b04      	subs	r3, #4
 80073d0:	429d      	cmp	r5, r3
 80073d2:	461a      	mov	r2, r3
 80073d4:	d32f      	bcc.n	8007436 <quorem+0xf4>
 80073d6:	613c      	str	r4, [r7, #16]
 80073d8:	4638      	mov	r0, r7
 80073da:	f001 f97b 	bl	80086d4 <__mcmp>
 80073de:	2800      	cmp	r0, #0
 80073e0:	db25      	blt.n	800742e <quorem+0xec>
 80073e2:	4629      	mov	r1, r5
 80073e4:	2000      	movs	r0, #0
 80073e6:	f858 2b04 	ldr.w	r2, [r8], #4
 80073ea:	f8d1 c000 	ldr.w	ip, [r1]
 80073ee:	fa1f fe82 	uxth.w	lr, r2
 80073f2:	fa1f f38c 	uxth.w	r3, ip
 80073f6:	eba3 030e 	sub.w	r3, r3, lr
 80073fa:	4403      	add	r3, r0
 80073fc:	0c12      	lsrs	r2, r2, #16
 80073fe:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007402:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007406:	b29b      	uxth	r3, r3
 8007408:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800740c:	45c1      	cmp	r9, r8
 800740e:	f841 3b04 	str.w	r3, [r1], #4
 8007412:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007416:	d2e6      	bcs.n	80073e6 <quorem+0xa4>
 8007418:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800741c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007420:	b922      	cbnz	r2, 800742c <quorem+0xea>
 8007422:	3b04      	subs	r3, #4
 8007424:	429d      	cmp	r5, r3
 8007426:	461a      	mov	r2, r3
 8007428:	d30b      	bcc.n	8007442 <quorem+0x100>
 800742a:	613c      	str	r4, [r7, #16]
 800742c:	3601      	adds	r6, #1
 800742e:	4630      	mov	r0, r6
 8007430:	b003      	add	sp, #12
 8007432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007436:	6812      	ldr	r2, [r2, #0]
 8007438:	3b04      	subs	r3, #4
 800743a:	2a00      	cmp	r2, #0
 800743c:	d1cb      	bne.n	80073d6 <quorem+0x94>
 800743e:	3c01      	subs	r4, #1
 8007440:	e7c6      	b.n	80073d0 <quorem+0x8e>
 8007442:	6812      	ldr	r2, [r2, #0]
 8007444:	3b04      	subs	r3, #4
 8007446:	2a00      	cmp	r2, #0
 8007448:	d1ef      	bne.n	800742a <quorem+0xe8>
 800744a:	3c01      	subs	r4, #1
 800744c:	e7ea      	b.n	8007424 <quorem+0xe2>
 800744e:	2000      	movs	r0, #0
 8007450:	e7ee      	b.n	8007430 <quorem+0xee>
 8007452:	0000      	movs	r0, r0
 8007454:	0000      	movs	r0, r0
	...

08007458 <_dtoa_r>:
 8007458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800745c:	69c7      	ldr	r7, [r0, #28]
 800745e:	b099      	sub	sp, #100	@ 0x64
 8007460:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007464:	ec55 4b10 	vmov	r4, r5, d0
 8007468:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800746a:	9109      	str	r1, [sp, #36]	@ 0x24
 800746c:	4683      	mov	fp, r0
 800746e:	920e      	str	r2, [sp, #56]	@ 0x38
 8007470:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007472:	b97f      	cbnz	r7, 8007494 <_dtoa_r+0x3c>
 8007474:	2010      	movs	r0, #16
 8007476:	f000 fdfd 	bl	8008074 <malloc>
 800747a:	4602      	mov	r2, r0
 800747c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007480:	b920      	cbnz	r0, 800748c <_dtoa_r+0x34>
 8007482:	4ba7      	ldr	r3, [pc, #668]	@ (8007720 <_dtoa_r+0x2c8>)
 8007484:	21ef      	movs	r1, #239	@ 0xef
 8007486:	48a7      	ldr	r0, [pc, #668]	@ (8007724 <_dtoa_r+0x2cc>)
 8007488:	f001 fc68 	bl	8008d5c <__assert_func>
 800748c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007490:	6007      	str	r7, [r0, #0]
 8007492:	60c7      	str	r7, [r0, #12]
 8007494:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007498:	6819      	ldr	r1, [r3, #0]
 800749a:	b159      	cbz	r1, 80074b4 <_dtoa_r+0x5c>
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	604a      	str	r2, [r1, #4]
 80074a0:	2301      	movs	r3, #1
 80074a2:	4093      	lsls	r3, r2
 80074a4:	608b      	str	r3, [r1, #8]
 80074a6:	4658      	mov	r0, fp
 80074a8:	f000 feda 	bl	8008260 <_Bfree>
 80074ac:	f8db 301c 	ldr.w	r3, [fp, #28]
 80074b0:	2200      	movs	r2, #0
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	1e2b      	subs	r3, r5, #0
 80074b6:	bfb9      	ittee	lt
 80074b8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80074bc:	9303      	strlt	r3, [sp, #12]
 80074be:	2300      	movge	r3, #0
 80074c0:	6033      	strge	r3, [r6, #0]
 80074c2:	9f03      	ldr	r7, [sp, #12]
 80074c4:	4b98      	ldr	r3, [pc, #608]	@ (8007728 <_dtoa_r+0x2d0>)
 80074c6:	bfbc      	itt	lt
 80074c8:	2201      	movlt	r2, #1
 80074ca:	6032      	strlt	r2, [r6, #0]
 80074cc:	43bb      	bics	r3, r7
 80074ce:	d112      	bne.n	80074f6 <_dtoa_r+0x9e>
 80074d0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80074d2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074dc:	4323      	orrs	r3, r4
 80074de:	f000 854d 	beq.w	8007f7c <_dtoa_r+0xb24>
 80074e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800773c <_dtoa_r+0x2e4>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 854f 	beq.w	8007f8c <_dtoa_r+0xb34>
 80074ee:	f10a 0303 	add.w	r3, sl, #3
 80074f2:	f000 bd49 	b.w	8007f88 <_dtoa_r+0xb30>
 80074f6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074fa:	2200      	movs	r2, #0
 80074fc:	ec51 0b17 	vmov	r0, r1, d7
 8007500:	2300      	movs	r3, #0
 8007502:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007506:	f7f9 fadf 	bl	8000ac8 <__aeabi_dcmpeq>
 800750a:	4680      	mov	r8, r0
 800750c:	b158      	cbz	r0, 8007526 <_dtoa_r+0xce>
 800750e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007510:	2301      	movs	r3, #1
 8007512:	6013      	str	r3, [r2, #0]
 8007514:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007516:	b113      	cbz	r3, 800751e <_dtoa_r+0xc6>
 8007518:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800751a:	4b84      	ldr	r3, [pc, #528]	@ (800772c <_dtoa_r+0x2d4>)
 800751c:	6013      	str	r3, [r2, #0]
 800751e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007740 <_dtoa_r+0x2e8>
 8007522:	f000 bd33 	b.w	8007f8c <_dtoa_r+0xb34>
 8007526:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800752a:	aa16      	add	r2, sp, #88	@ 0x58
 800752c:	a917      	add	r1, sp, #92	@ 0x5c
 800752e:	4658      	mov	r0, fp
 8007530:	f001 f980 	bl	8008834 <__d2b>
 8007534:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007538:	4681      	mov	r9, r0
 800753a:	2e00      	cmp	r6, #0
 800753c:	d077      	beq.n	800762e <_dtoa_r+0x1d6>
 800753e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007540:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007548:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800754c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007550:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007554:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007558:	4619      	mov	r1, r3
 800755a:	2200      	movs	r2, #0
 800755c:	4b74      	ldr	r3, [pc, #464]	@ (8007730 <_dtoa_r+0x2d8>)
 800755e:	f7f8 fe93 	bl	8000288 <__aeabi_dsub>
 8007562:	a369      	add	r3, pc, #420	@ (adr r3, 8007708 <_dtoa_r+0x2b0>)
 8007564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007568:	f7f9 f846 	bl	80005f8 <__aeabi_dmul>
 800756c:	a368      	add	r3, pc, #416	@ (adr r3, 8007710 <_dtoa_r+0x2b8>)
 800756e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007572:	f7f8 fe8b 	bl	800028c <__adddf3>
 8007576:	4604      	mov	r4, r0
 8007578:	4630      	mov	r0, r6
 800757a:	460d      	mov	r5, r1
 800757c:	f7f8 ffd2 	bl	8000524 <__aeabi_i2d>
 8007580:	a365      	add	r3, pc, #404	@ (adr r3, 8007718 <_dtoa_r+0x2c0>)
 8007582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007586:	f7f9 f837 	bl	80005f8 <__aeabi_dmul>
 800758a:	4602      	mov	r2, r0
 800758c:	460b      	mov	r3, r1
 800758e:	4620      	mov	r0, r4
 8007590:	4629      	mov	r1, r5
 8007592:	f7f8 fe7b 	bl	800028c <__adddf3>
 8007596:	4604      	mov	r4, r0
 8007598:	460d      	mov	r5, r1
 800759a:	f7f9 fadd 	bl	8000b58 <__aeabi_d2iz>
 800759e:	2200      	movs	r2, #0
 80075a0:	4607      	mov	r7, r0
 80075a2:	2300      	movs	r3, #0
 80075a4:	4620      	mov	r0, r4
 80075a6:	4629      	mov	r1, r5
 80075a8:	f7f9 fa98 	bl	8000adc <__aeabi_dcmplt>
 80075ac:	b140      	cbz	r0, 80075c0 <_dtoa_r+0x168>
 80075ae:	4638      	mov	r0, r7
 80075b0:	f7f8 ffb8 	bl	8000524 <__aeabi_i2d>
 80075b4:	4622      	mov	r2, r4
 80075b6:	462b      	mov	r3, r5
 80075b8:	f7f9 fa86 	bl	8000ac8 <__aeabi_dcmpeq>
 80075bc:	b900      	cbnz	r0, 80075c0 <_dtoa_r+0x168>
 80075be:	3f01      	subs	r7, #1
 80075c0:	2f16      	cmp	r7, #22
 80075c2:	d851      	bhi.n	8007668 <_dtoa_r+0x210>
 80075c4:	4b5b      	ldr	r3, [pc, #364]	@ (8007734 <_dtoa_r+0x2dc>)
 80075c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075d2:	f7f9 fa83 	bl	8000adc <__aeabi_dcmplt>
 80075d6:	2800      	cmp	r0, #0
 80075d8:	d048      	beq.n	800766c <_dtoa_r+0x214>
 80075da:	3f01      	subs	r7, #1
 80075dc:	2300      	movs	r3, #0
 80075de:	9312      	str	r3, [sp, #72]	@ 0x48
 80075e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80075e2:	1b9b      	subs	r3, r3, r6
 80075e4:	1e5a      	subs	r2, r3, #1
 80075e6:	bf44      	itt	mi
 80075e8:	f1c3 0801 	rsbmi	r8, r3, #1
 80075ec:	2300      	movmi	r3, #0
 80075ee:	9208      	str	r2, [sp, #32]
 80075f0:	bf54      	ite	pl
 80075f2:	f04f 0800 	movpl.w	r8, #0
 80075f6:	9308      	strmi	r3, [sp, #32]
 80075f8:	2f00      	cmp	r7, #0
 80075fa:	db39      	blt.n	8007670 <_dtoa_r+0x218>
 80075fc:	9b08      	ldr	r3, [sp, #32]
 80075fe:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007600:	443b      	add	r3, r7
 8007602:	9308      	str	r3, [sp, #32]
 8007604:	2300      	movs	r3, #0
 8007606:	930a      	str	r3, [sp, #40]	@ 0x28
 8007608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800760a:	2b09      	cmp	r3, #9
 800760c:	d864      	bhi.n	80076d8 <_dtoa_r+0x280>
 800760e:	2b05      	cmp	r3, #5
 8007610:	bfc4      	itt	gt
 8007612:	3b04      	subgt	r3, #4
 8007614:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007616:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007618:	f1a3 0302 	sub.w	r3, r3, #2
 800761c:	bfcc      	ite	gt
 800761e:	2400      	movgt	r4, #0
 8007620:	2401      	movle	r4, #1
 8007622:	2b03      	cmp	r3, #3
 8007624:	d863      	bhi.n	80076ee <_dtoa_r+0x296>
 8007626:	e8df f003 	tbb	[pc, r3]
 800762a:	372a      	.short	0x372a
 800762c:	5535      	.short	0x5535
 800762e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007632:	441e      	add	r6, r3
 8007634:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007638:	2b20      	cmp	r3, #32
 800763a:	bfc1      	itttt	gt
 800763c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007640:	409f      	lslgt	r7, r3
 8007642:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007646:	fa24 f303 	lsrgt.w	r3, r4, r3
 800764a:	bfd6      	itet	le
 800764c:	f1c3 0320 	rsble	r3, r3, #32
 8007650:	ea47 0003 	orrgt.w	r0, r7, r3
 8007654:	fa04 f003 	lslle.w	r0, r4, r3
 8007658:	f7f8 ff54 	bl	8000504 <__aeabi_ui2d>
 800765c:	2201      	movs	r2, #1
 800765e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007662:	3e01      	subs	r6, #1
 8007664:	9214      	str	r2, [sp, #80]	@ 0x50
 8007666:	e777      	b.n	8007558 <_dtoa_r+0x100>
 8007668:	2301      	movs	r3, #1
 800766a:	e7b8      	b.n	80075de <_dtoa_r+0x186>
 800766c:	9012      	str	r0, [sp, #72]	@ 0x48
 800766e:	e7b7      	b.n	80075e0 <_dtoa_r+0x188>
 8007670:	427b      	negs	r3, r7
 8007672:	930a      	str	r3, [sp, #40]	@ 0x28
 8007674:	2300      	movs	r3, #0
 8007676:	eba8 0807 	sub.w	r8, r8, r7
 800767a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800767c:	e7c4      	b.n	8007608 <_dtoa_r+0x1b0>
 800767e:	2300      	movs	r3, #0
 8007680:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007682:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007684:	2b00      	cmp	r3, #0
 8007686:	dc35      	bgt.n	80076f4 <_dtoa_r+0x29c>
 8007688:	2301      	movs	r3, #1
 800768a:	9300      	str	r3, [sp, #0]
 800768c:	9307      	str	r3, [sp, #28]
 800768e:	461a      	mov	r2, r3
 8007690:	920e      	str	r2, [sp, #56]	@ 0x38
 8007692:	e00b      	b.n	80076ac <_dtoa_r+0x254>
 8007694:	2301      	movs	r3, #1
 8007696:	e7f3      	b.n	8007680 <_dtoa_r+0x228>
 8007698:	2300      	movs	r3, #0
 800769a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800769c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800769e:	18fb      	adds	r3, r7, r3
 80076a0:	9300      	str	r3, [sp, #0]
 80076a2:	3301      	adds	r3, #1
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	9307      	str	r3, [sp, #28]
 80076a8:	bfb8      	it	lt
 80076aa:	2301      	movlt	r3, #1
 80076ac:	f8db 001c 	ldr.w	r0, [fp, #28]
 80076b0:	2100      	movs	r1, #0
 80076b2:	2204      	movs	r2, #4
 80076b4:	f102 0514 	add.w	r5, r2, #20
 80076b8:	429d      	cmp	r5, r3
 80076ba:	d91f      	bls.n	80076fc <_dtoa_r+0x2a4>
 80076bc:	6041      	str	r1, [r0, #4]
 80076be:	4658      	mov	r0, fp
 80076c0:	f000 fd8e 	bl	80081e0 <_Balloc>
 80076c4:	4682      	mov	sl, r0
 80076c6:	2800      	cmp	r0, #0
 80076c8:	d13c      	bne.n	8007744 <_dtoa_r+0x2ec>
 80076ca:	4b1b      	ldr	r3, [pc, #108]	@ (8007738 <_dtoa_r+0x2e0>)
 80076cc:	4602      	mov	r2, r0
 80076ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80076d2:	e6d8      	b.n	8007486 <_dtoa_r+0x2e>
 80076d4:	2301      	movs	r3, #1
 80076d6:	e7e0      	b.n	800769a <_dtoa_r+0x242>
 80076d8:	2401      	movs	r4, #1
 80076da:	2300      	movs	r3, #0
 80076dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80076de:	940b      	str	r4, [sp, #44]	@ 0x2c
 80076e0:	f04f 33ff 	mov.w	r3, #4294967295
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	9307      	str	r3, [sp, #28]
 80076e8:	2200      	movs	r2, #0
 80076ea:	2312      	movs	r3, #18
 80076ec:	e7d0      	b.n	8007690 <_dtoa_r+0x238>
 80076ee:	2301      	movs	r3, #1
 80076f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076f2:	e7f5      	b.n	80076e0 <_dtoa_r+0x288>
 80076f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	9307      	str	r3, [sp, #28]
 80076fa:	e7d7      	b.n	80076ac <_dtoa_r+0x254>
 80076fc:	3101      	adds	r1, #1
 80076fe:	0052      	lsls	r2, r2, #1
 8007700:	e7d8      	b.n	80076b4 <_dtoa_r+0x25c>
 8007702:	bf00      	nop
 8007704:	f3af 8000 	nop.w
 8007708:	636f4361 	.word	0x636f4361
 800770c:	3fd287a7 	.word	0x3fd287a7
 8007710:	8b60c8b3 	.word	0x8b60c8b3
 8007714:	3fc68a28 	.word	0x3fc68a28
 8007718:	509f79fb 	.word	0x509f79fb
 800771c:	3fd34413 	.word	0x3fd34413
 8007720:	08009f09 	.word	0x08009f09
 8007724:	08009f20 	.word	0x08009f20
 8007728:	7ff00000 	.word	0x7ff00000
 800772c:	08009ed9 	.word	0x08009ed9
 8007730:	3ff80000 	.word	0x3ff80000
 8007734:	0800a018 	.word	0x0800a018
 8007738:	08009f78 	.word	0x08009f78
 800773c:	08009f05 	.word	0x08009f05
 8007740:	08009ed8 	.word	0x08009ed8
 8007744:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007748:	6018      	str	r0, [r3, #0]
 800774a:	9b07      	ldr	r3, [sp, #28]
 800774c:	2b0e      	cmp	r3, #14
 800774e:	f200 80a4 	bhi.w	800789a <_dtoa_r+0x442>
 8007752:	2c00      	cmp	r4, #0
 8007754:	f000 80a1 	beq.w	800789a <_dtoa_r+0x442>
 8007758:	2f00      	cmp	r7, #0
 800775a:	dd33      	ble.n	80077c4 <_dtoa_r+0x36c>
 800775c:	4bad      	ldr	r3, [pc, #692]	@ (8007a14 <_dtoa_r+0x5bc>)
 800775e:	f007 020f 	and.w	r2, r7, #15
 8007762:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007766:	ed93 7b00 	vldr	d7, [r3]
 800776a:	05f8      	lsls	r0, r7, #23
 800776c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007770:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007774:	d516      	bpl.n	80077a4 <_dtoa_r+0x34c>
 8007776:	4ba8      	ldr	r3, [pc, #672]	@ (8007a18 <_dtoa_r+0x5c0>)
 8007778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800777c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007780:	f7f9 f864 	bl	800084c <__aeabi_ddiv>
 8007784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007788:	f004 040f 	and.w	r4, r4, #15
 800778c:	2603      	movs	r6, #3
 800778e:	4da2      	ldr	r5, [pc, #648]	@ (8007a18 <_dtoa_r+0x5c0>)
 8007790:	b954      	cbnz	r4, 80077a8 <_dtoa_r+0x350>
 8007792:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800779a:	f7f9 f857 	bl	800084c <__aeabi_ddiv>
 800779e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077a2:	e028      	b.n	80077f6 <_dtoa_r+0x39e>
 80077a4:	2602      	movs	r6, #2
 80077a6:	e7f2      	b.n	800778e <_dtoa_r+0x336>
 80077a8:	07e1      	lsls	r1, r4, #31
 80077aa:	d508      	bpl.n	80077be <_dtoa_r+0x366>
 80077ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077b4:	f7f8 ff20 	bl	80005f8 <__aeabi_dmul>
 80077b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077bc:	3601      	adds	r6, #1
 80077be:	1064      	asrs	r4, r4, #1
 80077c0:	3508      	adds	r5, #8
 80077c2:	e7e5      	b.n	8007790 <_dtoa_r+0x338>
 80077c4:	f000 80d2 	beq.w	800796c <_dtoa_r+0x514>
 80077c8:	427c      	negs	r4, r7
 80077ca:	4b92      	ldr	r3, [pc, #584]	@ (8007a14 <_dtoa_r+0x5bc>)
 80077cc:	4d92      	ldr	r5, [pc, #584]	@ (8007a18 <_dtoa_r+0x5c0>)
 80077ce:	f004 020f 	and.w	r2, r4, #15
 80077d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077de:	f7f8 ff0b 	bl	80005f8 <__aeabi_dmul>
 80077e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077e6:	1124      	asrs	r4, r4, #4
 80077e8:	2300      	movs	r3, #0
 80077ea:	2602      	movs	r6, #2
 80077ec:	2c00      	cmp	r4, #0
 80077ee:	f040 80b2 	bne.w	8007956 <_dtoa_r+0x4fe>
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1d3      	bne.n	800779e <_dtoa_r+0x346>
 80077f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80077f8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 80b7 	beq.w	8007970 <_dtoa_r+0x518>
 8007802:	4b86      	ldr	r3, [pc, #536]	@ (8007a1c <_dtoa_r+0x5c4>)
 8007804:	2200      	movs	r2, #0
 8007806:	4620      	mov	r0, r4
 8007808:	4629      	mov	r1, r5
 800780a:	f7f9 f967 	bl	8000adc <__aeabi_dcmplt>
 800780e:	2800      	cmp	r0, #0
 8007810:	f000 80ae 	beq.w	8007970 <_dtoa_r+0x518>
 8007814:	9b07      	ldr	r3, [sp, #28]
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 80aa 	beq.w	8007970 <_dtoa_r+0x518>
 800781c:	9b00      	ldr	r3, [sp, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	dd37      	ble.n	8007892 <_dtoa_r+0x43a>
 8007822:	1e7b      	subs	r3, r7, #1
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	4620      	mov	r0, r4
 8007828:	4b7d      	ldr	r3, [pc, #500]	@ (8007a20 <_dtoa_r+0x5c8>)
 800782a:	2200      	movs	r2, #0
 800782c:	4629      	mov	r1, r5
 800782e:	f7f8 fee3 	bl	80005f8 <__aeabi_dmul>
 8007832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007836:	9c00      	ldr	r4, [sp, #0]
 8007838:	3601      	adds	r6, #1
 800783a:	4630      	mov	r0, r6
 800783c:	f7f8 fe72 	bl	8000524 <__aeabi_i2d>
 8007840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007844:	f7f8 fed8 	bl	80005f8 <__aeabi_dmul>
 8007848:	4b76      	ldr	r3, [pc, #472]	@ (8007a24 <_dtoa_r+0x5cc>)
 800784a:	2200      	movs	r2, #0
 800784c:	f7f8 fd1e 	bl	800028c <__adddf3>
 8007850:	4605      	mov	r5, r0
 8007852:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007856:	2c00      	cmp	r4, #0
 8007858:	f040 808d 	bne.w	8007976 <_dtoa_r+0x51e>
 800785c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007860:	4b71      	ldr	r3, [pc, #452]	@ (8007a28 <_dtoa_r+0x5d0>)
 8007862:	2200      	movs	r2, #0
 8007864:	f7f8 fd10 	bl	8000288 <__aeabi_dsub>
 8007868:	4602      	mov	r2, r0
 800786a:	460b      	mov	r3, r1
 800786c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007870:	462a      	mov	r2, r5
 8007872:	4633      	mov	r3, r6
 8007874:	f7f9 f950 	bl	8000b18 <__aeabi_dcmpgt>
 8007878:	2800      	cmp	r0, #0
 800787a:	f040 828b 	bne.w	8007d94 <_dtoa_r+0x93c>
 800787e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007882:	462a      	mov	r2, r5
 8007884:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007888:	f7f9 f928 	bl	8000adc <__aeabi_dcmplt>
 800788c:	2800      	cmp	r0, #0
 800788e:	f040 8128 	bne.w	8007ae2 <_dtoa_r+0x68a>
 8007892:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007896:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800789a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800789c:	2b00      	cmp	r3, #0
 800789e:	f2c0 815a 	blt.w	8007b56 <_dtoa_r+0x6fe>
 80078a2:	2f0e      	cmp	r7, #14
 80078a4:	f300 8157 	bgt.w	8007b56 <_dtoa_r+0x6fe>
 80078a8:	4b5a      	ldr	r3, [pc, #360]	@ (8007a14 <_dtoa_r+0x5bc>)
 80078aa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80078ae:	ed93 7b00 	vldr	d7, [r3]
 80078b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	ed8d 7b00 	vstr	d7, [sp]
 80078ba:	da03      	bge.n	80078c4 <_dtoa_r+0x46c>
 80078bc:	9b07      	ldr	r3, [sp, #28]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	f340 8101 	ble.w	8007ac6 <_dtoa_r+0x66e>
 80078c4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80078c8:	4656      	mov	r6, sl
 80078ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078ce:	4620      	mov	r0, r4
 80078d0:	4629      	mov	r1, r5
 80078d2:	f7f8 ffbb 	bl	800084c <__aeabi_ddiv>
 80078d6:	f7f9 f93f 	bl	8000b58 <__aeabi_d2iz>
 80078da:	4680      	mov	r8, r0
 80078dc:	f7f8 fe22 	bl	8000524 <__aeabi_i2d>
 80078e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078e4:	f7f8 fe88 	bl	80005f8 <__aeabi_dmul>
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4620      	mov	r0, r4
 80078ee:	4629      	mov	r1, r5
 80078f0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80078f4:	f7f8 fcc8 	bl	8000288 <__aeabi_dsub>
 80078f8:	f806 4b01 	strb.w	r4, [r6], #1
 80078fc:	9d07      	ldr	r5, [sp, #28]
 80078fe:	eba6 040a 	sub.w	r4, r6, sl
 8007902:	42a5      	cmp	r5, r4
 8007904:	4602      	mov	r2, r0
 8007906:	460b      	mov	r3, r1
 8007908:	f040 8117 	bne.w	8007b3a <_dtoa_r+0x6e2>
 800790c:	f7f8 fcbe 	bl	800028c <__adddf3>
 8007910:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007914:	4604      	mov	r4, r0
 8007916:	460d      	mov	r5, r1
 8007918:	f7f9 f8fe 	bl	8000b18 <__aeabi_dcmpgt>
 800791c:	2800      	cmp	r0, #0
 800791e:	f040 80f9 	bne.w	8007b14 <_dtoa_r+0x6bc>
 8007922:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007926:	4620      	mov	r0, r4
 8007928:	4629      	mov	r1, r5
 800792a:	f7f9 f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800792e:	b118      	cbz	r0, 8007938 <_dtoa_r+0x4e0>
 8007930:	f018 0f01 	tst.w	r8, #1
 8007934:	f040 80ee 	bne.w	8007b14 <_dtoa_r+0x6bc>
 8007938:	4649      	mov	r1, r9
 800793a:	4658      	mov	r0, fp
 800793c:	f000 fc90 	bl	8008260 <_Bfree>
 8007940:	2300      	movs	r3, #0
 8007942:	7033      	strb	r3, [r6, #0]
 8007944:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007946:	3701      	adds	r7, #1
 8007948:	601f      	str	r7, [r3, #0]
 800794a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 831d 	beq.w	8007f8c <_dtoa_r+0xb34>
 8007952:	601e      	str	r6, [r3, #0]
 8007954:	e31a      	b.n	8007f8c <_dtoa_r+0xb34>
 8007956:	07e2      	lsls	r2, r4, #31
 8007958:	d505      	bpl.n	8007966 <_dtoa_r+0x50e>
 800795a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800795e:	f7f8 fe4b 	bl	80005f8 <__aeabi_dmul>
 8007962:	3601      	adds	r6, #1
 8007964:	2301      	movs	r3, #1
 8007966:	1064      	asrs	r4, r4, #1
 8007968:	3508      	adds	r5, #8
 800796a:	e73f      	b.n	80077ec <_dtoa_r+0x394>
 800796c:	2602      	movs	r6, #2
 800796e:	e742      	b.n	80077f6 <_dtoa_r+0x39e>
 8007970:	9c07      	ldr	r4, [sp, #28]
 8007972:	9704      	str	r7, [sp, #16]
 8007974:	e761      	b.n	800783a <_dtoa_r+0x3e2>
 8007976:	4b27      	ldr	r3, [pc, #156]	@ (8007a14 <_dtoa_r+0x5bc>)
 8007978:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800797a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800797e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007982:	4454      	add	r4, sl
 8007984:	2900      	cmp	r1, #0
 8007986:	d053      	beq.n	8007a30 <_dtoa_r+0x5d8>
 8007988:	4928      	ldr	r1, [pc, #160]	@ (8007a2c <_dtoa_r+0x5d4>)
 800798a:	2000      	movs	r0, #0
 800798c:	f7f8 ff5e 	bl	800084c <__aeabi_ddiv>
 8007990:	4633      	mov	r3, r6
 8007992:	462a      	mov	r2, r5
 8007994:	f7f8 fc78 	bl	8000288 <__aeabi_dsub>
 8007998:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800799c:	4656      	mov	r6, sl
 800799e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079a2:	f7f9 f8d9 	bl	8000b58 <__aeabi_d2iz>
 80079a6:	4605      	mov	r5, r0
 80079a8:	f7f8 fdbc 	bl	8000524 <__aeabi_i2d>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079b4:	f7f8 fc68 	bl	8000288 <__aeabi_dsub>
 80079b8:	3530      	adds	r5, #48	@ 0x30
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079c2:	f806 5b01 	strb.w	r5, [r6], #1
 80079c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80079ca:	f7f9 f887 	bl	8000adc <__aeabi_dcmplt>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d171      	bne.n	8007ab6 <_dtoa_r+0x65e>
 80079d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079d6:	4911      	ldr	r1, [pc, #68]	@ (8007a1c <_dtoa_r+0x5c4>)
 80079d8:	2000      	movs	r0, #0
 80079da:	f7f8 fc55 	bl	8000288 <__aeabi_dsub>
 80079de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80079e2:	f7f9 f87b 	bl	8000adc <__aeabi_dcmplt>
 80079e6:	2800      	cmp	r0, #0
 80079e8:	f040 8095 	bne.w	8007b16 <_dtoa_r+0x6be>
 80079ec:	42a6      	cmp	r6, r4
 80079ee:	f43f af50 	beq.w	8007892 <_dtoa_r+0x43a>
 80079f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80079f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007a20 <_dtoa_r+0x5c8>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	f7f8 fdfd 	bl	80005f8 <__aeabi_dmul>
 80079fe:	4b08      	ldr	r3, [pc, #32]	@ (8007a20 <_dtoa_r+0x5c8>)
 8007a00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a04:	2200      	movs	r2, #0
 8007a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a0a:	f7f8 fdf5 	bl	80005f8 <__aeabi_dmul>
 8007a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a12:	e7c4      	b.n	800799e <_dtoa_r+0x546>
 8007a14:	0800a018 	.word	0x0800a018
 8007a18:	08009ff0 	.word	0x08009ff0
 8007a1c:	3ff00000 	.word	0x3ff00000
 8007a20:	40240000 	.word	0x40240000
 8007a24:	401c0000 	.word	0x401c0000
 8007a28:	40140000 	.word	0x40140000
 8007a2c:	3fe00000 	.word	0x3fe00000
 8007a30:	4631      	mov	r1, r6
 8007a32:	4628      	mov	r0, r5
 8007a34:	f7f8 fde0 	bl	80005f8 <__aeabi_dmul>
 8007a38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a3c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007a3e:	4656      	mov	r6, sl
 8007a40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a44:	f7f9 f888 	bl	8000b58 <__aeabi_d2iz>
 8007a48:	4605      	mov	r5, r0
 8007a4a:	f7f8 fd6b 	bl	8000524 <__aeabi_i2d>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	460b      	mov	r3, r1
 8007a52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a56:	f7f8 fc17 	bl	8000288 <__aeabi_dsub>
 8007a5a:	3530      	adds	r5, #48	@ 0x30
 8007a5c:	f806 5b01 	strb.w	r5, [r6], #1
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	42a6      	cmp	r6, r4
 8007a66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a6a:	f04f 0200 	mov.w	r2, #0
 8007a6e:	d124      	bne.n	8007aba <_dtoa_r+0x662>
 8007a70:	4bac      	ldr	r3, [pc, #688]	@ (8007d24 <_dtoa_r+0x8cc>)
 8007a72:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007a76:	f7f8 fc09 	bl	800028c <__adddf3>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a82:	f7f9 f849 	bl	8000b18 <__aeabi_dcmpgt>
 8007a86:	2800      	cmp	r0, #0
 8007a88:	d145      	bne.n	8007b16 <_dtoa_r+0x6be>
 8007a8a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a8e:	49a5      	ldr	r1, [pc, #660]	@ (8007d24 <_dtoa_r+0x8cc>)
 8007a90:	2000      	movs	r0, #0
 8007a92:	f7f8 fbf9 	bl	8000288 <__aeabi_dsub>
 8007a96:	4602      	mov	r2, r0
 8007a98:	460b      	mov	r3, r1
 8007a9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a9e:	f7f9 f81d 	bl	8000adc <__aeabi_dcmplt>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	f43f aef5 	beq.w	8007892 <_dtoa_r+0x43a>
 8007aa8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007aaa:	1e73      	subs	r3, r6, #1
 8007aac:	9315      	str	r3, [sp, #84]	@ 0x54
 8007aae:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007ab2:	2b30      	cmp	r3, #48	@ 0x30
 8007ab4:	d0f8      	beq.n	8007aa8 <_dtoa_r+0x650>
 8007ab6:	9f04      	ldr	r7, [sp, #16]
 8007ab8:	e73e      	b.n	8007938 <_dtoa_r+0x4e0>
 8007aba:	4b9b      	ldr	r3, [pc, #620]	@ (8007d28 <_dtoa_r+0x8d0>)
 8007abc:	f7f8 fd9c 	bl	80005f8 <__aeabi_dmul>
 8007ac0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ac4:	e7bc      	b.n	8007a40 <_dtoa_r+0x5e8>
 8007ac6:	d10c      	bne.n	8007ae2 <_dtoa_r+0x68a>
 8007ac8:	4b98      	ldr	r3, [pc, #608]	@ (8007d2c <_dtoa_r+0x8d4>)
 8007aca:	2200      	movs	r2, #0
 8007acc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007ad0:	f7f8 fd92 	bl	80005f8 <__aeabi_dmul>
 8007ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ad8:	f7f9 f814 	bl	8000b04 <__aeabi_dcmpge>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	f000 8157 	beq.w	8007d90 <_dtoa_r+0x938>
 8007ae2:	2400      	movs	r4, #0
 8007ae4:	4625      	mov	r5, r4
 8007ae6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ae8:	43db      	mvns	r3, r3
 8007aea:	9304      	str	r3, [sp, #16]
 8007aec:	4656      	mov	r6, sl
 8007aee:	2700      	movs	r7, #0
 8007af0:	4621      	mov	r1, r4
 8007af2:	4658      	mov	r0, fp
 8007af4:	f000 fbb4 	bl	8008260 <_Bfree>
 8007af8:	2d00      	cmp	r5, #0
 8007afa:	d0dc      	beq.n	8007ab6 <_dtoa_r+0x65e>
 8007afc:	b12f      	cbz	r7, 8007b0a <_dtoa_r+0x6b2>
 8007afe:	42af      	cmp	r7, r5
 8007b00:	d003      	beq.n	8007b0a <_dtoa_r+0x6b2>
 8007b02:	4639      	mov	r1, r7
 8007b04:	4658      	mov	r0, fp
 8007b06:	f000 fbab 	bl	8008260 <_Bfree>
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	4658      	mov	r0, fp
 8007b0e:	f000 fba7 	bl	8008260 <_Bfree>
 8007b12:	e7d0      	b.n	8007ab6 <_dtoa_r+0x65e>
 8007b14:	9704      	str	r7, [sp, #16]
 8007b16:	4633      	mov	r3, r6
 8007b18:	461e      	mov	r6, r3
 8007b1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b1e:	2a39      	cmp	r2, #57	@ 0x39
 8007b20:	d107      	bne.n	8007b32 <_dtoa_r+0x6da>
 8007b22:	459a      	cmp	sl, r3
 8007b24:	d1f8      	bne.n	8007b18 <_dtoa_r+0x6c0>
 8007b26:	9a04      	ldr	r2, [sp, #16]
 8007b28:	3201      	adds	r2, #1
 8007b2a:	9204      	str	r2, [sp, #16]
 8007b2c:	2230      	movs	r2, #48	@ 0x30
 8007b2e:	f88a 2000 	strb.w	r2, [sl]
 8007b32:	781a      	ldrb	r2, [r3, #0]
 8007b34:	3201      	adds	r2, #1
 8007b36:	701a      	strb	r2, [r3, #0]
 8007b38:	e7bd      	b.n	8007ab6 <_dtoa_r+0x65e>
 8007b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8007d28 <_dtoa_r+0x8d0>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f7f8 fd5b 	bl	80005f8 <__aeabi_dmul>
 8007b42:	2200      	movs	r2, #0
 8007b44:	2300      	movs	r3, #0
 8007b46:	4604      	mov	r4, r0
 8007b48:	460d      	mov	r5, r1
 8007b4a:	f7f8 ffbd 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	f43f aebb 	beq.w	80078ca <_dtoa_r+0x472>
 8007b54:	e6f0      	b.n	8007938 <_dtoa_r+0x4e0>
 8007b56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007b58:	2a00      	cmp	r2, #0
 8007b5a:	f000 80db 	beq.w	8007d14 <_dtoa_r+0x8bc>
 8007b5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b60:	2a01      	cmp	r2, #1
 8007b62:	f300 80bf 	bgt.w	8007ce4 <_dtoa_r+0x88c>
 8007b66:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007b68:	2a00      	cmp	r2, #0
 8007b6a:	f000 80b7 	beq.w	8007cdc <_dtoa_r+0x884>
 8007b6e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007b72:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b74:	4646      	mov	r6, r8
 8007b76:	9a08      	ldr	r2, [sp, #32]
 8007b78:	2101      	movs	r1, #1
 8007b7a:	441a      	add	r2, r3
 8007b7c:	4658      	mov	r0, fp
 8007b7e:	4498      	add	r8, r3
 8007b80:	9208      	str	r2, [sp, #32]
 8007b82:	f000 fc21 	bl	80083c8 <__i2b>
 8007b86:	4605      	mov	r5, r0
 8007b88:	b15e      	cbz	r6, 8007ba2 <_dtoa_r+0x74a>
 8007b8a:	9b08      	ldr	r3, [sp, #32]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	dd08      	ble.n	8007ba2 <_dtoa_r+0x74a>
 8007b90:	42b3      	cmp	r3, r6
 8007b92:	9a08      	ldr	r2, [sp, #32]
 8007b94:	bfa8      	it	ge
 8007b96:	4633      	movge	r3, r6
 8007b98:	eba8 0803 	sub.w	r8, r8, r3
 8007b9c:	1af6      	subs	r6, r6, r3
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	9308      	str	r3, [sp, #32]
 8007ba2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ba4:	b1f3      	cbz	r3, 8007be4 <_dtoa_r+0x78c>
 8007ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 80b7 	beq.w	8007d1c <_dtoa_r+0x8c4>
 8007bae:	b18c      	cbz	r4, 8007bd4 <_dtoa_r+0x77c>
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	4622      	mov	r2, r4
 8007bb4:	4658      	mov	r0, fp
 8007bb6:	f000 fcc7 	bl	8008548 <__pow5mult>
 8007bba:	464a      	mov	r2, r9
 8007bbc:	4601      	mov	r1, r0
 8007bbe:	4605      	mov	r5, r0
 8007bc0:	4658      	mov	r0, fp
 8007bc2:	f000 fc17 	bl	80083f4 <__multiply>
 8007bc6:	4649      	mov	r1, r9
 8007bc8:	9004      	str	r0, [sp, #16]
 8007bca:	4658      	mov	r0, fp
 8007bcc:	f000 fb48 	bl	8008260 <_Bfree>
 8007bd0:	9b04      	ldr	r3, [sp, #16]
 8007bd2:	4699      	mov	r9, r3
 8007bd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bd6:	1b1a      	subs	r2, r3, r4
 8007bd8:	d004      	beq.n	8007be4 <_dtoa_r+0x78c>
 8007bda:	4649      	mov	r1, r9
 8007bdc:	4658      	mov	r0, fp
 8007bde:	f000 fcb3 	bl	8008548 <__pow5mult>
 8007be2:	4681      	mov	r9, r0
 8007be4:	2101      	movs	r1, #1
 8007be6:	4658      	mov	r0, fp
 8007be8:	f000 fbee 	bl	80083c8 <__i2b>
 8007bec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bee:	4604      	mov	r4, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f000 81cf 	beq.w	8007f94 <_dtoa_r+0xb3c>
 8007bf6:	461a      	mov	r2, r3
 8007bf8:	4601      	mov	r1, r0
 8007bfa:	4658      	mov	r0, fp
 8007bfc:	f000 fca4 	bl	8008548 <__pow5mult>
 8007c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	4604      	mov	r4, r0
 8007c06:	f300 8095 	bgt.w	8007d34 <_dtoa_r+0x8dc>
 8007c0a:	9b02      	ldr	r3, [sp, #8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f040 8087 	bne.w	8007d20 <_dtoa_r+0x8c8>
 8007c12:	9b03      	ldr	r3, [sp, #12]
 8007c14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f040 8089 	bne.w	8007d30 <_dtoa_r+0x8d8>
 8007c1e:	9b03      	ldr	r3, [sp, #12]
 8007c20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c24:	0d1b      	lsrs	r3, r3, #20
 8007c26:	051b      	lsls	r3, r3, #20
 8007c28:	b12b      	cbz	r3, 8007c36 <_dtoa_r+0x7de>
 8007c2a:	9b08      	ldr	r3, [sp, #32]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	9308      	str	r3, [sp, #32]
 8007c30:	f108 0801 	add.w	r8, r8, #1
 8007c34:	2301      	movs	r3, #1
 8007c36:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	f000 81b0 	beq.w	8007fa0 <_dtoa_r+0xb48>
 8007c40:	6923      	ldr	r3, [r4, #16]
 8007c42:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c46:	6918      	ldr	r0, [r3, #16]
 8007c48:	f000 fb72 	bl	8008330 <__hi0bits>
 8007c4c:	f1c0 0020 	rsb	r0, r0, #32
 8007c50:	9b08      	ldr	r3, [sp, #32]
 8007c52:	4418      	add	r0, r3
 8007c54:	f010 001f 	ands.w	r0, r0, #31
 8007c58:	d077      	beq.n	8007d4a <_dtoa_r+0x8f2>
 8007c5a:	f1c0 0320 	rsb	r3, r0, #32
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	dd6b      	ble.n	8007d3a <_dtoa_r+0x8e2>
 8007c62:	9b08      	ldr	r3, [sp, #32]
 8007c64:	f1c0 001c 	rsb	r0, r0, #28
 8007c68:	4403      	add	r3, r0
 8007c6a:	4480      	add	r8, r0
 8007c6c:	4406      	add	r6, r0
 8007c6e:	9308      	str	r3, [sp, #32]
 8007c70:	f1b8 0f00 	cmp.w	r8, #0
 8007c74:	dd05      	ble.n	8007c82 <_dtoa_r+0x82a>
 8007c76:	4649      	mov	r1, r9
 8007c78:	4642      	mov	r2, r8
 8007c7a:	4658      	mov	r0, fp
 8007c7c:	f000 fcbe 	bl	80085fc <__lshift>
 8007c80:	4681      	mov	r9, r0
 8007c82:	9b08      	ldr	r3, [sp, #32]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	dd05      	ble.n	8007c94 <_dtoa_r+0x83c>
 8007c88:	4621      	mov	r1, r4
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4658      	mov	r0, fp
 8007c8e:	f000 fcb5 	bl	80085fc <__lshift>
 8007c92:	4604      	mov	r4, r0
 8007c94:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d059      	beq.n	8007d4e <_dtoa_r+0x8f6>
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	4648      	mov	r0, r9
 8007c9e:	f000 fd19 	bl	80086d4 <__mcmp>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	da53      	bge.n	8007d4e <_dtoa_r+0x8f6>
 8007ca6:	1e7b      	subs	r3, r7, #1
 8007ca8:	9304      	str	r3, [sp, #16]
 8007caa:	4649      	mov	r1, r9
 8007cac:	2300      	movs	r3, #0
 8007cae:	220a      	movs	r2, #10
 8007cb0:	4658      	mov	r0, fp
 8007cb2:	f000 faf7 	bl	80082a4 <__multadd>
 8007cb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cb8:	4681      	mov	r9, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 8172 	beq.w	8007fa4 <_dtoa_r+0xb4c>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	4629      	mov	r1, r5
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	4658      	mov	r0, fp
 8007cc8:	f000 faec 	bl	80082a4 <__multadd>
 8007ccc:	9b00      	ldr	r3, [sp, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	4605      	mov	r5, r0
 8007cd2:	dc67      	bgt.n	8007da4 <_dtoa_r+0x94c>
 8007cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	dc41      	bgt.n	8007d5e <_dtoa_r+0x906>
 8007cda:	e063      	b.n	8007da4 <_dtoa_r+0x94c>
 8007cdc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007cde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ce2:	e746      	b.n	8007b72 <_dtoa_r+0x71a>
 8007ce4:	9b07      	ldr	r3, [sp, #28]
 8007ce6:	1e5c      	subs	r4, r3, #1
 8007ce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cea:	42a3      	cmp	r3, r4
 8007cec:	bfbf      	itttt	lt
 8007cee:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007cf0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007cf2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007cf4:	1ae3      	sublt	r3, r4, r3
 8007cf6:	bfb4      	ite	lt
 8007cf8:	18d2      	addlt	r2, r2, r3
 8007cfa:	1b1c      	subge	r4, r3, r4
 8007cfc:	9b07      	ldr	r3, [sp, #28]
 8007cfe:	bfbc      	itt	lt
 8007d00:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007d02:	2400      	movlt	r4, #0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	bfb5      	itete	lt
 8007d08:	eba8 0603 	sublt.w	r6, r8, r3
 8007d0c:	9b07      	ldrge	r3, [sp, #28]
 8007d0e:	2300      	movlt	r3, #0
 8007d10:	4646      	movge	r6, r8
 8007d12:	e730      	b.n	8007b76 <_dtoa_r+0x71e>
 8007d14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007d16:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007d18:	4646      	mov	r6, r8
 8007d1a:	e735      	b.n	8007b88 <_dtoa_r+0x730>
 8007d1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007d1e:	e75c      	b.n	8007bda <_dtoa_r+0x782>
 8007d20:	2300      	movs	r3, #0
 8007d22:	e788      	b.n	8007c36 <_dtoa_r+0x7de>
 8007d24:	3fe00000 	.word	0x3fe00000
 8007d28:	40240000 	.word	0x40240000
 8007d2c:	40140000 	.word	0x40140000
 8007d30:	9b02      	ldr	r3, [sp, #8]
 8007d32:	e780      	b.n	8007c36 <_dtoa_r+0x7de>
 8007d34:	2300      	movs	r3, #0
 8007d36:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d38:	e782      	b.n	8007c40 <_dtoa_r+0x7e8>
 8007d3a:	d099      	beq.n	8007c70 <_dtoa_r+0x818>
 8007d3c:	9a08      	ldr	r2, [sp, #32]
 8007d3e:	331c      	adds	r3, #28
 8007d40:	441a      	add	r2, r3
 8007d42:	4498      	add	r8, r3
 8007d44:	441e      	add	r6, r3
 8007d46:	9208      	str	r2, [sp, #32]
 8007d48:	e792      	b.n	8007c70 <_dtoa_r+0x818>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	e7f6      	b.n	8007d3c <_dtoa_r+0x8e4>
 8007d4e:	9b07      	ldr	r3, [sp, #28]
 8007d50:	9704      	str	r7, [sp, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dc20      	bgt.n	8007d98 <_dtoa_r+0x940>
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	dd1e      	ble.n	8007d9c <_dtoa_r+0x944>
 8007d5e:	9b00      	ldr	r3, [sp, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	f47f aec0 	bne.w	8007ae6 <_dtoa_r+0x68e>
 8007d66:	4621      	mov	r1, r4
 8007d68:	2205      	movs	r2, #5
 8007d6a:	4658      	mov	r0, fp
 8007d6c:	f000 fa9a 	bl	80082a4 <__multadd>
 8007d70:	4601      	mov	r1, r0
 8007d72:	4604      	mov	r4, r0
 8007d74:	4648      	mov	r0, r9
 8007d76:	f000 fcad 	bl	80086d4 <__mcmp>
 8007d7a:	2800      	cmp	r0, #0
 8007d7c:	f77f aeb3 	ble.w	8007ae6 <_dtoa_r+0x68e>
 8007d80:	4656      	mov	r6, sl
 8007d82:	2331      	movs	r3, #49	@ 0x31
 8007d84:	f806 3b01 	strb.w	r3, [r6], #1
 8007d88:	9b04      	ldr	r3, [sp, #16]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	9304      	str	r3, [sp, #16]
 8007d8e:	e6ae      	b.n	8007aee <_dtoa_r+0x696>
 8007d90:	9c07      	ldr	r4, [sp, #28]
 8007d92:	9704      	str	r7, [sp, #16]
 8007d94:	4625      	mov	r5, r4
 8007d96:	e7f3      	b.n	8007d80 <_dtoa_r+0x928>
 8007d98:	9b07      	ldr	r3, [sp, #28]
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 8104 	beq.w	8007fac <_dtoa_r+0xb54>
 8007da4:	2e00      	cmp	r6, #0
 8007da6:	dd05      	ble.n	8007db4 <_dtoa_r+0x95c>
 8007da8:	4629      	mov	r1, r5
 8007daa:	4632      	mov	r2, r6
 8007dac:	4658      	mov	r0, fp
 8007dae:	f000 fc25 	bl	80085fc <__lshift>
 8007db2:	4605      	mov	r5, r0
 8007db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d05a      	beq.n	8007e70 <_dtoa_r+0xa18>
 8007dba:	6869      	ldr	r1, [r5, #4]
 8007dbc:	4658      	mov	r0, fp
 8007dbe:	f000 fa0f 	bl	80081e0 <_Balloc>
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	b928      	cbnz	r0, 8007dd2 <_dtoa_r+0x97a>
 8007dc6:	4b84      	ldr	r3, [pc, #528]	@ (8007fd8 <_dtoa_r+0xb80>)
 8007dc8:	4602      	mov	r2, r0
 8007dca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007dce:	f7ff bb5a 	b.w	8007486 <_dtoa_r+0x2e>
 8007dd2:	692a      	ldr	r2, [r5, #16]
 8007dd4:	3202      	adds	r2, #2
 8007dd6:	0092      	lsls	r2, r2, #2
 8007dd8:	f105 010c 	add.w	r1, r5, #12
 8007ddc:	300c      	adds	r0, #12
 8007dde:	f000 ffaf 	bl	8008d40 <memcpy>
 8007de2:	2201      	movs	r2, #1
 8007de4:	4631      	mov	r1, r6
 8007de6:	4658      	mov	r0, fp
 8007de8:	f000 fc08 	bl	80085fc <__lshift>
 8007dec:	f10a 0301 	add.w	r3, sl, #1
 8007df0:	9307      	str	r3, [sp, #28]
 8007df2:	9b00      	ldr	r3, [sp, #0]
 8007df4:	4453      	add	r3, sl
 8007df6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007df8:	9b02      	ldr	r3, [sp, #8]
 8007dfa:	f003 0301 	and.w	r3, r3, #1
 8007dfe:	462f      	mov	r7, r5
 8007e00:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e02:	4605      	mov	r5, r0
 8007e04:	9b07      	ldr	r3, [sp, #28]
 8007e06:	4621      	mov	r1, r4
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	4648      	mov	r0, r9
 8007e0c:	9300      	str	r3, [sp, #0]
 8007e0e:	f7ff fa98 	bl	8007342 <quorem>
 8007e12:	4639      	mov	r1, r7
 8007e14:	9002      	str	r0, [sp, #8]
 8007e16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007e1a:	4648      	mov	r0, r9
 8007e1c:	f000 fc5a 	bl	80086d4 <__mcmp>
 8007e20:	462a      	mov	r2, r5
 8007e22:	9008      	str	r0, [sp, #32]
 8007e24:	4621      	mov	r1, r4
 8007e26:	4658      	mov	r0, fp
 8007e28:	f000 fc70 	bl	800870c <__mdiff>
 8007e2c:	68c2      	ldr	r2, [r0, #12]
 8007e2e:	4606      	mov	r6, r0
 8007e30:	bb02      	cbnz	r2, 8007e74 <_dtoa_r+0xa1c>
 8007e32:	4601      	mov	r1, r0
 8007e34:	4648      	mov	r0, r9
 8007e36:	f000 fc4d 	bl	80086d4 <__mcmp>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	4631      	mov	r1, r6
 8007e3e:	4658      	mov	r0, fp
 8007e40:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e42:	f000 fa0d 	bl	8008260 <_Bfree>
 8007e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e48:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e4a:	9e07      	ldr	r6, [sp, #28]
 8007e4c:	ea43 0102 	orr.w	r1, r3, r2
 8007e50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e52:	4319      	orrs	r1, r3
 8007e54:	d110      	bne.n	8007e78 <_dtoa_r+0xa20>
 8007e56:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e5a:	d029      	beq.n	8007eb0 <_dtoa_r+0xa58>
 8007e5c:	9b08      	ldr	r3, [sp, #32]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	dd02      	ble.n	8007e68 <_dtoa_r+0xa10>
 8007e62:	9b02      	ldr	r3, [sp, #8]
 8007e64:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007e68:	9b00      	ldr	r3, [sp, #0]
 8007e6a:	f883 8000 	strb.w	r8, [r3]
 8007e6e:	e63f      	b.n	8007af0 <_dtoa_r+0x698>
 8007e70:	4628      	mov	r0, r5
 8007e72:	e7bb      	b.n	8007dec <_dtoa_r+0x994>
 8007e74:	2201      	movs	r2, #1
 8007e76:	e7e1      	b.n	8007e3c <_dtoa_r+0x9e4>
 8007e78:	9b08      	ldr	r3, [sp, #32]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	db04      	blt.n	8007e88 <_dtoa_r+0xa30>
 8007e7e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e80:	430b      	orrs	r3, r1
 8007e82:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007e84:	430b      	orrs	r3, r1
 8007e86:	d120      	bne.n	8007eca <_dtoa_r+0xa72>
 8007e88:	2a00      	cmp	r2, #0
 8007e8a:	dded      	ble.n	8007e68 <_dtoa_r+0xa10>
 8007e8c:	4649      	mov	r1, r9
 8007e8e:	2201      	movs	r2, #1
 8007e90:	4658      	mov	r0, fp
 8007e92:	f000 fbb3 	bl	80085fc <__lshift>
 8007e96:	4621      	mov	r1, r4
 8007e98:	4681      	mov	r9, r0
 8007e9a:	f000 fc1b 	bl	80086d4 <__mcmp>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	dc03      	bgt.n	8007eaa <_dtoa_r+0xa52>
 8007ea2:	d1e1      	bne.n	8007e68 <_dtoa_r+0xa10>
 8007ea4:	f018 0f01 	tst.w	r8, #1
 8007ea8:	d0de      	beq.n	8007e68 <_dtoa_r+0xa10>
 8007eaa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007eae:	d1d8      	bne.n	8007e62 <_dtoa_r+0xa0a>
 8007eb0:	9a00      	ldr	r2, [sp, #0]
 8007eb2:	2339      	movs	r3, #57	@ 0x39
 8007eb4:	7013      	strb	r3, [r2, #0]
 8007eb6:	4633      	mov	r3, r6
 8007eb8:	461e      	mov	r6, r3
 8007eba:	3b01      	subs	r3, #1
 8007ebc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007ec0:	2a39      	cmp	r2, #57	@ 0x39
 8007ec2:	d052      	beq.n	8007f6a <_dtoa_r+0xb12>
 8007ec4:	3201      	adds	r2, #1
 8007ec6:	701a      	strb	r2, [r3, #0]
 8007ec8:	e612      	b.n	8007af0 <_dtoa_r+0x698>
 8007eca:	2a00      	cmp	r2, #0
 8007ecc:	dd07      	ble.n	8007ede <_dtoa_r+0xa86>
 8007ece:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ed2:	d0ed      	beq.n	8007eb0 <_dtoa_r+0xa58>
 8007ed4:	9a00      	ldr	r2, [sp, #0]
 8007ed6:	f108 0301 	add.w	r3, r8, #1
 8007eda:	7013      	strb	r3, [r2, #0]
 8007edc:	e608      	b.n	8007af0 <_dtoa_r+0x698>
 8007ede:	9b07      	ldr	r3, [sp, #28]
 8007ee0:	9a07      	ldr	r2, [sp, #28]
 8007ee2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007ee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d028      	beq.n	8007f3e <_dtoa_r+0xae6>
 8007eec:	4649      	mov	r1, r9
 8007eee:	2300      	movs	r3, #0
 8007ef0:	220a      	movs	r2, #10
 8007ef2:	4658      	mov	r0, fp
 8007ef4:	f000 f9d6 	bl	80082a4 <__multadd>
 8007ef8:	42af      	cmp	r7, r5
 8007efa:	4681      	mov	r9, r0
 8007efc:	f04f 0300 	mov.w	r3, #0
 8007f00:	f04f 020a 	mov.w	r2, #10
 8007f04:	4639      	mov	r1, r7
 8007f06:	4658      	mov	r0, fp
 8007f08:	d107      	bne.n	8007f1a <_dtoa_r+0xac2>
 8007f0a:	f000 f9cb 	bl	80082a4 <__multadd>
 8007f0e:	4607      	mov	r7, r0
 8007f10:	4605      	mov	r5, r0
 8007f12:	9b07      	ldr	r3, [sp, #28]
 8007f14:	3301      	adds	r3, #1
 8007f16:	9307      	str	r3, [sp, #28]
 8007f18:	e774      	b.n	8007e04 <_dtoa_r+0x9ac>
 8007f1a:	f000 f9c3 	bl	80082a4 <__multadd>
 8007f1e:	4629      	mov	r1, r5
 8007f20:	4607      	mov	r7, r0
 8007f22:	2300      	movs	r3, #0
 8007f24:	220a      	movs	r2, #10
 8007f26:	4658      	mov	r0, fp
 8007f28:	f000 f9bc 	bl	80082a4 <__multadd>
 8007f2c:	4605      	mov	r5, r0
 8007f2e:	e7f0      	b.n	8007f12 <_dtoa_r+0xaba>
 8007f30:	9b00      	ldr	r3, [sp, #0]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	bfcc      	ite	gt
 8007f36:	461e      	movgt	r6, r3
 8007f38:	2601      	movle	r6, #1
 8007f3a:	4456      	add	r6, sl
 8007f3c:	2700      	movs	r7, #0
 8007f3e:	4649      	mov	r1, r9
 8007f40:	2201      	movs	r2, #1
 8007f42:	4658      	mov	r0, fp
 8007f44:	f000 fb5a 	bl	80085fc <__lshift>
 8007f48:	4621      	mov	r1, r4
 8007f4a:	4681      	mov	r9, r0
 8007f4c:	f000 fbc2 	bl	80086d4 <__mcmp>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	dcb0      	bgt.n	8007eb6 <_dtoa_r+0xa5e>
 8007f54:	d102      	bne.n	8007f5c <_dtoa_r+0xb04>
 8007f56:	f018 0f01 	tst.w	r8, #1
 8007f5a:	d1ac      	bne.n	8007eb6 <_dtoa_r+0xa5e>
 8007f5c:	4633      	mov	r3, r6
 8007f5e:	461e      	mov	r6, r3
 8007f60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f64:	2a30      	cmp	r2, #48	@ 0x30
 8007f66:	d0fa      	beq.n	8007f5e <_dtoa_r+0xb06>
 8007f68:	e5c2      	b.n	8007af0 <_dtoa_r+0x698>
 8007f6a:	459a      	cmp	sl, r3
 8007f6c:	d1a4      	bne.n	8007eb8 <_dtoa_r+0xa60>
 8007f6e:	9b04      	ldr	r3, [sp, #16]
 8007f70:	3301      	adds	r3, #1
 8007f72:	9304      	str	r3, [sp, #16]
 8007f74:	2331      	movs	r3, #49	@ 0x31
 8007f76:	f88a 3000 	strb.w	r3, [sl]
 8007f7a:	e5b9      	b.n	8007af0 <_dtoa_r+0x698>
 8007f7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f7e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007fdc <_dtoa_r+0xb84>
 8007f82:	b11b      	cbz	r3, 8007f8c <_dtoa_r+0xb34>
 8007f84:	f10a 0308 	add.w	r3, sl, #8
 8007f88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f8a:	6013      	str	r3, [r2, #0]
 8007f8c:	4650      	mov	r0, sl
 8007f8e:	b019      	add	sp, #100	@ 0x64
 8007f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	f77f ae37 	ble.w	8007c0a <_dtoa_r+0x7b2>
 8007f9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fa0:	2001      	movs	r0, #1
 8007fa2:	e655      	b.n	8007c50 <_dtoa_r+0x7f8>
 8007fa4:	9b00      	ldr	r3, [sp, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f77f aed6 	ble.w	8007d58 <_dtoa_r+0x900>
 8007fac:	4656      	mov	r6, sl
 8007fae:	4621      	mov	r1, r4
 8007fb0:	4648      	mov	r0, r9
 8007fb2:	f7ff f9c6 	bl	8007342 <quorem>
 8007fb6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007fba:	f806 8b01 	strb.w	r8, [r6], #1
 8007fbe:	9b00      	ldr	r3, [sp, #0]
 8007fc0:	eba6 020a 	sub.w	r2, r6, sl
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	ddb3      	ble.n	8007f30 <_dtoa_r+0xad8>
 8007fc8:	4649      	mov	r1, r9
 8007fca:	2300      	movs	r3, #0
 8007fcc:	220a      	movs	r2, #10
 8007fce:	4658      	mov	r0, fp
 8007fd0:	f000 f968 	bl	80082a4 <__multadd>
 8007fd4:	4681      	mov	r9, r0
 8007fd6:	e7ea      	b.n	8007fae <_dtoa_r+0xb56>
 8007fd8:	08009f78 	.word	0x08009f78
 8007fdc:	08009efc 	.word	0x08009efc

08007fe0 <_free_r>:
 8007fe0:	b538      	push	{r3, r4, r5, lr}
 8007fe2:	4605      	mov	r5, r0
 8007fe4:	2900      	cmp	r1, #0
 8007fe6:	d041      	beq.n	800806c <_free_r+0x8c>
 8007fe8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fec:	1f0c      	subs	r4, r1, #4
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bfb8      	it	lt
 8007ff2:	18e4      	addlt	r4, r4, r3
 8007ff4:	f000 f8e8 	bl	80081c8 <__malloc_lock>
 8007ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8008070 <_free_r+0x90>)
 8007ffa:	6813      	ldr	r3, [r2, #0]
 8007ffc:	b933      	cbnz	r3, 800800c <_free_r+0x2c>
 8007ffe:	6063      	str	r3, [r4, #4]
 8008000:	6014      	str	r4, [r2, #0]
 8008002:	4628      	mov	r0, r5
 8008004:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008008:	f000 b8e4 	b.w	80081d4 <__malloc_unlock>
 800800c:	42a3      	cmp	r3, r4
 800800e:	d908      	bls.n	8008022 <_free_r+0x42>
 8008010:	6820      	ldr	r0, [r4, #0]
 8008012:	1821      	adds	r1, r4, r0
 8008014:	428b      	cmp	r3, r1
 8008016:	bf01      	itttt	eq
 8008018:	6819      	ldreq	r1, [r3, #0]
 800801a:	685b      	ldreq	r3, [r3, #4]
 800801c:	1809      	addeq	r1, r1, r0
 800801e:	6021      	streq	r1, [r4, #0]
 8008020:	e7ed      	b.n	8007ffe <_free_r+0x1e>
 8008022:	461a      	mov	r2, r3
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	b10b      	cbz	r3, 800802c <_free_r+0x4c>
 8008028:	42a3      	cmp	r3, r4
 800802a:	d9fa      	bls.n	8008022 <_free_r+0x42>
 800802c:	6811      	ldr	r1, [r2, #0]
 800802e:	1850      	adds	r0, r2, r1
 8008030:	42a0      	cmp	r0, r4
 8008032:	d10b      	bne.n	800804c <_free_r+0x6c>
 8008034:	6820      	ldr	r0, [r4, #0]
 8008036:	4401      	add	r1, r0
 8008038:	1850      	adds	r0, r2, r1
 800803a:	4283      	cmp	r3, r0
 800803c:	6011      	str	r1, [r2, #0]
 800803e:	d1e0      	bne.n	8008002 <_free_r+0x22>
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	6053      	str	r3, [r2, #4]
 8008046:	4408      	add	r0, r1
 8008048:	6010      	str	r0, [r2, #0]
 800804a:	e7da      	b.n	8008002 <_free_r+0x22>
 800804c:	d902      	bls.n	8008054 <_free_r+0x74>
 800804e:	230c      	movs	r3, #12
 8008050:	602b      	str	r3, [r5, #0]
 8008052:	e7d6      	b.n	8008002 <_free_r+0x22>
 8008054:	6820      	ldr	r0, [r4, #0]
 8008056:	1821      	adds	r1, r4, r0
 8008058:	428b      	cmp	r3, r1
 800805a:	bf04      	itt	eq
 800805c:	6819      	ldreq	r1, [r3, #0]
 800805e:	685b      	ldreq	r3, [r3, #4]
 8008060:	6063      	str	r3, [r4, #4]
 8008062:	bf04      	itt	eq
 8008064:	1809      	addeq	r1, r1, r0
 8008066:	6021      	streq	r1, [r4, #0]
 8008068:	6054      	str	r4, [r2, #4]
 800806a:	e7ca      	b.n	8008002 <_free_r+0x22>
 800806c:	bd38      	pop	{r3, r4, r5, pc}
 800806e:	bf00      	nop
 8008070:	20000dd4 	.word	0x20000dd4

08008074 <malloc>:
 8008074:	4b02      	ldr	r3, [pc, #8]	@ (8008080 <malloc+0xc>)
 8008076:	4601      	mov	r1, r0
 8008078:	6818      	ldr	r0, [r3, #0]
 800807a:	f000 b825 	b.w	80080c8 <_malloc_r>
 800807e:	bf00      	nop
 8008080:	20000020 	.word	0x20000020

08008084 <sbrk_aligned>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	4e0f      	ldr	r6, [pc, #60]	@ (80080c4 <sbrk_aligned+0x40>)
 8008088:	460c      	mov	r4, r1
 800808a:	6831      	ldr	r1, [r6, #0]
 800808c:	4605      	mov	r5, r0
 800808e:	b911      	cbnz	r1, 8008096 <sbrk_aligned+0x12>
 8008090:	f000 fe46 	bl	8008d20 <_sbrk_r>
 8008094:	6030      	str	r0, [r6, #0]
 8008096:	4621      	mov	r1, r4
 8008098:	4628      	mov	r0, r5
 800809a:	f000 fe41 	bl	8008d20 <_sbrk_r>
 800809e:	1c43      	adds	r3, r0, #1
 80080a0:	d103      	bne.n	80080aa <sbrk_aligned+0x26>
 80080a2:	f04f 34ff 	mov.w	r4, #4294967295
 80080a6:	4620      	mov	r0, r4
 80080a8:	bd70      	pop	{r4, r5, r6, pc}
 80080aa:	1cc4      	adds	r4, r0, #3
 80080ac:	f024 0403 	bic.w	r4, r4, #3
 80080b0:	42a0      	cmp	r0, r4
 80080b2:	d0f8      	beq.n	80080a6 <sbrk_aligned+0x22>
 80080b4:	1a21      	subs	r1, r4, r0
 80080b6:	4628      	mov	r0, r5
 80080b8:	f000 fe32 	bl	8008d20 <_sbrk_r>
 80080bc:	3001      	adds	r0, #1
 80080be:	d1f2      	bne.n	80080a6 <sbrk_aligned+0x22>
 80080c0:	e7ef      	b.n	80080a2 <sbrk_aligned+0x1e>
 80080c2:	bf00      	nop
 80080c4:	20000dd0 	.word	0x20000dd0

080080c8 <_malloc_r>:
 80080c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080cc:	1ccd      	adds	r5, r1, #3
 80080ce:	f025 0503 	bic.w	r5, r5, #3
 80080d2:	3508      	adds	r5, #8
 80080d4:	2d0c      	cmp	r5, #12
 80080d6:	bf38      	it	cc
 80080d8:	250c      	movcc	r5, #12
 80080da:	2d00      	cmp	r5, #0
 80080dc:	4606      	mov	r6, r0
 80080de:	db01      	blt.n	80080e4 <_malloc_r+0x1c>
 80080e0:	42a9      	cmp	r1, r5
 80080e2:	d904      	bls.n	80080ee <_malloc_r+0x26>
 80080e4:	230c      	movs	r3, #12
 80080e6:	6033      	str	r3, [r6, #0]
 80080e8:	2000      	movs	r0, #0
 80080ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80081c4 <_malloc_r+0xfc>
 80080f2:	f000 f869 	bl	80081c8 <__malloc_lock>
 80080f6:	f8d8 3000 	ldr.w	r3, [r8]
 80080fa:	461c      	mov	r4, r3
 80080fc:	bb44      	cbnz	r4, 8008150 <_malloc_r+0x88>
 80080fe:	4629      	mov	r1, r5
 8008100:	4630      	mov	r0, r6
 8008102:	f7ff ffbf 	bl	8008084 <sbrk_aligned>
 8008106:	1c43      	adds	r3, r0, #1
 8008108:	4604      	mov	r4, r0
 800810a:	d158      	bne.n	80081be <_malloc_r+0xf6>
 800810c:	f8d8 4000 	ldr.w	r4, [r8]
 8008110:	4627      	mov	r7, r4
 8008112:	2f00      	cmp	r7, #0
 8008114:	d143      	bne.n	800819e <_malloc_r+0xd6>
 8008116:	2c00      	cmp	r4, #0
 8008118:	d04b      	beq.n	80081b2 <_malloc_r+0xea>
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	4639      	mov	r1, r7
 800811e:	4630      	mov	r0, r6
 8008120:	eb04 0903 	add.w	r9, r4, r3
 8008124:	f000 fdfc 	bl	8008d20 <_sbrk_r>
 8008128:	4581      	cmp	r9, r0
 800812a:	d142      	bne.n	80081b2 <_malloc_r+0xea>
 800812c:	6821      	ldr	r1, [r4, #0]
 800812e:	1a6d      	subs	r5, r5, r1
 8008130:	4629      	mov	r1, r5
 8008132:	4630      	mov	r0, r6
 8008134:	f7ff ffa6 	bl	8008084 <sbrk_aligned>
 8008138:	3001      	adds	r0, #1
 800813a:	d03a      	beq.n	80081b2 <_malloc_r+0xea>
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	442b      	add	r3, r5
 8008140:	6023      	str	r3, [r4, #0]
 8008142:	f8d8 3000 	ldr.w	r3, [r8]
 8008146:	685a      	ldr	r2, [r3, #4]
 8008148:	bb62      	cbnz	r2, 80081a4 <_malloc_r+0xdc>
 800814a:	f8c8 7000 	str.w	r7, [r8]
 800814e:	e00f      	b.n	8008170 <_malloc_r+0xa8>
 8008150:	6822      	ldr	r2, [r4, #0]
 8008152:	1b52      	subs	r2, r2, r5
 8008154:	d420      	bmi.n	8008198 <_malloc_r+0xd0>
 8008156:	2a0b      	cmp	r2, #11
 8008158:	d917      	bls.n	800818a <_malloc_r+0xc2>
 800815a:	1961      	adds	r1, r4, r5
 800815c:	42a3      	cmp	r3, r4
 800815e:	6025      	str	r5, [r4, #0]
 8008160:	bf18      	it	ne
 8008162:	6059      	strne	r1, [r3, #4]
 8008164:	6863      	ldr	r3, [r4, #4]
 8008166:	bf08      	it	eq
 8008168:	f8c8 1000 	streq.w	r1, [r8]
 800816c:	5162      	str	r2, [r4, r5]
 800816e:	604b      	str	r3, [r1, #4]
 8008170:	4630      	mov	r0, r6
 8008172:	f000 f82f 	bl	80081d4 <__malloc_unlock>
 8008176:	f104 000b 	add.w	r0, r4, #11
 800817a:	1d23      	adds	r3, r4, #4
 800817c:	f020 0007 	bic.w	r0, r0, #7
 8008180:	1ac2      	subs	r2, r0, r3
 8008182:	bf1c      	itt	ne
 8008184:	1a1b      	subne	r3, r3, r0
 8008186:	50a3      	strne	r3, [r4, r2]
 8008188:	e7af      	b.n	80080ea <_malloc_r+0x22>
 800818a:	6862      	ldr	r2, [r4, #4]
 800818c:	42a3      	cmp	r3, r4
 800818e:	bf0c      	ite	eq
 8008190:	f8c8 2000 	streq.w	r2, [r8]
 8008194:	605a      	strne	r2, [r3, #4]
 8008196:	e7eb      	b.n	8008170 <_malloc_r+0xa8>
 8008198:	4623      	mov	r3, r4
 800819a:	6864      	ldr	r4, [r4, #4]
 800819c:	e7ae      	b.n	80080fc <_malloc_r+0x34>
 800819e:	463c      	mov	r4, r7
 80081a0:	687f      	ldr	r7, [r7, #4]
 80081a2:	e7b6      	b.n	8008112 <_malloc_r+0x4a>
 80081a4:	461a      	mov	r2, r3
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	d1fb      	bne.n	80081a4 <_malloc_r+0xdc>
 80081ac:	2300      	movs	r3, #0
 80081ae:	6053      	str	r3, [r2, #4]
 80081b0:	e7de      	b.n	8008170 <_malloc_r+0xa8>
 80081b2:	230c      	movs	r3, #12
 80081b4:	6033      	str	r3, [r6, #0]
 80081b6:	4630      	mov	r0, r6
 80081b8:	f000 f80c 	bl	80081d4 <__malloc_unlock>
 80081bc:	e794      	b.n	80080e8 <_malloc_r+0x20>
 80081be:	6005      	str	r5, [r0, #0]
 80081c0:	e7d6      	b.n	8008170 <_malloc_r+0xa8>
 80081c2:	bf00      	nop
 80081c4:	20000dd4 	.word	0x20000dd4

080081c8 <__malloc_lock>:
 80081c8:	4801      	ldr	r0, [pc, #4]	@ (80081d0 <__malloc_lock+0x8>)
 80081ca:	f7ff b8b8 	b.w	800733e <__retarget_lock_acquire_recursive>
 80081ce:	bf00      	nop
 80081d0:	20000dcc 	.word	0x20000dcc

080081d4 <__malloc_unlock>:
 80081d4:	4801      	ldr	r0, [pc, #4]	@ (80081dc <__malloc_unlock+0x8>)
 80081d6:	f7ff b8b3 	b.w	8007340 <__retarget_lock_release_recursive>
 80081da:	bf00      	nop
 80081dc:	20000dcc 	.word	0x20000dcc

080081e0 <_Balloc>:
 80081e0:	b570      	push	{r4, r5, r6, lr}
 80081e2:	69c6      	ldr	r6, [r0, #28]
 80081e4:	4604      	mov	r4, r0
 80081e6:	460d      	mov	r5, r1
 80081e8:	b976      	cbnz	r6, 8008208 <_Balloc+0x28>
 80081ea:	2010      	movs	r0, #16
 80081ec:	f7ff ff42 	bl	8008074 <malloc>
 80081f0:	4602      	mov	r2, r0
 80081f2:	61e0      	str	r0, [r4, #28]
 80081f4:	b920      	cbnz	r0, 8008200 <_Balloc+0x20>
 80081f6:	4b18      	ldr	r3, [pc, #96]	@ (8008258 <_Balloc+0x78>)
 80081f8:	4818      	ldr	r0, [pc, #96]	@ (800825c <_Balloc+0x7c>)
 80081fa:	216b      	movs	r1, #107	@ 0x6b
 80081fc:	f000 fdae 	bl	8008d5c <__assert_func>
 8008200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008204:	6006      	str	r6, [r0, #0]
 8008206:	60c6      	str	r6, [r0, #12]
 8008208:	69e6      	ldr	r6, [r4, #28]
 800820a:	68f3      	ldr	r3, [r6, #12]
 800820c:	b183      	cbz	r3, 8008230 <_Balloc+0x50>
 800820e:	69e3      	ldr	r3, [r4, #28]
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008216:	b9b8      	cbnz	r0, 8008248 <_Balloc+0x68>
 8008218:	2101      	movs	r1, #1
 800821a:	fa01 f605 	lsl.w	r6, r1, r5
 800821e:	1d72      	adds	r2, r6, #5
 8008220:	0092      	lsls	r2, r2, #2
 8008222:	4620      	mov	r0, r4
 8008224:	f000 fdb8 	bl	8008d98 <_calloc_r>
 8008228:	b160      	cbz	r0, 8008244 <_Balloc+0x64>
 800822a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800822e:	e00e      	b.n	800824e <_Balloc+0x6e>
 8008230:	2221      	movs	r2, #33	@ 0x21
 8008232:	2104      	movs	r1, #4
 8008234:	4620      	mov	r0, r4
 8008236:	f000 fdaf 	bl	8008d98 <_calloc_r>
 800823a:	69e3      	ldr	r3, [r4, #28]
 800823c:	60f0      	str	r0, [r6, #12]
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e4      	bne.n	800820e <_Balloc+0x2e>
 8008244:	2000      	movs	r0, #0
 8008246:	bd70      	pop	{r4, r5, r6, pc}
 8008248:	6802      	ldr	r2, [r0, #0]
 800824a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800824e:	2300      	movs	r3, #0
 8008250:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008254:	e7f7      	b.n	8008246 <_Balloc+0x66>
 8008256:	bf00      	nop
 8008258:	08009f09 	.word	0x08009f09
 800825c:	08009f89 	.word	0x08009f89

08008260 <_Bfree>:
 8008260:	b570      	push	{r4, r5, r6, lr}
 8008262:	69c6      	ldr	r6, [r0, #28]
 8008264:	4605      	mov	r5, r0
 8008266:	460c      	mov	r4, r1
 8008268:	b976      	cbnz	r6, 8008288 <_Bfree+0x28>
 800826a:	2010      	movs	r0, #16
 800826c:	f7ff ff02 	bl	8008074 <malloc>
 8008270:	4602      	mov	r2, r0
 8008272:	61e8      	str	r0, [r5, #28]
 8008274:	b920      	cbnz	r0, 8008280 <_Bfree+0x20>
 8008276:	4b09      	ldr	r3, [pc, #36]	@ (800829c <_Bfree+0x3c>)
 8008278:	4809      	ldr	r0, [pc, #36]	@ (80082a0 <_Bfree+0x40>)
 800827a:	218f      	movs	r1, #143	@ 0x8f
 800827c:	f000 fd6e 	bl	8008d5c <__assert_func>
 8008280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008284:	6006      	str	r6, [r0, #0]
 8008286:	60c6      	str	r6, [r0, #12]
 8008288:	b13c      	cbz	r4, 800829a <_Bfree+0x3a>
 800828a:	69eb      	ldr	r3, [r5, #28]
 800828c:	6862      	ldr	r2, [r4, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008294:	6021      	str	r1, [r4, #0]
 8008296:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800829a:	bd70      	pop	{r4, r5, r6, pc}
 800829c:	08009f09 	.word	0x08009f09
 80082a0:	08009f89 	.word	0x08009f89

080082a4 <__multadd>:
 80082a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a8:	690d      	ldr	r5, [r1, #16]
 80082aa:	4607      	mov	r7, r0
 80082ac:	460c      	mov	r4, r1
 80082ae:	461e      	mov	r6, r3
 80082b0:	f101 0c14 	add.w	ip, r1, #20
 80082b4:	2000      	movs	r0, #0
 80082b6:	f8dc 3000 	ldr.w	r3, [ip]
 80082ba:	b299      	uxth	r1, r3
 80082bc:	fb02 6101 	mla	r1, r2, r1, r6
 80082c0:	0c1e      	lsrs	r6, r3, #16
 80082c2:	0c0b      	lsrs	r3, r1, #16
 80082c4:	fb02 3306 	mla	r3, r2, r6, r3
 80082c8:	b289      	uxth	r1, r1
 80082ca:	3001      	adds	r0, #1
 80082cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80082d0:	4285      	cmp	r5, r0
 80082d2:	f84c 1b04 	str.w	r1, [ip], #4
 80082d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082da:	dcec      	bgt.n	80082b6 <__multadd+0x12>
 80082dc:	b30e      	cbz	r6, 8008322 <__multadd+0x7e>
 80082de:	68a3      	ldr	r3, [r4, #8]
 80082e0:	42ab      	cmp	r3, r5
 80082e2:	dc19      	bgt.n	8008318 <__multadd+0x74>
 80082e4:	6861      	ldr	r1, [r4, #4]
 80082e6:	4638      	mov	r0, r7
 80082e8:	3101      	adds	r1, #1
 80082ea:	f7ff ff79 	bl	80081e0 <_Balloc>
 80082ee:	4680      	mov	r8, r0
 80082f0:	b928      	cbnz	r0, 80082fe <__multadd+0x5a>
 80082f2:	4602      	mov	r2, r0
 80082f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008328 <__multadd+0x84>)
 80082f6:	480d      	ldr	r0, [pc, #52]	@ (800832c <__multadd+0x88>)
 80082f8:	21ba      	movs	r1, #186	@ 0xba
 80082fa:	f000 fd2f 	bl	8008d5c <__assert_func>
 80082fe:	6922      	ldr	r2, [r4, #16]
 8008300:	3202      	adds	r2, #2
 8008302:	f104 010c 	add.w	r1, r4, #12
 8008306:	0092      	lsls	r2, r2, #2
 8008308:	300c      	adds	r0, #12
 800830a:	f000 fd19 	bl	8008d40 <memcpy>
 800830e:	4621      	mov	r1, r4
 8008310:	4638      	mov	r0, r7
 8008312:	f7ff ffa5 	bl	8008260 <_Bfree>
 8008316:	4644      	mov	r4, r8
 8008318:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800831c:	3501      	adds	r5, #1
 800831e:	615e      	str	r6, [r3, #20]
 8008320:	6125      	str	r5, [r4, #16]
 8008322:	4620      	mov	r0, r4
 8008324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008328:	08009f78 	.word	0x08009f78
 800832c:	08009f89 	.word	0x08009f89

08008330 <__hi0bits>:
 8008330:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008334:	4603      	mov	r3, r0
 8008336:	bf36      	itet	cc
 8008338:	0403      	lslcc	r3, r0, #16
 800833a:	2000      	movcs	r0, #0
 800833c:	2010      	movcc	r0, #16
 800833e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008342:	bf3c      	itt	cc
 8008344:	021b      	lslcc	r3, r3, #8
 8008346:	3008      	addcc	r0, #8
 8008348:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800834c:	bf3c      	itt	cc
 800834e:	011b      	lslcc	r3, r3, #4
 8008350:	3004      	addcc	r0, #4
 8008352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008356:	bf3c      	itt	cc
 8008358:	009b      	lslcc	r3, r3, #2
 800835a:	3002      	addcc	r0, #2
 800835c:	2b00      	cmp	r3, #0
 800835e:	db05      	blt.n	800836c <__hi0bits+0x3c>
 8008360:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008364:	f100 0001 	add.w	r0, r0, #1
 8008368:	bf08      	it	eq
 800836a:	2020      	moveq	r0, #32
 800836c:	4770      	bx	lr

0800836e <__lo0bits>:
 800836e:	6803      	ldr	r3, [r0, #0]
 8008370:	4602      	mov	r2, r0
 8008372:	f013 0007 	ands.w	r0, r3, #7
 8008376:	d00b      	beq.n	8008390 <__lo0bits+0x22>
 8008378:	07d9      	lsls	r1, r3, #31
 800837a:	d421      	bmi.n	80083c0 <__lo0bits+0x52>
 800837c:	0798      	lsls	r0, r3, #30
 800837e:	bf49      	itett	mi
 8008380:	085b      	lsrmi	r3, r3, #1
 8008382:	089b      	lsrpl	r3, r3, #2
 8008384:	2001      	movmi	r0, #1
 8008386:	6013      	strmi	r3, [r2, #0]
 8008388:	bf5c      	itt	pl
 800838a:	6013      	strpl	r3, [r2, #0]
 800838c:	2002      	movpl	r0, #2
 800838e:	4770      	bx	lr
 8008390:	b299      	uxth	r1, r3
 8008392:	b909      	cbnz	r1, 8008398 <__lo0bits+0x2a>
 8008394:	0c1b      	lsrs	r3, r3, #16
 8008396:	2010      	movs	r0, #16
 8008398:	b2d9      	uxtb	r1, r3
 800839a:	b909      	cbnz	r1, 80083a0 <__lo0bits+0x32>
 800839c:	3008      	adds	r0, #8
 800839e:	0a1b      	lsrs	r3, r3, #8
 80083a0:	0719      	lsls	r1, r3, #28
 80083a2:	bf04      	itt	eq
 80083a4:	091b      	lsreq	r3, r3, #4
 80083a6:	3004      	addeq	r0, #4
 80083a8:	0799      	lsls	r1, r3, #30
 80083aa:	bf04      	itt	eq
 80083ac:	089b      	lsreq	r3, r3, #2
 80083ae:	3002      	addeq	r0, #2
 80083b0:	07d9      	lsls	r1, r3, #31
 80083b2:	d403      	bmi.n	80083bc <__lo0bits+0x4e>
 80083b4:	085b      	lsrs	r3, r3, #1
 80083b6:	f100 0001 	add.w	r0, r0, #1
 80083ba:	d003      	beq.n	80083c4 <__lo0bits+0x56>
 80083bc:	6013      	str	r3, [r2, #0]
 80083be:	4770      	bx	lr
 80083c0:	2000      	movs	r0, #0
 80083c2:	4770      	bx	lr
 80083c4:	2020      	movs	r0, #32
 80083c6:	4770      	bx	lr

080083c8 <__i2b>:
 80083c8:	b510      	push	{r4, lr}
 80083ca:	460c      	mov	r4, r1
 80083cc:	2101      	movs	r1, #1
 80083ce:	f7ff ff07 	bl	80081e0 <_Balloc>
 80083d2:	4602      	mov	r2, r0
 80083d4:	b928      	cbnz	r0, 80083e2 <__i2b+0x1a>
 80083d6:	4b05      	ldr	r3, [pc, #20]	@ (80083ec <__i2b+0x24>)
 80083d8:	4805      	ldr	r0, [pc, #20]	@ (80083f0 <__i2b+0x28>)
 80083da:	f240 1145 	movw	r1, #325	@ 0x145
 80083de:	f000 fcbd 	bl	8008d5c <__assert_func>
 80083e2:	2301      	movs	r3, #1
 80083e4:	6144      	str	r4, [r0, #20]
 80083e6:	6103      	str	r3, [r0, #16]
 80083e8:	bd10      	pop	{r4, pc}
 80083ea:	bf00      	nop
 80083ec:	08009f78 	.word	0x08009f78
 80083f0:	08009f89 	.word	0x08009f89

080083f4 <__multiply>:
 80083f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	4614      	mov	r4, r2
 80083fa:	690a      	ldr	r2, [r1, #16]
 80083fc:	6923      	ldr	r3, [r4, #16]
 80083fe:	429a      	cmp	r2, r3
 8008400:	bfa8      	it	ge
 8008402:	4623      	movge	r3, r4
 8008404:	460f      	mov	r7, r1
 8008406:	bfa4      	itt	ge
 8008408:	460c      	movge	r4, r1
 800840a:	461f      	movge	r7, r3
 800840c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008410:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008414:	68a3      	ldr	r3, [r4, #8]
 8008416:	6861      	ldr	r1, [r4, #4]
 8008418:	eb0a 0609 	add.w	r6, sl, r9
 800841c:	42b3      	cmp	r3, r6
 800841e:	b085      	sub	sp, #20
 8008420:	bfb8      	it	lt
 8008422:	3101      	addlt	r1, #1
 8008424:	f7ff fedc 	bl	80081e0 <_Balloc>
 8008428:	b930      	cbnz	r0, 8008438 <__multiply+0x44>
 800842a:	4602      	mov	r2, r0
 800842c:	4b44      	ldr	r3, [pc, #272]	@ (8008540 <__multiply+0x14c>)
 800842e:	4845      	ldr	r0, [pc, #276]	@ (8008544 <__multiply+0x150>)
 8008430:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008434:	f000 fc92 	bl	8008d5c <__assert_func>
 8008438:	f100 0514 	add.w	r5, r0, #20
 800843c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008440:	462b      	mov	r3, r5
 8008442:	2200      	movs	r2, #0
 8008444:	4543      	cmp	r3, r8
 8008446:	d321      	bcc.n	800848c <__multiply+0x98>
 8008448:	f107 0114 	add.w	r1, r7, #20
 800844c:	f104 0214 	add.w	r2, r4, #20
 8008450:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008454:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008458:	9302      	str	r3, [sp, #8]
 800845a:	1b13      	subs	r3, r2, r4
 800845c:	3b15      	subs	r3, #21
 800845e:	f023 0303 	bic.w	r3, r3, #3
 8008462:	3304      	adds	r3, #4
 8008464:	f104 0715 	add.w	r7, r4, #21
 8008468:	42ba      	cmp	r2, r7
 800846a:	bf38      	it	cc
 800846c:	2304      	movcc	r3, #4
 800846e:	9301      	str	r3, [sp, #4]
 8008470:	9b02      	ldr	r3, [sp, #8]
 8008472:	9103      	str	r1, [sp, #12]
 8008474:	428b      	cmp	r3, r1
 8008476:	d80c      	bhi.n	8008492 <__multiply+0x9e>
 8008478:	2e00      	cmp	r6, #0
 800847a:	dd03      	ble.n	8008484 <__multiply+0x90>
 800847c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008480:	2b00      	cmp	r3, #0
 8008482:	d05b      	beq.n	800853c <__multiply+0x148>
 8008484:	6106      	str	r6, [r0, #16]
 8008486:	b005      	add	sp, #20
 8008488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848c:	f843 2b04 	str.w	r2, [r3], #4
 8008490:	e7d8      	b.n	8008444 <__multiply+0x50>
 8008492:	f8b1 a000 	ldrh.w	sl, [r1]
 8008496:	f1ba 0f00 	cmp.w	sl, #0
 800849a:	d024      	beq.n	80084e6 <__multiply+0xf2>
 800849c:	f104 0e14 	add.w	lr, r4, #20
 80084a0:	46a9      	mov	r9, r5
 80084a2:	f04f 0c00 	mov.w	ip, #0
 80084a6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084aa:	f8d9 3000 	ldr.w	r3, [r9]
 80084ae:	fa1f fb87 	uxth.w	fp, r7
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	fb0a 330b 	mla	r3, sl, fp, r3
 80084b8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80084bc:	f8d9 7000 	ldr.w	r7, [r9]
 80084c0:	4463      	add	r3, ip
 80084c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80084c6:	fb0a c70b 	mla	r7, sl, fp, ip
 80084ca:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80084ce:	b29b      	uxth	r3, r3
 80084d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80084d4:	4572      	cmp	r2, lr
 80084d6:	f849 3b04 	str.w	r3, [r9], #4
 80084da:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80084de:	d8e2      	bhi.n	80084a6 <__multiply+0xb2>
 80084e0:	9b01      	ldr	r3, [sp, #4]
 80084e2:	f845 c003 	str.w	ip, [r5, r3]
 80084e6:	9b03      	ldr	r3, [sp, #12]
 80084e8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80084ec:	3104      	adds	r1, #4
 80084ee:	f1b9 0f00 	cmp.w	r9, #0
 80084f2:	d021      	beq.n	8008538 <__multiply+0x144>
 80084f4:	682b      	ldr	r3, [r5, #0]
 80084f6:	f104 0c14 	add.w	ip, r4, #20
 80084fa:	46ae      	mov	lr, r5
 80084fc:	f04f 0a00 	mov.w	sl, #0
 8008500:	f8bc b000 	ldrh.w	fp, [ip]
 8008504:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008508:	fb09 770b 	mla	r7, r9, fp, r7
 800850c:	4457      	add	r7, sl
 800850e:	b29b      	uxth	r3, r3
 8008510:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008514:	f84e 3b04 	str.w	r3, [lr], #4
 8008518:	f85c 3b04 	ldr.w	r3, [ip], #4
 800851c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008520:	f8be 3000 	ldrh.w	r3, [lr]
 8008524:	fb09 330a 	mla	r3, r9, sl, r3
 8008528:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800852c:	4562      	cmp	r2, ip
 800852e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008532:	d8e5      	bhi.n	8008500 <__multiply+0x10c>
 8008534:	9f01      	ldr	r7, [sp, #4]
 8008536:	51eb      	str	r3, [r5, r7]
 8008538:	3504      	adds	r5, #4
 800853a:	e799      	b.n	8008470 <__multiply+0x7c>
 800853c:	3e01      	subs	r6, #1
 800853e:	e79b      	b.n	8008478 <__multiply+0x84>
 8008540:	08009f78 	.word	0x08009f78
 8008544:	08009f89 	.word	0x08009f89

08008548 <__pow5mult>:
 8008548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800854c:	4615      	mov	r5, r2
 800854e:	f012 0203 	ands.w	r2, r2, #3
 8008552:	4607      	mov	r7, r0
 8008554:	460e      	mov	r6, r1
 8008556:	d007      	beq.n	8008568 <__pow5mult+0x20>
 8008558:	4c25      	ldr	r4, [pc, #148]	@ (80085f0 <__pow5mult+0xa8>)
 800855a:	3a01      	subs	r2, #1
 800855c:	2300      	movs	r3, #0
 800855e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008562:	f7ff fe9f 	bl	80082a4 <__multadd>
 8008566:	4606      	mov	r6, r0
 8008568:	10ad      	asrs	r5, r5, #2
 800856a:	d03d      	beq.n	80085e8 <__pow5mult+0xa0>
 800856c:	69fc      	ldr	r4, [r7, #28]
 800856e:	b97c      	cbnz	r4, 8008590 <__pow5mult+0x48>
 8008570:	2010      	movs	r0, #16
 8008572:	f7ff fd7f 	bl	8008074 <malloc>
 8008576:	4602      	mov	r2, r0
 8008578:	61f8      	str	r0, [r7, #28]
 800857a:	b928      	cbnz	r0, 8008588 <__pow5mult+0x40>
 800857c:	4b1d      	ldr	r3, [pc, #116]	@ (80085f4 <__pow5mult+0xac>)
 800857e:	481e      	ldr	r0, [pc, #120]	@ (80085f8 <__pow5mult+0xb0>)
 8008580:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008584:	f000 fbea 	bl	8008d5c <__assert_func>
 8008588:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800858c:	6004      	str	r4, [r0, #0]
 800858e:	60c4      	str	r4, [r0, #12]
 8008590:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008594:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008598:	b94c      	cbnz	r4, 80085ae <__pow5mult+0x66>
 800859a:	f240 2171 	movw	r1, #625	@ 0x271
 800859e:	4638      	mov	r0, r7
 80085a0:	f7ff ff12 	bl	80083c8 <__i2b>
 80085a4:	2300      	movs	r3, #0
 80085a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80085aa:	4604      	mov	r4, r0
 80085ac:	6003      	str	r3, [r0, #0]
 80085ae:	f04f 0900 	mov.w	r9, #0
 80085b2:	07eb      	lsls	r3, r5, #31
 80085b4:	d50a      	bpl.n	80085cc <__pow5mult+0x84>
 80085b6:	4631      	mov	r1, r6
 80085b8:	4622      	mov	r2, r4
 80085ba:	4638      	mov	r0, r7
 80085bc:	f7ff ff1a 	bl	80083f4 <__multiply>
 80085c0:	4631      	mov	r1, r6
 80085c2:	4680      	mov	r8, r0
 80085c4:	4638      	mov	r0, r7
 80085c6:	f7ff fe4b 	bl	8008260 <_Bfree>
 80085ca:	4646      	mov	r6, r8
 80085cc:	106d      	asrs	r5, r5, #1
 80085ce:	d00b      	beq.n	80085e8 <__pow5mult+0xa0>
 80085d0:	6820      	ldr	r0, [r4, #0]
 80085d2:	b938      	cbnz	r0, 80085e4 <__pow5mult+0x9c>
 80085d4:	4622      	mov	r2, r4
 80085d6:	4621      	mov	r1, r4
 80085d8:	4638      	mov	r0, r7
 80085da:	f7ff ff0b 	bl	80083f4 <__multiply>
 80085de:	6020      	str	r0, [r4, #0]
 80085e0:	f8c0 9000 	str.w	r9, [r0]
 80085e4:	4604      	mov	r4, r0
 80085e6:	e7e4      	b.n	80085b2 <__pow5mult+0x6a>
 80085e8:	4630      	mov	r0, r6
 80085ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085ee:	bf00      	nop
 80085f0:	08009fe4 	.word	0x08009fe4
 80085f4:	08009f09 	.word	0x08009f09
 80085f8:	08009f89 	.word	0x08009f89

080085fc <__lshift>:
 80085fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008600:	460c      	mov	r4, r1
 8008602:	6849      	ldr	r1, [r1, #4]
 8008604:	6923      	ldr	r3, [r4, #16]
 8008606:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800860a:	68a3      	ldr	r3, [r4, #8]
 800860c:	4607      	mov	r7, r0
 800860e:	4691      	mov	r9, r2
 8008610:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008614:	f108 0601 	add.w	r6, r8, #1
 8008618:	42b3      	cmp	r3, r6
 800861a:	db0b      	blt.n	8008634 <__lshift+0x38>
 800861c:	4638      	mov	r0, r7
 800861e:	f7ff fddf 	bl	80081e0 <_Balloc>
 8008622:	4605      	mov	r5, r0
 8008624:	b948      	cbnz	r0, 800863a <__lshift+0x3e>
 8008626:	4602      	mov	r2, r0
 8008628:	4b28      	ldr	r3, [pc, #160]	@ (80086cc <__lshift+0xd0>)
 800862a:	4829      	ldr	r0, [pc, #164]	@ (80086d0 <__lshift+0xd4>)
 800862c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008630:	f000 fb94 	bl	8008d5c <__assert_func>
 8008634:	3101      	adds	r1, #1
 8008636:	005b      	lsls	r3, r3, #1
 8008638:	e7ee      	b.n	8008618 <__lshift+0x1c>
 800863a:	2300      	movs	r3, #0
 800863c:	f100 0114 	add.w	r1, r0, #20
 8008640:	f100 0210 	add.w	r2, r0, #16
 8008644:	4618      	mov	r0, r3
 8008646:	4553      	cmp	r3, sl
 8008648:	db33      	blt.n	80086b2 <__lshift+0xb6>
 800864a:	6920      	ldr	r0, [r4, #16]
 800864c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008650:	f104 0314 	add.w	r3, r4, #20
 8008654:	f019 091f 	ands.w	r9, r9, #31
 8008658:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800865c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008660:	d02b      	beq.n	80086ba <__lshift+0xbe>
 8008662:	f1c9 0e20 	rsb	lr, r9, #32
 8008666:	468a      	mov	sl, r1
 8008668:	2200      	movs	r2, #0
 800866a:	6818      	ldr	r0, [r3, #0]
 800866c:	fa00 f009 	lsl.w	r0, r0, r9
 8008670:	4310      	orrs	r0, r2
 8008672:	f84a 0b04 	str.w	r0, [sl], #4
 8008676:	f853 2b04 	ldr.w	r2, [r3], #4
 800867a:	459c      	cmp	ip, r3
 800867c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008680:	d8f3      	bhi.n	800866a <__lshift+0x6e>
 8008682:	ebac 0304 	sub.w	r3, ip, r4
 8008686:	3b15      	subs	r3, #21
 8008688:	f023 0303 	bic.w	r3, r3, #3
 800868c:	3304      	adds	r3, #4
 800868e:	f104 0015 	add.w	r0, r4, #21
 8008692:	4584      	cmp	ip, r0
 8008694:	bf38      	it	cc
 8008696:	2304      	movcc	r3, #4
 8008698:	50ca      	str	r2, [r1, r3]
 800869a:	b10a      	cbz	r2, 80086a0 <__lshift+0xa4>
 800869c:	f108 0602 	add.w	r6, r8, #2
 80086a0:	3e01      	subs	r6, #1
 80086a2:	4638      	mov	r0, r7
 80086a4:	612e      	str	r6, [r5, #16]
 80086a6:	4621      	mov	r1, r4
 80086a8:	f7ff fdda 	bl	8008260 <_Bfree>
 80086ac:	4628      	mov	r0, r5
 80086ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80086b6:	3301      	adds	r3, #1
 80086b8:	e7c5      	b.n	8008646 <__lshift+0x4a>
 80086ba:	3904      	subs	r1, #4
 80086bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80086c4:	459c      	cmp	ip, r3
 80086c6:	d8f9      	bhi.n	80086bc <__lshift+0xc0>
 80086c8:	e7ea      	b.n	80086a0 <__lshift+0xa4>
 80086ca:	bf00      	nop
 80086cc:	08009f78 	.word	0x08009f78
 80086d0:	08009f89 	.word	0x08009f89

080086d4 <__mcmp>:
 80086d4:	690a      	ldr	r2, [r1, #16]
 80086d6:	4603      	mov	r3, r0
 80086d8:	6900      	ldr	r0, [r0, #16]
 80086da:	1a80      	subs	r0, r0, r2
 80086dc:	b530      	push	{r4, r5, lr}
 80086de:	d10e      	bne.n	80086fe <__mcmp+0x2a>
 80086e0:	3314      	adds	r3, #20
 80086e2:	3114      	adds	r1, #20
 80086e4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80086e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80086ec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80086f0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80086f4:	4295      	cmp	r5, r2
 80086f6:	d003      	beq.n	8008700 <__mcmp+0x2c>
 80086f8:	d205      	bcs.n	8008706 <__mcmp+0x32>
 80086fa:	f04f 30ff 	mov.w	r0, #4294967295
 80086fe:	bd30      	pop	{r4, r5, pc}
 8008700:	42a3      	cmp	r3, r4
 8008702:	d3f3      	bcc.n	80086ec <__mcmp+0x18>
 8008704:	e7fb      	b.n	80086fe <__mcmp+0x2a>
 8008706:	2001      	movs	r0, #1
 8008708:	e7f9      	b.n	80086fe <__mcmp+0x2a>
	...

0800870c <__mdiff>:
 800870c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008710:	4689      	mov	r9, r1
 8008712:	4606      	mov	r6, r0
 8008714:	4611      	mov	r1, r2
 8008716:	4648      	mov	r0, r9
 8008718:	4614      	mov	r4, r2
 800871a:	f7ff ffdb 	bl	80086d4 <__mcmp>
 800871e:	1e05      	subs	r5, r0, #0
 8008720:	d112      	bne.n	8008748 <__mdiff+0x3c>
 8008722:	4629      	mov	r1, r5
 8008724:	4630      	mov	r0, r6
 8008726:	f7ff fd5b 	bl	80081e0 <_Balloc>
 800872a:	4602      	mov	r2, r0
 800872c:	b928      	cbnz	r0, 800873a <__mdiff+0x2e>
 800872e:	4b3f      	ldr	r3, [pc, #252]	@ (800882c <__mdiff+0x120>)
 8008730:	f240 2137 	movw	r1, #567	@ 0x237
 8008734:	483e      	ldr	r0, [pc, #248]	@ (8008830 <__mdiff+0x124>)
 8008736:	f000 fb11 	bl	8008d5c <__assert_func>
 800873a:	2301      	movs	r3, #1
 800873c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008740:	4610      	mov	r0, r2
 8008742:	b003      	add	sp, #12
 8008744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008748:	bfbc      	itt	lt
 800874a:	464b      	movlt	r3, r9
 800874c:	46a1      	movlt	r9, r4
 800874e:	4630      	mov	r0, r6
 8008750:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008754:	bfba      	itte	lt
 8008756:	461c      	movlt	r4, r3
 8008758:	2501      	movlt	r5, #1
 800875a:	2500      	movge	r5, #0
 800875c:	f7ff fd40 	bl	80081e0 <_Balloc>
 8008760:	4602      	mov	r2, r0
 8008762:	b918      	cbnz	r0, 800876c <__mdiff+0x60>
 8008764:	4b31      	ldr	r3, [pc, #196]	@ (800882c <__mdiff+0x120>)
 8008766:	f240 2145 	movw	r1, #581	@ 0x245
 800876a:	e7e3      	b.n	8008734 <__mdiff+0x28>
 800876c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008770:	6926      	ldr	r6, [r4, #16]
 8008772:	60c5      	str	r5, [r0, #12]
 8008774:	f109 0310 	add.w	r3, r9, #16
 8008778:	f109 0514 	add.w	r5, r9, #20
 800877c:	f104 0e14 	add.w	lr, r4, #20
 8008780:	f100 0b14 	add.w	fp, r0, #20
 8008784:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008788:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800878c:	9301      	str	r3, [sp, #4]
 800878e:	46d9      	mov	r9, fp
 8008790:	f04f 0c00 	mov.w	ip, #0
 8008794:	9b01      	ldr	r3, [sp, #4]
 8008796:	f85e 0b04 	ldr.w	r0, [lr], #4
 800879a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800879e:	9301      	str	r3, [sp, #4]
 80087a0:	fa1f f38a 	uxth.w	r3, sl
 80087a4:	4619      	mov	r1, r3
 80087a6:	b283      	uxth	r3, r0
 80087a8:	1acb      	subs	r3, r1, r3
 80087aa:	0c00      	lsrs	r0, r0, #16
 80087ac:	4463      	add	r3, ip
 80087ae:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80087b2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80087bc:	4576      	cmp	r6, lr
 80087be:	f849 3b04 	str.w	r3, [r9], #4
 80087c2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80087c6:	d8e5      	bhi.n	8008794 <__mdiff+0x88>
 80087c8:	1b33      	subs	r3, r6, r4
 80087ca:	3b15      	subs	r3, #21
 80087cc:	f023 0303 	bic.w	r3, r3, #3
 80087d0:	3415      	adds	r4, #21
 80087d2:	3304      	adds	r3, #4
 80087d4:	42a6      	cmp	r6, r4
 80087d6:	bf38      	it	cc
 80087d8:	2304      	movcc	r3, #4
 80087da:	441d      	add	r5, r3
 80087dc:	445b      	add	r3, fp
 80087de:	461e      	mov	r6, r3
 80087e0:	462c      	mov	r4, r5
 80087e2:	4544      	cmp	r4, r8
 80087e4:	d30e      	bcc.n	8008804 <__mdiff+0xf8>
 80087e6:	f108 0103 	add.w	r1, r8, #3
 80087ea:	1b49      	subs	r1, r1, r5
 80087ec:	f021 0103 	bic.w	r1, r1, #3
 80087f0:	3d03      	subs	r5, #3
 80087f2:	45a8      	cmp	r8, r5
 80087f4:	bf38      	it	cc
 80087f6:	2100      	movcc	r1, #0
 80087f8:	440b      	add	r3, r1
 80087fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087fe:	b191      	cbz	r1, 8008826 <__mdiff+0x11a>
 8008800:	6117      	str	r7, [r2, #16]
 8008802:	e79d      	b.n	8008740 <__mdiff+0x34>
 8008804:	f854 1b04 	ldr.w	r1, [r4], #4
 8008808:	46e6      	mov	lr, ip
 800880a:	0c08      	lsrs	r0, r1, #16
 800880c:	fa1c fc81 	uxtah	ip, ip, r1
 8008810:	4471      	add	r1, lr
 8008812:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008816:	b289      	uxth	r1, r1
 8008818:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800881c:	f846 1b04 	str.w	r1, [r6], #4
 8008820:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008824:	e7dd      	b.n	80087e2 <__mdiff+0xd6>
 8008826:	3f01      	subs	r7, #1
 8008828:	e7e7      	b.n	80087fa <__mdiff+0xee>
 800882a:	bf00      	nop
 800882c:	08009f78 	.word	0x08009f78
 8008830:	08009f89 	.word	0x08009f89

08008834 <__d2b>:
 8008834:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008838:	460f      	mov	r7, r1
 800883a:	2101      	movs	r1, #1
 800883c:	ec59 8b10 	vmov	r8, r9, d0
 8008840:	4616      	mov	r6, r2
 8008842:	f7ff fccd 	bl	80081e0 <_Balloc>
 8008846:	4604      	mov	r4, r0
 8008848:	b930      	cbnz	r0, 8008858 <__d2b+0x24>
 800884a:	4602      	mov	r2, r0
 800884c:	4b23      	ldr	r3, [pc, #140]	@ (80088dc <__d2b+0xa8>)
 800884e:	4824      	ldr	r0, [pc, #144]	@ (80088e0 <__d2b+0xac>)
 8008850:	f240 310f 	movw	r1, #783	@ 0x30f
 8008854:	f000 fa82 	bl	8008d5c <__assert_func>
 8008858:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800885c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008860:	b10d      	cbz	r5, 8008866 <__d2b+0x32>
 8008862:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008866:	9301      	str	r3, [sp, #4]
 8008868:	f1b8 0300 	subs.w	r3, r8, #0
 800886c:	d023      	beq.n	80088b6 <__d2b+0x82>
 800886e:	4668      	mov	r0, sp
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	f7ff fd7c 	bl	800836e <__lo0bits>
 8008876:	e9dd 1200 	ldrd	r1, r2, [sp]
 800887a:	b1d0      	cbz	r0, 80088b2 <__d2b+0x7e>
 800887c:	f1c0 0320 	rsb	r3, r0, #32
 8008880:	fa02 f303 	lsl.w	r3, r2, r3
 8008884:	430b      	orrs	r3, r1
 8008886:	40c2      	lsrs	r2, r0
 8008888:	6163      	str	r3, [r4, #20]
 800888a:	9201      	str	r2, [sp, #4]
 800888c:	9b01      	ldr	r3, [sp, #4]
 800888e:	61a3      	str	r3, [r4, #24]
 8008890:	2b00      	cmp	r3, #0
 8008892:	bf0c      	ite	eq
 8008894:	2201      	moveq	r2, #1
 8008896:	2202      	movne	r2, #2
 8008898:	6122      	str	r2, [r4, #16]
 800889a:	b1a5      	cbz	r5, 80088c6 <__d2b+0x92>
 800889c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80088a0:	4405      	add	r5, r0
 80088a2:	603d      	str	r5, [r7, #0]
 80088a4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80088a8:	6030      	str	r0, [r6, #0]
 80088aa:	4620      	mov	r0, r4
 80088ac:	b003      	add	sp, #12
 80088ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088b2:	6161      	str	r1, [r4, #20]
 80088b4:	e7ea      	b.n	800888c <__d2b+0x58>
 80088b6:	a801      	add	r0, sp, #4
 80088b8:	f7ff fd59 	bl	800836e <__lo0bits>
 80088bc:	9b01      	ldr	r3, [sp, #4]
 80088be:	6163      	str	r3, [r4, #20]
 80088c0:	3020      	adds	r0, #32
 80088c2:	2201      	movs	r2, #1
 80088c4:	e7e8      	b.n	8008898 <__d2b+0x64>
 80088c6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088ca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80088ce:	6038      	str	r0, [r7, #0]
 80088d0:	6918      	ldr	r0, [r3, #16]
 80088d2:	f7ff fd2d 	bl	8008330 <__hi0bits>
 80088d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088da:	e7e5      	b.n	80088a8 <__d2b+0x74>
 80088dc:	08009f78 	.word	0x08009f78
 80088e0:	08009f89 	.word	0x08009f89

080088e4 <__ssputs_r>:
 80088e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e8:	688e      	ldr	r6, [r1, #8]
 80088ea:	461f      	mov	r7, r3
 80088ec:	42be      	cmp	r6, r7
 80088ee:	680b      	ldr	r3, [r1, #0]
 80088f0:	4682      	mov	sl, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	4690      	mov	r8, r2
 80088f6:	d82d      	bhi.n	8008954 <__ssputs_r+0x70>
 80088f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008900:	d026      	beq.n	8008950 <__ssputs_r+0x6c>
 8008902:	6965      	ldr	r5, [r4, #20]
 8008904:	6909      	ldr	r1, [r1, #16]
 8008906:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800890a:	eba3 0901 	sub.w	r9, r3, r1
 800890e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008912:	1c7b      	adds	r3, r7, #1
 8008914:	444b      	add	r3, r9
 8008916:	106d      	asrs	r5, r5, #1
 8008918:	429d      	cmp	r5, r3
 800891a:	bf38      	it	cc
 800891c:	461d      	movcc	r5, r3
 800891e:	0553      	lsls	r3, r2, #21
 8008920:	d527      	bpl.n	8008972 <__ssputs_r+0x8e>
 8008922:	4629      	mov	r1, r5
 8008924:	f7ff fbd0 	bl	80080c8 <_malloc_r>
 8008928:	4606      	mov	r6, r0
 800892a:	b360      	cbz	r0, 8008986 <__ssputs_r+0xa2>
 800892c:	6921      	ldr	r1, [r4, #16]
 800892e:	464a      	mov	r2, r9
 8008930:	f000 fa06 	bl	8008d40 <memcpy>
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800893a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800893e:	81a3      	strh	r3, [r4, #12]
 8008940:	6126      	str	r6, [r4, #16]
 8008942:	6165      	str	r5, [r4, #20]
 8008944:	444e      	add	r6, r9
 8008946:	eba5 0509 	sub.w	r5, r5, r9
 800894a:	6026      	str	r6, [r4, #0]
 800894c:	60a5      	str	r5, [r4, #8]
 800894e:	463e      	mov	r6, r7
 8008950:	42be      	cmp	r6, r7
 8008952:	d900      	bls.n	8008956 <__ssputs_r+0x72>
 8008954:	463e      	mov	r6, r7
 8008956:	6820      	ldr	r0, [r4, #0]
 8008958:	4632      	mov	r2, r6
 800895a:	4641      	mov	r1, r8
 800895c:	f000 f9c6 	bl	8008cec <memmove>
 8008960:	68a3      	ldr	r3, [r4, #8]
 8008962:	1b9b      	subs	r3, r3, r6
 8008964:	60a3      	str	r3, [r4, #8]
 8008966:	6823      	ldr	r3, [r4, #0]
 8008968:	4433      	add	r3, r6
 800896a:	6023      	str	r3, [r4, #0]
 800896c:	2000      	movs	r0, #0
 800896e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008972:	462a      	mov	r2, r5
 8008974:	f000 fa36 	bl	8008de4 <_realloc_r>
 8008978:	4606      	mov	r6, r0
 800897a:	2800      	cmp	r0, #0
 800897c:	d1e0      	bne.n	8008940 <__ssputs_r+0x5c>
 800897e:	6921      	ldr	r1, [r4, #16]
 8008980:	4650      	mov	r0, sl
 8008982:	f7ff fb2d 	bl	8007fe0 <_free_r>
 8008986:	230c      	movs	r3, #12
 8008988:	f8ca 3000 	str.w	r3, [sl]
 800898c:	89a3      	ldrh	r3, [r4, #12]
 800898e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008992:	81a3      	strh	r3, [r4, #12]
 8008994:	f04f 30ff 	mov.w	r0, #4294967295
 8008998:	e7e9      	b.n	800896e <__ssputs_r+0x8a>
	...

0800899c <_svfiprintf_r>:
 800899c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a0:	4698      	mov	r8, r3
 80089a2:	898b      	ldrh	r3, [r1, #12]
 80089a4:	061b      	lsls	r3, r3, #24
 80089a6:	b09d      	sub	sp, #116	@ 0x74
 80089a8:	4607      	mov	r7, r0
 80089aa:	460d      	mov	r5, r1
 80089ac:	4614      	mov	r4, r2
 80089ae:	d510      	bpl.n	80089d2 <_svfiprintf_r+0x36>
 80089b0:	690b      	ldr	r3, [r1, #16]
 80089b2:	b973      	cbnz	r3, 80089d2 <_svfiprintf_r+0x36>
 80089b4:	2140      	movs	r1, #64	@ 0x40
 80089b6:	f7ff fb87 	bl	80080c8 <_malloc_r>
 80089ba:	6028      	str	r0, [r5, #0]
 80089bc:	6128      	str	r0, [r5, #16]
 80089be:	b930      	cbnz	r0, 80089ce <_svfiprintf_r+0x32>
 80089c0:	230c      	movs	r3, #12
 80089c2:	603b      	str	r3, [r7, #0]
 80089c4:	f04f 30ff 	mov.w	r0, #4294967295
 80089c8:	b01d      	add	sp, #116	@ 0x74
 80089ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ce:	2340      	movs	r3, #64	@ 0x40
 80089d0:	616b      	str	r3, [r5, #20]
 80089d2:	2300      	movs	r3, #0
 80089d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089d6:	2320      	movs	r3, #32
 80089d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80089e0:	2330      	movs	r3, #48	@ 0x30
 80089e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b80 <_svfiprintf_r+0x1e4>
 80089e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089ea:	f04f 0901 	mov.w	r9, #1
 80089ee:	4623      	mov	r3, r4
 80089f0:	469a      	mov	sl, r3
 80089f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089f6:	b10a      	cbz	r2, 80089fc <_svfiprintf_r+0x60>
 80089f8:	2a25      	cmp	r2, #37	@ 0x25
 80089fa:	d1f9      	bne.n	80089f0 <_svfiprintf_r+0x54>
 80089fc:	ebba 0b04 	subs.w	fp, sl, r4
 8008a00:	d00b      	beq.n	8008a1a <_svfiprintf_r+0x7e>
 8008a02:	465b      	mov	r3, fp
 8008a04:	4622      	mov	r2, r4
 8008a06:	4629      	mov	r1, r5
 8008a08:	4638      	mov	r0, r7
 8008a0a:	f7ff ff6b 	bl	80088e4 <__ssputs_r>
 8008a0e:	3001      	adds	r0, #1
 8008a10:	f000 80a7 	beq.w	8008b62 <_svfiprintf_r+0x1c6>
 8008a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008a16:	445a      	add	r2, fp
 8008a18:	9209      	str	r2, [sp, #36]	@ 0x24
 8008a1a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f000 809f 	beq.w	8008b62 <_svfiprintf_r+0x1c6>
 8008a24:	2300      	movs	r3, #0
 8008a26:	f04f 32ff 	mov.w	r2, #4294967295
 8008a2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a2e:	f10a 0a01 	add.w	sl, sl, #1
 8008a32:	9304      	str	r3, [sp, #16]
 8008a34:	9307      	str	r3, [sp, #28]
 8008a36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a3a:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a3c:	4654      	mov	r4, sl
 8008a3e:	2205      	movs	r2, #5
 8008a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a44:	484e      	ldr	r0, [pc, #312]	@ (8008b80 <_svfiprintf_r+0x1e4>)
 8008a46:	f7f7 fbc3 	bl	80001d0 <memchr>
 8008a4a:	9a04      	ldr	r2, [sp, #16]
 8008a4c:	b9d8      	cbnz	r0, 8008a86 <_svfiprintf_r+0xea>
 8008a4e:	06d0      	lsls	r0, r2, #27
 8008a50:	bf44      	itt	mi
 8008a52:	2320      	movmi	r3, #32
 8008a54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a58:	0711      	lsls	r1, r2, #28
 8008a5a:	bf44      	itt	mi
 8008a5c:	232b      	movmi	r3, #43	@ 0x2b
 8008a5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a62:	f89a 3000 	ldrb.w	r3, [sl]
 8008a66:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a68:	d015      	beq.n	8008a96 <_svfiprintf_r+0xfa>
 8008a6a:	9a07      	ldr	r2, [sp, #28]
 8008a6c:	4654      	mov	r4, sl
 8008a6e:	2000      	movs	r0, #0
 8008a70:	f04f 0c0a 	mov.w	ip, #10
 8008a74:	4621      	mov	r1, r4
 8008a76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a7a:	3b30      	subs	r3, #48	@ 0x30
 8008a7c:	2b09      	cmp	r3, #9
 8008a7e:	d94b      	bls.n	8008b18 <_svfiprintf_r+0x17c>
 8008a80:	b1b0      	cbz	r0, 8008ab0 <_svfiprintf_r+0x114>
 8008a82:	9207      	str	r2, [sp, #28]
 8008a84:	e014      	b.n	8008ab0 <_svfiprintf_r+0x114>
 8008a86:	eba0 0308 	sub.w	r3, r0, r8
 8008a8a:	fa09 f303 	lsl.w	r3, r9, r3
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	46a2      	mov	sl, r4
 8008a94:	e7d2      	b.n	8008a3c <_svfiprintf_r+0xa0>
 8008a96:	9b03      	ldr	r3, [sp, #12]
 8008a98:	1d19      	adds	r1, r3, #4
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	9103      	str	r1, [sp, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	bfbb      	ittet	lt
 8008aa2:	425b      	neglt	r3, r3
 8008aa4:	f042 0202 	orrlt.w	r2, r2, #2
 8008aa8:	9307      	strge	r3, [sp, #28]
 8008aaa:	9307      	strlt	r3, [sp, #28]
 8008aac:	bfb8      	it	lt
 8008aae:	9204      	strlt	r2, [sp, #16]
 8008ab0:	7823      	ldrb	r3, [r4, #0]
 8008ab2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ab4:	d10a      	bne.n	8008acc <_svfiprintf_r+0x130>
 8008ab6:	7863      	ldrb	r3, [r4, #1]
 8008ab8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008aba:	d132      	bne.n	8008b22 <_svfiprintf_r+0x186>
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	1d1a      	adds	r2, r3, #4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	9203      	str	r2, [sp, #12]
 8008ac4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ac8:	3402      	adds	r4, #2
 8008aca:	9305      	str	r3, [sp, #20]
 8008acc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b90 <_svfiprintf_r+0x1f4>
 8008ad0:	7821      	ldrb	r1, [r4, #0]
 8008ad2:	2203      	movs	r2, #3
 8008ad4:	4650      	mov	r0, sl
 8008ad6:	f7f7 fb7b 	bl	80001d0 <memchr>
 8008ada:	b138      	cbz	r0, 8008aec <_svfiprintf_r+0x150>
 8008adc:	9b04      	ldr	r3, [sp, #16]
 8008ade:	eba0 000a 	sub.w	r0, r0, sl
 8008ae2:	2240      	movs	r2, #64	@ 0x40
 8008ae4:	4082      	lsls	r2, r0
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	3401      	adds	r4, #1
 8008aea:	9304      	str	r3, [sp, #16]
 8008aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af0:	4824      	ldr	r0, [pc, #144]	@ (8008b84 <_svfiprintf_r+0x1e8>)
 8008af2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008af6:	2206      	movs	r2, #6
 8008af8:	f7f7 fb6a 	bl	80001d0 <memchr>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d036      	beq.n	8008b6e <_svfiprintf_r+0x1d2>
 8008b00:	4b21      	ldr	r3, [pc, #132]	@ (8008b88 <_svfiprintf_r+0x1ec>)
 8008b02:	bb1b      	cbnz	r3, 8008b4c <_svfiprintf_r+0x1b0>
 8008b04:	9b03      	ldr	r3, [sp, #12]
 8008b06:	3307      	adds	r3, #7
 8008b08:	f023 0307 	bic.w	r3, r3, #7
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	9303      	str	r3, [sp, #12]
 8008b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b12:	4433      	add	r3, r6
 8008b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b16:	e76a      	b.n	80089ee <_svfiprintf_r+0x52>
 8008b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b1c:	460c      	mov	r4, r1
 8008b1e:	2001      	movs	r0, #1
 8008b20:	e7a8      	b.n	8008a74 <_svfiprintf_r+0xd8>
 8008b22:	2300      	movs	r3, #0
 8008b24:	3401      	adds	r4, #1
 8008b26:	9305      	str	r3, [sp, #20]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	f04f 0c0a 	mov.w	ip, #10
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b34:	3a30      	subs	r2, #48	@ 0x30
 8008b36:	2a09      	cmp	r2, #9
 8008b38:	d903      	bls.n	8008b42 <_svfiprintf_r+0x1a6>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d0c6      	beq.n	8008acc <_svfiprintf_r+0x130>
 8008b3e:	9105      	str	r1, [sp, #20]
 8008b40:	e7c4      	b.n	8008acc <_svfiprintf_r+0x130>
 8008b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b46:	4604      	mov	r4, r0
 8008b48:	2301      	movs	r3, #1
 8008b4a:	e7f0      	b.n	8008b2e <_svfiprintf_r+0x192>
 8008b4c:	ab03      	add	r3, sp, #12
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	462a      	mov	r2, r5
 8008b52:	4b0e      	ldr	r3, [pc, #56]	@ (8008b8c <_svfiprintf_r+0x1f0>)
 8008b54:	a904      	add	r1, sp, #16
 8008b56:	4638      	mov	r0, r7
 8008b58:	f7fd fe96 	bl	8006888 <_printf_float>
 8008b5c:	1c42      	adds	r2, r0, #1
 8008b5e:	4606      	mov	r6, r0
 8008b60:	d1d6      	bne.n	8008b10 <_svfiprintf_r+0x174>
 8008b62:	89ab      	ldrh	r3, [r5, #12]
 8008b64:	065b      	lsls	r3, r3, #25
 8008b66:	f53f af2d 	bmi.w	80089c4 <_svfiprintf_r+0x28>
 8008b6a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b6c:	e72c      	b.n	80089c8 <_svfiprintf_r+0x2c>
 8008b6e:	ab03      	add	r3, sp, #12
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	462a      	mov	r2, r5
 8008b74:	4b05      	ldr	r3, [pc, #20]	@ (8008b8c <_svfiprintf_r+0x1f0>)
 8008b76:	a904      	add	r1, sp, #16
 8008b78:	4638      	mov	r0, r7
 8008b7a:	f7fe f91d 	bl	8006db8 <_printf_i>
 8008b7e:	e7ed      	b.n	8008b5c <_svfiprintf_r+0x1c0>
 8008b80:	0800a0e0 	.word	0x0800a0e0
 8008b84:	0800a0ea 	.word	0x0800a0ea
 8008b88:	08006889 	.word	0x08006889
 8008b8c:	080088e5 	.word	0x080088e5
 8008b90:	0800a0e6 	.word	0x0800a0e6

08008b94 <__sflush_r>:
 8008b94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b9c:	0716      	lsls	r6, r2, #28
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	460c      	mov	r4, r1
 8008ba2:	d454      	bmi.n	8008c4e <__sflush_r+0xba>
 8008ba4:	684b      	ldr	r3, [r1, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	dc02      	bgt.n	8008bb0 <__sflush_r+0x1c>
 8008baa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	dd48      	ble.n	8008c42 <__sflush_r+0xae>
 8008bb0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bb2:	2e00      	cmp	r6, #0
 8008bb4:	d045      	beq.n	8008c42 <__sflush_r+0xae>
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008bbc:	682f      	ldr	r7, [r5, #0]
 8008bbe:	6a21      	ldr	r1, [r4, #32]
 8008bc0:	602b      	str	r3, [r5, #0]
 8008bc2:	d030      	beq.n	8008c26 <__sflush_r+0x92>
 8008bc4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	0759      	lsls	r1, r3, #29
 8008bca:	d505      	bpl.n	8008bd8 <__sflush_r+0x44>
 8008bcc:	6863      	ldr	r3, [r4, #4]
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008bd2:	b10b      	cbz	r3, 8008bd8 <__sflush_r+0x44>
 8008bd4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008bd6:	1ad2      	subs	r2, r2, r3
 8008bd8:	2300      	movs	r3, #0
 8008bda:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008bdc:	6a21      	ldr	r1, [r4, #32]
 8008bde:	4628      	mov	r0, r5
 8008be0:	47b0      	blx	r6
 8008be2:	1c43      	adds	r3, r0, #1
 8008be4:	89a3      	ldrh	r3, [r4, #12]
 8008be6:	d106      	bne.n	8008bf6 <__sflush_r+0x62>
 8008be8:	6829      	ldr	r1, [r5, #0]
 8008bea:	291d      	cmp	r1, #29
 8008bec:	d82b      	bhi.n	8008c46 <__sflush_r+0xb2>
 8008bee:	4a2a      	ldr	r2, [pc, #168]	@ (8008c98 <__sflush_r+0x104>)
 8008bf0:	410a      	asrs	r2, r1
 8008bf2:	07d6      	lsls	r6, r2, #31
 8008bf4:	d427      	bmi.n	8008c46 <__sflush_r+0xb2>
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	6062      	str	r2, [r4, #4]
 8008bfa:	04d9      	lsls	r1, r3, #19
 8008bfc:	6922      	ldr	r2, [r4, #16]
 8008bfe:	6022      	str	r2, [r4, #0]
 8008c00:	d504      	bpl.n	8008c0c <__sflush_r+0x78>
 8008c02:	1c42      	adds	r2, r0, #1
 8008c04:	d101      	bne.n	8008c0a <__sflush_r+0x76>
 8008c06:	682b      	ldr	r3, [r5, #0]
 8008c08:	b903      	cbnz	r3, 8008c0c <__sflush_r+0x78>
 8008c0a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008c0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c0e:	602f      	str	r7, [r5, #0]
 8008c10:	b1b9      	cbz	r1, 8008c42 <__sflush_r+0xae>
 8008c12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c16:	4299      	cmp	r1, r3
 8008c18:	d002      	beq.n	8008c20 <__sflush_r+0x8c>
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f7ff f9e0 	bl	8007fe0 <_free_r>
 8008c20:	2300      	movs	r3, #0
 8008c22:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c24:	e00d      	b.n	8008c42 <__sflush_r+0xae>
 8008c26:	2301      	movs	r3, #1
 8008c28:	4628      	mov	r0, r5
 8008c2a:	47b0      	blx	r6
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	1c50      	adds	r0, r2, #1
 8008c30:	d1c9      	bne.n	8008bc6 <__sflush_r+0x32>
 8008c32:	682b      	ldr	r3, [r5, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d0c6      	beq.n	8008bc6 <__sflush_r+0x32>
 8008c38:	2b1d      	cmp	r3, #29
 8008c3a:	d001      	beq.n	8008c40 <__sflush_r+0xac>
 8008c3c:	2b16      	cmp	r3, #22
 8008c3e:	d11e      	bne.n	8008c7e <__sflush_r+0xea>
 8008c40:	602f      	str	r7, [r5, #0]
 8008c42:	2000      	movs	r0, #0
 8008c44:	e022      	b.n	8008c8c <__sflush_r+0xf8>
 8008c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c4a:	b21b      	sxth	r3, r3
 8008c4c:	e01b      	b.n	8008c86 <__sflush_r+0xf2>
 8008c4e:	690f      	ldr	r7, [r1, #16]
 8008c50:	2f00      	cmp	r7, #0
 8008c52:	d0f6      	beq.n	8008c42 <__sflush_r+0xae>
 8008c54:	0793      	lsls	r3, r2, #30
 8008c56:	680e      	ldr	r6, [r1, #0]
 8008c58:	bf08      	it	eq
 8008c5a:	694b      	ldreq	r3, [r1, #20]
 8008c5c:	600f      	str	r7, [r1, #0]
 8008c5e:	bf18      	it	ne
 8008c60:	2300      	movne	r3, #0
 8008c62:	eba6 0807 	sub.w	r8, r6, r7
 8008c66:	608b      	str	r3, [r1, #8]
 8008c68:	f1b8 0f00 	cmp.w	r8, #0
 8008c6c:	dde9      	ble.n	8008c42 <__sflush_r+0xae>
 8008c6e:	6a21      	ldr	r1, [r4, #32]
 8008c70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008c72:	4643      	mov	r3, r8
 8008c74:	463a      	mov	r2, r7
 8008c76:	4628      	mov	r0, r5
 8008c78:	47b0      	blx	r6
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	dc08      	bgt.n	8008c90 <__sflush_r+0xfc>
 8008c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	f04f 30ff 	mov.w	r0, #4294967295
 8008c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c90:	4407      	add	r7, r0
 8008c92:	eba8 0800 	sub.w	r8, r8, r0
 8008c96:	e7e7      	b.n	8008c68 <__sflush_r+0xd4>
 8008c98:	dfbffffe 	.word	0xdfbffffe

08008c9c <_fflush_r>:
 8008c9c:	b538      	push	{r3, r4, r5, lr}
 8008c9e:	690b      	ldr	r3, [r1, #16]
 8008ca0:	4605      	mov	r5, r0
 8008ca2:	460c      	mov	r4, r1
 8008ca4:	b913      	cbnz	r3, 8008cac <_fflush_r+0x10>
 8008ca6:	2500      	movs	r5, #0
 8008ca8:	4628      	mov	r0, r5
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	b118      	cbz	r0, 8008cb6 <_fflush_r+0x1a>
 8008cae:	6a03      	ldr	r3, [r0, #32]
 8008cb0:	b90b      	cbnz	r3, 8008cb6 <_fflush_r+0x1a>
 8008cb2:	f7fe fa2d 	bl	8007110 <__sinit>
 8008cb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d0f3      	beq.n	8008ca6 <_fflush_r+0xa>
 8008cbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008cc0:	07d0      	lsls	r0, r2, #31
 8008cc2:	d404      	bmi.n	8008cce <_fflush_r+0x32>
 8008cc4:	0599      	lsls	r1, r3, #22
 8008cc6:	d402      	bmi.n	8008cce <_fflush_r+0x32>
 8008cc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008cca:	f7fe fb38 	bl	800733e <__retarget_lock_acquire_recursive>
 8008cce:	4628      	mov	r0, r5
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	f7ff ff5f 	bl	8008b94 <__sflush_r>
 8008cd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008cd8:	07da      	lsls	r2, r3, #31
 8008cda:	4605      	mov	r5, r0
 8008cdc:	d4e4      	bmi.n	8008ca8 <_fflush_r+0xc>
 8008cde:	89a3      	ldrh	r3, [r4, #12]
 8008ce0:	059b      	lsls	r3, r3, #22
 8008ce2:	d4e1      	bmi.n	8008ca8 <_fflush_r+0xc>
 8008ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ce6:	f7fe fb2b 	bl	8007340 <__retarget_lock_release_recursive>
 8008cea:	e7dd      	b.n	8008ca8 <_fflush_r+0xc>

08008cec <memmove>:
 8008cec:	4288      	cmp	r0, r1
 8008cee:	b510      	push	{r4, lr}
 8008cf0:	eb01 0402 	add.w	r4, r1, r2
 8008cf4:	d902      	bls.n	8008cfc <memmove+0x10>
 8008cf6:	4284      	cmp	r4, r0
 8008cf8:	4623      	mov	r3, r4
 8008cfa:	d807      	bhi.n	8008d0c <memmove+0x20>
 8008cfc:	1e43      	subs	r3, r0, #1
 8008cfe:	42a1      	cmp	r1, r4
 8008d00:	d008      	beq.n	8008d14 <memmove+0x28>
 8008d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d0a:	e7f8      	b.n	8008cfe <memmove+0x12>
 8008d0c:	4402      	add	r2, r0
 8008d0e:	4601      	mov	r1, r0
 8008d10:	428a      	cmp	r2, r1
 8008d12:	d100      	bne.n	8008d16 <memmove+0x2a>
 8008d14:	bd10      	pop	{r4, pc}
 8008d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d1e:	e7f7      	b.n	8008d10 <memmove+0x24>

08008d20 <_sbrk_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d06      	ldr	r5, [pc, #24]	@ (8008d3c <_sbrk_r+0x1c>)
 8008d24:	2300      	movs	r3, #0
 8008d26:	4604      	mov	r4, r0
 8008d28:	4608      	mov	r0, r1
 8008d2a:	602b      	str	r3, [r5, #0]
 8008d2c:	f7fa f948 	bl	8002fc0 <_sbrk>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d102      	bne.n	8008d3a <_sbrk_r+0x1a>
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	b103      	cbz	r3, 8008d3a <_sbrk_r+0x1a>
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	20000dc8 	.word	0x20000dc8

08008d40 <memcpy>:
 8008d40:	440a      	add	r2, r1
 8008d42:	4291      	cmp	r1, r2
 8008d44:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d48:	d100      	bne.n	8008d4c <memcpy+0xc>
 8008d4a:	4770      	bx	lr
 8008d4c:	b510      	push	{r4, lr}
 8008d4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d56:	4291      	cmp	r1, r2
 8008d58:	d1f9      	bne.n	8008d4e <memcpy+0xe>
 8008d5a:	bd10      	pop	{r4, pc}

08008d5c <__assert_func>:
 8008d5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d5e:	4614      	mov	r4, r2
 8008d60:	461a      	mov	r2, r3
 8008d62:	4b09      	ldr	r3, [pc, #36]	@ (8008d88 <__assert_func+0x2c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4605      	mov	r5, r0
 8008d68:	68d8      	ldr	r0, [r3, #12]
 8008d6a:	b954      	cbnz	r4, 8008d82 <__assert_func+0x26>
 8008d6c:	4b07      	ldr	r3, [pc, #28]	@ (8008d8c <__assert_func+0x30>)
 8008d6e:	461c      	mov	r4, r3
 8008d70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d74:	9100      	str	r1, [sp, #0]
 8008d76:	462b      	mov	r3, r5
 8008d78:	4905      	ldr	r1, [pc, #20]	@ (8008d90 <__assert_func+0x34>)
 8008d7a:	f000 f86f 	bl	8008e5c <fiprintf>
 8008d7e:	f000 f87f 	bl	8008e80 <abort>
 8008d82:	4b04      	ldr	r3, [pc, #16]	@ (8008d94 <__assert_func+0x38>)
 8008d84:	e7f4      	b.n	8008d70 <__assert_func+0x14>
 8008d86:	bf00      	nop
 8008d88:	20000020 	.word	0x20000020
 8008d8c:	0800a136 	.word	0x0800a136
 8008d90:	0800a108 	.word	0x0800a108
 8008d94:	0800a0fb 	.word	0x0800a0fb

08008d98 <_calloc_r>:
 8008d98:	b570      	push	{r4, r5, r6, lr}
 8008d9a:	fba1 5402 	umull	r5, r4, r1, r2
 8008d9e:	b93c      	cbnz	r4, 8008db0 <_calloc_r+0x18>
 8008da0:	4629      	mov	r1, r5
 8008da2:	f7ff f991 	bl	80080c8 <_malloc_r>
 8008da6:	4606      	mov	r6, r0
 8008da8:	b928      	cbnz	r0, 8008db6 <_calloc_r+0x1e>
 8008daa:	2600      	movs	r6, #0
 8008dac:	4630      	mov	r0, r6
 8008dae:	bd70      	pop	{r4, r5, r6, pc}
 8008db0:	220c      	movs	r2, #12
 8008db2:	6002      	str	r2, [r0, #0]
 8008db4:	e7f9      	b.n	8008daa <_calloc_r+0x12>
 8008db6:	462a      	mov	r2, r5
 8008db8:	4621      	mov	r1, r4
 8008dba:	f7fe fa42 	bl	8007242 <memset>
 8008dbe:	e7f5      	b.n	8008dac <_calloc_r+0x14>

08008dc0 <__ascii_mbtowc>:
 8008dc0:	b082      	sub	sp, #8
 8008dc2:	b901      	cbnz	r1, 8008dc6 <__ascii_mbtowc+0x6>
 8008dc4:	a901      	add	r1, sp, #4
 8008dc6:	b142      	cbz	r2, 8008dda <__ascii_mbtowc+0x1a>
 8008dc8:	b14b      	cbz	r3, 8008dde <__ascii_mbtowc+0x1e>
 8008dca:	7813      	ldrb	r3, [r2, #0]
 8008dcc:	600b      	str	r3, [r1, #0]
 8008dce:	7812      	ldrb	r2, [r2, #0]
 8008dd0:	1e10      	subs	r0, r2, #0
 8008dd2:	bf18      	it	ne
 8008dd4:	2001      	movne	r0, #1
 8008dd6:	b002      	add	sp, #8
 8008dd8:	4770      	bx	lr
 8008dda:	4610      	mov	r0, r2
 8008ddc:	e7fb      	b.n	8008dd6 <__ascii_mbtowc+0x16>
 8008dde:	f06f 0001 	mvn.w	r0, #1
 8008de2:	e7f8      	b.n	8008dd6 <__ascii_mbtowc+0x16>

08008de4 <_realloc_r>:
 8008de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de8:	4680      	mov	r8, r0
 8008dea:	4615      	mov	r5, r2
 8008dec:	460c      	mov	r4, r1
 8008dee:	b921      	cbnz	r1, 8008dfa <_realloc_r+0x16>
 8008df0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008df4:	4611      	mov	r1, r2
 8008df6:	f7ff b967 	b.w	80080c8 <_malloc_r>
 8008dfa:	b92a      	cbnz	r2, 8008e08 <_realloc_r+0x24>
 8008dfc:	f7ff f8f0 	bl	8007fe0 <_free_r>
 8008e00:	2400      	movs	r4, #0
 8008e02:	4620      	mov	r0, r4
 8008e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e08:	f000 f841 	bl	8008e8e <_malloc_usable_size_r>
 8008e0c:	4285      	cmp	r5, r0
 8008e0e:	4606      	mov	r6, r0
 8008e10:	d802      	bhi.n	8008e18 <_realloc_r+0x34>
 8008e12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008e16:	d8f4      	bhi.n	8008e02 <_realloc_r+0x1e>
 8008e18:	4629      	mov	r1, r5
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	f7ff f954 	bl	80080c8 <_malloc_r>
 8008e20:	4607      	mov	r7, r0
 8008e22:	2800      	cmp	r0, #0
 8008e24:	d0ec      	beq.n	8008e00 <_realloc_r+0x1c>
 8008e26:	42b5      	cmp	r5, r6
 8008e28:	462a      	mov	r2, r5
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	bf28      	it	cs
 8008e2e:	4632      	movcs	r2, r6
 8008e30:	f7ff ff86 	bl	8008d40 <memcpy>
 8008e34:	4621      	mov	r1, r4
 8008e36:	4640      	mov	r0, r8
 8008e38:	f7ff f8d2 	bl	8007fe0 <_free_r>
 8008e3c:	463c      	mov	r4, r7
 8008e3e:	e7e0      	b.n	8008e02 <_realloc_r+0x1e>

08008e40 <__ascii_wctomb>:
 8008e40:	4603      	mov	r3, r0
 8008e42:	4608      	mov	r0, r1
 8008e44:	b141      	cbz	r1, 8008e58 <__ascii_wctomb+0x18>
 8008e46:	2aff      	cmp	r2, #255	@ 0xff
 8008e48:	d904      	bls.n	8008e54 <__ascii_wctomb+0x14>
 8008e4a:	228a      	movs	r2, #138	@ 0x8a
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e52:	4770      	bx	lr
 8008e54:	700a      	strb	r2, [r1, #0]
 8008e56:	2001      	movs	r0, #1
 8008e58:	4770      	bx	lr
	...

08008e5c <fiprintf>:
 8008e5c:	b40e      	push	{r1, r2, r3}
 8008e5e:	b503      	push	{r0, r1, lr}
 8008e60:	4601      	mov	r1, r0
 8008e62:	ab03      	add	r3, sp, #12
 8008e64:	4805      	ldr	r0, [pc, #20]	@ (8008e7c <fiprintf+0x20>)
 8008e66:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e6a:	6800      	ldr	r0, [r0, #0]
 8008e6c:	9301      	str	r3, [sp, #4]
 8008e6e:	f000 f83f 	bl	8008ef0 <_vfiprintf_r>
 8008e72:	b002      	add	sp, #8
 8008e74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e78:	b003      	add	sp, #12
 8008e7a:	4770      	bx	lr
 8008e7c:	20000020 	.word	0x20000020

08008e80 <abort>:
 8008e80:	b508      	push	{r3, lr}
 8008e82:	2006      	movs	r0, #6
 8008e84:	f000 fa08 	bl	8009298 <raise>
 8008e88:	2001      	movs	r0, #1
 8008e8a:	f7fa f821 	bl	8002ed0 <_exit>

08008e8e <_malloc_usable_size_r>:
 8008e8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e92:	1f18      	subs	r0, r3, #4
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	bfbc      	itt	lt
 8008e98:	580b      	ldrlt	r3, [r1, r0]
 8008e9a:	18c0      	addlt	r0, r0, r3
 8008e9c:	4770      	bx	lr

08008e9e <__sfputc_r>:
 8008e9e:	6893      	ldr	r3, [r2, #8]
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	b410      	push	{r4}
 8008ea6:	6093      	str	r3, [r2, #8]
 8008ea8:	da08      	bge.n	8008ebc <__sfputc_r+0x1e>
 8008eaa:	6994      	ldr	r4, [r2, #24]
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	db01      	blt.n	8008eb4 <__sfputc_r+0x16>
 8008eb0:	290a      	cmp	r1, #10
 8008eb2:	d103      	bne.n	8008ebc <__sfputc_r+0x1e>
 8008eb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eb8:	f000 b932 	b.w	8009120 <__swbuf_r>
 8008ebc:	6813      	ldr	r3, [r2, #0]
 8008ebe:	1c58      	adds	r0, r3, #1
 8008ec0:	6010      	str	r0, [r2, #0]
 8008ec2:	7019      	strb	r1, [r3, #0]
 8008ec4:	4608      	mov	r0, r1
 8008ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <__sfputs_r>:
 8008ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ece:	4606      	mov	r6, r0
 8008ed0:	460f      	mov	r7, r1
 8008ed2:	4614      	mov	r4, r2
 8008ed4:	18d5      	adds	r5, r2, r3
 8008ed6:	42ac      	cmp	r4, r5
 8008ed8:	d101      	bne.n	8008ede <__sfputs_r+0x12>
 8008eda:	2000      	movs	r0, #0
 8008edc:	e007      	b.n	8008eee <__sfputs_r+0x22>
 8008ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee2:	463a      	mov	r2, r7
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7ff ffda 	bl	8008e9e <__sfputc_r>
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	d1f3      	bne.n	8008ed6 <__sfputs_r+0xa>
 8008eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008ef0 <_vfiprintf_r>:
 8008ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef4:	460d      	mov	r5, r1
 8008ef6:	b09d      	sub	sp, #116	@ 0x74
 8008ef8:	4614      	mov	r4, r2
 8008efa:	4698      	mov	r8, r3
 8008efc:	4606      	mov	r6, r0
 8008efe:	b118      	cbz	r0, 8008f08 <_vfiprintf_r+0x18>
 8008f00:	6a03      	ldr	r3, [r0, #32]
 8008f02:	b90b      	cbnz	r3, 8008f08 <_vfiprintf_r+0x18>
 8008f04:	f7fe f904 	bl	8007110 <__sinit>
 8008f08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f0a:	07d9      	lsls	r1, r3, #31
 8008f0c:	d405      	bmi.n	8008f1a <_vfiprintf_r+0x2a>
 8008f0e:	89ab      	ldrh	r3, [r5, #12]
 8008f10:	059a      	lsls	r2, r3, #22
 8008f12:	d402      	bmi.n	8008f1a <_vfiprintf_r+0x2a>
 8008f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f16:	f7fe fa12 	bl	800733e <__retarget_lock_acquire_recursive>
 8008f1a:	89ab      	ldrh	r3, [r5, #12]
 8008f1c:	071b      	lsls	r3, r3, #28
 8008f1e:	d501      	bpl.n	8008f24 <_vfiprintf_r+0x34>
 8008f20:	692b      	ldr	r3, [r5, #16]
 8008f22:	b99b      	cbnz	r3, 8008f4c <_vfiprintf_r+0x5c>
 8008f24:	4629      	mov	r1, r5
 8008f26:	4630      	mov	r0, r6
 8008f28:	f000 f938 	bl	800919c <__swsetup_r>
 8008f2c:	b170      	cbz	r0, 8008f4c <_vfiprintf_r+0x5c>
 8008f2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f30:	07dc      	lsls	r4, r3, #31
 8008f32:	d504      	bpl.n	8008f3e <_vfiprintf_r+0x4e>
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295
 8008f38:	b01d      	add	sp, #116	@ 0x74
 8008f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f3e:	89ab      	ldrh	r3, [r5, #12]
 8008f40:	0598      	lsls	r0, r3, #22
 8008f42:	d4f7      	bmi.n	8008f34 <_vfiprintf_r+0x44>
 8008f44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f46:	f7fe f9fb 	bl	8007340 <__retarget_lock_release_recursive>
 8008f4a:	e7f3      	b.n	8008f34 <_vfiprintf_r+0x44>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f50:	2320      	movs	r3, #32
 8008f52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f56:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f5a:	2330      	movs	r3, #48	@ 0x30
 8008f5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800910c <_vfiprintf_r+0x21c>
 8008f60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f64:	f04f 0901 	mov.w	r9, #1
 8008f68:	4623      	mov	r3, r4
 8008f6a:	469a      	mov	sl, r3
 8008f6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f70:	b10a      	cbz	r2, 8008f76 <_vfiprintf_r+0x86>
 8008f72:	2a25      	cmp	r2, #37	@ 0x25
 8008f74:	d1f9      	bne.n	8008f6a <_vfiprintf_r+0x7a>
 8008f76:	ebba 0b04 	subs.w	fp, sl, r4
 8008f7a:	d00b      	beq.n	8008f94 <_vfiprintf_r+0xa4>
 8008f7c:	465b      	mov	r3, fp
 8008f7e:	4622      	mov	r2, r4
 8008f80:	4629      	mov	r1, r5
 8008f82:	4630      	mov	r0, r6
 8008f84:	f7ff ffa2 	bl	8008ecc <__sfputs_r>
 8008f88:	3001      	adds	r0, #1
 8008f8a:	f000 80a7 	beq.w	80090dc <_vfiprintf_r+0x1ec>
 8008f8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f90:	445a      	add	r2, fp
 8008f92:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f94:	f89a 3000 	ldrb.w	r3, [sl]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	f000 809f 	beq.w	80090dc <_vfiprintf_r+0x1ec>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fa8:	f10a 0a01 	add.w	sl, sl, #1
 8008fac:	9304      	str	r3, [sp, #16]
 8008fae:	9307      	str	r3, [sp, #28]
 8008fb0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fb6:	4654      	mov	r4, sl
 8008fb8:	2205      	movs	r2, #5
 8008fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fbe:	4853      	ldr	r0, [pc, #332]	@ (800910c <_vfiprintf_r+0x21c>)
 8008fc0:	f7f7 f906 	bl	80001d0 <memchr>
 8008fc4:	9a04      	ldr	r2, [sp, #16]
 8008fc6:	b9d8      	cbnz	r0, 8009000 <_vfiprintf_r+0x110>
 8008fc8:	06d1      	lsls	r1, r2, #27
 8008fca:	bf44      	itt	mi
 8008fcc:	2320      	movmi	r3, #32
 8008fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fd2:	0713      	lsls	r3, r2, #28
 8008fd4:	bf44      	itt	mi
 8008fd6:	232b      	movmi	r3, #43	@ 0x2b
 8008fd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fdc:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fe2:	d015      	beq.n	8009010 <_vfiprintf_r+0x120>
 8008fe4:	9a07      	ldr	r2, [sp, #28]
 8008fe6:	4654      	mov	r4, sl
 8008fe8:	2000      	movs	r0, #0
 8008fea:	f04f 0c0a 	mov.w	ip, #10
 8008fee:	4621      	mov	r1, r4
 8008ff0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ff4:	3b30      	subs	r3, #48	@ 0x30
 8008ff6:	2b09      	cmp	r3, #9
 8008ff8:	d94b      	bls.n	8009092 <_vfiprintf_r+0x1a2>
 8008ffa:	b1b0      	cbz	r0, 800902a <_vfiprintf_r+0x13a>
 8008ffc:	9207      	str	r2, [sp, #28]
 8008ffe:	e014      	b.n	800902a <_vfiprintf_r+0x13a>
 8009000:	eba0 0308 	sub.w	r3, r0, r8
 8009004:	fa09 f303 	lsl.w	r3, r9, r3
 8009008:	4313      	orrs	r3, r2
 800900a:	9304      	str	r3, [sp, #16]
 800900c:	46a2      	mov	sl, r4
 800900e:	e7d2      	b.n	8008fb6 <_vfiprintf_r+0xc6>
 8009010:	9b03      	ldr	r3, [sp, #12]
 8009012:	1d19      	adds	r1, r3, #4
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	9103      	str	r1, [sp, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	bfbb      	ittet	lt
 800901c:	425b      	neglt	r3, r3
 800901e:	f042 0202 	orrlt.w	r2, r2, #2
 8009022:	9307      	strge	r3, [sp, #28]
 8009024:	9307      	strlt	r3, [sp, #28]
 8009026:	bfb8      	it	lt
 8009028:	9204      	strlt	r2, [sp, #16]
 800902a:	7823      	ldrb	r3, [r4, #0]
 800902c:	2b2e      	cmp	r3, #46	@ 0x2e
 800902e:	d10a      	bne.n	8009046 <_vfiprintf_r+0x156>
 8009030:	7863      	ldrb	r3, [r4, #1]
 8009032:	2b2a      	cmp	r3, #42	@ 0x2a
 8009034:	d132      	bne.n	800909c <_vfiprintf_r+0x1ac>
 8009036:	9b03      	ldr	r3, [sp, #12]
 8009038:	1d1a      	adds	r2, r3, #4
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	9203      	str	r2, [sp, #12]
 800903e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009042:	3402      	adds	r4, #2
 8009044:	9305      	str	r3, [sp, #20]
 8009046:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800911c <_vfiprintf_r+0x22c>
 800904a:	7821      	ldrb	r1, [r4, #0]
 800904c:	2203      	movs	r2, #3
 800904e:	4650      	mov	r0, sl
 8009050:	f7f7 f8be 	bl	80001d0 <memchr>
 8009054:	b138      	cbz	r0, 8009066 <_vfiprintf_r+0x176>
 8009056:	9b04      	ldr	r3, [sp, #16]
 8009058:	eba0 000a 	sub.w	r0, r0, sl
 800905c:	2240      	movs	r2, #64	@ 0x40
 800905e:	4082      	lsls	r2, r0
 8009060:	4313      	orrs	r3, r2
 8009062:	3401      	adds	r4, #1
 8009064:	9304      	str	r3, [sp, #16]
 8009066:	f814 1b01 	ldrb.w	r1, [r4], #1
 800906a:	4829      	ldr	r0, [pc, #164]	@ (8009110 <_vfiprintf_r+0x220>)
 800906c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009070:	2206      	movs	r2, #6
 8009072:	f7f7 f8ad 	bl	80001d0 <memchr>
 8009076:	2800      	cmp	r0, #0
 8009078:	d03f      	beq.n	80090fa <_vfiprintf_r+0x20a>
 800907a:	4b26      	ldr	r3, [pc, #152]	@ (8009114 <_vfiprintf_r+0x224>)
 800907c:	bb1b      	cbnz	r3, 80090c6 <_vfiprintf_r+0x1d6>
 800907e:	9b03      	ldr	r3, [sp, #12]
 8009080:	3307      	adds	r3, #7
 8009082:	f023 0307 	bic.w	r3, r3, #7
 8009086:	3308      	adds	r3, #8
 8009088:	9303      	str	r3, [sp, #12]
 800908a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800908c:	443b      	add	r3, r7
 800908e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009090:	e76a      	b.n	8008f68 <_vfiprintf_r+0x78>
 8009092:	fb0c 3202 	mla	r2, ip, r2, r3
 8009096:	460c      	mov	r4, r1
 8009098:	2001      	movs	r0, #1
 800909a:	e7a8      	b.n	8008fee <_vfiprintf_r+0xfe>
 800909c:	2300      	movs	r3, #0
 800909e:	3401      	adds	r4, #1
 80090a0:	9305      	str	r3, [sp, #20]
 80090a2:	4619      	mov	r1, r3
 80090a4:	f04f 0c0a 	mov.w	ip, #10
 80090a8:	4620      	mov	r0, r4
 80090aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ae:	3a30      	subs	r2, #48	@ 0x30
 80090b0:	2a09      	cmp	r2, #9
 80090b2:	d903      	bls.n	80090bc <_vfiprintf_r+0x1cc>
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d0c6      	beq.n	8009046 <_vfiprintf_r+0x156>
 80090b8:	9105      	str	r1, [sp, #20]
 80090ba:	e7c4      	b.n	8009046 <_vfiprintf_r+0x156>
 80090bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80090c0:	4604      	mov	r4, r0
 80090c2:	2301      	movs	r3, #1
 80090c4:	e7f0      	b.n	80090a8 <_vfiprintf_r+0x1b8>
 80090c6:	ab03      	add	r3, sp, #12
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	462a      	mov	r2, r5
 80090cc:	4b12      	ldr	r3, [pc, #72]	@ (8009118 <_vfiprintf_r+0x228>)
 80090ce:	a904      	add	r1, sp, #16
 80090d0:	4630      	mov	r0, r6
 80090d2:	f7fd fbd9 	bl	8006888 <_printf_float>
 80090d6:	4607      	mov	r7, r0
 80090d8:	1c78      	adds	r0, r7, #1
 80090da:	d1d6      	bne.n	800908a <_vfiprintf_r+0x19a>
 80090dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80090de:	07d9      	lsls	r1, r3, #31
 80090e0:	d405      	bmi.n	80090ee <_vfiprintf_r+0x1fe>
 80090e2:	89ab      	ldrh	r3, [r5, #12]
 80090e4:	059a      	lsls	r2, r3, #22
 80090e6:	d402      	bmi.n	80090ee <_vfiprintf_r+0x1fe>
 80090e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80090ea:	f7fe f929 	bl	8007340 <__retarget_lock_release_recursive>
 80090ee:	89ab      	ldrh	r3, [r5, #12]
 80090f0:	065b      	lsls	r3, r3, #25
 80090f2:	f53f af1f 	bmi.w	8008f34 <_vfiprintf_r+0x44>
 80090f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090f8:	e71e      	b.n	8008f38 <_vfiprintf_r+0x48>
 80090fa:	ab03      	add	r3, sp, #12
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	462a      	mov	r2, r5
 8009100:	4b05      	ldr	r3, [pc, #20]	@ (8009118 <_vfiprintf_r+0x228>)
 8009102:	a904      	add	r1, sp, #16
 8009104:	4630      	mov	r0, r6
 8009106:	f7fd fe57 	bl	8006db8 <_printf_i>
 800910a:	e7e4      	b.n	80090d6 <_vfiprintf_r+0x1e6>
 800910c:	0800a0e0 	.word	0x0800a0e0
 8009110:	0800a0ea 	.word	0x0800a0ea
 8009114:	08006889 	.word	0x08006889
 8009118:	08008ecd 	.word	0x08008ecd
 800911c:	0800a0e6 	.word	0x0800a0e6

08009120 <__swbuf_r>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	460e      	mov	r6, r1
 8009124:	4614      	mov	r4, r2
 8009126:	4605      	mov	r5, r0
 8009128:	b118      	cbz	r0, 8009132 <__swbuf_r+0x12>
 800912a:	6a03      	ldr	r3, [r0, #32]
 800912c:	b90b      	cbnz	r3, 8009132 <__swbuf_r+0x12>
 800912e:	f7fd ffef 	bl	8007110 <__sinit>
 8009132:	69a3      	ldr	r3, [r4, #24]
 8009134:	60a3      	str	r3, [r4, #8]
 8009136:	89a3      	ldrh	r3, [r4, #12]
 8009138:	071a      	lsls	r2, r3, #28
 800913a:	d501      	bpl.n	8009140 <__swbuf_r+0x20>
 800913c:	6923      	ldr	r3, [r4, #16]
 800913e:	b943      	cbnz	r3, 8009152 <__swbuf_r+0x32>
 8009140:	4621      	mov	r1, r4
 8009142:	4628      	mov	r0, r5
 8009144:	f000 f82a 	bl	800919c <__swsetup_r>
 8009148:	b118      	cbz	r0, 8009152 <__swbuf_r+0x32>
 800914a:	f04f 37ff 	mov.w	r7, #4294967295
 800914e:	4638      	mov	r0, r7
 8009150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009152:	6823      	ldr	r3, [r4, #0]
 8009154:	6922      	ldr	r2, [r4, #16]
 8009156:	1a98      	subs	r0, r3, r2
 8009158:	6963      	ldr	r3, [r4, #20]
 800915a:	b2f6      	uxtb	r6, r6
 800915c:	4283      	cmp	r3, r0
 800915e:	4637      	mov	r7, r6
 8009160:	dc05      	bgt.n	800916e <__swbuf_r+0x4e>
 8009162:	4621      	mov	r1, r4
 8009164:	4628      	mov	r0, r5
 8009166:	f7ff fd99 	bl	8008c9c <_fflush_r>
 800916a:	2800      	cmp	r0, #0
 800916c:	d1ed      	bne.n	800914a <__swbuf_r+0x2a>
 800916e:	68a3      	ldr	r3, [r4, #8]
 8009170:	3b01      	subs	r3, #1
 8009172:	60a3      	str	r3, [r4, #8]
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	1c5a      	adds	r2, r3, #1
 8009178:	6022      	str	r2, [r4, #0]
 800917a:	701e      	strb	r6, [r3, #0]
 800917c:	6962      	ldr	r2, [r4, #20]
 800917e:	1c43      	adds	r3, r0, #1
 8009180:	429a      	cmp	r2, r3
 8009182:	d004      	beq.n	800918e <__swbuf_r+0x6e>
 8009184:	89a3      	ldrh	r3, [r4, #12]
 8009186:	07db      	lsls	r3, r3, #31
 8009188:	d5e1      	bpl.n	800914e <__swbuf_r+0x2e>
 800918a:	2e0a      	cmp	r6, #10
 800918c:	d1df      	bne.n	800914e <__swbuf_r+0x2e>
 800918e:	4621      	mov	r1, r4
 8009190:	4628      	mov	r0, r5
 8009192:	f7ff fd83 	bl	8008c9c <_fflush_r>
 8009196:	2800      	cmp	r0, #0
 8009198:	d0d9      	beq.n	800914e <__swbuf_r+0x2e>
 800919a:	e7d6      	b.n	800914a <__swbuf_r+0x2a>

0800919c <__swsetup_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4b29      	ldr	r3, [pc, #164]	@ (8009244 <__swsetup_r+0xa8>)
 80091a0:	4605      	mov	r5, r0
 80091a2:	6818      	ldr	r0, [r3, #0]
 80091a4:	460c      	mov	r4, r1
 80091a6:	b118      	cbz	r0, 80091b0 <__swsetup_r+0x14>
 80091a8:	6a03      	ldr	r3, [r0, #32]
 80091aa:	b90b      	cbnz	r3, 80091b0 <__swsetup_r+0x14>
 80091ac:	f7fd ffb0 	bl	8007110 <__sinit>
 80091b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091b4:	0719      	lsls	r1, r3, #28
 80091b6:	d422      	bmi.n	80091fe <__swsetup_r+0x62>
 80091b8:	06da      	lsls	r2, r3, #27
 80091ba:	d407      	bmi.n	80091cc <__swsetup_r+0x30>
 80091bc:	2209      	movs	r2, #9
 80091be:	602a      	str	r2, [r5, #0]
 80091c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091c4:	81a3      	strh	r3, [r4, #12]
 80091c6:	f04f 30ff 	mov.w	r0, #4294967295
 80091ca:	e033      	b.n	8009234 <__swsetup_r+0x98>
 80091cc:	0758      	lsls	r0, r3, #29
 80091ce:	d512      	bpl.n	80091f6 <__swsetup_r+0x5a>
 80091d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091d2:	b141      	cbz	r1, 80091e6 <__swsetup_r+0x4a>
 80091d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091d8:	4299      	cmp	r1, r3
 80091da:	d002      	beq.n	80091e2 <__swsetup_r+0x46>
 80091dc:	4628      	mov	r0, r5
 80091de:	f7fe feff 	bl	8007fe0 <_free_r>
 80091e2:	2300      	movs	r3, #0
 80091e4:	6363      	str	r3, [r4, #52]	@ 0x34
 80091e6:	89a3      	ldrh	r3, [r4, #12]
 80091e8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80091ec:	81a3      	strh	r3, [r4, #12]
 80091ee:	2300      	movs	r3, #0
 80091f0:	6063      	str	r3, [r4, #4]
 80091f2:	6923      	ldr	r3, [r4, #16]
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	f043 0308 	orr.w	r3, r3, #8
 80091fc:	81a3      	strh	r3, [r4, #12]
 80091fe:	6923      	ldr	r3, [r4, #16]
 8009200:	b94b      	cbnz	r3, 8009216 <__swsetup_r+0x7a>
 8009202:	89a3      	ldrh	r3, [r4, #12]
 8009204:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800920c:	d003      	beq.n	8009216 <__swsetup_r+0x7a>
 800920e:	4621      	mov	r1, r4
 8009210:	4628      	mov	r0, r5
 8009212:	f000 f883 	bl	800931c <__smakebuf_r>
 8009216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800921a:	f013 0201 	ands.w	r2, r3, #1
 800921e:	d00a      	beq.n	8009236 <__swsetup_r+0x9a>
 8009220:	2200      	movs	r2, #0
 8009222:	60a2      	str	r2, [r4, #8]
 8009224:	6962      	ldr	r2, [r4, #20]
 8009226:	4252      	negs	r2, r2
 8009228:	61a2      	str	r2, [r4, #24]
 800922a:	6922      	ldr	r2, [r4, #16]
 800922c:	b942      	cbnz	r2, 8009240 <__swsetup_r+0xa4>
 800922e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009232:	d1c5      	bne.n	80091c0 <__swsetup_r+0x24>
 8009234:	bd38      	pop	{r3, r4, r5, pc}
 8009236:	0799      	lsls	r1, r3, #30
 8009238:	bf58      	it	pl
 800923a:	6962      	ldrpl	r2, [r4, #20]
 800923c:	60a2      	str	r2, [r4, #8]
 800923e:	e7f4      	b.n	800922a <__swsetup_r+0x8e>
 8009240:	2000      	movs	r0, #0
 8009242:	e7f7      	b.n	8009234 <__swsetup_r+0x98>
 8009244:	20000020 	.word	0x20000020

08009248 <_raise_r>:
 8009248:	291f      	cmp	r1, #31
 800924a:	b538      	push	{r3, r4, r5, lr}
 800924c:	4605      	mov	r5, r0
 800924e:	460c      	mov	r4, r1
 8009250:	d904      	bls.n	800925c <_raise_r+0x14>
 8009252:	2316      	movs	r3, #22
 8009254:	6003      	str	r3, [r0, #0]
 8009256:	f04f 30ff 	mov.w	r0, #4294967295
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800925e:	b112      	cbz	r2, 8009266 <_raise_r+0x1e>
 8009260:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009264:	b94b      	cbnz	r3, 800927a <_raise_r+0x32>
 8009266:	4628      	mov	r0, r5
 8009268:	f000 f830 	bl	80092cc <_getpid_r>
 800926c:	4622      	mov	r2, r4
 800926e:	4601      	mov	r1, r0
 8009270:	4628      	mov	r0, r5
 8009272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009276:	f000 b817 	b.w	80092a8 <_kill_r>
 800927a:	2b01      	cmp	r3, #1
 800927c:	d00a      	beq.n	8009294 <_raise_r+0x4c>
 800927e:	1c59      	adds	r1, r3, #1
 8009280:	d103      	bne.n	800928a <_raise_r+0x42>
 8009282:	2316      	movs	r3, #22
 8009284:	6003      	str	r3, [r0, #0]
 8009286:	2001      	movs	r0, #1
 8009288:	e7e7      	b.n	800925a <_raise_r+0x12>
 800928a:	2100      	movs	r1, #0
 800928c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009290:	4620      	mov	r0, r4
 8009292:	4798      	blx	r3
 8009294:	2000      	movs	r0, #0
 8009296:	e7e0      	b.n	800925a <_raise_r+0x12>

08009298 <raise>:
 8009298:	4b02      	ldr	r3, [pc, #8]	@ (80092a4 <raise+0xc>)
 800929a:	4601      	mov	r1, r0
 800929c:	6818      	ldr	r0, [r3, #0]
 800929e:	f7ff bfd3 	b.w	8009248 <_raise_r>
 80092a2:	bf00      	nop
 80092a4:	20000020 	.word	0x20000020

080092a8 <_kill_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	4d07      	ldr	r5, [pc, #28]	@ (80092c8 <_kill_r+0x20>)
 80092ac:	2300      	movs	r3, #0
 80092ae:	4604      	mov	r4, r0
 80092b0:	4608      	mov	r0, r1
 80092b2:	4611      	mov	r1, r2
 80092b4:	602b      	str	r3, [r5, #0]
 80092b6:	f7f9 fdfb 	bl	8002eb0 <_kill>
 80092ba:	1c43      	adds	r3, r0, #1
 80092bc:	d102      	bne.n	80092c4 <_kill_r+0x1c>
 80092be:	682b      	ldr	r3, [r5, #0]
 80092c0:	b103      	cbz	r3, 80092c4 <_kill_r+0x1c>
 80092c2:	6023      	str	r3, [r4, #0]
 80092c4:	bd38      	pop	{r3, r4, r5, pc}
 80092c6:	bf00      	nop
 80092c8:	20000dc8 	.word	0x20000dc8

080092cc <_getpid_r>:
 80092cc:	f7f9 bde8 	b.w	8002ea0 <_getpid>

080092d0 <__swhatbuf_r>:
 80092d0:	b570      	push	{r4, r5, r6, lr}
 80092d2:	460c      	mov	r4, r1
 80092d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092d8:	2900      	cmp	r1, #0
 80092da:	b096      	sub	sp, #88	@ 0x58
 80092dc:	4615      	mov	r5, r2
 80092de:	461e      	mov	r6, r3
 80092e0:	da0d      	bge.n	80092fe <__swhatbuf_r+0x2e>
 80092e2:	89a3      	ldrh	r3, [r4, #12]
 80092e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80092e8:	f04f 0100 	mov.w	r1, #0
 80092ec:	bf14      	ite	ne
 80092ee:	2340      	movne	r3, #64	@ 0x40
 80092f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80092f4:	2000      	movs	r0, #0
 80092f6:	6031      	str	r1, [r6, #0]
 80092f8:	602b      	str	r3, [r5, #0]
 80092fa:	b016      	add	sp, #88	@ 0x58
 80092fc:	bd70      	pop	{r4, r5, r6, pc}
 80092fe:	466a      	mov	r2, sp
 8009300:	f000 f848 	bl	8009394 <_fstat_r>
 8009304:	2800      	cmp	r0, #0
 8009306:	dbec      	blt.n	80092e2 <__swhatbuf_r+0x12>
 8009308:	9901      	ldr	r1, [sp, #4]
 800930a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800930e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009312:	4259      	negs	r1, r3
 8009314:	4159      	adcs	r1, r3
 8009316:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800931a:	e7eb      	b.n	80092f4 <__swhatbuf_r+0x24>

0800931c <__smakebuf_r>:
 800931c:	898b      	ldrh	r3, [r1, #12]
 800931e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009320:	079d      	lsls	r5, r3, #30
 8009322:	4606      	mov	r6, r0
 8009324:	460c      	mov	r4, r1
 8009326:	d507      	bpl.n	8009338 <__smakebuf_r+0x1c>
 8009328:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	6123      	str	r3, [r4, #16]
 8009330:	2301      	movs	r3, #1
 8009332:	6163      	str	r3, [r4, #20]
 8009334:	b003      	add	sp, #12
 8009336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009338:	ab01      	add	r3, sp, #4
 800933a:	466a      	mov	r2, sp
 800933c:	f7ff ffc8 	bl	80092d0 <__swhatbuf_r>
 8009340:	9f00      	ldr	r7, [sp, #0]
 8009342:	4605      	mov	r5, r0
 8009344:	4639      	mov	r1, r7
 8009346:	4630      	mov	r0, r6
 8009348:	f7fe febe 	bl	80080c8 <_malloc_r>
 800934c:	b948      	cbnz	r0, 8009362 <__smakebuf_r+0x46>
 800934e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009352:	059a      	lsls	r2, r3, #22
 8009354:	d4ee      	bmi.n	8009334 <__smakebuf_r+0x18>
 8009356:	f023 0303 	bic.w	r3, r3, #3
 800935a:	f043 0302 	orr.w	r3, r3, #2
 800935e:	81a3      	strh	r3, [r4, #12]
 8009360:	e7e2      	b.n	8009328 <__smakebuf_r+0xc>
 8009362:	89a3      	ldrh	r3, [r4, #12]
 8009364:	6020      	str	r0, [r4, #0]
 8009366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800936a:	81a3      	strh	r3, [r4, #12]
 800936c:	9b01      	ldr	r3, [sp, #4]
 800936e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009372:	b15b      	cbz	r3, 800938c <__smakebuf_r+0x70>
 8009374:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009378:	4630      	mov	r0, r6
 800937a:	f000 f81d 	bl	80093b8 <_isatty_r>
 800937e:	b128      	cbz	r0, 800938c <__smakebuf_r+0x70>
 8009380:	89a3      	ldrh	r3, [r4, #12]
 8009382:	f023 0303 	bic.w	r3, r3, #3
 8009386:	f043 0301 	orr.w	r3, r3, #1
 800938a:	81a3      	strh	r3, [r4, #12]
 800938c:	89a3      	ldrh	r3, [r4, #12]
 800938e:	431d      	orrs	r5, r3
 8009390:	81a5      	strh	r5, [r4, #12]
 8009392:	e7cf      	b.n	8009334 <__smakebuf_r+0x18>

08009394 <_fstat_r>:
 8009394:	b538      	push	{r3, r4, r5, lr}
 8009396:	4d07      	ldr	r5, [pc, #28]	@ (80093b4 <_fstat_r+0x20>)
 8009398:	2300      	movs	r3, #0
 800939a:	4604      	mov	r4, r0
 800939c:	4608      	mov	r0, r1
 800939e:	4611      	mov	r1, r2
 80093a0:	602b      	str	r3, [r5, #0]
 80093a2:	f7f9 fde5 	bl	8002f70 <_fstat>
 80093a6:	1c43      	adds	r3, r0, #1
 80093a8:	d102      	bne.n	80093b0 <_fstat_r+0x1c>
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	b103      	cbz	r3, 80093b0 <_fstat_r+0x1c>
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	bd38      	pop	{r3, r4, r5, pc}
 80093b2:	bf00      	nop
 80093b4:	20000dc8 	.word	0x20000dc8

080093b8 <_isatty_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d06      	ldr	r5, [pc, #24]	@ (80093d4 <_isatty_r+0x1c>)
 80093bc:	2300      	movs	r3, #0
 80093be:	4604      	mov	r4, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	f7f9 fde4 	bl	8002f90 <_isatty>
 80093c8:	1c43      	adds	r3, r0, #1
 80093ca:	d102      	bne.n	80093d2 <_isatty_r+0x1a>
 80093cc:	682b      	ldr	r3, [r5, #0]
 80093ce:	b103      	cbz	r3, 80093d2 <_isatty_r+0x1a>
 80093d0:	6023      	str	r3, [r4, #0]
 80093d2:	bd38      	pop	{r3, r4, r5, pc}
 80093d4:	20000dc8 	.word	0x20000dc8

080093d8 <_init>:
 80093d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093da:	bf00      	nop
 80093dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093de:	bc08      	pop	{r3}
 80093e0:	469e      	mov	lr, r3
 80093e2:	4770      	bx	lr

080093e4 <_fini>:
 80093e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e6:	bf00      	nop
 80093e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ea:	bc08      	pop	{r3}
 80093ec:	469e      	mov	lr, r3
 80093ee:	4770      	bx	lr
