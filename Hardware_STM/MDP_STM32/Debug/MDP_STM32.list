
MDP_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3f8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e58  0800a588  0800a588  0000b588  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3e0  0800b3e0  0000d1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3e0  0800b3e0  0000c3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3e8  0800b3e8  0000d1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3e8  0800b3e8  0000c3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b3ec  0800b3ec  0000c3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800b3f0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1dc  2**0
                  CONTENTS
 10 .bss          00000c08  200001dc  200001dc  0000d1dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000de4  20000de4  0000d1dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000148a7  00000000  00000000  0000d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f31  00000000  00000000  00021ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  000249e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec2  00000000  00000000  00025cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002494a  00000000  00000000  00026b7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017b0c  00000000  00000000  0004b4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4800  00000000  00000000  00062fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001377d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006080  00000000  00000000  00137814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0013d894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a570 	.word	0x0800a570

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800a570 	.word	0x0800a570

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <_ICM20948_SelectUserBank>:
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	@ 0x28
 8000f3c:	af04      	add	r7, sp, #16
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	460b      	mov	r3, r1
 8000f42:	607a      	str	r2, [r7, #4]
 8000f44:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000f54:	7afb      	ldrb	r3, [r7, #11]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d101      	bne.n	8000f5e <_ICM20948_SelectUserBank+0x26>
 8000f5a:	2368      	movs	r3, #104	@ 0x68
 8000f5c:	e000      	b.n	8000f60 <_ICM20948_SelectUserBank+0x28>
 8000f5e:	2369      	movs	r3, #105	@ 0x69
 8000f60:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 8000f62:	7dbb      	ldrb	r3, [r7, #22]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	b299      	uxth	r1, r3
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	9302      	str	r3, [sp, #8]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	f107 0315 	add.w	r3, r7, #21
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	2301      	movs	r3, #1
 8000f7a:	227f      	movs	r2, #127	@ 0x7f
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f002 fda9 	bl	8003ad4 <HAL_I2C_Mem_Write>
 8000f82:	4603      	mov	r3, r0
 8000f84:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8000f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af04      	add	r7, sp, #16
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	4608      	mov	r0, r1
 8000f9a:	4611      	mov	r1, r2
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	70fb      	strb	r3, [r7, #3]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	70bb      	strb	r3, [r7, #2]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 8000faa:	2300      	movs	r3, #0
 8000fac:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d101      	bne.n	8000fb8 <_ICM20948_WriteByte+0x28>
 8000fb4:	2368      	movs	r3, #104	@ 0x68
 8000fb6:	e000      	b.n	8000fba <_ICM20948_WriteByte+0x2a>
 8000fb8:	2369      	movs	r3, #105	@ 0x69
 8000fba:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 8000fbc:	7bbb      	ldrb	r3, [r7, #14]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	b299      	uxth	r1, r3
 8000fc4:	78bb      	ldrb	r3, [r7, #2]
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	230a      	movs	r3, #10
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	1c7b      	adds	r3, r7, #1
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f002 fd7c 	bl	8003ad4 <HAL_I2C_Mem_Write>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity) {
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b084      	sub	sp, #16
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	70fb      	strb	r3, [r7, #3]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8000ffe:	78fb      	ldrb	r3, [r7, #3]
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff97 	bl	8000f38 <_ICM20948_SelectUserBank>
 800100a:	4603      	mov	r3, r0
 800100c:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800100e:	78f9      	ldrb	r1, [r7, #3]
 8001010:	2380      	movs	r3, #128	@ 0x80
 8001012:	2206      	movs	r2, #6
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ffbb 	bl	8000f90 <_ICM20948_WriteByte>
 800101a:	4603      	mov	r3, r0
 800101c:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 800101e:	20c8      	movs	r0, #200	@ 0xc8
 8001020:	f002 f87e 	bl	8003120 <HAL_Delay>

	status = _ICM20948_WriteByte(
 8001024:	78f9      	ldrb	r1, [r7, #3]
 8001026:	2301      	movs	r3, #1
 8001028:	2206      	movs	r2, #6
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffb0 	bl	8000f90 <_ICM20948_WriteByte>
 8001030:	4603      	mov	r3, r0
 8001032:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); */ // For some reason this needs to be tested

	// disable accelerometer
	status = _ICM20948_WriteByte(
 8001034:	78f9      	ldrb	r1, [r7, #3]
 8001036:	2338      	movs	r3, #56	@ 0x38
 8001038:	2207      	movs	r2, #7
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffa8 	bl	8000f90 <_ICM20948_WriteByte>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
				hi2c,
				selectI2cAddress,
				ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
				0x38);

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	2202      	movs	r2, #2
 8001048:	4619      	mov	r1, r3
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff ff74 	bl	8000f38 <_ICM20948_SelectUserBank>
 8001050:	4603      	mov	r3, r0
 8001052:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			3 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << BIT_1|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 8001054:	78bb      	ldrb	r3, [r7, #2]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	b25b      	sxtb	r3, r3
 800105a:	f043 0319 	orr.w	r3, r3, #25
 800105e:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 8001060:	b2db      	uxtb	r3, r3
 8001062:	78f9      	ldrb	r1, [r7, #3]
 8001064:	2201      	movs	r2, #1
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ff92 	bl	8000f90 <_ICM20948_WriteByte>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]
//			hi2c,
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
//			0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 8001070:	78f9      	ldrb	r1, [r7, #3]
 8001072:	2304      	movs	r3, #4
 8001074:	2200      	movs	r2, #0
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ff8a 	bl	8000f90 <_ICM20948_WriteByte>
 800107c:	4603      	mov	r3, r0
 800107e:	73fb      	strb	r3, [r7, #15]
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
//			0x04); // Don't understand how this works


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 8001080:	78fb      	ldrb	r3, [r7, #3]
 8001082:	2200      	movs	r2, #0
 8001084:	4619      	mov	r1, r3
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ff56 	bl	8000f38 <_ICM20948_SelectUserBank>
 800108c:	4603      	mov	r3, r0
 800108e:	73fb      	strb	r3, [r7, #15]
//
	status = _ICM20948_WriteByte(
 8001090:	78f9      	ldrb	r1, [r7, #3]
 8001092:	2302      	movs	r3, #2
 8001094:	220f      	movs	r2, #15
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff ff7a 	bl	8000f90 <_ICM20948_WriteByte>
 800109c:	4603      	mov	r3, r0
 800109e:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

//	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <is_USER_button_pressed>:

#include "helper.h"


/*---------- OLED INTERACTION ----------*/
bool is_USER_button_pressed() {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET;
 80010ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010b0:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <is_USER_button_pressed+0x20>)
 80010b2:	f002 fb99 	bl	80037e8 <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bf0c      	ite	eq
 80010bc:	2301      	moveq	r3, #1
 80010be:	2300      	movne	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40020c00 	.word	0x40020c00

080010cc <print_OLED>:

void print_OLED(int x, int y, uint8_t* msg, bool var_exist, int32_t val) {
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b0e9      	sub	sp, #420	@ 0x1a4
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	f507 74d0 	add.w	r4, r7, #416	@ 0x1a0
 80010d6:	f5a4 74ca 	sub.w	r4, r4, #404	@ 0x194
 80010da:	6020      	str	r0, [r4, #0]
 80010dc:	f507 70d0 	add.w	r0, r7, #416	@ 0x1a0
 80010e0:	f5a0 70cc 	sub.w	r0, r0, #408	@ 0x198
 80010e4:	6001      	str	r1, [r0, #0]
 80010e6:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 80010ea:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 80010ee:	600a      	str	r2, [r1, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 80010f6:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 80010fa:	701a      	strb	r2, [r3, #0]
	uint8_t* buf[100];

	if (var_exist) {
 80010fc:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001100:	f2a3 139d 	subw	r3, r3, #413	@ 0x19d
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00b      	beq.n	8001122 <print_OLED+0x56>
		sprintf(buf, msg, val);
 800110a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800110e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001112:	f107 0010 	add.w	r0, r7, #16
 8001116:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 800111a:	6819      	ldr	r1, [r3, #0]
 800111c:	f007 f8fa 	bl	8008314 <siprintf>
 8001120:	e009      	b.n	8001136 <print_OLED+0x6a>
	} else {
		sprintf(buf, msg);
 8001122:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001126:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800112a:	f107 0210 	add.w	r2, r7, #16
 800112e:	6819      	ldr	r1, [r3, #0]
 8001130:	4610      	mov	r0, r2
 8001132:	f007 f8ef 	bl	8008314 <siprintf>
	}

	OLED_ShowString(x, y, buf);
 8001136:	f107 0210 	add.w	r2, r7, #16
 800113a:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 800113e:	f5a3 71cc 	sub.w	r1, r3, #408	@ 0x198
 8001142:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001146:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800114a:	6809      	ldr	r1, [r1, #0]
 800114c:	6818      	ldr	r0, [r3, #0]
 800114e:	f001 fad7 	bl	8002700 <OLED_ShowString>
	OLED_Refresh_Gram();
 8001152:	f001 f9ab 	bl	80024ac <OLED_Refresh_Gram>
}
 8001156:	bf00      	nop
 8001158:	f507 77d2 	add.w	r7, r7, #420	@ 0x1a4
 800115c:	46bd      	mov	sp, r7
 800115e:	bd90      	pop	{r4, r7, pc}

08001160 <HAL_TIM_IC_CaptureCallback>:
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);   // pull the TRIG pin low
  HAL_Delay(50);
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim_ptr) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af02      	add	r7, sp, #8
 8001166:	6078      	str	r0, [r7, #4]
  if (htim_ptr->Channel != HAL_TIM_ACTIVE_CHANNEL_4)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	7f1b      	ldrb	r3, [r3, #28]
 800116c:	2b08      	cmp	r3, #8
 800116e:	f040 8086 	bne.w	800127e <HAL_TIM_IC_CaptureCallback+0x11e>
    return;

  if (!is_first_captured) {                                   // If the first value is not captured
 8001172:	4b47      	ldr	r3, [pc, #284]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	f083 0301 	eor.w	r3, r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d01a      	beq.n	80011b6 <HAL_TIM_IC_CaptureCallback+0x56>
    tc1 = HAL_TIM_ReadCapturedValue(htim_ptr, TIM_CHANNEL_4); // read the first value
 8001180:	210c      	movs	r1, #12
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f004 fea4 	bl	8005ed0 <HAL_TIM_ReadCapturedValue>
 8001188:	4603      	mov	r3, r0
 800118a:	4a42      	ldr	r2, [pc, #264]	@ (8001294 <HAL_TIM_IC_CaptureCallback+0x134>)
 800118c:	6013      	str	r3, [r2, #0]
    is_first_captured = true;                                 // set the first captured as true
 800118e:	4b40      	ldr	r3, [pc, #256]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]
    // Now change the polarity to falling edge
    __HAL_TIM_SET_CAPTUREPOLARITY(htim_ptr, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6a1a      	ldr	r2, [r3, #32]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80011a2:	621a      	str	r2, [r3, #32]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	6a1a      	ldr	r2, [r3, #32]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80011b2:	621a      	str	r2, [r3, #32]
 80011b4:	e064      	b.n	8001280 <HAL_TIM_IC_CaptureCallback+0x120>
  } else if (is_first_captured) {                             // If the first is already captured
 80011b6:	4b36      	ldr	r3, [pc, #216]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0x130>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d060      	beq.n	8001280 <HAL_TIM_IC_CaptureCallback+0x120>
    tc2 = HAL_TIM_ReadCapturedValue(htim_ptr, TIM_CHANNEL_4); // read second value
 80011be:	210c      	movs	r1, #12
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f004 fe85 	bl	8005ed0 <HAL_TIM_ReadCapturedValue>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a33      	ldr	r2, [pc, #204]	@ (8001298 <HAL_TIM_IC_CaptureCallback+0x138>)
 80011ca:	6013      	str	r3, [r2, #0]
    __HAL_TIM_SET_COUNTER(htim_ptr, 0);                       // reset the counter
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2200      	movs	r2, #0
 80011d2:	625a      	str	r2, [r3, #36]	@ 0x24

    echo = (tc2 > tc1) ? (tc2 - tc1) : (64000 - tc1 + tc2);
 80011d4:	4b30      	ldr	r3, [pc, #192]	@ (8001298 <HAL_TIM_IC_CaptureCallback+0x138>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001294 <HAL_TIM_IC_CaptureCallback+0x134>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d905      	bls.n	80011ec <HAL_TIM_IC_CaptureCallback+0x8c>
 80011e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001298 <HAL_TIM_IC_CaptureCallback+0x138>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <HAL_TIM_IC_CaptureCallback+0x134>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	e006      	b.n	80011fa <HAL_TIM_IC_CaptureCallback+0x9a>
 80011ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001298 <HAL_TIM_IC_CaptureCallback+0x138>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b28      	ldr	r3, [pc, #160]	@ (8001294 <HAL_TIM_IC_CaptureCallback+0x134>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	f503 437a 	add.w	r3, r3, #64000	@ 0xfa00
 80011fa:	4a28      	ldr	r2, [pc, #160]	@ (800129c <HAL_TIM_IC_CaptureCallback+0x13c>)
 80011fc:	6013      	str	r3, [r2, #0]
    print_OLED(0, 15, "l: %ld", true, echo);
 80011fe:	4b27      	ldr	r3, [pc, #156]	@ (800129c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	4a26      	ldr	r2, [pc, #152]	@ (80012a0 <HAL_TIM_IC_CaptureCallback+0x140>)
 8001208:	210f      	movs	r1, #15
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff ff5e 	bl	80010cc <print_OLED>
    dist = echo * 0.034/2;
 8001210:	4b22      	ldr	r3, [pc, #136]	@ (800129c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f975 	bl	8000504 <__aeabi_ui2d>
 800121a:	a31b      	add	r3, pc, #108	@ (adr r3, 8001288 <HAL_TIM_IC_CaptureCallback+0x128>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff f9ea 	bl	80005f8 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001234:	f7ff fb0a 	bl	800084c <__aeabi_ddiv>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fcb2 	bl	8000ba8 <__aeabi_d2f>
 8001244:	4603      	mov	r3, r0
 8001246:	4a17      	ldr	r2, [pc, #92]	@ (80012a4 <HAL_TIM_IC_CaptureCallback+0x144>)
 8001248:	6013      	str	r3, [r2, #0]
    is_first_captured = false;                                // set it back to false
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <HAL_TIM_IC_CaptureCallback+0x130>)
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]

    // Set polarity to rising edge
    __HAL_TIM_SET_CAPTUREPOLARITY(htim_ptr, TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6a1a      	ldr	r2, [r3, #32]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 800125e:	621a      	str	r2, [r3, #32]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6a12      	ldr	r2, [r2, #32]
 800126a:	621a      	str	r2, [r3, #32]
    __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC4);
 800126c:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <HAL_TIM_IC_CaptureCallback+0x148>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	4b0d      	ldr	r3, [pc, #52]	@ (80012a8 <HAL_TIM_IC_CaptureCallback+0x148>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0210 	bic.w	r2, r2, #16
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	e000      	b.n	8001280 <HAL_TIM_IC_CaptureCallback+0x120>
    return;
 800127e:	bf00      	nop
  }
}
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	b020c49c 	.word	0xb020c49c
 800128c:	3fa16872 	.word	0x3fa16872
 8001290:	2000040c 	.word	0x2000040c
 8001294:	200003fc 	.word	0x200003fc
 8001298:	20000400 	.word	0x20000400
 800129c:	20000404 	.word	0x20000404
 80012a0:	0800a588 	.word	0x0800a588
 80012a4:	20000408 	.word	0x20000408
 80012a8:	2000024c 	.word	0x2000024c

080012ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  curr++;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <HAL_UART_RxCpltCallback+0x3c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	3301      	adds	r3, #1
 80012ba:	4a0b      	ldr	r2, [pc, #44]	@ (80012e8 <HAL_UART_RxCpltCallback+0x3c>)
 80012bc:	6013      	str	r3, [r2, #0]
  cmd_buffer[curr] = receive[0];
 80012be:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <HAL_UART_RxCpltCallback+0x3c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <HAL_UART_RxCpltCallback+0x40>)
 80012c4:	7811      	ldrb	r1, [r2, #0]
 80012c6:	4a0a      	ldr	r2, [pc, #40]	@ (80012f0 <HAL_UART_RxCpltCallback+0x44>)
 80012c8:	54d1      	strb	r1, [r2, r3]
  cmd_cnt++;
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_UART_RxCpltCallback+0x48>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <HAL_UART_RxCpltCallback+0x48>)
 80012d4:	701a      	strb	r2, [r3, #0]
  // print_OLED(0, 15, "head:", false, 0);
  // print_OLED(50, 15, "%c", true, head->dir);

  HAL_UART_Receive_IT(&huart3, receive, sizeof(receive));
 80012d6:	2201      	movs	r2, #1
 80012d8:	4904      	ldr	r1, [pc, #16]	@ (80012ec <HAL_UART_RxCpltCallback+0x40>)
 80012da:	4807      	ldr	r0, [pc, #28]	@ (80012f8 <HAL_UART_RxCpltCallback+0x4c>)
 80012dc:	f005 fbdc 	bl	8006a98 <HAL_UART_Receive_IT>
}
 80012e0:	bf00      	nop
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20000000 	.word	0x20000000
 80012ec:	200007fc 	.word	0x200007fc
 80012f0:	20000410 	.word	0x20000410
 80012f4:	200007f8 	.word	0x200007f8
 80012f8:	200003b4 	.word	0x200003b4

080012fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  // Turn on LED3 to check whether the STM32 board works or not
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001306:	482a      	ldr	r0, [pc, #168]	@ (80013b0 <main+0xb4>)
 8001308:	f002 fa86 	bl	8003818 <HAL_GPIO_WritePin>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130c:	f001 fe96 	bl	800303c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001310:	f000 f860 	bl	80013d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001314:	f000 fb62 	bl	80019dc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001318:	f000 fb36 	bl	8001988 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 800131c:	f000 f8e6 	bl	80014ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8001320:	f000 f9a8 	bl	8001674 <MX_TIM2_Init>
  MX_TIM8_Init();
 8001324:	f000 fa84 	bl	8001830 <MX_TIM8_Init>
  MX_TIM3_Init();
 8001328:	f000 f9f8 	bl	800171c <MX_TIM3_Init>
  MX_I2C1_Init();
 800132c:	f000 f8b0 	bl	8001490 <MX_I2C1_Init>
  MX_TIM6_Init();
 8001330:	f000 fa48 	bl	80017c4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  // Initialize peripherals
  OLED_Init();
 8001334:	f001 fa16 	bl	8002764 <OLED_Init>
  motor_init(&htim8, &htim2, &htim3, &hi2c1);
 8001338:	4b1e      	ldr	r3, [pc, #120]	@ (80013b4 <main+0xb8>)
 800133a:	4a1f      	ldr	r2, [pc, #124]	@ (80013b8 <main+0xbc>)
 800133c:	491f      	ldr	r1, [pc, #124]	@ (80013bc <main+0xc0>)
 800133e:	4820      	ldr	r0, [pc, #128]	@ (80013c0 <main+0xc4>)
 8001340:	f000 fbf8 	bl	8001b34 <motor_init>
  servo_init(&htim1);
 8001344:	481f      	ldr	r0, [pc, #124]	@ (80013c4 <main+0xc8>)
 8001346:	f001 fa99 	bl	800287c <servo_init>
  ICM20948_init(&hi2c1,1,GYRO_FULL_SCALE_2000DPS);
 800134a:	2203      	movs	r2, #3
 800134c:	2101      	movs	r1, #1
 800134e:	4819      	ldr	r0, [pc, #100]	@ (80013b4 <main+0xb8>)
 8001350:	f7ff fe4b 	bl	8000fea <ICM20948_init>
//  HCSR04_Init();
  // sensors_init(&hi2c1, &htim4, &sensor);

  // Delay loop for generating a 10us pulse (TIM6)
  HAL_TIM_Base_Start(&htim6);
 8001354:	481c      	ldr	r0, [pc, #112]	@ (80013c8 <main+0xcc>)
 8001356:	f003 ff6d 	bl	8005234 <HAL_TIM_Base_Start>
  // USER button
//  HAL_TIM_Base_Start_IT(&htim2);

  OLED_ShowString(0, 0, "Press USER btn");
 800135a:	4a1c      	ldr	r2, [pc, #112]	@ (80013cc <main+0xd0>)
 800135c:	2100      	movs	r1, #0
 800135e:	2000      	movs	r0, #0
 8001360:	f001 f9ce 	bl	8002700 <OLED_ShowString>
  OLED_ShowString(0, 15, "to continue");
 8001364:	4a1a      	ldr	r2, [pc, #104]	@ (80013d0 <main+0xd4>)
 8001366:	210f      	movs	r1, #15
 8001368:	2000      	movs	r0, #0
 800136a:	f001 f9c9 	bl	8002700 <OLED_ShowString>
  OLED_Refresh_Gram();
 800136e:	f001 f89d 	bl	80024ac <OLED_Refresh_Gram>
  servo_set_dir(LEFT);
 8001372:	f640 50ac 	movw	r0, #3500	@ 0xdac
 8001376:	f001 fa93 	bl	80028a0 <servo_set_dir>
  HAL_Delay(500);
 800137a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800137e:	f001 fecf 	bl	8003120 <HAL_Delay>
  servo_set_dir(STRAIGHT);
 8001382:	f241 20a7 	movw	r0, #4775	@ 0x12a7
 8001386:	f001 fa8b 	bl	80028a0 <servo_set_dir>

  while (!is_USER_button_pressed());
 800138a:	bf00      	nop
 800138c:	f7ff fe8c 	bl	80010a8 <is_USER_button_pressed>
 8001390:	4603      	mov	r3, r0
 8001392:	f083 0301 	eor.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d1f7      	bne.n	800138c <main+0x90>
  OLED_Clear();
 800139c:	f001 f8be 	bl	800251c <OLED_Clear>
  motor_set_speed(50);
 80013a0:	2032      	movs	r0, #50	@ 0x32
 80013a2:	f000 fcc3 	bl	8001d2c <motor_set_speed>

  // Start the interrupt for UART3
//  HAL_UART_Receive_IT(&huart3, receive, sizeof(receive));
  forward_pid_gyro(50);
 80013a6:	2032      	movs	r0, #50	@ 0x32
 80013a8:	f000 fd3e 	bl	8001e28 <forward_pid_gyro>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <main+0xb0>
 80013b0:	40021000 	.word	0x40021000
 80013b4:	200001f8 	.word	0x200001f8
 80013b8:	200002dc 	.word	0x200002dc
 80013bc:	20000294 	.word	0x20000294
 80013c0:	2000036c 	.word	0x2000036c
 80013c4:	2000024c 	.word	0x2000024c
 80013c8:	20000324 	.word	0x20000324
 80013cc:	0800a590 	.word	0x0800a590
 80013d0:	0800a5a0 	.word	0x0800a5a0

080013d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b094      	sub	sp, #80	@ 0x50
 80013d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013da:	f107 0320 	add.w	r3, r7, #32
 80013de:	2230      	movs	r2, #48	@ 0x30
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f006 fff9 	bl	80083da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f8:	2300      	movs	r3, #0
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	4b22      	ldr	r3, [pc, #136]	@ (8001488 <SystemClock_Config+0xb4>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001400:	4a21      	ldr	r2, [pc, #132]	@ (8001488 <SystemClock_Config+0xb4>)
 8001402:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001406:	6413      	str	r3, [r2, #64]	@ 0x40
 8001408:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <SystemClock_Config+0xb4>)
 800140a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001410:	60bb      	str	r3, [r7, #8]
 8001412:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	4b1c      	ldr	r3, [pc, #112]	@ (800148c <SystemClock_Config+0xb8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a1b      	ldr	r2, [pc, #108]	@ (800148c <SystemClock_Config+0xb8>)
 800141e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b19      	ldr	r3, [pc, #100]	@ (800148c <SystemClock_Config+0xb8>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001430:	2302      	movs	r3, #2
 8001432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001434:	2301      	movs	r3, #1
 8001436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001438:	2310      	movs	r3, #16
 800143a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800143c:	2300      	movs	r3, #0
 800143e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001440:	f107 0320 	add.w	r3, r7, #32
 8001444:	4618      	mov	r0, r3
 8001446:	f003 fa4d 	bl	80048e4 <HAL_RCC_OscConfig>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001450:	f000 fb6a 	bl	8001b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001454:	230f      	movs	r3, #15
 8001456:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001468:	f107 030c 	add.w	r3, r7, #12
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f003 fcb0 	bl	8004dd4 <HAL_RCC_ClockConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800147a:	f000 fb55 	bl	8001b28 <Error_Handler>
  }
}
 800147e:	bf00      	nop
 8001480:	3750      	adds	r7, #80	@ 0x50
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40007000 	.word	0x40007000

08001490 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001494:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <MX_I2C1_Init+0x50>)
 8001496:	4a13      	ldr	r2, [pc, #76]	@ (80014e4 <MX_I2C1_Init+0x54>)
 8001498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800149a:	4b11      	ldr	r3, [pc, #68]	@ (80014e0 <MX_I2C1_Init+0x50>)
 800149c:	4a12      	ldr	r2, [pc, #72]	@ (80014e8 <MX_I2C1_Init+0x58>)
 800149e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014a6:	4b0e      	ldr	r3, [pc, #56]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ac:	4b0c      	ldr	r3, [pc, #48]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b4:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014ba:	4b09      	ldr	r3, [pc, #36]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c0:	4b07      	ldr	r3, [pc, #28]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014c6:	4b06      	ldr	r3, [pc, #24]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014cc:	4804      	ldr	r0, [pc, #16]	@ (80014e0 <MX_I2C1_Init+0x50>)
 80014ce:	f002 f9bd 	bl	800384c <HAL_I2C_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014d8:	f000 fb26 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	200001f8 	.word	0x200001f8
 80014e4:	40005400 	.word	0x40005400
 80014e8:	00061a80 	.word	0x00061a80

080014ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b09a      	sub	sp, #104	@ 0x68
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800151e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2220      	movs	r2, #32
 8001530:	2100      	movs	r1, #0
 8001532:	4618      	mov	r0, r3
 8001534:	f006 ff51 	bl	80083da <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001538:	4b4c      	ldr	r3, [pc, #304]	@ (800166c <MX_TIM1_Init+0x180>)
 800153a:	4a4d      	ldr	r2, [pc, #308]	@ (8001670 <MX_TIM1_Init+0x184>)
 800153c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 800153e:	4b4b      	ldr	r3, [pc, #300]	@ (800166c <MX_TIM1_Init+0x180>)
 8001540:	2204      	movs	r2, #4
 8001542:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001544:	4b49      	ldr	r3, [pc, #292]	@ (800166c <MX_TIM1_Init+0x180>)
 8001546:	2200      	movs	r2, #0
 8001548:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 800154a:	4b48      	ldr	r3, [pc, #288]	@ (800166c <MX_TIM1_Init+0x180>)
 800154c:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001550:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001552:	4b46      	ldr	r3, [pc, #280]	@ (800166c <MX_TIM1_Init+0x180>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001558:	4b44      	ldr	r3, [pc, #272]	@ (800166c <MX_TIM1_Init+0x180>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800155e:	4b43      	ldr	r3, [pc, #268]	@ (800166c <MX_TIM1_Init+0x180>)
 8001560:	2200      	movs	r2, #0
 8001562:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001564:	4841      	ldr	r0, [pc, #260]	@ (800166c <MX_TIM1_Init+0x180>)
 8001566:	f003 fe15 	bl	8005194 <HAL_TIM_Base_Init>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001570:	f000 fada 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001574:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001578:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800157a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800157e:	4619      	mov	r1, r3
 8001580:	483a      	ldr	r0, [pc, #232]	@ (800166c <MX_TIM1_Init+0x180>)
 8001582:	f004 fbdd 	bl	8005d40 <HAL_TIM_ConfigClockSource>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800158c:	f000 facc 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001590:	4836      	ldr	r0, [pc, #216]	@ (800166c <MX_TIM1_Init+0x180>)
 8001592:	f003 feb7 	bl	8005304 <HAL_TIM_PWM_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800159c:	f000 fac4 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80015a0:	4832      	ldr	r0, [pc, #200]	@ (800166c <MX_TIM1_Init+0x180>)
 80015a2:	f003 ffd1 	bl	8005548 <HAL_TIM_IC_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80015ac:	f000 fabc 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015b8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80015bc:	4619      	mov	r1, r3
 80015be:	482b      	ldr	r0, [pc, #172]	@ (800166c <MX_TIM1_Init+0x180>)
 80015c0:	f005 f938 	bl	8006834 <HAL_TIMEx_MasterConfigSynchronization>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
 80015ca:	f000 faad 	bl	8001b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ce:	2360      	movs	r3, #96	@ 0x60
 80015d0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d6:	2300      	movs	r3, #0
 80015d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015da:	2300      	movs	r3, #0
 80015dc:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015e6:	2300      	movs	r3, #0
 80015e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015ee:	2200      	movs	r2, #0
 80015f0:	4619      	mov	r1, r3
 80015f2:	481e      	ldr	r0, [pc, #120]	@ (800166c <MX_TIM1_Init+0x180>)
 80015f4:	f004 fae2 	bl	8005bbc <HAL_TIM_PWM_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80015fe:	f000 fa93 	bl	8001b28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001602:	230a      	movs	r3, #10
 8001604:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001606:	2301      	movs	r3, #1
 8001608:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigIC.ICFilter = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001612:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001616:	220c      	movs	r2, #12
 8001618:	4619      	mov	r1, r3
 800161a:	4814      	ldr	r0, [pc, #80]	@ (800166c <MX_TIM1_Init+0x180>)
 800161c:	f004 fa31 	bl	8005a82 <HAL_TIM_IC_ConfigChannel>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM1_Init+0x13e>
  {
    Error_Handler();
 8001626:	f000 fa7f 	bl	8001b28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800163e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001642:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	4619      	mov	r1, r3
 800164c:	4807      	ldr	r0, [pc, #28]	@ (800166c <MX_TIM1_Init+0x180>)
 800164e:	f005 f96d 	bl	800692c <HAL_TIMEx_ConfigBreakDeadTime>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8001658:	f000 fa66 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800165c:	4803      	ldr	r0, [pc, #12]	@ (800166c <MX_TIM1_Init+0x180>)
 800165e:	f001 fab9 	bl	8002bd4 <HAL_TIM_MspPostInit>

}
 8001662:	bf00      	nop
 8001664:	3768      	adds	r7, #104	@ 0x68
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	2000024c 	.word	0x2000024c
 8001670:	40010000 	.word	0x40010000

08001674 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08c      	sub	sp, #48	@ 0x30
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	2224      	movs	r2, #36	@ 0x24
 8001680:	2100      	movs	r1, #0
 8001682:	4618      	mov	r0, r3
 8001684:	f006 fea9 	bl	80083da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001690:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <MX_TIM2_Init+0xa4>)
 8001692:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001696:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001698:	4b1f      	ldr	r3, [pc, #124]	@ (8001718 <MX_TIM2_Init+0xa4>)
 800169a:	2200      	movs	r2, #0
 800169c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800169e:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <MX_TIM2_Init+0xa4>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <MX_TIM2_Init+0xa4>)
 80016a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <MX_TIM2_Init+0xa4>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <MX_TIM2_Init+0xa4>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80016b8:	2303      	movs	r3, #3
 80016ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016c0:	2301      	movs	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80016d0:	2301      	movs	r3, #1
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016d4:	2300      	movs	r3, #0
 80016d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	4619      	mov	r1, r3
 80016e2:	480d      	ldr	r0, [pc, #52]	@ (8001718 <MX_TIM2_Init+0xa4>)
 80016e4:	f003 ff89 	bl	80055fa <HAL_TIM_Encoder_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80016ee:	f000 fa1b 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	@ (8001718 <MX_TIM2_Init+0xa4>)
 8001700:	f005 f898 	bl	8006834 <HAL_TIMEx_MasterConfigSynchronization>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800170a:	f000 fa0d 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3730      	adds	r7, #48	@ 0x30
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000294 	.word	0x20000294

0800171c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08c      	sub	sp, #48	@ 0x30
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001722:	f107 030c 	add.w	r3, r7, #12
 8001726:	2224      	movs	r2, #36	@ 0x24
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f006 fe55 	bl	80083da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001738:	4b20      	ldr	r3, [pc, #128]	@ (80017bc <MX_TIM3_Init+0xa0>)
 800173a:	4a21      	ldr	r2, [pc, #132]	@ (80017c0 <MX_TIM3_Init+0xa4>)
 800173c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800173e:	4b1f      	ldr	r3, [pc, #124]	@ (80017bc <MX_TIM3_Init+0xa0>)
 8001740:	2200      	movs	r2, #0
 8001742:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001744:	4b1d      	ldr	r3, [pc, #116]	@ (80017bc <MX_TIM3_Init+0xa0>)
 8001746:	2200      	movs	r2, #0
 8001748:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800174a:	4b1c      	ldr	r3, [pc, #112]	@ (80017bc <MX_TIM3_Init+0xa0>)
 800174c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001750:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001752:	4b1a      	ldr	r3, [pc, #104]	@ (80017bc <MX_TIM3_Init+0xa0>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001758:	4b18      	ldr	r3, [pc, #96]	@ (80017bc <MX_TIM3_Init+0xa0>)
 800175a:	2200      	movs	r2, #0
 800175c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800175e:	2303      	movs	r3, #3
 8001760:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001766:	2301      	movs	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800176a:	2300      	movs	r3, #0
 800176c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001776:	2301      	movs	r3, #1
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001782:	f107 030c 	add.w	r3, r7, #12
 8001786:	4619      	mov	r1, r3
 8001788:	480c      	ldr	r0, [pc, #48]	@ (80017bc <MX_TIM3_Init+0xa0>)
 800178a:	f003 ff36 	bl	80055fa <HAL_TIM_Encoder_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001794:	f000 f9c8 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	4619      	mov	r1, r3
 80017a4:	4805      	ldr	r0, [pc, #20]	@ (80017bc <MX_TIM3_Init+0xa0>)
 80017a6:	f005 f845 	bl	8006834 <HAL_TIMEx_MasterConfigSynchronization>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80017b0:	f000 f9ba 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	3730      	adds	r7, #48	@ 0x30
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	200002dc 	.word	0x200002dc
 80017c0:	40000400 	.word	0x40000400

080017c4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ca:	463b      	mov	r3, r7
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <MX_TIM6_Init+0x64>)
 80017d4:	4a15      	ldr	r2, [pc, #84]	@ (800182c <MX_TIM6_Init+0x68>)
 80017d6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16-1;
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <MX_TIM6_Init+0x64>)
 80017da:	220f      	movs	r2, #15
 80017dc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017de:	4b12      	ldr	r3, [pc, #72]	@ (8001828 <MX_TIM6_Init+0x64>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80017e4:	4b10      	ldr	r3, [pc, #64]	@ (8001828 <MX_TIM6_Init+0x64>)
 80017e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017ea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <MX_TIM6_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017f2:	480d      	ldr	r0, [pc, #52]	@ (8001828 <MX_TIM6_Init+0x64>)
 80017f4:	f003 fcce 	bl	8005194 <HAL_TIM_Base_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80017fe:	f000 f993 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800180a:	463b      	mov	r3, r7
 800180c:	4619      	mov	r1, r3
 800180e:	4806      	ldr	r0, [pc, #24]	@ (8001828 <MX_TIM6_Init+0x64>)
 8001810:	f005 f810 	bl	8006834 <HAL_TIMEx_MasterConfigSynchronization>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800181a:	f000 f985 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000324 	.word	0x20000324
 800182c:	40001000 	.word	0x40001000

08001830 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b096      	sub	sp, #88	@ 0x58
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001836:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800184e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]
 800185e:	615a      	str	r2, [r3, #20]
 8001860:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	2220      	movs	r2, #32
 8001866:	2100      	movs	r1, #0
 8001868:	4618      	mov	r0, r3
 800186a:	f006 fdb6 	bl	80083da <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800186e:	4b44      	ldr	r3, [pc, #272]	@ (8001980 <MX_TIM8_Init+0x150>)
 8001870:	4a44      	ldr	r2, [pc, #272]	@ (8001984 <MX_TIM8_Init+0x154>)
 8001872:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001874:	4b42      	ldr	r3, [pc, #264]	@ (8001980 <MX_TIM8_Init+0x150>)
 8001876:	2200      	movs	r2, #0
 8001878:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187a:	4b41      	ldr	r3, [pc, #260]	@ (8001980 <MX_TIM8_Init+0x150>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7200-1;
 8001880:	4b3f      	ldr	r3, [pc, #252]	@ (8001980 <MX_TIM8_Init+0x150>)
 8001882:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001886:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001888:	4b3d      	ldr	r3, [pc, #244]	@ (8001980 <MX_TIM8_Init+0x150>)
 800188a:	2200      	movs	r2, #0
 800188c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800188e:	4b3c      	ldr	r3, [pc, #240]	@ (8001980 <MX_TIM8_Init+0x150>)
 8001890:	2200      	movs	r2, #0
 8001892:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001894:	4b3a      	ldr	r3, [pc, #232]	@ (8001980 <MX_TIM8_Init+0x150>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800189a:	4839      	ldr	r0, [pc, #228]	@ (8001980 <MX_TIM8_Init+0x150>)
 800189c:	f003 fc7a 	bl	8005194 <HAL_TIM_Base_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80018a6:	f000 f93f 	bl	8001b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018b0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018b4:	4619      	mov	r1, r3
 80018b6:	4832      	ldr	r0, [pc, #200]	@ (8001980 <MX_TIM8_Init+0x150>)
 80018b8:	f004 fa42 	bl	8005d40 <HAL_TIM_ConfigClockSource>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80018c2:	f000 f931 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80018c6:	482e      	ldr	r0, [pc, #184]	@ (8001980 <MX_TIM8_Init+0x150>)
 80018c8:	f003 fd1c 	bl	8005304 <HAL_TIM_PWM_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80018d2:	f000 f929 	bl	8001b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018e2:	4619      	mov	r1, r3
 80018e4:	4826      	ldr	r0, [pc, #152]	@ (8001980 <MX_TIM8_Init+0x150>)
 80018e6:	f004 ffa5 	bl	8006834 <HAL_TIMEx_MasterConfigSynchronization>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80018f0:	f000 f91a 	bl	8001b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f4:	2360      	movs	r3, #96	@ 0x60
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001908:	2300      	movs	r3, #0
 800190a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800190c:	2300      	movs	r3, #0
 800190e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001914:	2200      	movs	r2, #0
 8001916:	4619      	mov	r1, r3
 8001918:	4819      	ldr	r0, [pc, #100]	@ (8001980 <MX_TIM8_Init+0x150>)
 800191a:	f004 f94f 	bl	8005bbc <HAL_TIM_PWM_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001924:	f000 f900 	bl	8001b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001928:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800192c:	2204      	movs	r2, #4
 800192e:	4619      	mov	r1, r3
 8001930:	4813      	ldr	r0, [pc, #76]	@ (8001980 <MX_TIM8_Init+0x150>)
 8001932:	f004 f943 	bl	8005bbc <HAL_TIM_PWM_ConfigChannel>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800193c:	f000 f8f4 	bl	8001b28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001954:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001958:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	4619      	mov	r1, r3
 8001962:	4807      	ldr	r0, [pc, #28]	@ (8001980 <MX_TIM8_Init+0x150>)
 8001964:	f004 ffe2 	bl	800692c <HAL_TIMEx_ConfigBreakDeadTime>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800196e:	f000 f8db 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001972:	4803      	ldr	r0, [pc, #12]	@ (8001980 <MX_TIM8_Init+0x150>)
 8001974:	f001 f92e 	bl	8002bd4 <HAL_TIM_MspPostInit>

}
 8001978:	bf00      	nop
 800197a:	3758      	adds	r7, #88	@ 0x58
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	2000036c 	.word	0x2000036c
 8001984:	40010400 	.word	0x40010400

08001988 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <MX_USART3_UART_Init+0x4c>)
 800198e:	4a12      	ldr	r2, [pc, #72]	@ (80019d8 <MX_USART3_UART_Init+0x50>)
 8001990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <MX_USART3_UART_Init+0x4c>)
 8001994:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <MX_USART3_UART_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <MX_USART3_UART_Init+0x4c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <MX_USART3_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <MX_USART3_UART_Init+0x4c>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <MX_USART3_UART_Init+0x4c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <MX_USART3_UART_Init+0x4c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <MX_USART3_UART_Init+0x4c>)
 80019c0:	f005 f81a 	bl	80069f8 <HAL_UART_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019ca:	f000 f8ad 	bl	8001b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200003b4 	.word	0x200003b4
 80019d8:	40004800 	.word	0x40004800

080019dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	@ 0x28
 80019e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e2:	f107 0314 	add.w	r3, r7, #20
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	4b48      	ldr	r3, [pc, #288]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	4a47      	ldr	r2, [pc, #284]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 80019fc:	f043 0310 	orr.w	r3, r3, #16
 8001a00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a02:	4b45      	ldr	r3, [pc, #276]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b41      	ldr	r3, [pc, #260]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a40      	ldr	r2, [pc, #256]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b3e      	ldr	r3, [pc, #248]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a39      	ldr	r2, [pc, #228]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b37      	ldr	r3, [pc, #220]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	607b      	str	r3, [r7, #4]
 8001a4a:	4b33      	ldr	r3, [pc, #204]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	4a32      	ldr	r2, [pc, #200]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 8001a50:	f043 0304 	orr.w	r3, r3, #4
 8001a54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a56:	4b30      	ldr	r3, [pc, #192]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5a:	f003 0304 	and.w	r3, r3, #4
 8001a5e:	607b      	str	r3, [r7, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	603b      	str	r3, [r7, #0]
 8001a66:	4b2c      	ldr	r3, [pc, #176]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	4a2b      	ldr	r2, [pc, #172]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a72:	4b29      	ldr	r3, [pc, #164]	@ (8001b18 <MX_GPIO_Init+0x13c>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	603b      	str	r3, [r7, #0]
 8001a7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET_Pin|OLED_DC_Pin
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f44f 61bc 	mov.w	r1, #1504	@ 0x5e0
 8001a84:	4825      	ldr	r0, [pc, #148]	@ (8001b1c <MX_GPIO_Init+0x140>)
 8001a86:	f001 fec7 	bl	8003818 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_A_IN2_Pin|MOTOR_A_IN1_Pin|MOTOR_B_IN1_Pin|MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	213c      	movs	r1, #60	@ 0x3c
 8001a8e:	4824      	ldr	r0, [pc, #144]	@ (8001b20 <MX_GPIO_Init+0x144>)
 8001a90:	f001 fec2 	bl	8003818 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 8001a94:	2200      	movs	r2, #0
 8001a96:	2180      	movs	r1, #128	@ 0x80
 8001a98:	4822      	ldr	r0, [pc, #136]	@ (8001b24 <MX_GPIO_Init+0x148>)
 8001a9a:	f001 febd 	bl	8003818 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDIN_Pin OLED_RESET_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET_Pin|OLED_DC_Pin
 8001a9e:	f44f 63bc 	mov.w	r3, #1504	@ 0x5e0
 8001aa2:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4819      	ldr	r0, [pc, #100]	@ (8001b1c <MX_GPIO_Init+0x140>)
 8001ab8:	f001 fcfa 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_A_IN2_Pin MOTOR_A_IN1_Pin MOTOR_B_IN1_Pin MOTOR_B_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_IN2_Pin|MOTOR_A_IN1_Pin|MOTOR_B_IN1_Pin|MOTOR_B_IN2_Pin;
 8001abc:	233c      	movs	r3, #60	@ 0x3c
 8001abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4813      	ldr	r0, [pc, #76]	@ (8001b20 <MX_GPIO_Init+0x144>)
 8001ad4:	f001 fcec 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001ad8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 0314 	add.w	r3, r7, #20
 8001aea:	4619      	mov	r1, r3
 8001aec:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <MX_GPIO_Init+0x148>)
 8001aee:	f001 fcdf 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 8001af2:	2380      	movs	r3, #128	@ 0x80
 8001af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	4806      	ldr	r0, [pc, #24]	@ (8001b24 <MX_GPIO_Init+0x148>)
 8001b0a:	f001 fcd1 	bl	80034b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	@ 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	40020000 	.word	0x40020000
 8001b24:	40020c00 	.word	0x40020c00

08001b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b30:	bf00      	nop
 8001b32:	e7fd      	b.n	8001b30 <Error_Handler+0x8>

08001b34 <motor_init>:
		return(r_pwm_val);

	}
}

void motor_init(TIM_HandleTypeDef* pwm, TIM_HandleTypeDef* l_enc, TIM_HandleTypeDef* r_enc, I2C_HandleTypeDef * hi2c) {
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
	// Assign timer pointers
	motor_pwm_tim = pwm;
 8001b42:	4a3b      	ldr	r2, [pc, #236]	@ (8001c30 <motor_init+0xfc>)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6013      	str	r3, [r2, #0]
	l_enc_tim = l_enc;
 8001b48:	4a3a      	ldr	r2, [pc, #232]	@ (8001c34 <motor_init+0x100>)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	6013      	str	r3, [r2, #0]
	r_enc_tim = r_enc;
 8001b4e:	4a3a      	ldr	r2, [pc, #232]	@ (8001c38 <motor_init+0x104>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6013      	str	r3, [r2, #0]
	gyro_i2c = hi2c;
 8001b54:	4a39      	ldr	r2, [pc, #228]	@ (8001c3c <motor_init+0x108>)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6013      	str	r3, [r2, #0]

	// Start Encoders and PWM for L, R motors
	HAL_TIM_Encoder_Start_IT(l_enc, TIM_CHANNEL_ALL);
 8001b5a:	213c      	movs	r1, #60	@ 0x3c
 8001b5c:	68b8      	ldr	r0, [r7, #8]
 8001b5e:	f003 fdf2 	bl	8005746 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(r_enc, TIM_CHANNEL_ALL);
 8001b62:	213c      	movs	r1, #60	@ 0x3c
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f003 fdee 	bl	8005746 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(pwm, L_CHANNEL);
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f003 fc23 	bl	80053b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm, R_CHANNEL);
 8001b72:	2104      	movs	r1, #4
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f003 fc1f 	bl	80053b8 <HAL_TIM_PWM_Start>

	l_rpm = (int)((1000/no_of_tick) * 60/360);
 8001b7a:	4b31      	ldr	r3, [pc, #196]	@ (8001c40 <motor_init+0x10c>)
 8001b7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b80:	461a      	mov	r2, r3
 8001b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b86:	fb93 f3f2 	sdiv	r3, r3, r2
 8001b8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001c44 <motor_init+0x110>)
 8001b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b90:	17db      	asrs	r3, r3, #31
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	b21a      	sxth	r2, r3
 8001b96:	4b2c      	ldr	r3, [pc, #176]	@ (8001c48 <motor_init+0x114>)
 8001b98:	801a      	strh	r2, [r3, #0]
	r_rpm = (int)((1000/no_of_tick) * 60/360);
 8001b9a:	4b29      	ldr	r3, [pc, #164]	@ (8001c40 <motor_init+0x10c>)
 8001b9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ba6:	fb93 f3f2 	sdiv	r3, r3, r2
 8001baa:	4a26      	ldr	r2, [pc, #152]	@ (8001c44 <motor_init+0x110>)
 8001bac:	fb82 1203 	smull	r1, r2, r2, r3
 8001bb0:	17db      	asrs	r3, r3, #31
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	4b25      	ldr	r3, [pc, #148]	@ (8001c4c <motor_init+0x118>)
 8001bb8:	801a      	strh	r2, [r3, #0]

	l_speed = 0, r_speed = 0;
 8001bba:	4b25      	ldr	r3, [pc, #148]	@ (8001c50 <motor_init+0x11c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	801a      	strh	r2, [r3, #0]
 8001bc0:	4b24      	ldr	r3, [pc, #144]	@ (8001c54 <motor_init+0x120>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	801a      	strh	r2, [r3, #0]
	l_position = 0, r_position = 0;  // see SysTick_Handler in stm32f4xx_it.c
 8001bc6:	4b24      	ldr	r3, [pc, #144]	@ (8001c58 <motor_init+0x124>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	801a      	strh	r2, [r3, #0]
 8001bcc:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <motor_init+0x128>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	801a      	strh	r2, [r3, #0]
	l_oldpos = 0, r_oldpos = 0; // see SysTick_Handler in stm32f4xx_it.c
 8001bd2:	4b23      	ldr	r3, [pc, #140]	@ (8001c60 <motor_init+0x12c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	801a      	strh	r2, [r3, #0]
 8001bd8:	4b22      	ldr	r3, [pc, #136]	@ (8001c64 <motor_init+0x130>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	801a      	strh	r2, [r3, #0]
	l_angle = 0, r_angle = 0;
 8001bde:	4b22      	ldr	r3, [pc, #136]	@ (8001c68 <motor_init+0x134>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	801a      	strh	r2, [r3, #0]
 8001be4:	4b21      	ldr	r3, [pc, #132]	@ (8001c6c <motor_init+0x138>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	801a      	strh	r2, [r3, #0]
	l_pwm_val = 0, r_pwm_val = 0;
 8001bea:	4b21      	ldr	r3, [pc, #132]	@ (8001c70 <motor_init+0x13c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	801a      	strh	r2, [r3, #0]
 8001bf0:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <motor_init+0x140>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	801a      	strh	r2, [r3, #0]

	start = 0;
 8001bf6:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <motor_init+0x144>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]

	Kp = 4.5;       // 10
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c7c <motor_init+0x148>)
 8001bfe:	2204      	movs	r2, #4
 8001c00:	801a      	strh	r2, [r3, #0]
	Ki = 0.0002;   // 0.001
 8001c02:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <motor_init+0x14c>)
 8001c04:	4a1f      	ldr	r2, [pc, #124]	@ (8001c84 <motor_init+0x150>)
 8001c06:	601a      	str	r2, [r3, #0]
	Kd = 1100;
 8001c08:	4b1f      	ldr	r3, [pc, #124]	@ (8001c88 <motor_init+0x154>)
 8001c0a:	4a20      	ldr	r2, [pc, #128]	@ (8001c8c <motor_init+0x158>)
 8001c0c:	601a      	str	r2, [r3, #0]
	l_millisOld = HAL_GetTick();
 8001c0e:	f001 fa7b 	bl	8003108 <HAL_GetTick>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	4b1e      	ldr	r3, [pc, #120]	@ (8001c90 <motor_init+0x15c>)
 8001c18:	601a      	str	r2, [r3, #0]
	r_millisOld = HAL_GetTick();
 8001c1a:	f001 fa75 	bl	8003108 <HAL_GetTick>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b1c      	ldr	r3, [pc, #112]	@ (8001c94 <motor_init+0x160>)
 8001c24:	601a      	str	r2, [r3, #0]
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000800 	.word	0x20000800
 8001c34:	20000804 	.word	0x20000804
 8001c38:	20000808 	.word	0x20000808
 8001c3c:	2000080c 	.word	0x2000080c
 8001c40:	20000004 	.word	0x20000004
 8001c44:	2aaaaaab 	.word	0x2aaaaaab
 8001c48:	2000081e 	.word	0x2000081e
 8001c4c:	20000820 	.word	0x20000820
 8001c50:	2000081a 	.word	0x2000081a
 8001c54:	2000081c 	.word	0x2000081c
 8001c58:	20000830 	.word	0x20000830
 8001c5c:	20000832 	.word	0x20000832
 8001c60:	20000c88 	.word	0x20000c88
 8001c64:	20000c8a 	.word	0x20000c8a
 8001c68:	20000834 	.word	0x20000834
 8001c6c:	20000836 	.word	0x20000836
 8001c70:	20000812 	.word	0x20000812
 8001c74:	20000814 	.word	0x20000814
 8001c78:	2000082c 	.word	0x2000082c
 8001c7c:	20000858 	.word	0x20000858
 8001c80:	20000860 	.word	0x20000860
 8001c84:	3951b717 	.word	0x3951b717
 8001c88:	2000085c 	.word	0x2000085c
 8001c8c:	44898000 	.word	0x44898000
 8001c90:	20000850 	.word	0x20000850
 8001c94:	20000854 	.word	0x20000854

08001c98 <motor_forward>:

void motor_forward() {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_SET);
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	2108      	movs	r1, #8
 8001ca0:	4809      	ldr	r0, [pc, #36]	@ (8001cc8 <motor_forward+0x30>)
 8001ca2:	f001 fdb9 	bl	8003818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_RESET);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2104      	movs	r1, #4
 8001caa:	4807      	ldr	r0, [pc, #28]	@ (8001cc8 <motor_forward+0x30>)
 8001cac:	f001 fdb4 	bl	8003818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	2110      	movs	r1, #16
 8001cb4:	4804      	ldr	r0, [pc, #16]	@ (8001cc8 <motor_forward+0x30>)
 8001cb6:	f001 fdaf 	bl	8003818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	4802      	ldr	r0, [pc, #8]	@ (8001cc8 <motor_forward+0x30>)
 8001cc0:	f001 fdaa 	bl	8003818 <HAL_GPIO_WritePin>
}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40020000 	.word	0x40020000

08001ccc <motor_stop>:
	HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_SET);
}

void motor_stop() {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_RESET);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2108      	movs	r1, #8
 8001cd4:	4809      	ldr	r0, [pc, #36]	@ (8001cfc <motor_stop+0x30>)
 8001cd6:	f001 fd9f 	bl	8003818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	2104      	movs	r1, #4
 8001cde:	4807      	ldr	r0, [pc, #28]	@ (8001cfc <motor_stop+0x30>)
 8001ce0:	f001 fd9a 	bl	8003818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_RESET);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2110      	movs	r1, #16
 8001ce8:	4804      	ldr	r0, [pc, #16]	@ (8001cfc <motor_stop+0x30>)
 8001cea:	f001 fd95 	bl	8003818 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2120      	movs	r1, #32
 8001cf2:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <motor_stop+0x30>)
 8001cf4:	f001 fd90 	bl	8003818 <HAL_GPIO_WritePin>
}
 8001cf8:	bf00      	nop
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40020000 	.word	0x40020000

08001d00 <get_speed_pwm>:

int16_t get_speed_pwm(uint8_t speed) {
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	71fb      	strb	r3, [r7, #7]
	int16_t val = (int16_t)(MOTOR_PWM_MAX / 100 * speed);
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	461a      	mov	r2, r3
 8001d10:	0112      	lsls	r2, r2, #4
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <motor_set_speed>:

// Speed: 0 - 100
void motor_set_speed(uint8_t speed) {
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	4603      	mov	r3, r0
 8001d34:	71fb      	strb	r3, [r7, #7]
	pwm_val_target = get_speed_pwm(speed);
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ffe1 	bl	8001d00 <get_speed_pwm>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <motor_set_speed+0x3c>)
 8001d44:	801a      	strh	r2, [r3, #0]
	l_pwm_val = pwm_val_target;
 8001d46:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <motor_set_speed+0x3c>)
 8001d48:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d4c:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <motor_set_speed+0x40>)
 8001d4e:	801a      	strh	r2, [r3, #0]
	r_pwm_val = pwm_val_target;
 8001d50:	4b05      	ldr	r3, [pc, #20]	@ (8001d68 <motor_set_speed+0x3c>)
 8001d52:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <motor_set_speed+0x44>)
 8001d58:	801a      	strh	r2, [r3, #0]
	set_pwm_LR();
 8001d5a:	f000 f821 	bl	8001da0 <set_pwm_LR>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000810 	.word	0x20000810
 8001d6c:	20000812 	.word	0x20000812
 8001d70:	20000814 	.word	0x20000814

08001d74 <reset_encoders>:

void reset_encoders() {
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	// Reset timers
	__HAL_TIM_SET_COUNTER(l_enc_tim, 0);
 8001d78:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <reset_encoders+0x24>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(r_enc_tim, 0);
 8001d82:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <reset_encoders+0x28>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000804 	.word	0x20000804
 8001d9c:	20000808 	.word	0x20000808

08001da0 <set_pwm_LR>:

void set_pwm_LR() {
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
	// Set L, R channels
	int16_t l_temp = l_pwm_val, r_temp = r_pwm_val;
 8001da6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e1c <set_pwm_LR+0x7c>)
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	80fb      	strh	r3, [r7, #6]
 8001dac:	4b1c      	ldr	r3, [pc, #112]	@ (8001e20 <set_pwm_LR+0x80>)
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	80bb      	strh	r3, [r7, #4]

	if (l_temp > MOTOR_PWM_MAX) {
 8001db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001db6:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	dd03      	ble.n	8001dc6 <set_pwm_LR+0x26>
		l_temp = MOTOR_PWM_MAX;
 8001dbe:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001dc2:	80fb      	strh	r3, [r7, #6]
 8001dc4:	e005      	b.n	8001dd2 <set_pwm_LR+0x32>
	} else if (l_temp < MOTOR_PWM_MIN) {
 8001dc6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	da01      	bge.n	8001dd2 <set_pwm_LR+0x32>
		l_temp = MOTOR_PWM_MIN;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	80fb      	strh	r3, [r7, #6]
	} 

	if (r_temp > MOTOR_PWM_MAX) {
 8001dd2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dd6:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	dd03      	ble.n	8001de6 <set_pwm_LR+0x46>
		r_temp = MOTOR_PWM_MAX;
 8001dde:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001de2:	80bb      	strh	r3, [r7, #4]
 8001de4:	e005      	b.n	8001df2 <set_pwm_LR+0x52>
	} else if (r_temp < MOTOR_PWM_MIN) {
 8001de6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	da01      	bge.n	8001df2 <set_pwm_LR+0x52>
		r_temp = MOTOR_PWM_MIN;
 8001dee:	2300      	movs	r3, #0
 8001df0:	80bb      	strh	r3, [r7, #4]
	}

	__HAL_TIM_SET_COMPARE(motor_pwm_tim, L_CHANNEL, l_pwm_val);
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <set_pwm_LR+0x7c>)
 8001df4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001df8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <set_pwm_LR+0x84>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(motor_pwm_tim, R_CHANNEL, r_pwm_val);
 8001e00:	4b07      	ldr	r3, [pc, #28]	@ (8001e20 <set_pwm_LR+0x80>)
 8001e02:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e06:	4b07      	ldr	r3, [pc, #28]	@ (8001e24 <set_pwm_LR+0x84>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	20000812 	.word	0x20000812
 8001e20:	20000814 	.word	0x20000814
 8001e24:	20000800 	.word	0x20000800

08001e28 <forward_pid_gyro>:
    motor_stop();
    servo_set_dir(STRAIGHT);
	has_run = false;
}

void forward_pid_gyro(uint32_t distance) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b0a8      	sub	sp, #160	@ 0xa0
 8001e2c:	af04      	add	r7, sp, #16
 8001e2e:	6078      	str	r0, [r7, #4]
	r_millisOld = HAL_GetTick();
 8001e30:	f001 f96a 	bl	8003108 <HAL_GetTick>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	4b7f      	ldr	r3, [pc, #508]	@ (8002038 <forward_pid_gyro+0x210>)
 8001e3a:	601a      	str	r2, [r3, #0]
	l_millisOld = HAL_GetTick();
 8001e3c:	f001 f964 	bl	8003108 <HAL_GetTick>
 8001e40:	4603      	mov	r3, r0
 8001e42:	461a      	mov	r2, r3
 8001e44:	4b7d      	ldr	r3, [pc, #500]	@ (800203c <forward_pid_gyro+0x214>)
 8001e46:	601a      	str	r2, [r3, #0]

	static bool has_run = false;  // Flag to check if the function has already run
	if (has_run) return;  // Exit if the function has already been executed once
 8001e48:	4b7d      	ldr	r3, [pc, #500]	@ (8002040 <forward_pid_gyro+0x218>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f040 82ca 	bne.w	80023e6 <forward_pid_gyro+0x5be>
	has_run = true;  // Set the flag to true to prevent future runs
 8001e52:	4b7b      	ldr	r3, [pc, #492]	@ (8002040 <forward_pid_gyro+0x218>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	701a      	strb	r2, [r3, #0]

	float wheel_radius = 3;							// Wheel radius (cm)
 8001e58:	4b7a      	ldr	r3, [pc, #488]	@ (8002044 <forward_pid_gyro+0x21c>)
 8001e5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float circumference = 2 * 3.14159 * wheel_radius;	// Calculate circumference
 8001e5e:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001e62:	f7fe fb71 	bl	8000548 <__aeabi_f2d>
 8001e66:	a372      	add	r3, pc, #456	@ (adr r3, 8002030 <forward_pid_gyro+0x208>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fbc4 	bl	80005f8 <__aeabi_dmul>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	f7fe fe96 	bl	8000ba8 <__aeabi_d2f>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    uint32_t pulses_per_rev = 1550;						// Encoder's specification: 11 ppr * 30 (30x reducer) = 1550
 8001e82:	f240 630e 	movw	r3, #1550	@ 0x60e
 8001e86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    float pulses_per_cm = pulses_per_rev / circumference;
 8001e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001e8e:	ee07 3a90 	vmov	s15, r3
 8001e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001e96:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8001e9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e9e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
    uint32_t target_pulses = (uint32_t)(distance * pulses_per_cm);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	ee07 3a90 	vmov	s15, r3
 8001ea8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001eac:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb8:	ee17 3a90 	vmov	r3, s15
 8001ebc:	67fb      	str	r3, [r7, #124]	@ 0x7c

	target_angle = (distance * 360) / circumference;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8001ec4:	fb02 f303 	mul.w	r3, r2, r3
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ed0:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8001ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ed8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001edc:	ee17 3a90 	vmov	r3, s15
 8001ee0:	b21a      	sxth	r2, r3
 8001ee2:	4b59      	ldr	r3, [pc, #356]	@ (8002048 <forward_pid_gyro+0x220>)
 8001ee4:	801a      	strh	r2, [r3, #0]


	l_rpm = (int)((1000/no_of_tick) * 60/360);
 8001ee6:	4b59      	ldr	r3, [pc, #356]	@ (800204c <forward_pid_gyro+0x224>)
 8001ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eec:	461a      	mov	r2, r3
 8001eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ef2:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ef6:	4a56      	ldr	r2, [pc, #344]	@ (8002050 <forward_pid_gyro+0x228>)
 8001ef8:	fb82 1203 	smull	r1, r2, r2, r3
 8001efc:	17db      	asrs	r3, r3, #31
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	b21a      	sxth	r2, r3
 8001f02:	4b54      	ldr	r3, [pc, #336]	@ (8002054 <forward_pid_gyro+0x22c>)
 8001f04:	801a      	strh	r2, [r3, #0]
	r_rpm = (int)((1000/no_of_tick) * 60/360);
 8001f06:	4b51      	ldr	r3, [pc, #324]	@ (800204c <forward_pid_gyro+0x224>)
 8001f08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f12:	fb93 f3f2 	sdiv	r3, r3, r2
 8001f16:	4a4e      	ldr	r2, [pc, #312]	@ (8002050 <forward_pid_gyro+0x228>)
 8001f18:	fb82 1203 	smull	r1, r2, r2, r3
 8001f1c:	17db      	asrs	r3, r3, #31
 8001f1e:	1ad3      	subs	r3, r2, r3
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	4b4d      	ldr	r3, [pc, #308]	@ (8002058 <forward_pid_gyro+0x230>)
 8001f24:	801a      	strh	r2, [r3, #0]

	l_speed = 0, r_speed = 0;
 8001f26:	4b4d      	ldr	r3, [pc, #308]	@ (800205c <forward_pid_gyro+0x234>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	801a      	strh	r2, [r3, #0]
 8001f2c:	4b4c      	ldr	r3, [pc, #304]	@ (8002060 <forward_pid_gyro+0x238>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	801a      	strh	r2, [r3, #0]
	l_position = 0, r_position = 0;  // see SysTick_Handler in stm32f4xx_it.c
 8001f32:	4b4c      	ldr	r3, [pc, #304]	@ (8002064 <forward_pid_gyro+0x23c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	801a      	strh	r2, [r3, #0]
 8001f38:	4b4b      	ldr	r3, [pc, #300]	@ (8002068 <forward_pid_gyro+0x240>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	801a      	strh	r2, [r3, #0]
	l_oldpos = 0, r_oldpos = 0; // see SysTick_Handler in stm32f4xx_it.c
 8001f3e:	4b4b      	ldr	r3, [pc, #300]	@ (800206c <forward_pid_gyro+0x244>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	801a      	strh	r2, [r3, #0]
 8001f44:	4b4a      	ldr	r3, [pc, #296]	@ (8002070 <forward_pid_gyro+0x248>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	801a      	strh	r2, [r3, #0]
	l_angle = 0, r_angle = 0;
 8001f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002074 <forward_pid_gyro+0x24c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	801a      	strh	r2, [r3, #0]
 8001f50:	4b49      	ldr	r3, [pc, #292]	@ (8002078 <forward_pid_gyro+0x250>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	801a      	strh	r2, [r3, #0]
	l_pwm_val = 0, r_pwm_val = 0;
 8001f56:	4b49      	ldr	r3, [pc, #292]	@ (800207c <forward_pid_gyro+0x254>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	801a      	strh	r2, [r3, #0]
 8001f5c:	4b48      	ldr	r3, [pc, #288]	@ (8002080 <forward_pid_gyro+0x258>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	801a      	strh	r2, [r3, #0]

	l_err = 0, r_err = 0;// for checking whether error has settle down near to zero
 8001f62:	4b48      	ldr	r3, [pc, #288]	@ (8002084 <forward_pid_gyro+0x25c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	4b47      	ldr	r3, [pc, #284]	@ (8002088 <forward_pid_gyro+0x260>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
	l_error_old = 0, r_error_old = 0;
 8001f6e:	4b47      	ldr	r3, [pc, #284]	@ (800208c <forward_pid_gyro+0x264>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	4b46      	ldr	r3, [pc, #280]	@ (8002090 <forward_pid_gyro+0x268>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	601a      	str	r2, [r3, #0]
	l_error_area = 0, r_error_area = 0;
 8001f7a:	4b46      	ldr	r3, [pc, #280]	@ (8002094 <forward_pid_gyro+0x26c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	4b45      	ldr	r3, [pc, #276]	@ (8002098 <forward_pid_gyro+0x270>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	601a      	str	r2, [r3, #0]

	l_error = target_angle - l_angle;
 8001f86:	4b30      	ldr	r3, [pc, #192]	@ (8002048 <forward_pid_gyro+0x220>)
 8001f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	4b39      	ldr	r3, [pc, #228]	@ (8002074 <forward_pid_gyro+0x24c>)
 8001f90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	b21a      	sxth	r2, r3
 8001f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800209c <forward_pid_gyro+0x274>)
 8001f9e:	801a      	strh	r2, [r3, #0]
	r_error = target_angle - r_angle;
 8001fa0:	4b29      	ldr	r3, [pc, #164]	@ (8002048 <forward_pid_gyro+0x220>)
 8001fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4b33      	ldr	r3, [pc, #204]	@ (8002078 <forward_pid_gyro+0x250>)
 8001faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80020a0 <forward_pid_gyro+0x278>)
 8001fb8:	801a      	strh	r2, [r3, #0]

	int8_t dir = 1;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
	int correction = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	677b      	str	r3, [r7, #116]	@ 0x74

    servo_set_dir(STRAIGHT);
 8001fc4:	f241 20a7 	movw	r0, #4775	@ 0x12a7
 8001fc8:	f000 fc6a 	bl	80028a0 <servo_set_dir>
    HAL_Delay(500);
 8001fcc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001fd0:	f001 f8a6 	bl	8003120 <HAL_Delay>
	uint8_t buf[100];
    sprintf(buf, "target_pulse: %u", target_pulses);
 8001fd4:	f107 0308 	add.w	r3, r7, #8
 8001fd8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001fda:	4932      	ldr	r1, [pc, #200]	@ (80020a4 <forward_pid_gyro+0x27c>)
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f006 f999 	bl	8008314 <siprintf>
	OLED_Clear();
 8001fe2:	f000 fa9b 	bl	800251c <OLED_Clear>
	OLED_ShowString(0, 15, buf);
 8001fe6:	f107 0308 	add.w	r3, r7, #8
 8001fea:	461a      	mov	r2, r3
 8001fec:	210f      	movs	r1, #15
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f000 fb86 	bl	8002700 <OLED_ShowString>
	OLED_Refresh_Gram();
 8001ff4:	f000 fa5a 	bl	80024ac <OLED_Refresh_Gram>
	HAL_Delay(500);
 8001ff8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001ffc:	f001 f890 	bl	8003120 <HAL_Delay>

    // Reset encoder count
    reset_encoders();
 8002000:	f7ff feb8 	bl	8001d74 <reset_encoders>
    	// Initialize to 65535 after resetting the encoder
    uint32_t l_encoder_cnt = 0;
 8002004:	2300      	movs	r3, #0
 8002006:	673b      	str	r3, [r7, #112]	@ 0x70
	uint32_t r_encoder_cnt = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    // Move forward
    motor_forward();
 800200c:	f7ff fe44 	bl	8001c98 <motor_forward>
    OLED_Clear();
 8002010:	f000 fa84 	bl	800251c <OLED_Clear>
	print_OLED(0, 0, "ta: %ld", true, target_angle);
 8002014:	4b0c      	ldr	r3, [pc, #48]	@ (8002048 <forward_pid_gyro+0x220>)
 8002016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2301      	movs	r3, #1
 800201e:	4a22      	ldr	r2, [pc, #136]	@ (80020a8 <forward_pid_gyro+0x280>)
 8002020:	2100      	movs	r1, #0
 8002022:	2000      	movs	r0, #0
 8002024:	f7ff f852 	bl	80010cc <print_OLED>

	start = 1;
 8002028:	4b20      	ldr	r3, [pc, #128]	@ (80020ac <forward_pid_gyro+0x284>)
 800202a:	2201      	movs	r2, #1
 800202c:	601a      	str	r2, [r3, #0]

    while (start) {
 800202e:	e1cb      	b.n	80023c8 <forward_pid_gyro+0x5a0>
 8002030:	f01b866e 	.word	0xf01b866e
 8002034:	401921f9 	.word	0x401921f9
 8002038:	20000854 	.word	0x20000854
 800203c:	20000850 	.word	0x20000850
 8002040:	20000880 	.word	0x20000880
 8002044:	40400000 	.word	0x40400000
 8002048:	20000838 	.word	0x20000838
 800204c:	20000004 	.word	0x20000004
 8002050:	2aaaaaab 	.word	0x2aaaaaab
 8002054:	2000081e 	.word	0x2000081e
 8002058:	20000820 	.word	0x20000820
 800205c:	2000081a 	.word	0x2000081a
 8002060:	2000081c 	.word	0x2000081c
 8002064:	20000830 	.word	0x20000830
 8002068:	20000832 	.word	0x20000832
 800206c:	20000c88 	.word	0x20000c88
 8002070:	20000c8a 	.word	0x20000c8a
 8002074:	20000834 	.word	0x20000834
 8002078:	20000836 	.word	0x20000836
 800207c:	20000812 	.word	0x20000812
 8002080:	20000814 	.word	0x20000814
 8002084:	20000824 	.word	0x20000824
 8002088:	20000828 	.word	0x20000828
 800208c:	20000848 	.word	0x20000848
 8002090:	2000084c 	.word	0x2000084c
 8002094:	20000840 	.word	0x20000840
 8002098:	20000844 	.word	0x20000844
 800209c:	2000083a 	.word	0x2000083a
 80020a0:	2000083c 	.word	0x2000083c
 80020a4:	0800a5ac 	.word	0x0800a5ac
 80020a8:	0800a5c0 	.word	0x0800a5c0
 80020ac:	2000082c 	.word	0x2000082c

    	l_encoder_cnt = __HAL_TIM_GET_COUNTER(l_enc_tim);
 80020b0:	4b99      	ldr	r3, [pc, #612]	@ (8002318 <forward_pid_gyro+0x4f0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	673b      	str	r3, [r7, #112]	@ 0x70
    	r_encoder_cnt = __HAL_TIM_GET_COUNTER(r_enc_tim);
 80020ba:	4b98      	ldr	r3, [pc, #608]	@ (800231c <forward_pid_gyro+0x4f4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    	if (65535 - l_encoder_cnt > 32767) {
 80020c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80020c6:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 80020ca:	33ff      	adds	r3, #255	@ 0xff
 80020cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020d0:	d302      	bcc.n	80020d8 <forward_pid_gyro+0x2b0>
    		l_count = 0;
 80020d2:	4b93      	ldr	r3, [pc, #588]	@ (8002320 <forward_pid_gyro+0x4f8>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	801a      	strh	r2, [r3, #0]
    	}

    	if (r_encoder_cnt > 32767) {
 80020d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020de:	d302      	bcc.n	80020e6 <forward_pid_gyro+0x2be>
			r_count = 0;
 80020e0:	4b90      	ldr	r3, [pc, #576]	@ (8002324 <forward_pid_gyro+0x4fc>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	801a      	strh	r2, [r3, #0]
		}

		r_count = (int16_t)r_encoder_cnt;
 80020e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020e8:	b21a      	sxth	r2, r3
 80020ea:	4b8e      	ldr	r3, [pc, #568]	@ (8002324 <forward_pid_gyro+0x4fc>)
 80020ec:	801a      	strh	r2, [r3, #0]
		r_position = r_count/4;  //x1 Encoding
 80020ee:	4b8d      	ldr	r3, [pc, #564]	@ (8002324 <forward_pid_gyro+0x4fc>)
 80020f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	da00      	bge.n	80020fa <forward_pid_gyro+0x2d2>
 80020f8:	3303      	adds	r3, #3
 80020fa:	109b      	asrs	r3, r3, #2
 80020fc:	b21a      	sxth	r2, r3
 80020fe:	4b8a      	ldr	r3, [pc, #552]	@ (8002328 <forward_pid_gyro+0x500>)
 8002100:	801a      	strh	r2, [r3, #0]
		r_angle = r_count/2;
 8002102:	4b88      	ldr	r3, [pc, #544]	@ (8002324 <forward_pid_gyro+0x4fc>)
 8002104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002108:	0fda      	lsrs	r2, r3, #31
 800210a:	4413      	add	r3, r2
 800210c:	105b      	asrs	r3, r3, #1
 800210e:	b21a      	sxth	r2, r3
 8002110:	4b86      	ldr	r3, [pc, #536]	@ (800232c <forward_pid_gyro+0x504>)
 8002112:	801a      	strh	r2, [r3, #0]

		l_encoder_cnt = 65535 - l_encoder_cnt;
 8002114:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002116:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 800211a:	33ff      	adds	r3, #255	@ 0xff
 800211c:	673b      	str	r3, [r7, #112]	@ 0x70
		l_count = (int16_t)l_encoder_cnt; // 1550 - 360deg
 800211e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002120:	b21a      	sxth	r2, r3
 8002122:	4b7f      	ldr	r3, [pc, #508]	@ (8002320 <forward_pid_gyro+0x4f8>)
 8002124:	801a      	strh	r2, [r3, #0]
		l_position = l_count/4;  //x1 Encoding
 8002126:	4b7e      	ldr	r3, [pc, #504]	@ (8002320 <forward_pid_gyro+0x4f8>)
 8002128:	f9b3 3000 	ldrsh.w	r3, [r3]
 800212c:	2b00      	cmp	r3, #0
 800212e:	da00      	bge.n	8002132 <forward_pid_gyro+0x30a>
 8002130:	3303      	adds	r3, #3
 8002132:	109b      	asrs	r3, r3, #2
 8002134:	b21a      	sxth	r2, r3
 8002136:	4b7e      	ldr	r3, [pc, #504]	@ (8002330 <forward_pid_gyro+0x508>)
 8002138:	801a      	strh	r2, [r3, #0]
		l_angle = l_count/2;
 800213a:	4b79      	ldr	r3, [pc, #484]	@ (8002320 <forward_pid_gyro+0x4f8>)
 800213c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002140:	0fda      	lsrs	r2, r3, #31
 8002142:	4413      	add	r3, r2
 8002144:	105b      	asrs	r3, r3, #1
 8002146:	b21a      	sxth	r2, r3
 8002148:	4b7a      	ldr	r3, [pc, #488]	@ (8002334 <forward_pid_gyro+0x50c>)
 800214a:	801a      	strh	r2, [r3, #0]


//		l_pwm_val = PID_Control_left(0);
//		r_pwm_val = PID_Control_right(0);

		__Gyro_Read_Z(&gyro_i2c, readGyroZData, gyroZ); // polling
 800214c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002150:	9302      	str	r3, [sp, #8]
 8002152:	2302      	movs	r3, #2
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	4b78      	ldr	r3, [pc, #480]	@ (8002338 <forward_pid_gyro+0x510>)
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2301      	movs	r3, #1
 800215c:	2237      	movs	r2, #55	@ 0x37
 800215e:	21d0      	movs	r1, #208	@ 0xd0
 8002160:	4876      	ldr	r0, [pc, #472]	@ (800233c <forward_pid_gyro+0x514>)
 8002162:	f001 fdb1 	bl	8003cc8 <HAL_I2C_Mem_Read>
 8002166:	4b74      	ldr	r3, [pc, #464]	@ (8002338 <forward_pid_gyro+0x510>)
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	021b      	lsls	r3, r3, #8
 800216c:	b21a      	sxth	r2, r3
 800216e:	4b72      	ldr	r3, [pc, #456]	@ (8002338 <forward_pid_gyro+0x510>)
 8002170:	785b      	ldrb	r3, [r3, #1]
 8002172:	b21b      	sxth	r3, r3
 8002174:	4313      	orrs	r3, r2
 8002176:	b21a      	sxth	r2, r3
 8002178:	4b71      	ldr	r3, [pc, #452]	@ (8002340 <forward_pid_gyro+0x518>)
 800217a:	801a      	strh	r2, [r3, #0]
		dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(l_enc_tim) ? 1 : -1;
 800217c:	4b66      	ldr	r3, [pc, #408]	@ (8002318 <forward_pid_gyro+0x4f0>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b10      	cmp	r3, #16
 800218a:	d101      	bne.n	8002190 <forward_pid_gyro+0x368>
 800218c:	2301      	movs	r3, #1
 800218e:	e001      	b.n	8002194 <forward_pid_gyro+0x36c>
 8002190:	f04f 33ff 	mov.w	r3, #4294967295
 8002194:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
		angleNow += ((gyroZ >= -4 && gyroZ <= 11) ? 0 : gyroZ);
 8002198:	4b69      	ldr	r3, [pc, #420]	@ (8002340 <forward_pid_gyro+0x518>)
 800219a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800219e:	f113 0f04 	cmn.w	r3, #4
 80021a2:	db04      	blt.n	80021ae <forward_pid_gyro+0x386>
 80021a4:	4b66      	ldr	r3, [pc, #408]	@ (8002340 <forward_pid_gyro+0x518>)
 80021a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021aa:	2b0b      	cmp	r3, #11
 80021ac:	dd07      	ble.n	80021be <forward_pid_gyro+0x396>
 80021ae:	4b64      	ldr	r3, [pc, #400]	@ (8002340 <forward_pid_gyro+0x518>)
 80021b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021b4:	ee07 3a90 	vmov	s15, r3
 80021b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021bc:	e001      	b.n	80021c2 <forward_pid_gyro+0x39a>
 80021be:	eddf 7a61 	vldr	s15, [pc, #388]	@ 8002344 <forward_pid_gyro+0x51c>
 80021c2:	4b61      	ldr	r3, [pc, #388]	@ (8002348 <forward_pid_gyro+0x520>)
 80021c4:	ed93 7a00 	vldr	s14, [r3]
 80021c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021cc:	4b5e      	ldr	r3, [pc, #376]	@ (8002348 <forward_pid_gyro+0x520>)
 80021ce:	edc3 7a00 	vstr	s15, [r3]
		__PID_SPEED_T(pidSlow, angleNow, correction, dir, l_pwm_val, r_pwm_val);
 80021d2:	4b5e      	ldr	r3, [pc, #376]	@ (800234c <forward_pid_gyro+0x524>)
 80021d4:	ed93 7a00 	vldr	s14, [r3]
 80021d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002348 <forward_pid_gyro+0x520>)
 80021da:	edd3 7a00 	vldr	s15, [r3]
 80021de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021e2:	4b5a      	ldr	r3, [pc, #360]	@ (800234c <forward_pid_gyro+0x524>)
 80021e4:	edd3 6a01 	vldr	s13, [r3, #4]
 80021e8:	4b58      	ldr	r3, [pc, #352]	@ (800234c <forward_pid_gyro+0x524>)
 80021ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80021ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f6:	4b55      	ldr	r3, [pc, #340]	@ (800234c <forward_pid_gyro+0x524>)
 80021f8:	edd3 6a02 	vldr	s13, [r3, #8]
 80021fc:	4b53      	ldr	r3, [pc, #332]	@ (800234c <forward_pid_gyro+0x524>)
 80021fe:	ed93 6a03 	vldr	s12, [r3, #12]
 8002202:	4b51      	ldr	r3, [pc, #324]	@ (8002348 <forward_pid_gyro+0x520>)
 8002204:	edd3 7a00 	vldr	s15, [r3]
 8002208:	ee76 7a67 	vsub.f32	s15, s12, s15
 800220c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002210:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002218:	ee17 3a90 	vmov	r3, s15
 800221c:	677b      	str	r3, [r7, #116]	@ 0x74
 800221e:	4b4a      	ldr	r3, [pc, #296]	@ (8002348 <forward_pid_gyro+0x520>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a4a      	ldr	r2, [pc, #296]	@ (800234c <forward_pid_gyro+0x524>)
 8002224:	60d3      	str	r3, [r2, #12]
 8002226:	4b49      	ldr	r3, [pc, #292]	@ (800234c <forward_pid_gyro+0x524>)
 8002228:	ed93 7a04 	vldr	s14, [r3, #16]
 800222c:	4b46      	ldr	r3, [pc, #280]	@ (8002348 <forward_pid_gyro+0x520>)
 800222e:	edd3 7a00 	vldr	s15, [r3]
 8002232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002236:	4b45      	ldr	r3, [pc, #276]	@ (800234c <forward_pid_gyro+0x524>)
 8002238:	edc3 7a04 	vstr	s15, [r3, #16]
 800223c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800223e:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002242:	dc05      	bgt.n	8002250 <forward_pid_gyro+0x428>
 8002244:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002246:	4a42      	ldr	r2, [pc, #264]	@ (8002350 <forward_pid_gyro+0x528>)
 8002248:	4293      	cmp	r3, r2
 800224a:	bfb8      	it	lt
 800224c:	4613      	movlt	r3, r2
 800224e:	e001      	b.n	8002254 <forward_pid_gyro+0x42c>
 8002250:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8002254:	677b      	str	r3, [r7, #116]	@ 0x74
 8002256:	f997 307b 	ldrsb.w	r3, [r7, #123]	@ 0x7b
 800225a:	b29a      	uxth	r2, r3
 800225c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800225e:	b29b      	uxth	r3, r3
 8002260:	fb12 f303 	smulbb	r3, r2, r3
 8002264:	b29b      	uxth	r3, r3
 8002266:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800226a:	b29b      	uxth	r3, r3
 800226c:	b21a      	sxth	r2, r3
 800226e:	4b39      	ldr	r3, [pc, #228]	@ (8002354 <forward_pid_gyro+0x52c>)
 8002270:	801a      	strh	r2, [r3, #0]
 8002272:	f997 307b 	ldrsb.w	r3, [r7, #123]	@ 0x7b
 8002276:	b29a      	uxth	r2, r3
 8002278:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800227a:	b29b      	uxth	r3, r3
 800227c:	fb12 f303 	smulbb	r3, r2, r3
 8002280:	b29b      	uxth	r3, r3
 8002282:	f5c3 63bb 	rsb	r3, r3, #1496	@ 0x5d8
 8002286:	3304      	adds	r3, #4
 8002288:	b29b      	uxth	r3, r3
 800228a:	b21a      	sxth	r2, r3
 800228c:	4b32      	ldr	r3, [pc, #200]	@ (8002358 <forward_pid_gyro+0x530>)
 800228e:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(motor_pwm_tim, R_CHANNEL, r_pwm_val);
 8002290:	4b31      	ldr	r3, [pc, #196]	@ (8002358 <forward_pid_gyro+0x530>)
 8002292:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002296:	4b31      	ldr	r3, [pc, #196]	@ (800235c <forward_pid_gyro+0x534>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(motor_pwm_tim, L_CHANNEL, l_pwm_val);
 800229e:	4b2d      	ldr	r3, [pc, #180]	@ (8002354 <forward_pid_gyro+0x52c>)
 80022a0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022a4:	4b2d      	ldr	r3, [pc, #180]	@ (800235c <forward_pid_gyro+0x534>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	635a      	str	r2, [r3, #52]	@ 0x34

		if (abs(l_error) < 5){ // error is less than 3 deg
 80022ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002360 <forward_pid_gyro+0x538>)
 80022ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	bfb8      	it	lt
 80022b6:	425b      	neglt	r3, r3
 80022b8:	b29b      	uxth	r3, r3
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d80a      	bhi.n	80022d4 <forward_pid_gyro+0x4ac>
//	      l_err++; // to keep track how long it has reached steady state
//	      l_angle = (int)(l_position*360/1550);  //calculate the angle
//	      l_error = target_angle - l_angle; // calculate the error
	      l_pwm_val = 0; //stop
 80022be:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <forward_pid_gyro+0x52c>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	801a      	strh	r2, [r3, #0]
	      __HAL_TIM_SET_COMPARE(motor_pwm_tim, L_CHANNEL, l_pwm_val);
 80022c4:	4b23      	ldr	r3, [pc, #140]	@ (8002354 <forward_pid_gyro+0x52c>)
 80022c6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80022ca:	4b24      	ldr	r3, [pc, #144]	@ (800235c <forward_pid_gyro+0x534>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80022d2:	e00c      	b.n	80022ee <forward_pid_gyro+0x4c6>
		} else {
			l_error = target_angle - l_angle; // calculate the error
 80022d4:	4b23      	ldr	r3, [pc, #140]	@ (8002364 <forward_pid_gyro+0x53c>)
 80022d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <forward_pid_gyro+0x50c>)
 80022de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	b21a      	sxth	r2, r3
 80022ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <forward_pid_gyro+0x538>)
 80022ec:	801a      	strh	r2, [r3, #0]
		}

		if (abs(r_error) < 5){ // error is less than 3 deg
 80022ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002368 <forward_pid_gyro+0x540>)
 80022f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	bfb8      	it	lt
 80022f8:	425b      	neglt	r3, r3
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d835      	bhi.n	800236c <forward_pid_gyro+0x544>
//	      r_err++; // to keep track how long it has reached steady state
//	      r_angle = (int)(r_position*360/1550);  //calculate the angle
//	      r_error = target_angle - r_angle; // calculate the error
			r_pwm_val = 0; //stop
 8002300:	4b15      	ldr	r3, [pc, #84]	@ (8002358 <forward_pid_gyro+0x530>)
 8002302:	2200      	movs	r2, #0
 8002304:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(motor_pwm_tim, R_CHANNEL, r_pwm_val);
 8002306:	4b14      	ldr	r3, [pc, #80]	@ (8002358 <forward_pid_gyro+0x530>)
 8002308:	f9b3 2000 	ldrsh.w	r2, [r3]
 800230c:	4b13      	ldr	r3, [pc, #76]	@ (800235c <forward_pid_gyro+0x534>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	639a      	str	r2, [r3, #56]	@ 0x38
 8002314:	e037      	b.n	8002386 <forward_pid_gyro+0x55e>
 8002316:	bf00      	nop
 8002318:	20000804 	.word	0x20000804
 800231c:	20000808 	.word	0x20000808
 8002320:	20000816 	.word	0x20000816
 8002324:	20000818 	.word	0x20000818
 8002328:	20000832 	.word	0x20000832
 800232c:	20000836 	.word	0x20000836
 8002330:	20000830 	.word	0x20000830
 8002334:	20000834 	.word	0x20000834
 8002338:	20000864 	.word	0x20000864
 800233c:	2000080c 	.word	0x2000080c
 8002340:	20000866 	.word	0x20000866
 8002344:	00000000 	.word	0x00000000
 8002348:	20000868 	.word	0x20000868
 800234c:	2000086c 	.word	0x2000086c
 8002350:	fffffda8 	.word	0xfffffda8
 8002354:	20000812 	.word	0x20000812
 8002358:	20000814 	.word	0x20000814
 800235c:	20000800 	.word	0x20000800
 8002360:	2000083a 	.word	0x2000083a
 8002364:	20000838 	.word	0x20000838
 8002368:	2000083c 	.word	0x2000083c
		} else {
			r_error = target_angle - r_angle; // calculate the error
 800236c:	4b20      	ldr	r3, [pc, #128]	@ (80023f0 <forward_pid_gyro+0x5c8>)
 800236e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002372:	b29a      	uxth	r2, r3
 8002374:	4b1f      	ldr	r3, [pc, #124]	@ (80023f4 <forward_pid_gyro+0x5cc>)
 8002376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800237a:	b29b      	uxth	r3, r3
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	b29b      	uxth	r3, r3
 8002380:	b21a      	sxth	r2, r3
 8002382:	4b1d      	ldr	r3, [pc, #116]	@ (80023f8 <forward_pid_gyro+0x5d0>)
 8002384:	801a      	strh	r2, [r3, #0]
//		if (r_err > 5) { // error has settled to within the acceptance ranges
//	   	 	r_pwm_val = 0; //stop
//   	     	__HAL_TIM_SET_COMPARE(motor_pwm_tim, R_CHANNEL, r_pwm_val);
//		}

		if (r_pwm_val == 0 && l_pwm_val == 0) {
 8002386:	4b1d      	ldr	r3, [pc, #116]	@ (80023fc <forward_pid_gyro+0x5d4>)
 8002388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <forward_pid_gyro+0x578>
 8002390:	4b1b      	ldr	r3, [pc, #108]	@ (8002400 <forward_pid_gyro+0x5d8>)
 8002392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <forward_pid_gyro+0x578>
			start = 0;
 800239a:	4b1a      	ldr	r3, [pc, #104]	@ (8002404 <forward_pid_gyro+0x5dc>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
		}

		print_OLED(0, 15, "l: %ld", true, l_angle);
 80023a0:	4b19      	ldr	r3, [pc, #100]	@ (8002408 <forward_pid_gyro+0x5e0>)
 80023a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	2301      	movs	r3, #1
 80023aa:	4a18      	ldr	r2, [pc, #96]	@ (800240c <forward_pid_gyro+0x5e4>)
 80023ac:	210f      	movs	r1, #15
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7fe fe8c 	bl	80010cc <print_OLED>
		print_OLED(0, 30, "r: %ld", true, r_angle);
 80023b4:	4b0f      	ldr	r3, [pc, #60]	@ (80023f4 <forward_pid_gyro+0x5cc>)
 80023b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	2301      	movs	r3, #1
 80023be:	4a14      	ldr	r2, [pc, #80]	@ (8002410 <forward_pid_gyro+0x5e8>)
 80023c0:	211e      	movs	r1, #30
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7fe fe82 	bl	80010cc <print_OLED>
    while (start) {
 80023c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002404 <forward_pid_gyro+0x5dc>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f47f ae6f 	bne.w	80020b0 <forward_pid_gyro+0x288>
        // OLED_ShowString(0, 30, buf);
		// OLED_Refresh_Gram();
    }

    // Stop the motors when the target distance is reached
    motor_stop();
 80023d2:	f7ff fc7b 	bl	8001ccc <motor_stop>
    servo_set_dir(STRAIGHT);
 80023d6:	f241 20a7 	movw	r0, #4775	@ 0x12a7
 80023da:	f000 fa61 	bl	80028a0 <servo_set_dir>
	has_run = false;
 80023de:	4b0d      	ldr	r3, [pc, #52]	@ (8002414 <forward_pid_gyro+0x5ec>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e000      	b.n	80023e8 <forward_pid_gyro+0x5c0>
	if (has_run) return;  // Exit if the function has already been executed once
 80023e6:	bf00      	nop
}
 80023e8:	3790      	adds	r7, #144	@ 0x90
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000838 	.word	0x20000838
 80023f4:	20000836 	.word	0x20000836
 80023f8:	2000083c 	.word	0x2000083c
 80023fc:	20000814 	.word	0x20000814
 8002400:	20000812 	.word	0x20000812
 8002404:	2000082c 	.word	0x2000082c
 8002408:	20000834 	.word	0x20000834
 800240c:	0800a5c8 	.word	0x0800a5c8
 8002410:	0800a5d0 	.word	0x0800a5d0
 8002414:	20000880 	.word	0x20000880

08002418 <OLED_WR_Byte>:
			   1 => sending data
			   0 => sending command
Output  : none

**************************************************************************/
void OLED_WR_Byte(uint8_t dat, uint8_t DataCmd) {
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	460a      	mov	r2, r1
 8002422:	71fb      	strb	r3, [r7, #7]
 8002424:	4613      	mov	r3, r2
 8002426:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if (DataCmd == 1) {		// Data write
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d106      	bne.n	800243c <OLED_WR_Byte+0x24>
		OLED_RS_Set();		// Set the D/C# line
 800242e:	2201      	movs	r2, #1
 8002430:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002434:	481c      	ldr	r0, [pc, #112]	@ (80024a8 <OLED_WR_Byte+0x90>)
 8002436:	f001 f9ef 	bl	8003818 <HAL_GPIO_WritePin>
 800243a:	e005      	b.n	8002448 <OLED_WR_Byte+0x30>
	} else {				// Command write
		OLED_RS_Clr();
 800243c:	2200      	movs	r2, #0
 800243e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002442:	4819      	ldr	r0, [pc, #100]	@ (80024a8 <OLED_WR_Byte+0x90>)
 8002444:	f001 f9e8 	bl	8003818 <HAL_GPIO_WritePin>
	}						// Clear the D/C# line

	for(i = 0; i < 8 ; i++) {
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e01e      	b.n	800248c <OLED_WR_Byte+0x74>
		OLED_SCLK_Clr();
 800244e:	2200      	movs	r2, #0
 8002450:	2120      	movs	r1, #32
 8002452:	4815      	ldr	r0, [pc, #84]	@ (80024a8 <OLED_WR_Byte+0x90>)
 8002454:	f001 f9e0 	bl	8003818 <HAL_GPIO_WritePin>
		(dat & 0x80) ? OLED_SDIN_Set(): OLED_SDIN_Clr();
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	da05      	bge.n	800246c <OLED_WR_Byte+0x54>
 8002460:	2201      	movs	r2, #1
 8002462:	2140      	movs	r1, #64	@ 0x40
 8002464:	4810      	ldr	r0, [pc, #64]	@ (80024a8 <OLED_WR_Byte+0x90>)
 8002466:	f001 f9d7 	bl	8003818 <HAL_GPIO_WritePin>
 800246a:	e004      	b.n	8002476 <OLED_WR_Byte+0x5e>
 800246c:	2200      	movs	r2, #0
 800246e:	2140      	movs	r1, #64	@ 0x40
 8002470:	480d      	ldr	r0, [pc, #52]	@ (80024a8 <OLED_WR_Byte+0x90>)
 8002472:	f001 f9d1 	bl	8003818 <HAL_GPIO_WritePin>
		dat <<= 1;
 8002476:	79fb      	ldrb	r3, [r7, #7]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	71fb      	strb	r3, [r7, #7]
		OLED_SCLK_Set();
 800247c:	2201      	movs	r2, #1
 800247e:	2120      	movs	r1, #32
 8002480:	4809      	ldr	r0, [pc, #36]	@ (80024a8 <OLED_WR_Byte+0x90>)
 8002482:	f001 f9c9 	bl	8003818 <HAL_GPIO_WritePin>
	for(i = 0; i < 8 ; i++) {
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	3301      	adds	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b07      	cmp	r3, #7
 8002490:	d9dd      	bls.n	800244e <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();			// Keep the D/C# line high upon exit
 8002492:	2201      	movs	r2, #1
 8002494:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002498:	4803      	ldr	r0, [pc, #12]	@ (80024a8 <OLED_WR_Byte+0x90>)
 800249a:	f001 f9bd 	bl	8003818 <HAL_GPIO_WritePin>
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40021000 	.word	0x40021000

080024ac <OLED_Refresh_Gram>:

// **************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram() {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i = 0; i < 8; i++){
 80024b2:	2300      	movs	r3, #0
 80024b4:	71fb      	strb	r3, [r7, #7]
 80024b6:	e026      	b.n	8002506 <OLED_Refresh_Gram+0x5a>
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	3b50      	subs	r3, #80	@ 0x50
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2100      	movs	r1, #0
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff ffa9 	bl	8002418 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 80024c6:	2100      	movs	r1, #0
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7ff ffa5 	bl	8002418 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 80024ce:	2100      	movs	r1, #0
 80024d0:	2010      	movs	r0, #16
 80024d2:	f7ff ffa1 	bl	8002418 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	71bb      	strb	r3, [r7, #6]
 80024da:	e00d      	b.n	80024f8 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 80024dc:	79ba      	ldrb	r2, [r7, #6]
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	490d      	ldr	r1, [pc, #52]	@ (8002518 <OLED_Refresh_Gram+0x6c>)
 80024e2:	00d2      	lsls	r2, r2, #3
 80024e4:	440a      	add	r2, r1
 80024e6:	4413      	add	r3, r2
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2101      	movs	r1, #1
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7ff ff93 	bl	8002418 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 80024f2:	79bb      	ldrb	r3, [r7, #6]
 80024f4:	3301      	adds	r3, #1
 80024f6:	71bb      	strb	r3, [r7, #6]
 80024f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	daed      	bge.n	80024dc <OLED_Refresh_Gram+0x30>
	for(i = 0; i < 8; i++){
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	3301      	adds	r3, #1
 8002504:	71fb      	strb	r3, [r7, #7]
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	2b07      	cmp	r3, #7
 800250a:	d9d5      	bls.n	80024b8 <OLED_Refresh_Gram+0xc>
	}
}
 800250c:	bf00      	nop
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000884 	.word	0x20000884

0800251c <OLED_Clear>:

// **************************************************************************
// Clear OLED
void OLED_Clear() {
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for(i = 0; i < 8; i++)
 8002522:	2300      	movs	r3, #0
 8002524:	71fb      	strb	r3, [r7, #7]
 8002526:	e014      	b.n	8002552 <OLED_Clear+0x36>
		for(n = 0; n < 128; n++)
 8002528:	2300      	movs	r3, #0
 800252a:	71bb      	strb	r3, [r7, #6]
 800252c:	e00a      	b.n	8002544 <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 800252e:	79ba      	ldrb	r2, [r7, #6]
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	490c      	ldr	r1, [pc, #48]	@ (8002564 <OLED_Clear+0x48>)
 8002534:	00d2      	lsls	r2, r2, #3
 8002536:	440a      	add	r2, r1
 8002538:	4413      	add	r3, r2
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
		for(n = 0; n < 128; n++)
 800253e:	79bb      	ldrb	r3, [r7, #6]
 8002540:	3301      	adds	r3, #1
 8002542:	71bb      	strb	r3, [r7, #6]
 8002544:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002548:	2b00      	cmp	r3, #0
 800254a:	daf0      	bge.n	800252e <OLED_Clear+0x12>
	for(i = 0; i < 8; i++)
 800254c:	79fb      	ldrb	r3, [r7, #7]
 800254e:	3301      	adds	r3, #1
 8002550:	71fb      	strb	r3, [r7, #7]
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	2b07      	cmp	r3, #7
 8002556:	d9e7      	bls.n	8002528 <OLED_Clear+0xc>
	OLED_Refresh_Gram();	// Refresh
 8002558:	f7ff ffa8 	bl	80024ac <OLED_Refresh_Gram>
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000884 	.word	0x20000884

08002568 <OLED_DrawPoint>:
	OLED_WR_Byte(0XAE, OLED_CMD);	// DISPLAY OFF
}

// **************************************************************************
// Draw A Point
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t) {
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
 8002572:	460b      	mov	r3, r1
 8002574:	71bb      	strb	r3, [r7, #6]
 8002576:	4613      	mov	r3, r2
 8002578:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	73fb      	strb	r3, [r7, #15]

	if (x > 127 || y > 63)
 800257e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	db41      	blt.n	800260a <OLED_DrawPoint+0xa2>
 8002586:	79bb      	ldrb	r3, [r7, #6]
 8002588:	2b3f      	cmp	r3, #63	@ 0x3f
 800258a:	d83e      	bhi.n	800260a <OLED_DrawPoint+0xa2>
		return;		// Out of reach

	pos = 7 - y/8;
 800258c:	79bb      	ldrb	r3, [r7, #6]
 800258e:	08db      	lsrs	r3, r3, #3
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f1c3 0307 	rsb	r3, r3, #7
 8002596:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 8002598:	79bb      	ldrb	r3, [r7, #6]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7-bx);
 80025a0:	7b7b      	ldrb	r3, [r7, #13]
 80025a2:	f1c3 0307 	rsb	r3, r3, #7
 80025a6:	2201      	movs	r2, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	73fb      	strb	r3, [r7, #15]

	if (t) {
 80025ae:	797b      	ldrb	r3, [r7, #5]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d012      	beq.n	80025da <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 80025b4:	79fa      	ldrb	r2, [r7, #7]
 80025b6:	7bbb      	ldrb	r3, [r7, #14]
 80025b8:	4917      	ldr	r1, [pc, #92]	@ (8002618 <OLED_DrawPoint+0xb0>)
 80025ba:	00d2      	lsls	r2, r2, #3
 80025bc:	440a      	add	r2, r1
 80025be:	4413      	add	r3, r2
 80025c0:	7818      	ldrb	r0, [r3, #0]
 80025c2:	79fa      	ldrb	r2, [r7, #7]
 80025c4:	7bbb      	ldrb	r3, [r7, #14]
 80025c6:	7bf9      	ldrb	r1, [r7, #15]
 80025c8:	4301      	orrs	r1, r0
 80025ca:	b2c8      	uxtb	r0, r1
 80025cc:	4912      	ldr	r1, [pc, #72]	@ (8002618 <OLED_DrawPoint+0xb0>)
 80025ce:	00d2      	lsls	r2, r2, #3
 80025d0:	440a      	add	r2, r1
 80025d2:	4413      	add	r3, r2
 80025d4:	4602      	mov	r2, r0
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e018      	b.n	800260c <OLED_DrawPoint+0xa4>
	} else {
		OLED_GRAM[x][pos] &= ~temp;
 80025da:	79fa      	ldrb	r2, [r7, #7]
 80025dc:	7bbb      	ldrb	r3, [r7, #14]
 80025de:	490e      	ldr	r1, [pc, #56]	@ (8002618 <OLED_DrawPoint+0xb0>)
 80025e0:	00d2      	lsls	r2, r2, #3
 80025e2:	440a      	add	r2, r1
 80025e4:	4413      	add	r3, r2
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b25a      	sxtb	r2, r3
 80025ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	b25b      	sxtb	r3, r3
 80025f2:	4013      	ands	r3, r2
 80025f4:	b259      	sxtb	r1, r3
 80025f6:	79fa      	ldrb	r2, [r7, #7]
 80025f8:	7bbb      	ldrb	r3, [r7, #14]
 80025fa:	b2c8      	uxtb	r0, r1
 80025fc:	4906      	ldr	r1, [pc, #24]	@ (8002618 <OLED_DrawPoint+0xb0>)
 80025fe:	00d2      	lsls	r2, r2, #3
 8002600:	440a      	add	r2, r1
 8002602:	4413      	add	r3, r2
 8002604:	4602      	mov	r2, r0
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	e000      	b.n	800260c <OLED_DrawPoint+0xa4>
		return;		// Out of reach
 800260a:	bf00      	nop
	}
}
 800260c:	3714      	adds	r7, #20
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000884 	.word	0x20000884

0800261c <OLED_ShowChar>:

// **************************************************************************
// Show Char
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode) {
 800261c:	b590      	push	{r4, r7, lr}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	4604      	mov	r4, r0
 8002624:	4608      	mov	r0, r1
 8002626:	4611      	mov	r1, r2
 8002628:	461a      	mov	r2, r3
 800262a:	4623      	mov	r3, r4
 800262c:	71fb      	strb	r3, [r7, #7]
 800262e:	4603      	mov	r3, r0
 8002630:	71bb      	strb	r3, [r7, #6]
 8002632:	460b      	mov	r3, r1
 8002634:	717b      	strb	r3, [r7, #5]
 8002636:	4613      	mov	r3, r2
 8002638:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 800263a:	79bb      	ldrb	r3, [r7, #6]
 800263c:	733b      	strb	r3, [r7, #12]

	chr = chr - ' ';
 800263e:	797b      	ldrb	r3, [r7, #5]
 8002640:	3b20      	subs	r3, #32
 8002642:	717b      	strb	r3, [r7, #5]
    for(t = 0; t < size; t++) {
 8002644:	2300      	movs	r3, #0
 8002646:	73bb      	strb	r3, [r7, #14]
 8002648:	e04d      	b.n	80026e6 <OLED_ShowChar+0xca>
		if (size == 12)
 800264a:	793b      	ldrb	r3, [r7, #4]
 800264c:	2b0c      	cmp	r3, #12
 800264e:	d10b      	bne.n	8002668 <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t];		// 1206 Size
 8002650:	797a      	ldrb	r2, [r7, #5]
 8002652:	7bb9      	ldrb	r1, [r7, #14]
 8002654:	4828      	ldr	r0, [pc, #160]	@ (80026f8 <OLED_ShowChar+0xdc>)
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4403      	add	r3, r0
 8002660:	440b      	add	r3, r1
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	73fb      	strb	r3, [r7, #15]
 8002666:	e007      	b.n	8002678 <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t];		// 1608 Size
 8002668:	797a      	ldrb	r2, [r7, #5]
 800266a:	7bbb      	ldrb	r3, [r7, #14]
 800266c:	4923      	ldr	r1, [pc, #140]	@ (80026fc <OLED_ShowChar+0xe0>)
 800266e:	0112      	lsls	r2, r2, #4
 8002670:	440a      	add	r2, r1
 8002672:	4413      	add	r3, r2
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	73fb      	strb	r3, [r7, #15]

        for(t1 = 0; t1 < 8; t1++) {
 8002678:	2300      	movs	r3, #0
 800267a:	737b      	strb	r3, [r7, #13]
 800267c:	e02d      	b.n	80026da <OLED_ShowChar+0xbe>
			if (temp & 0x80) {
 800267e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	da07      	bge.n	8002696 <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 8002686:	f897 2020 	ldrb.w	r2, [r7, #32]
 800268a:	79b9      	ldrb	r1, [r7, #6]
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff ff6a 	bl	8002568 <OLED_DrawPoint>
 8002694:	e00c      	b.n	80026b0 <OLED_ShowChar+0x94>
			} else {
				OLED_DrawPoint(x, y, !mode);
 8002696:	f897 3020 	ldrb.w	r3, [r7, #32]
 800269a:	2b00      	cmp	r3, #0
 800269c:	bf0c      	ite	eq
 800269e:	2301      	moveq	r3, #1
 80026a0:	2300      	movne	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	79b9      	ldrb	r1, [r7, #6]
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff ff5c 	bl	8002568 <OLED_DrawPoint>
			}

			temp <<= 1;
 80026b0:	7bfb      	ldrb	r3, [r7, #15]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	73fb      	strb	r3, [r7, #15]
			y++;
 80026b6:	79bb      	ldrb	r3, [r7, #6]
 80026b8:	3301      	adds	r3, #1
 80026ba:	71bb      	strb	r3, [r7, #6]

			if((y - y0) == size) {
 80026bc:	79ba      	ldrb	r2, [r7, #6]
 80026be:	7b3b      	ldrb	r3, [r7, #12]
 80026c0:	1ad2      	subs	r2, r2, r3
 80026c2:	793b      	ldrb	r3, [r7, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d105      	bne.n	80026d4 <OLED_ShowChar+0xb8>
				y = y0;
 80026c8:	7b3b      	ldrb	r3, [r7, #12]
 80026ca:	71bb      	strb	r3, [r7, #6]
				x++;
 80026cc:	79fb      	ldrb	r3, [r7, #7]
 80026ce:	3301      	adds	r3, #1
 80026d0:	71fb      	strb	r3, [r7, #7]
				break;
 80026d2:	e005      	b.n	80026e0 <OLED_ShowChar+0xc4>
        for(t1 = 0; t1 < 8; t1++) {
 80026d4:	7b7b      	ldrb	r3, [r7, #13]
 80026d6:	3301      	adds	r3, #1
 80026d8:	737b      	strb	r3, [r7, #13]
 80026da:	7b7b      	ldrb	r3, [r7, #13]
 80026dc:	2b07      	cmp	r3, #7
 80026de:	d9ce      	bls.n	800267e <OLED_ShowChar+0x62>
    for(t = 0; t < size; t++) {
 80026e0:	7bbb      	ldrb	r3, [r7, #14]
 80026e2:	3301      	adds	r3, #1
 80026e4:	73bb      	strb	r3, [r7, #14]
 80026e6:	7bba      	ldrb	r2, [r7, #14]
 80026e8:	793b      	ldrb	r3, [r7, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d3ad      	bcc.n	800264a <OLED_ShowChar+0x2e>
			}
		}
    }
}
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd90      	pop	{r4, r7, pc}
 80026f8:	0800a5f4 	.word	0x0800a5f4
 80026fc:	0800aa68 	.word	0x0800aa68

08002700 <OLED_ShowString>:
	}
}

// **************************************************************************
// Show The String
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p) {
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af02      	add	r7, sp, #8
 8002706:	4603      	mov	r3, r0
 8002708:	603a      	str	r2, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
 800270c:	460b      	mov	r3, r1
 800270e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
    while (*p != '\0') {
 8002710:	e01f      	b.n	8002752 <OLED_ShowString+0x52>
        if (x > MAX_CHAR_POSX){
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	2b7a      	cmp	r3, #122	@ 0x7a
 8002716:	d904      	bls.n	8002722 <OLED_ShowString+0x22>
        	x = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	71fb      	strb	r3, [r7, #7]
        	y += 16;
 800271c:	79bb      	ldrb	r3, [r7, #6]
 800271e:	3310      	adds	r3, #16
 8002720:	71bb      	strb	r3, [r7, #6]
        }

        if (y > MAX_CHAR_POSY) {
 8002722:	79bb      	ldrb	r3, [r7, #6]
 8002724:	2b3a      	cmp	r3, #58	@ 0x3a
 8002726:	d905      	bls.n	8002734 <OLED_ShowString+0x34>
        	y = x = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	71fb      	strb	r3, [r7, #7]
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	71bb      	strb	r3, [r7, #6]
        	OLED_Clear();
 8002730:	f7ff fef4 	bl	800251c <OLED_Clear>
        }

        OLED_ShowChar(x, y, *p, 12, 1);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	781a      	ldrb	r2, [r3, #0]
 8002738:	79b9      	ldrb	r1, [r7, #6]
 800273a:	79f8      	ldrb	r0, [r7, #7]
 800273c:	2301      	movs	r3, #1
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	230c      	movs	r3, #12
 8002742:	f7ff ff6b 	bl	800261c <OLED_ShowChar>
        x += 8;
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	3308      	adds	r3, #8
 800274a:	71fb      	strb	r3, [r7, #7]
        p++;
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	3301      	adds	r3, #1
 8002750:	603b      	str	r3, [r7, #0]
    while (*p != '\0') {
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1db      	bne.n	8002712 <OLED_ShowString+0x12>
    }
}
 800275a:	bf00      	nop
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <OLED_Init>:

void OLED_Init() {
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8002768:	f002 f894 	bl	8004894 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);	// turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles
 800276c:	4b41      	ldr	r3, [pc, #260]	@ (8002874 <OLED_Init+0x110>)
 800276e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002770:	4a40      	ldr	r2, [pc, #256]	@ (8002874 <OLED_Init+0x110>)
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	6713      	str	r3, [r2, #112]	@ 0x70
 8002778:	4b3e      	ldr	r3, [pc, #248]	@ (8002874 <OLED_Init+0x110>)
 800277a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277c:	4a3d      	ldr	r2, [pc, #244]	@ (8002874 <OLED_Init+0x110>)
 800277e:	f023 0304 	bic.w	r3, r3, #4
 8002782:	6713      	str	r3, [r2, #112]	@ 0x70
										// LSE oscillator switch off to let PC13 PC14 PC15 be IO


	HAL_PWR_DisableBkUpAccess();
 8002784:	f002 f89a 	bl	80048bc <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 8002788:	2200      	movs	r2, #0
 800278a:	2180      	movs	r1, #128	@ 0x80
 800278c:	483a      	ldr	r0, [pc, #232]	@ (8002878 <OLED_Init+0x114>)
 800278e:	f001 f843 	bl	8003818 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002792:	2064      	movs	r0, #100	@ 0x64
 8002794:	f000 fcc4 	bl	8003120 <HAL_Delay>
	OLED_RST_Set();
 8002798:	2201      	movs	r2, #1
 800279a:	2180      	movs	r1, #128	@ 0x80
 800279c:	4836      	ldr	r0, [pc, #216]	@ (8002878 <OLED_Init+0x114>)
 800279e:	f001 f83b 	bl	8003818 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD);	// Off Display
 80027a2:	2100      	movs	r1, #0
 80027a4:	20ae      	movs	r0, #174	@ 0xae
 80027a6:	f7ff fe37 	bl	8002418 <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD);	// Set Oscillator Division
 80027aa:	2100      	movs	r1, #0
 80027ac:	20d5      	movs	r0, #213	@ 0xd5
 80027ae:	f7ff fe33 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);		// [3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80027b2:	2100      	movs	r1, #0
 80027b4:	2050      	movs	r0, #80	@ 0x50
 80027b6:	f7ff fe2f 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD);	// multiplex ratio
 80027ba:	2100      	movs	r1, #0
 80027bc:	20a8      	movs	r0, #168	@ 0xa8
 80027be:	f7ff fe2b 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD);	// duty = 0X3F(1/64)
 80027c2:	2100      	movs	r1, #0
 80027c4:	203f      	movs	r0, #63	@ 0x3f
 80027c6:	f7ff fe27 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD);	// set display offset
 80027ca:	2100      	movs	r1, #0
 80027cc:	20d3      	movs	r0, #211	@ 0xd3
 80027ce:	f7ff fe23 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD);	// 0
 80027d2:	2100      	movs	r1, #0
 80027d4:	2000      	movs	r0, #0
 80027d6:	f7ff fe1f 	bl	8002418 <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD);	// set display start line [5:0]- from 0-63. RESET
 80027da:	2100      	movs	r1, #0
 80027dc:	2040      	movs	r0, #64	@ 0x40
 80027de:	f7ff fe1b 	bl	8002418 <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD);	// Set charge pump
 80027e2:	2100      	movs	r1, #0
 80027e4:	208d      	movs	r0, #141	@ 0x8d
 80027e6:	f7ff fe17 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); 	// Enable Charge Pump
 80027ea:	2100      	movs	r1, #0
 80027ec:	2014      	movs	r0, #20
 80027ee:	f7ff fe13 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD);	// Set Memory Addressing Mode
 80027f2:	2100      	movs	r1, #0
 80027f4:	2020      	movs	r0, #32
 80027f6:	f7ff fe0f 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD);	// Page Addressing Mode (RESET)
 80027fa:	2100      	movs	r1, #0
 80027fc:	2002      	movs	r0, #2
 80027fe:	f7ff fe0b 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD);	// Set segment remap, bit0:0,0->0;1,0->127;
 8002802:	2100      	movs	r1, #0
 8002804:	20a1      	movs	r0, #161	@ 0xa1
 8002806:	f7ff fe07 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD);	// Set COM Output Scan Direction
 800280a:	2100      	movs	r1, #0
 800280c:	20c0      	movs	r0, #192	@ 0xc0
 800280e:	f7ff fe03 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD);	// Set COM Pins
 8002812:	2100      	movs	r1, #0
 8002814:	20da      	movs	r0, #218	@ 0xda
 8002816:	f7ff fdff 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);	// [5:4] setting
 800281a:	2100      	movs	r1, #0
 800281c:	2012      	movs	r0, #18
 800281e:	f7ff fdfb 	bl	8002418 <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD);	// Contrast Control
 8002822:	2100      	movs	r1, #0
 8002824:	2081      	movs	r0, #129	@ 0x81
 8002826:	f7ff fdf7 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD);	// 1~256; Default: 0X7F
 800282a:	2100      	movs	r1, #0
 800282c:	20ef      	movs	r0, #239	@ 0xef
 800282e:	f7ff fdf3 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD);	// Set Pre-charge Period
 8002832:	2100      	movs	r1, #0
 8002834:	20d9      	movs	r0, #217	@ 0xd9
 8002836:	f7ff fdef 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD);	// [3:0],PHASE 1;[7:4],PHASE 2;
 800283a:	2100      	movs	r1, #0
 800283c:	20f1      	movs	r0, #241	@ 0xf1
 800283e:	f7ff fdeb 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD);	// Set VCOMH
 8002842:	2100      	movs	r1, #0
 8002844:	20db      	movs	r0, #219	@ 0xdb
 8002846:	f7ff fde7 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD);	// [6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800284a:	2100      	movs	r1, #0
 800284c:	2030      	movs	r0, #48	@ 0x30
 800284e:	f7ff fde3 	bl	8002418 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD);	// Enable display outputs according to the GDDRAM contents
 8002852:	2100      	movs	r1, #0
 8002854:	20a4      	movs	r0, #164	@ 0xa4
 8002856:	f7ff fddf 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD);	// Set normal display
 800285a:	2100      	movs	r1, #0
 800285c:	20a6      	movs	r0, #166	@ 0xa6
 800285e:	f7ff fddb 	bl	8002418 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);	// DISPLAY ON
 8002862:	2100      	movs	r1, #0
 8002864:	20af      	movs	r0, #175	@ 0xaf
 8002866:	f7ff fdd7 	bl	8002418 <OLED_WR_Byte>
	OLED_Clear();
 800286a:	f7ff fe57 	bl	800251c <OLED_Clear>
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40023800 	.word	0x40023800
 8002878:	40021000 	.word	0x40021000

0800287c <servo_init>:
#include "servo.h"


TIM_HandleTypeDef* pwm_tim;

void servo_init(TIM_HandleTypeDef* pwm) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
	pwm_tim = pwm;
 8002884:	4a05      	ldr	r2, [pc, #20]	@ (800289c <servo_init+0x20>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pwm, SERVO_PWM_CHANNEL);
 800288a:	2100      	movs	r1, #0
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f002 fd93 	bl	80053b8 <HAL_TIM_PWM_Start>
}
 8002892:	bf00      	nop
 8002894:	3708      	adds	r7, #8
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	20000c84 	.word	0x20000c84

080028a0 <servo_set_dir>:

void servo_set_dir(uint32_t val) {
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
	HAL_Delay(500);
 80028a8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80028ac:	f000 fc38 	bl	8003120 <HAL_Delay>
	pwm_tim->Instance->CCR1 = val;
 80028b0:	4b04      	ldr	r3, [pc, #16]	@ (80028c4 <servo_set_dir+0x24>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80028ba:	bf00      	nop
 80028bc:	3708      	adds	r7, #8
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	20000c84 	.word	0x20000c84

080028c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
 80028d2:	4b10      	ldr	r3, [pc, #64]	@ (8002914 <HAL_MspInit+0x4c>)
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002914 <HAL_MspInit+0x4c>)
 80028d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80028de:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <HAL_MspInit+0x4c>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	2300      	movs	r3, #0
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	4b09      	ldr	r3, [pc, #36]	@ (8002914 <HAL_MspInit+0x4c>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	4a08      	ldr	r2, [pc, #32]	@ (8002914 <HAL_MspInit+0x4c>)
 80028f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fa:	4b06      	ldr	r3, [pc, #24]	@ (8002914 <HAL_MspInit+0x4c>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002902:	603b      	str	r3, [r7, #0]
 8002904:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40023800 	.word	0x40023800

08002918 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	@ 0x28
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002920:	f107 0314 	add.w	r3, r7, #20
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	605a      	str	r2, [r3, #4]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	60da      	str	r2, [r3, #12]
 800292e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a19      	ldr	r2, [pc, #100]	@ (800299c <HAL_I2C_MspInit+0x84>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d12c      	bne.n	8002994 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	613b      	str	r3, [r7, #16]
 800293e:	4b18      	ldr	r3, [pc, #96]	@ (80029a0 <HAL_I2C_MspInit+0x88>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	4a17      	ldr	r2, [pc, #92]	@ (80029a0 <HAL_I2C_MspInit+0x88>)
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	6313      	str	r3, [r2, #48]	@ 0x30
 800294a:	4b15      	ldr	r3, [pc, #84]	@ (80029a0 <HAL_I2C_MspInit+0x88>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 8002956:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800295a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800295c:	2312      	movs	r3, #18
 800295e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002960:	2300      	movs	r3, #0
 8002962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002964:	2303      	movs	r3, #3
 8002966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002968:	2304      	movs	r3, #4
 800296a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	4619      	mov	r1, r3
 8002972:	480c      	ldr	r0, [pc, #48]	@ (80029a4 <HAL_I2C_MspInit+0x8c>)
 8002974:	f000 fd9c 	bl	80034b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	4b08      	ldr	r3, [pc, #32]	@ (80029a0 <HAL_I2C_MspInit+0x88>)
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	4a07      	ldr	r2, [pc, #28]	@ (80029a0 <HAL_I2C_MspInit+0x88>)
 8002982:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002986:	6413      	str	r3, [r2, #64]	@ 0x40
 8002988:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <HAL_I2C_MspInit+0x88>)
 800298a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002990:	60fb      	str	r3, [r7, #12]
 8002992:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002994:	bf00      	nop
 8002996:	3728      	adds	r7, #40	@ 0x28
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40005400 	.word	0x40005400
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40020400 	.word	0x40020400

080029a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	@ 0x30
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 031c 	add.w	r3, r7, #28
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a31      	ldr	r2, [pc, #196]	@ (8002a8c <HAL_TIM_Base_MspInit+0xe4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d135      	bne.n	8002a36 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	4b30      	ldr	r3, [pc, #192]	@ (8002a90 <HAL_TIM_Base_MspInit+0xe8>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d2:	4a2f      	ldr	r2, [pc, #188]	@ (8002a90 <HAL_TIM_Base_MspInit+0xe8>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80029da:	4b2d      	ldr	r3, [pc, #180]	@ (8002a90 <HAL_TIM_Base_MspInit+0xe8>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
 80029ea:	4b29      	ldr	r3, [pc, #164]	@ (8002a90 <HAL_TIM_Base_MspInit+0xe8>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4a28      	ldr	r2, [pc, #160]	@ (8002a90 <HAL_TIM_Base_MspInit+0xe8>)
 80029f0:	f043 0310 	orr.w	r3, r3, #16
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4b26      	ldr	r3, [pc, #152]	@ (8002a90 <HAL_TIM_Base_MspInit+0xe8>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002a02:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a10:	2300      	movs	r3, #0
 8002a12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a14:	2301      	movs	r3, #1
 8002a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	481d      	ldr	r0, [pc, #116]	@ (8002a94 <HAL_TIM_Base_MspInit+0xec>)
 8002a20:	f000 fd46 	bl	80034b0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002a24:	2200      	movs	r2, #0
 8002a26:	2100      	movs	r1, #0
 8002a28:	201b      	movs	r0, #27
 8002a2a:	f000 fc78 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002a2e:	201b      	movs	r0, #27
 8002a30:	f000 fc91 	bl	8003356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002a34:	e026      	b.n	8002a84 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM6)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a17      	ldr	r2, [pc, #92]	@ (8002a98 <HAL_TIM_Base_MspInit+0xf0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d10e      	bne.n	8002a5e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	4b12      	ldr	r3, [pc, #72]	@ (8002a90 <HAL_TIM_Base_MspInit+0xe8>)
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	4a11      	ldr	r2, [pc, #68]	@ (8002a90 <HAL_TIM_Base_MspInit+0xe8>)
 8002a4a:	f043 0310 	orr.w	r3, r3, #16
 8002a4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a50:	4b0f      	ldr	r3, [pc, #60]	@ (8002a90 <HAL_TIM_Base_MspInit+0xe8>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	693b      	ldr	r3, [r7, #16]
}
 8002a5c:	e012      	b.n	8002a84 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM8)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a0e      	ldr	r2, [pc, #56]	@ (8002a9c <HAL_TIM_Base_MspInit+0xf4>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d10d      	bne.n	8002a84 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <HAL_TIM_Base_MspInit+0xe8>)
 8002a6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a70:	4a07      	ldr	r2, [pc, #28]	@ (8002a90 <HAL_TIM_Base_MspInit+0xe8>)
 8002a72:	f043 0302 	orr.w	r3, r3, #2
 8002a76:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a78:	4b05      	ldr	r3, [pc, #20]	@ (8002a90 <HAL_TIM_Base_MspInit+0xe8>)
 8002a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3730      	adds	r7, #48	@ 0x30
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40001000 	.word	0x40001000
 8002a9c:	40010400 	.word	0x40010400

08002aa0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08c      	sub	sp, #48	@ 0x30
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa8:	f107 031c 	add.w	r3, r7, #28
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	605a      	str	r2, [r3, #4]
 8002ab2:	609a      	str	r2, [r3, #8]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ac0:	d14b      	bne.n	8002b5a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	4a3e      	ldr	r2, [pc, #248]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ad2:	4b3c      	ldr	r3, [pc, #240]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	61bb      	str	r3, [r7, #24]
 8002adc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	4b38      	ldr	r3, [pc, #224]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae6:	4a37      	ldr	r2, [pc, #220]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aee:	4b35      	ldr	r3, [pc, #212]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	4b31      	ldr	r3, [pc, #196]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	4a30      	ldr	r2, [pc, #192]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b04:	f043 0302 	orr.w	r3, r3, #2
 8002b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0a:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_CH1_Pin;
 8002b16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b24:	2300      	movs	r3, #0
 8002b26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_A_CH1_GPIO_Port, &GPIO_InitStruct);
 8002b2c:	f107 031c 	add.w	r3, r7, #28
 8002b30:	4619      	mov	r1, r3
 8002b32:	4825      	ldr	r0, [pc, #148]	@ (8002bc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8002b34:	f000 fcbc 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_A_CH2_Pin;
 8002b38:	2308      	movs	r3, #8
 8002b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b44:	2300      	movs	r3, #0
 8002b46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_A_CH2_GPIO_Port, &GPIO_InitStruct);
 8002b4c:	f107 031c 	add.w	r3, r7, #28
 8002b50:	4619      	mov	r1, r3
 8002b52:	481e      	ldr	r0, [pc, #120]	@ (8002bcc <HAL_TIM_Encoder_MspInit+0x12c>)
 8002b54:	f000 fcac 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b58:	e030      	b.n	8002bbc <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a1c      	ldr	r2, [pc, #112]	@ (8002bd0 <HAL_TIM_Encoder_MspInit+0x130>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d12b      	bne.n	8002bbc <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	4b16      	ldr	r3, [pc, #88]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	4a15      	ldr	r2, [pc, #84]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b6e:	f043 0302 	orr.w	r3, r3, #2
 8002b72:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b74:	4b13      	ldr	r3, [pc, #76]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b80:	2300      	movs	r3, #0
 8002b82:	60bb      	str	r3, [r7, #8]
 8002b84:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b88:	4a0e      	ldr	r2, [pc, #56]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b90:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_B_CH1_Pin|MOTOR_B_CH2_Pin;
 8002b9c:	23c0      	movs	r3, #192	@ 0xc0
 8002b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bac:	2302      	movs	r3, #2
 8002bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb0:	f107 031c 	add.w	r3, r7, #28
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4804      	ldr	r0, [pc, #16]	@ (8002bc8 <HAL_TIM_Encoder_MspInit+0x128>)
 8002bb8:	f000 fc7a 	bl	80034b0 <HAL_GPIO_Init>
}
 8002bbc:	bf00      	nop
 8002bbe:	3730      	adds	r7, #48	@ 0x30
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	40020000 	.word	0x40020000
 8002bcc:	40020400 	.word	0x40020400
 8002bd0:	40000400 	.word	0x40000400

08002bd4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	@ 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a24      	ldr	r2, [pc, #144]	@ (8002c84 <HAL_TIM_MspPostInit+0xb0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d11f      	bne.n	8002c36 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	4b23      	ldr	r3, [pc, #140]	@ (8002c88 <HAL_TIM_MspPostInit+0xb4>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	4a22      	ldr	r2, [pc, #136]	@ (8002c88 <HAL_TIM_MspPostInit+0xb4>)
 8002c00:	f043 0310 	orr.w	r3, r3, #16
 8002c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c06:	4b20      	ldr	r3, [pc, #128]	@ (8002c88 <HAL_TIM_MspPostInit+0xb4>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8002c12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c18:	2302      	movs	r3, #2
 8002c1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c20:	2300      	movs	r3, #0
 8002c22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8002c28:	f107 0314 	add.w	r3, r7, #20
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4817      	ldr	r0, [pc, #92]	@ (8002c8c <HAL_TIM_MspPostInit+0xb8>)
 8002c30:	f000 fc3e 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002c34:	e022      	b.n	8002c7c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a15      	ldr	r2, [pc, #84]	@ (8002c90 <HAL_TIM_MspPostInit+0xbc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d11d      	bne.n	8002c7c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <HAL_TIM_MspPostInit+0xb4>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c48:	4a0f      	ldr	r2, [pc, #60]	@ (8002c88 <HAL_TIM_MspPostInit+0xb4>)
 8002c4a:	f043 0304 	orr.w	r3, r3, #4
 8002c4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c50:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <HAL_TIM_MspPostInit+0xb4>)
 8002c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_A_PWM_Pin|MOTOR_B_PWM_Pin;
 8002c5c:	23c0      	movs	r3, #192	@ 0xc0
 8002c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c60:	2302      	movs	r3, #2
 8002c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c64:	2300      	movs	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c70:	f107 0314 	add.w	r3, r7, #20
 8002c74:	4619      	mov	r1, r3
 8002c76:	4807      	ldr	r0, [pc, #28]	@ (8002c94 <HAL_TIM_MspPostInit+0xc0>)
 8002c78:	f000 fc1a 	bl	80034b0 <HAL_GPIO_Init>
}
 8002c7c:	bf00      	nop
 8002c7e:	3728      	adds	r7, #40	@ 0x28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40010000 	.word	0x40010000
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	40010400 	.word	0x40010400
 8002c94:	40020800 	.word	0x40020800

08002c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	@ 0x28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1d      	ldr	r2, [pc, #116]	@ (8002d2c <HAL_UART_MspInit+0x94>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d134      	bne.n	8002d24 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002d30 <HAL_UART_MspInit+0x98>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002d30 <HAL_UART_MspInit+0x98>)
 8002cc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cca:	4b19      	ldr	r3, [pc, #100]	@ (8002d30 <HAL_UART_MspInit+0x98>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
 8002cda:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <HAL_UART_MspInit+0x98>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	4a14      	ldr	r2, [pc, #80]	@ (8002d30 <HAL_UART_MspInit+0x98>)
 8002ce0:	f043 0304 	orr.w	r3, r3, #4
 8002ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce6:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <HAL_UART_MspInit+0x98>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002cf2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d00:	2303      	movs	r3, #3
 8002d02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d04:	2307      	movs	r3, #7
 8002d06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d08:	f107 0314 	add.w	r3, r7, #20
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	4809      	ldr	r0, [pc, #36]	@ (8002d34 <HAL_UART_MspInit+0x9c>)
 8002d10:	f000 fbce 	bl	80034b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d14:	2200      	movs	r2, #0
 8002d16:	2100      	movs	r1, #0
 8002d18:	2027      	movs	r0, #39	@ 0x27
 8002d1a:	f000 fb00 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d1e:	2027      	movs	r0, #39	@ 0x27
 8002d20:	f000 fb19 	bl	8003356 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002d24:	bf00      	nop
 8002d26:	3728      	adds	r7, #40	@ 0x28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40004800 	.word	0x40004800
 8002d30:	40023800 	.word	0x40023800
 8002d34:	40020800 	.word	0x40020800

08002d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d3c:	bf00      	nop
 8002d3e:	e7fd      	b.n	8002d3c <NMI_Handler+0x4>

08002d40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d44:	bf00      	nop
 8002d46:	e7fd      	b.n	8002d44 <HardFault_Handler+0x4>

08002d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d4c:	bf00      	nop
 8002d4e:	e7fd      	b.n	8002d4c <MemManage_Handler+0x4>

08002d50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d54:	bf00      	nop
 8002d56:	e7fd      	b.n	8002d54 <BusFault_Handler+0x4>

08002d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d5c:	bf00      	nop
 8002d5e:	e7fd      	b.n	8002d5c <UsageFault_Handler+0x4>

08002d60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d64:	bf00      	nop
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr

08002d6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d72:	bf00      	nop
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d80:	bf00      	nop
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
	...

08002d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  tick++;
 8002d90:	4b17      	ldr	r3, [pc, #92]	@ (8002df0 <SysTick_Handler+0x64>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	3301      	adds	r3, #1
 8002d96:	4a16      	ldr	r2, [pc, #88]	@ (8002df0 <SysTick_Handler+0x64>)
 8002d98:	6013      	str	r3, [r2, #0]
		if (tick == no_of_tick)	{ // assuming 1 msec tick, calculate speed every 50 msec?
 8002d9a:	4b15      	ldr	r3, [pc, #84]	@ (8002df0 <SysTick_Handler+0x64>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	4b15      	ldr	r3, [pc, #84]	@ (8002df4 <SysTick_Handler+0x68>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d120      	bne.n	8002de8 <SysTick_Handler+0x5c>
	//		speed = ((position - oldpos)*20*60/180);  // number of ticks/sec * 60 sec  diveide by 180 ticks per round
			l_speed = (l_position - l_oldpos); // change in position
 8002da6:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <SysTick_Handler+0x6c>)
 8002da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dac:	461a      	mov	r2, r3
 8002dae:	4b13      	ldr	r3, [pc, #76]	@ (8002dfc <SysTick_Handler+0x70>)
 8002db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	4a12      	ldr	r2, [pc, #72]	@ (8002e00 <SysTick_Handler+0x74>)
 8002db8:	6013      	str	r3, [r2, #0]
			l_oldpos = l_position;
 8002dba:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <SysTick_Handler+0x6c>)
 8002dbc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <SysTick_Handler+0x70>)
 8002dc2:	801a      	strh	r2, [r3, #0]

	    r_speed = (r_position - r_oldpos); // change in position
 8002dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e04 <SysTick_Handler+0x78>)
 8002dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8002e08 <SysTick_Handler+0x7c>)
 8002dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002e0c <SysTick_Handler+0x80>)
 8002dd6:	6013      	str	r3, [r2, #0]
			r_oldpos = r_position;
 8002dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8002e04 <SysTick_Handler+0x78>)
 8002dda:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002dde:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <SysTick_Handler+0x7c>)
 8002de0:	801a      	strh	r2, [r3, #0]
			tick = 0;
 8002de2:	4b03      	ldr	r3, [pc, #12]	@ (8002df0 <SysTick_Handler+0x64>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
			//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_10); // LED
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de8:	f000 f97a 	bl	80030e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000c8c 	.word	0x20000c8c
 8002df4:	20000004 	.word	0x20000004
 8002df8:	20000830 	.word	0x20000830
 8002dfc:	20000c88 	.word	0x20000c88
 8002e00:	2000081a 	.word	0x2000081a
 8002e04:	20000832 	.word	0x20000832
 8002e08:	20000c8a 	.word	0x20000c8a
 8002e0c:	2000081c 	.word	0x2000081c

08002e10 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e14:	4802      	ldr	r0, [pc, #8]	@ (8002e20 <TIM1_CC_IRQHandler+0x10>)
 8002e16:	f002 fd44 	bl	80058a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	2000024c 	.word	0x2000024c

08002e24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e28:	4802      	ldr	r0, [pc, #8]	@ (8002e34 <USART3_IRQHandler+0x10>)
 8002e2a:	f003 fe5b 	bl	8006ae4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	200003b4 	.word	0x200003b4

08002e38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return 1;
 8002e3c:	2301      	movs	r3, #1
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <_kill>:

int _kill(int pid, int sig)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e52:	f005 fb15 	bl	8008480 <__errno>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2216      	movs	r2, #22
 8002e5a:	601a      	str	r2, [r3, #0]
  return -1;
 8002e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3708      	adds	r7, #8
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <_exit>:

void _exit (int status)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e70:	f04f 31ff 	mov.w	r1, #4294967295
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f7ff ffe7 	bl	8002e48 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e7a:	bf00      	nop
 8002e7c:	e7fd      	b.n	8002e7a <_exit+0x12>

08002e7e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	e00a      	b.n	8002ea6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e90:	f3af 8000 	nop.w
 8002e94:	4601      	mov	r1, r0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	60ba      	str	r2, [r7, #8]
 8002e9c:	b2ca      	uxtb	r2, r1
 8002e9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	dbf0      	blt.n	8002e90 <_read+0x12>
  }

  return len;
 8002eae:	687b      	ldr	r3, [r7, #4]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	e009      	b.n	8002ede <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	60ba      	str	r2, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3301      	adds	r3, #1
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	dbf1      	blt.n	8002eca <_write+0x12>
  }
  return len;
 8002ee6:	687b      	ldr	r3, [r7, #4]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <_close>:

int _close(int file)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ef8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr

08002f08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f18:	605a      	str	r2, [r3, #4]
  return 0;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <_isatty>:

int _isatty(int file)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f30:	2301      	movs	r3, #1
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b085      	sub	sp, #20
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f60:	4a14      	ldr	r2, [pc, #80]	@ (8002fb4 <_sbrk+0x5c>)
 8002f62:	4b15      	ldr	r3, [pc, #84]	@ (8002fb8 <_sbrk+0x60>)
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f6c:	4b13      	ldr	r3, [pc, #76]	@ (8002fbc <_sbrk+0x64>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d102      	bne.n	8002f7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f74:	4b11      	ldr	r3, [pc, #68]	@ (8002fbc <_sbrk+0x64>)
 8002f76:	4a12      	ldr	r2, [pc, #72]	@ (8002fc0 <_sbrk+0x68>)
 8002f78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f7a:	4b10      	ldr	r3, [pc, #64]	@ (8002fbc <_sbrk+0x64>)
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4413      	add	r3, r2
 8002f82:	693a      	ldr	r2, [r7, #16]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d207      	bcs.n	8002f98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f88:	f005 fa7a 	bl	8008480 <__errno>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	220c      	movs	r2, #12
 8002f90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f92:	f04f 33ff 	mov.w	r3, #4294967295
 8002f96:	e009      	b.n	8002fac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f98:	4b08      	ldr	r3, [pc, #32]	@ (8002fbc <_sbrk+0x64>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f9e:	4b07      	ldr	r3, [pc, #28]	@ (8002fbc <_sbrk+0x64>)
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	4a05      	ldr	r2, [pc, #20]	@ (8002fbc <_sbrk+0x64>)
 8002fa8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002faa:	68fb      	ldr	r3, [r7, #12]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	20020000 	.word	0x20020000
 8002fb8:	00000400 	.word	0x00000400
 8002fbc:	20000c90 	.word	0x20000c90
 8002fc0:	20000de8 	.word	0x20000de8

08002fc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fc8:	4b06      	ldr	r3, [pc, #24]	@ (8002fe4 <SystemInit+0x20>)
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fce:	4a05      	ldr	r2, [pc, #20]	@ (8002fe4 <SystemInit+0x20>)
 8002fd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	e000ed00 	.word	0xe000ed00

08002fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fe8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003020 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002fec:	f7ff ffea 	bl	8002fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ff0:	480c      	ldr	r0, [pc, #48]	@ (8003024 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ff2:	490d      	ldr	r1, [pc, #52]	@ (8003028 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800302c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff8:	e002      	b.n	8003000 <LoopCopyDataInit>

08002ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ffe:	3304      	adds	r3, #4

08003000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003004:	d3f9      	bcc.n	8002ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003006:	4a0a      	ldr	r2, [pc, #40]	@ (8003030 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003008:	4c0a      	ldr	r4, [pc, #40]	@ (8003034 <LoopFillZerobss+0x22>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800300c:	e001      	b.n	8003012 <LoopFillZerobss>

0800300e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800300e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003010:	3204      	adds	r2, #4

08003012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003014:	d3fb      	bcc.n	800300e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003016:	f005 fa39 	bl	800848c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800301a:	f7fe f96f 	bl	80012fc <main>
  bx  lr    
 800301e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003020:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003024:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003028:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800302c:	0800b3f0 	.word	0x0800b3f0
  ldr r2, =_sbss
 8003030:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003034:	20000de4 	.word	0x20000de4

08003038 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003038:	e7fe      	b.n	8003038 <ADC_IRQHandler>
	...

0800303c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003040:	4b0e      	ldr	r3, [pc, #56]	@ (800307c <HAL_Init+0x40>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a0d      	ldr	r2, [pc, #52]	@ (800307c <HAL_Init+0x40>)
 8003046:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800304a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800304c:	4b0b      	ldr	r3, [pc, #44]	@ (800307c <HAL_Init+0x40>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <HAL_Init+0x40>)
 8003052:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003056:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003058:	4b08      	ldr	r3, [pc, #32]	@ (800307c <HAL_Init+0x40>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a07      	ldr	r2, [pc, #28]	@ (800307c <HAL_Init+0x40>)
 800305e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003064:	2003      	movs	r0, #3
 8003066:	f000 f94f 	bl	8003308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800306a:	200f      	movs	r0, #15
 800306c:	f000 f808 	bl	8003080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003070:	f7ff fc2a 	bl	80028c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40023c00 	.word	0x40023c00

08003080 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003088:	4b12      	ldr	r3, [pc, #72]	@ (80030d4 <HAL_InitTick+0x54>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <HAL_InitTick+0x58>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	4619      	mov	r1, r3
 8003092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003096:	fbb3 f3f1 	udiv	r3, r3, r1
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f967 	bl	8003372 <HAL_SYSTICK_Config>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e00e      	b.n	80030cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b0f      	cmp	r3, #15
 80030b2:	d80a      	bhi.n	80030ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b4:	2200      	movs	r2, #0
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	f04f 30ff 	mov.w	r0, #4294967295
 80030bc:	f000 f92f 	bl	800331e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030c0:	4a06      	ldr	r2, [pc, #24]	@ (80030dc <HAL_InitTick+0x5c>)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	e000      	b.n	80030cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	20000008 	.word	0x20000008
 80030d8:	20000010 	.word	0x20000010
 80030dc:	2000000c 	.word	0x2000000c

080030e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e4:	4b06      	ldr	r3, [pc, #24]	@ (8003100 <HAL_IncTick+0x20>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	4b06      	ldr	r3, [pc, #24]	@ (8003104 <HAL_IncTick+0x24>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4413      	add	r3, r2
 80030f0:	4a04      	ldr	r2, [pc, #16]	@ (8003104 <HAL_IncTick+0x24>)
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000010 	.word	0x20000010
 8003104:	20000c94 	.word	0x20000c94

08003108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return uwTick;
 800310c:	4b03      	ldr	r3, [pc, #12]	@ (800311c <HAL_GetTick+0x14>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000c94 	.word	0x20000c94

08003120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003128:	f7ff ffee 	bl	8003108 <HAL_GetTick>
 800312c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d005      	beq.n	8003146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800313a:	4b0a      	ldr	r3, [pc, #40]	@ (8003164 <HAL_Delay+0x44>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003146:	bf00      	nop
 8003148:	f7ff ffde 	bl	8003108 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	429a      	cmp	r2, r3
 8003156:	d8f7      	bhi.n	8003148 <HAL_Delay+0x28>
  {
  }
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000010 	.word	0x20000010

08003168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003178:	4b0c      	ldr	r3, [pc, #48]	@ (80031ac <__NVIC_SetPriorityGrouping+0x44>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003184:	4013      	ands	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800319a:	4a04      	ldr	r2, [pc, #16]	@ (80031ac <__NVIC_SetPriorityGrouping+0x44>)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	60d3      	str	r3, [r2, #12]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b4:	4b04      	ldr	r3, [pc, #16]	@ (80031c8 <__NVIC_GetPriorityGrouping+0x18>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	0a1b      	lsrs	r3, r3, #8
 80031ba:	f003 0307 	and.w	r3, r3, #7
}
 80031be:	4618      	mov	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	db0b      	blt.n	80031f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	f003 021f 	and.w	r2, r3, #31
 80031e4:	4907      	ldr	r1, [pc, #28]	@ (8003204 <__NVIC_EnableIRQ+0x38>)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	095b      	lsrs	r3, r3, #5
 80031ec:	2001      	movs	r0, #1
 80031ee:	fa00 f202 	lsl.w	r2, r0, r2
 80031f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	e000e100 	.word	0xe000e100

08003208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	6039      	str	r1, [r7, #0]
 8003212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	2b00      	cmp	r3, #0
 800321a:	db0a      	blt.n	8003232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	490c      	ldr	r1, [pc, #48]	@ (8003254 <__NVIC_SetPriority+0x4c>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	0112      	lsls	r2, r2, #4
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	440b      	add	r3, r1
 800322c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003230:	e00a      	b.n	8003248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4908      	ldr	r1, [pc, #32]	@ (8003258 <__NVIC_SetPriority+0x50>)
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	3b04      	subs	r3, #4
 8003240:	0112      	lsls	r2, r2, #4
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	440b      	add	r3, r1
 8003246:	761a      	strb	r2, [r3, #24]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000e100 	.word	0xe000e100
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	@ 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f1c3 0307 	rsb	r3, r3, #7
 8003276:	2b04      	cmp	r3, #4
 8003278:	bf28      	it	cs
 800327a:	2304      	movcs	r3, #4
 800327c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3304      	adds	r3, #4
 8003282:	2b06      	cmp	r3, #6
 8003284:	d902      	bls.n	800328c <NVIC_EncodePriority+0x30>
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3b03      	subs	r3, #3
 800328a:	e000      	b.n	800328e <NVIC_EncodePriority+0x32>
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	f04f 32ff 	mov.w	r2, #4294967295
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	401a      	ands	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a4:	f04f 31ff 	mov.w	r1, #4294967295
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	43d9      	mvns	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	4313      	orrs	r3, r2
         );
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3724      	adds	r7, #36	@ 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032d4:	d301      	bcc.n	80032da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00f      	b.n	80032fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032da:	4a0a      	ldr	r2, [pc, #40]	@ (8003304 <SysTick_Config+0x40>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032e2:	210f      	movs	r1, #15
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f7ff ff8e 	bl	8003208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032ec:	4b05      	ldr	r3, [pc, #20]	@ (8003304 <SysTick_Config+0x40>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032f2:	4b04      	ldr	r3, [pc, #16]	@ (8003304 <SysTick_Config+0x40>)
 80032f4:	2207      	movs	r2, #7
 80032f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	e000e010 	.word	0xe000e010

08003308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ff29 	bl	8003168 <__NVIC_SetPriorityGrouping>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003330:	f7ff ff3e 	bl	80031b0 <__NVIC_GetPriorityGrouping>
 8003334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	6978      	ldr	r0, [r7, #20]
 800333c:	f7ff ff8e 	bl	800325c <NVIC_EncodePriority>
 8003340:	4602      	mov	r2, r0
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff5d 	bl	8003208 <__NVIC_SetPriority>
}
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff31 	bl	80031cc <__NVIC_EnableIRQ>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f7ff ffa2 	bl	80032c4 <SysTick_Config>
 8003380:	4603      	mov	r3, r0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3708      	adds	r7, #8
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003396:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003398:	f7ff feb6 	bl	8003108 <HAL_GetTick>
 800339c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d008      	beq.n	80033bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2280      	movs	r2, #128	@ 0x80
 80033ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e052      	b.n	8003462 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f022 0216 	bic.w	r2, r2, #22
 80033ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	695a      	ldr	r2, [r3, #20]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <HAL_DMA_Abort+0x62>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0208 	bic.w	r2, r2, #8
 80033fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f022 0201 	bic.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800340c:	e013      	b.n	8003436 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800340e:	f7ff fe7b 	bl	8003108 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b05      	cmp	r3, #5
 800341a:	d90c      	bls.n	8003436 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2203      	movs	r2, #3
 8003426:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e015      	b.n	8003462 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e4      	bne.n	800340e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003448:	223f      	movs	r2, #63	@ 0x3f
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d004      	beq.n	8003488 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2280      	movs	r2, #128	@ 0x80
 8003482:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e00c      	b.n	80034a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2205      	movs	r2, #5
 800348c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0201 	bic.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	@ 0x24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	e16b      	b.n	80037a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034cc:	2201      	movs	r2, #1
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	f040 815a 	bne.w	800379e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d005      	beq.n	8003502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d130      	bne.n	8003564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	2203      	movs	r2, #3
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003538:	2201      	movs	r2, #1
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 0201 	and.w	r2, r3, #1
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b03      	cmp	r3, #3
 800356e:	d017      	beq.n	80035a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	2203      	movs	r2, #3
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d123      	bne.n	80035f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	08da      	lsrs	r2, r3, #3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3208      	adds	r2, #8
 80035b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	220f      	movs	r2, #15
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	08da      	lsrs	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3208      	adds	r2, #8
 80035ee:	69b9      	ldr	r1, [r7, #24]
 80035f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	2203      	movs	r2, #3
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0203 	and.w	r2, r3, #3
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80b4 	beq.w	800379e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	4b60      	ldr	r3, [pc, #384]	@ (80037bc <HAL_GPIO_Init+0x30c>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	4a5f      	ldr	r2, [pc, #380]	@ (80037bc <HAL_GPIO_Init+0x30c>)
 8003640:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003644:	6453      	str	r3, [r2, #68]	@ 0x44
 8003646:	4b5d      	ldr	r3, [pc, #372]	@ (80037bc <HAL_GPIO_Init+0x30c>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800364a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003652:	4a5b      	ldr	r2, [pc, #364]	@ (80037c0 <HAL_GPIO_Init+0x310>)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	3302      	adds	r3, #2
 800365a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	220f      	movs	r2, #15
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a52      	ldr	r2, [pc, #328]	@ (80037c4 <HAL_GPIO_Init+0x314>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d02b      	beq.n	80036d6 <HAL_GPIO_Init+0x226>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a51      	ldr	r2, [pc, #324]	@ (80037c8 <HAL_GPIO_Init+0x318>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d025      	beq.n	80036d2 <HAL_GPIO_Init+0x222>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a50      	ldr	r2, [pc, #320]	@ (80037cc <HAL_GPIO_Init+0x31c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01f      	beq.n	80036ce <HAL_GPIO_Init+0x21e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a4f      	ldr	r2, [pc, #316]	@ (80037d0 <HAL_GPIO_Init+0x320>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d019      	beq.n	80036ca <HAL_GPIO_Init+0x21a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a4e      	ldr	r2, [pc, #312]	@ (80037d4 <HAL_GPIO_Init+0x324>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_GPIO_Init+0x216>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a4d      	ldr	r2, [pc, #308]	@ (80037d8 <HAL_GPIO_Init+0x328>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00d      	beq.n	80036c2 <HAL_GPIO_Init+0x212>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a4c      	ldr	r2, [pc, #304]	@ (80037dc <HAL_GPIO_Init+0x32c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <HAL_GPIO_Init+0x20e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a4b      	ldr	r2, [pc, #300]	@ (80037e0 <HAL_GPIO_Init+0x330>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d101      	bne.n	80036ba <HAL_GPIO_Init+0x20a>
 80036b6:	2307      	movs	r3, #7
 80036b8:	e00e      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036ba:	2308      	movs	r3, #8
 80036bc:	e00c      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036be:	2306      	movs	r3, #6
 80036c0:	e00a      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036c2:	2305      	movs	r3, #5
 80036c4:	e008      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036c6:	2304      	movs	r3, #4
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036ca:	2303      	movs	r3, #3
 80036cc:	e004      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e002      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036d6:	2300      	movs	r3, #0
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	f002 0203 	and.w	r2, r2, #3
 80036de:	0092      	lsls	r2, r2, #2
 80036e0:	4093      	lsls	r3, r2
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036e8:	4935      	ldr	r1, [pc, #212]	@ (80037c0 <HAL_GPIO_Init+0x310>)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	3302      	adds	r3, #2
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036f6:	4b3b      	ldr	r3, [pc, #236]	@ (80037e4 <HAL_GPIO_Init+0x334>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	43db      	mvns	r3, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4013      	ands	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800371a:	4a32      	ldr	r2, [pc, #200]	@ (80037e4 <HAL_GPIO_Init+0x334>)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003720:	4b30      	ldr	r3, [pc, #192]	@ (80037e4 <HAL_GPIO_Init+0x334>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003744:	4a27      	ldr	r2, [pc, #156]	@ (80037e4 <HAL_GPIO_Init+0x334>)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800374a:	4b26      	ldr	r3, [pc, #152]	@ (80037e4 <HAL_GPIO_Init+0x334>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800376e:	4a1d      	ldr	r2, [pc, #116]	@ (80037e4 <HAL_GPIO_Init+0x334>)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003774:	4b1b      	ldr	r3, [pc, #108]	@ (80037e4 <HAL_GPIO_Init+0x334>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003798:	4a12      	ldr	r2, [pc, #72]	@ (80037e4 <HAL_GPIO_Init+0x334>)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3301      	adds	r3, #1
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	f67f ae90 	bls.w	80034cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3724      	adds	r7, #36	@ 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40013800 	.word	0x40013800
 80037c4:	40020000 	.word	0x40020000
 80037c8:	40020400 	.word	0x40020400
 80037cc:	40020800 	.word	0x40020800
 80037d0:	40020c00 	.word	0x40020c00
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40021400 	.word	0x40021400
 80037dc:	40021800 	.word	0x40021800
 80037e0:	40021c00 	.word	0x40021c00
 80037e4:	40013c00 	.word	0x40013c00

080037e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b085      	sub	sp, #20
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	691a      	ldr	r2, [r3, #16]
 80037f8:	887b      	ldrh	r3, [r7, #2]
 80037fa:	4013      	ands	r3, r2
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d002      	beq.n	8003806 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003800:	2301      	movs	r3, #1
 8003802:	73fb      	strb	r3, [r7, #15]
 8003804:	e001      	b.n	800380a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800380a:	7bfb      	ldrb	r3, [r7, #15]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	807b      	strh	r3, [r7, #2]
 8003824:	4613      	mov	r3, r2
 8003826:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003828:	787b      	ldrb	r3, [r7, #1]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800382e:	887a      	ldrh	r2, [r7, #2]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003834:	e003      	b.n	800383e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003836:	887b      	ldrh	r3, [r7, #2]
 8003838:	041a      	lsls	r2, r3, #16
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	619a      	str	r2, [r3, #24]
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
	...

0800384c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e12b      	b.n	8003ab6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d106      	bne.n	8003878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff f850 	bl	8002918 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2224      	movs	r2, #36	@ 0x24
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0201 	bic.w	r2, r2, #1
 800388e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681a      	ldr	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800389e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038b0:	f001 fc48 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 80038b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	4a81      	ldr	r2, [pc, #516]	@ (8003ac0 <HAL_I2C_Init+0x274>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d807      	bhi.n	80038d0 <HAL_I2C_Init+0x84>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	4a80      	ldr	r2, [pc, #512]	@ (8003ac4 <HAL_I2C_Init+0x278>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	bf94      	ite	ls
 80038c8:	2301      	movls	r3, #1
 80038ca:	2300      	movhi	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	e006      	b.n	80038de <HAL_I2C_Init+0x92>
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4a7d      	ldr	r2, [pc, #500]	@ (8003ac8 <HAL_I2C_Init+0x27c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	bf94      	ite	ls
 80038d8:	2301      	movls	r3, #1
 80038da:	2300      	movhi	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0e7      	b.n	8003ab6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a78      	ldr	r2, [pc, #480]	@ (8003acc <HAL_I2C_Init+0x280>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	0c9b      	lsrs	r3, r3, #18
 80038f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6a1b      	ldr	r3, [r3, #32]
 800390c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a6a      	ldr	r2, [pc, #424]	@ (8003ac0 <HAL_I2C_Init+0x274>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d802      	bhi.n	8003920 <HAL_I2C_Init+0xd4>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	3301      	adds	r3, #1
 800391e:	e009      	b.n	8003934 <HAL_I2C_Init+0xe8>
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003926:	fb02 f303 	mul.w	r3, r2, r3
 800392a:	4a69      	ldr	r2, [pc, #420]	@ (8003ad0 <HAL_I2C_Init+0x284>)
 800392c:	fba2 2303 	umull	r2, r3, r2, r3
 8003930:	099b      	lsrs	r3, r3, #6
 8003932:	3301      	adds	r3, #1
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	430b      	orrs	r3, r1
 800393a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003946:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	495c      	ldr	r1, [pc, #368]	@ (8003ac0 <HAL_I2C_Init+0x274>)
 8003950:	428b      	cmp	r3, r1
 8003952:	d819      	bhi.n	8003988 <HAL_I2C_Init+0x13c>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1e59      	subs	r1, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003962:	1c59      	adds	r1, r3, #1
 8003964:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003968:	400b      	ands	r3, r1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00a      	beq.n	8003984 <HAL_I2C_Init+0x138>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1e59      	subs	r1, r3, #1
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	fbb1 f3f3 	udiv	r3, r1, r3
 800397c:	3301      	adds	r3, #1
 800397e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003982:	e051      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 8003984:	2304      	movs	r3, #4
 8003986:	e04f      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d111      	bne.n	80039b4 <HAL_I2C_Init+0x168>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	1e58      	subs	r0, r3, #1
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	005b      	lsls	r3, r3, #1
 800399c:	440b      	add	r3, r1
 800399e:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a2:	3301      	adds	r3, #1
 80039a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e012      	b.n	80039da <HAL_I2C_Init+0x18e>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	1e58      	subs	r0, r3, #1
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	0099      	lsls	r1, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	bf0c      	ite	eq
 80039d4:	2301      	moveq	r3, #1
 80039d6:	2300      	movne	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <HAL_I2C_Init+0x196>
 80039de:	2301      	movs	r3, #1
 80039e0:	e022      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10e      	bne.n	8003a08 <HAL_I2C_Init+0x1bc>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1e58      	subs	r0, r3, #1
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6859      	ldr	r1, [r3, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	440b      	add	r3, r1
 80039f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039fc:	3301      	adds	r3, #1
 80039fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a06:	e00f      	b.n	8003a28 <HAL_I2C_Init+0x1dc>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1e58      	subs	r0, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6859      	ldr	r1, [r3, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	0099      	lsls	r1, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	6809      	ldr	r1, [r1, #0]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	69da      	ldr	r2, [r3, #28]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	431a      	orrs	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	6911      	ldr	r1, [r2, #16]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	4311      	orrs	r1, r2
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	6812      	ldr	r2, [r2, #0]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	699b      	ldr	r3, [r3, #24]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	000186a0 	.word	0x000186a0
 8003ac4:	001e847f 	.word	0x001e847f
 8003ac8:	003d08ff 	.word	0x003d08ff
 8003acc:	431bde83 	.word	0x431bde83
 8003ad0:	10624dd3 	.word	0x10624dd3

08003ad4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af02      	add	r7, sp, #8
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	4608      	mov	r0, r1
 8003ade:	4611      	mov	r1, r2
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	817b      	strh	r3, [r7, #10]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	813b      	strh	r3, [r7, #8]
 8003aea:	4613      	mov	r3, r2
 8003aec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aee:	f7ff fb0b 	bl	8003108 <HAL_GetTick>
 8003af2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	f040 80d9 	bne.w	8003cb4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	2319      	movs	r3, #25
 8003b08:	2201      	movs	r2, #1
 8003b0a:	496d      	ldr	r1, [pc, #436]	@ (8003cc0 <HAL_I2C_Mem_Write+0x1ec>)
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 fc8b 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e0cc      	b.n	8003cb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_I2C_Mem_Write+0x56>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e0c5      	b.n	8003cb6 <HAL_I2C_Mem_Write+0x1e2>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	d007      	beq.n	8003b50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2221      	movs	r2, #33	@ 0x21
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2240      	movs	r2, #64	@ 0x40
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a3a      	ldr	r2, [r7, #32]
 8003b7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4a4d      	ldr	r2, [pc, #308]	@ (8003cc4 <HAL_I2C_Mem_Write+0x1f0>)
 8003b90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b92:	88f8      	ldrh	r0, [r7, #6]
 8003b94:	893a      	ldrh	r2, [r7, #8]
 8003b96:	8979      	ldrh	r1, [r7, #10]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	9301      	str	r3, [sp, #4]
 8003b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9e:	9300      	str	r3, [sp, #0]
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 fac2 	bl	800412c <I2C_RequestMemoryWrite>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d052      	beq.n	8003c54 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e081      	b.n	8003cb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 fd50 	bl	800465c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00d      	beq.n	8003bde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	d107      	bne.n	8003bda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e06b      	b.n	8003cb6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bee:	1c5a      	adds	r2, r3, #1
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bf8:	3b01      	subs	r3, #1
 8003bfa:	b29a      	uxth	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	3b01      	subs	r3, #1
 8003c08:	b29a      	uxth	r2, r3
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b04      	cmp	r3, #4
 8003c1a:	d11b      	bne.n	8003c54 <HAL_I2C_Mem_Write+0x180>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d017      	beq.n	8003c54 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	781a      	ldrb	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	b29a      	uxth	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	b29a      	uxth	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1aa      	bne.n	8003bb2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 fd43 	bl	80046ec <I2C_WaitOnBTFFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00d      	beq.n	8003c88 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d107      	bne.n	8003c84 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c82:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e016      	b.n	8003cb6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cb4:	2302      	movs	r3, #2
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	00100002 	.word	0x00100002
 8003cc4:	ffff0000 	.word	0xffff0000

08003cc8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08c      	sub	sp, #48	@ 0x30
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	4608      	mov	r0, r1
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	817b      	strh	r3, [r7, #10]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	813b      	strh	r3, [r7, #8]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ce2:	f7ff fa11 	bl	8003108 <HAL_GetTick>
 8003ce6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	f040 8214 	bne.w	800411e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	2319      	movs	r3, #25
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	497b      	ldr	r1, [pc, #492]	@ (8003eec <HAL_I2C_Mem_Read+0x224>)
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 fb91 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e207      	b.n	8004120 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d101      	bne.n	8003d1e <HAL_I2C_Mem_Read+0x56>
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	e200      	b.n	8004120 <HAL_I2C_Mem_Read+0x458>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2201      	movs	r2, #1
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d007      	beq.n	8003d44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2222      	movs	r2, #34	@ 0x22
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2240      	movs	r2, #64	@ 0x40
 8003d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003d74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4a5b      	ldr	r2, [pc, #364]	@ (8003ef0 <HAL_I2C_Mem_Read+0x228>)
 8003d84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d86:	88f8      	ldrh	r0, [r7, #6]
 8003d88:	893a      	ldrh	r2, [r7, #8]
 8003d8a:	8979      	ldrh	r1, [r7, #10]
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	4603      	mov	r3, r0
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f000 fa5e 	bl	8004258 <I2C_RequestMemoryRead>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e1bc      	b.n	8004120 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d113      	bne.n	8003dd6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dae:	2300      	movs	r3, #0
 8003db0:	623b      	str	r3, [r7, #32]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	623b      	str	r3, [r7, #32]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	623b      	str	r3, [r7, #32]
 8003dc2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	e190      	b.n	80040f8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d11b      	bne.n	8003e16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	61fb      	str	r3, [r7, #28]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e12:	601a      	str	r2, [r3, #0]
 8003e14:	e170      	b.n	80040f8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d11b      	bne.n	8003e56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e3e:	2300      	movs	r3, #0
 8003e40:	61bb      	str	r3, [r7, #24]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	61bb      	str	r3, [r7, #24]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	e150      	b.n	80040f8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e6c:	e144      	b.n	80040f8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e72:	2b03      	cmp	r3, #3
 8003e74:	f200 80f1 	bhi.w	800405a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d123      	bne.n	8003ec8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 fc79 	bl	800477c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e145      	b.n	8004120 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ec6:	e117      	b.n	80040f8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ecc:	2b02      	cmp	r3, #2
 8003ece:	d14e      	bne.n	8003f6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	9300      	str	r3, [sp, #0]
 8003ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	4906      	ldr	r1, [pc, #24]	@ (8003ef4 <HAL_I2C_Mem_Read+0x22c>)
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	f000 faa4 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d008      	beq.n	8003ef8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e11a      	b.n	8004120 <HAL_I2C_Mem_Read+0x458>
 8003eea:	bf00      	nop
 8003eec:	00100002 	.word	0x00100002
 8003ef0:	ffff0000 	.word	0xffff0000
 8003ef4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f6c:	e0c4      	b.n	80040f8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f74:	2200      	movs	r2, #0
 8003f76:	496c      	ldr	r1, [pc, #432]	@ (8004128 <HAL_I2C_Mem_Read+0x460>)
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fa55 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e0cb      	b.n	8004120 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691a      	ldr	r2, [r3, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa2:	b2d2      	uxtb	r2, r2
 8003fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003faa:	1c5a      	adds	r2, r3, #1
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	4955      	ldr	r1, [pc, #340]	@ (8004128 <HAL_I2C_Mem_Read+0x460>)
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f000 fa27 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e09d      	b.n	8004120 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffe:	b2d2      	uxtb	r2, r2
 8004000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004010:	3b01      	subs	r3, #1
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800401c:	b29b      	uxth	r3, r3
 800401e:	3b01      	subs	r3, #1
 8004020:	b29a      	uxth	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	691a      	ldr	r2, [r3, #16]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004058:	e04e      	b.n	80040f8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800405a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fb8c 	bl	800477c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e058      	b.n	8004120 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800408a:	3b01      	subs	r3, #1
 800408c:	b29a      	uxth	r2, r3
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	3b01      	subs	r3, #1
 800409a:	b29a      	uxth	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f003 0304 	and.w	r3, r3, #4
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d124      	bne.n	80040f8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b2:	2b03      	cmp	r3, #3
 80040b4:	d107      	bne.n	80040c6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040c4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f47f aeb6 	bne.w	8003e6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	e000      	b.n	8004120 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800411e:	2302      	movs	r3, #2
  }
}
 8004120:	4618      	mov	r0, r3
 8004122:	3728      	adds	r7, #40	@ 0x28
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	00010004 	.word	0x00010004

0800412c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b088      	sub	sp, #32
 8004130:	af02      	add	r7, sp, #8
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	4608      	mov	r0, r1
 8004136:	4611      	mov	r1, r2
 8004138:	461a      	mov	r2, r3
 800413a:	4603      	mov	r3, r0
 800413c:	817b      	strh	r3, [r7, #10]
 800413e:	460b      	mov	r3, r1
 8004140:	813b      	strh	r3, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004154:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	6a3b      	ldr	r3, [r7, #32]
 800415c:	2200      	movs	r2, #0
 800415e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f960 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00d      	beq.n	800418a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800417c:	d103      	bne.n	8004186 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004184:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e05f      	b.n	800424a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800418a:	897b      	ldrh	r3, [r7, #10]
 800418c:	b2db      	uxtb	r3, r3
 800418e:	461a      	mov	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004198:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	6a3a      	ldr	r2, [r7, #32]
 800419e:	492d      	ldr	r1, [pc, #180]	@ (8004254 <I2C_RequestMemoryWrite+0x128>)
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f9bb 	bl	800451c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d001      	beq.n	80041b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e04c      	b.n	800424a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b0:	2300      	movs	r3, #0
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	617b      	str	r3, [r7, #20]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c8:	6a39      	ldr	r1, [r7, #32]
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 fa46 	bl	800465c <I2C_WaitOnTXEFlagUntilTimeout>
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00d      	beq.n	80041f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d107      	bne.n	80041ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e02b      	b.n	800424a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041f2:	88fb      	ldrh	r3, [r7, #6]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d105      	bne.n	8004204 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041f8:	893b      	ldrh	r3, [r7, #8]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	611a      	str	r2, [r3, #16]
 8004202:	e021      	b.n	8004248 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004204:	893b      	ldrh	r3, [r7, #8]
 8004206:	0a1b      	lsrs	r3, r3, #8
 8004208:	b29b      	uxth	r3, r3
 800420a:	b2da      	uxtb	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004214:	6a39      	ldr	r1, [r7, #32]
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 fa20 	bl	800465c <I2C_WaitOnTXEFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00d      	beq.n	800423e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004226:	2b04      	cmp	r3, #4
 8004228:	d107      	bne.n	800423a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004238:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e005      	b.n	800424a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800423e:	893b      	ldrh	r3, [r7, #8]
 8004240:	b2da      	uxtb	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	00010002 	.word	0x00010002

08004258 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af02      	add	r7, sp, #8
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	4608      	mov	r0, r1
 8004262:	4611      	mov	r1, r2
 8004264:	461a      	mov	r2, r3
 8004266:	4603      	mov	r3, r0
 8004268:	817b      	strh	r3, [r7, #10]
 800426a:	460b      	mov	r3, r1
 800426c:	813b      	strh	r3, [r7, #8]
 800426e:	4613      	mov	r3, r2
 8004270:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004280:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004290:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	2200      	movs	r2, #0
 800429a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 f8c2 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00d      	beq.n	80042c6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042b8:	d103      	bne.n	80042c2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042c0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e0aa      	b.n	800441c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042c6:	897b      	ldrh	r3, [r7, #10]
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042d4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	6a3a      	ldr	r2, [r7, #32]
 80042da:	4952      	ldr	r1, [pc, #328]	@ (8004424 <I2C_RequestMemoryRead+0x1cc>)
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f91d 	bl	800451c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e097      	b.n	800441c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004304:	6a39      	ldr	r1, [r7, #32]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f9a8 	bl	800465c <I2C_WaitOnTXEFlagUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00d      	beq.n	800432e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004316:	2b04      	cmp	r3, #4
 8004318:	d107      	bne.n	800432a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004328:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e076      	b.n	800441c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d105      	bne.n	8004340 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004334:	893b      	ldrh	r3, [r7, #8]
 8004336:	b2da      	uxtb	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	611a      	str	r2, [r3, #16]
 800433e:	e021      	b.n	8004384 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004340:	893b      	ldrh	r3, [r7, #8]
 8004342:	0a1b      	lsrs	r3, r3, #8
 8004344:	b29b      	uxth	r3, r3
 8004346:	b2da      	uxtb	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800434e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004350:	6a39      	ldr	r1, [r7, #32]
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 f982 	bl	800465c <I2C_WaitOnTXEFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00d      	beq.n	800437a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	2b04      	cmp	r3, #4
 8004364:	d107      	bne.n	8004376 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004374:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e050      	b.n	800441c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800437a:	893b      	ldrh	r3, [r7, #8]
 800437c:	b2da      	uxtb	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004386:	6a39      	ldr	r1, [r7, #32]
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f967 	bl	800465c <I2C_WaitOnTXEFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00d      	beq.n	80043b0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004398:	2b04      	cmp	r3, #4
 800439a:	d107      	bne.n	80043ac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043aa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e035      	b.n	800441c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043be:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f82b 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00d      	beq.n	80043f4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043e6:	d103      	bne.n	80043f0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e013      	b.n	800441c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043f4:	897b      	ldrh	r3, [r7, #10]
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004406:	6a3a      	ldr	r2, [r7, #32]
 8004408:	4906      	ldr	r1, [pc, #24]	@ (8004424 <I2C_RequestMemoryRead+0x1cc>)
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f000 f886 	bl	800451c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e000      	b.n	800441c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800441a:	2300      	movs	r3, #0
}
 800441c:	4618      	mov	r0, r3
 800441e:	3718      	adds	r7, #24
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	00010002 	.word	0x00010002

08004428 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004438:	e048      	b.n	80044cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d044      	beq.n	80044cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004442:	f7fe fe61 	bl	8003108 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d302      	bcc.n	8004458 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d139      	bne.n	80044cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	0c1b      	lsrs	r3, r3, #16
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b01      	cmp	r3, #1
 8004460:	d10d      	bne.n	800447e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	43da      	mvns	r2, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4013      	ands	r3, r2
 800446e:	b29b      	uxth	r3, r3
 8004470:	2b00      	cmp	r3, #0
 8004472:	bf0c      	ite	eq
 8004474:	2301      	moveq	r3, #1
 8004476:	2300      	movne	r3, #0
 8004478:	b2db      	uxtb	r3, r3
 800447a:	461a      	mov	r2, r3
 800447c:	e00c      	b.n	8004498 <I2C_WaitOnFlagUntilTimeout+0x70>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	43da      	mvns	r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	4013      	ands	r3, r2
 800448a:	b29b      	uxth	r3, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	79fb      	ldrb	r3, [r7, #7]
 800449a:	429a      	cmp	r2, r3
 800449c:	d116      	bne.n	80044cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e023      	b.n	8004514 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	0c1b      	lsrs	r3, r3, #16
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d10d      	bne.n	80044f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	43da      	mvns	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4013      	ands	r3, r2
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	bf0c      	ite	eq
 80044e8:	2301      	moveq	r3, #1
 80044ea:	2300      	movne	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	e00c      	b.n	800450c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	43da      	mvns	r2, r3
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4013      	ands	r3, r2
 80044fe:	b29b      	uxth	r3, r3
 8004500:	2b00      	cmp	r3, #0
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	429a      	cmp	r2, r3
 8004510:	d093      	beq.n	800443a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800452a:	e071      	b.n	8004610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800453a:	d123      	bne.n	8004584 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800454a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004554:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004570:	f043 0204 	orr.w	r2, r3, #4
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e067      	b.n	8004654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458a:	d041      	beq.n	8004610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800458c:	f7fe fdbc 	bl	8003108 <HAL_GetTick>
 8004590:	4602      	mov	r2, r0
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d136      	bne.n	8004610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	0c1b      	lsrs	r3, r3, #16
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d10c      	bne.n	80045c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	43da      	mvns	r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4013      	ands	r3, r2
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	bf14      	ite	ne
 80045be:	2301      	movne	r3, #1
 80045c0:	2300      	moveq	r3, #0
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	e00b      	b.n	80045de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	43da      	mvns	r2, r3
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4013      	ands	r3, r2
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	bf14      	ite	ne
 80045d8:	2301      	movne	r3, #1
 80045da:	2300      	moveq	r3, #0
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d016      	beq.n	8004610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2220      	movs	r2, #32
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	f043 0220 	orr.w	r2, r3, #32
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e021      	b.n	8004654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	0c1b      	lsrs	r3, r3, #16
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b01      	cmp	r3, #1
 8004618:	d10c      	bne.n	8004634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	43da      	mvns	r2, r3
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	4013      	ands	r3, r2
 8004626:	b29b      	uxth	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	bf14      	ite	ne
 800462c:	2301      	movne	r3, #1
 800462e:	2300      	moveq	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e00b      	b.n	800464c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	43da      	mvns	r2, r3
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4013      	ands	r3, r2
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	bf14      	ite	ne
 8004646:	2301      	movne	r3, #1
 8004648:	2300      	moveq	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	f47f af6d 	bne.w	800452c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	60f8      	str	r0, [r7, #12]
 8004664:	60b9      	str	r1, [r7, #8]
 8004666:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004668:	e034      	b.n	80046d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f000 f8e3 	bl	8004836 <I2C_IsAcknowledgeFailed>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d001      	beq.n	800467a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e034      	b.n	80046e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004680:	d028      	beq.n	80046d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004682:	f7fe fd41 	bl	8003108 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	429a      	cmp	r2, r3
 8004690:	d302      	bcc.n	8004698 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d11d      	bne.n	80046d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a2:	2b80      	cmp	r3, #128	@ 0x80
 80046a4:	d016      	beq.n	80046d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	f043 0220 	orr.w	r2, r3, #32
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e007      	b.n	80046e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046de:	2b80      	cmp	r3, #128	@ 0x80
 80046e0:	d1c3      	bne.n	800466a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3710      	adds	r7, #16
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046f8:	e034      	b.n	8004764 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 f89b 	bl	8004836 <I2C_IsAcknowledgeFailed>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d001      	beq.n	800470a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e034      	b.n	8004774 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004710:	d028      	beq.n	8004764 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004712:	f7fe fcf9 	bl	8003108 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	429a      	cmp	r2, r3
 8004720:	d302      	bcc.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d11d      	bne.n	8004764 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b04      	cmp	r3, #4
 8004734:	d016      	beq.n	8004764 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004750:	f043 0220 	orr.w	r2, r3, #32
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e007      	b.n	8004774 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	f003 0304 	and.w	r3, r3, #4
 800476e:	2b04      	cmp	r3, #4
 8004770:	d1c3      	bne.n	80046fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3710      	adds	r7, #16
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004788:	e049      	b.n	800481e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	695b      	ldr	r3, [r3, #20]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b10      	cmp	r3, #16
 8004796:	d119      	bne.n	80047cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f06f 0210 	mvn.w	r2, #16
 80047a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e030      	b.n	800482e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047cc:	f7fe fc9c 	bl	8003108 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d302      	bcc.n	80047e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d11d      	bne.n	800481e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	d016      	beq.n	800481e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	f043 0220 	orr.w	r2, r3, #32
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e007      	b.n	800482e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004828:	2b40      	cmp	r3, #64	@ 0x40
 800482a:	d1ae      	bne.n	800478a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004836:	b480      	push	{r7}
 8004838:	b083      	sub	sp, #12
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004848:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800484c:	d11b      	bne.n	8004886 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004856:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	f043 0204 	orr.w	r2, r3, #4
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e000      	b.n	8004888 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800489a:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <HAL_PWR_EnableBkUpAccess+0x20>)
 800489c:	2201      	movs	r2, #1
 800489e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80048a0:	4b05      	ldr	r3, [pc, #20]	@ (80048b8 <HAL_PWR_EnableBkUpAccess+0x24>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80048a6:	687b      	ldr	r3, [r7, #4]
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	420e0020 	.word	0x420e0020
 80048b8:	40007000 	.word	0x40007000

080048bc <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <HAL_PWR_DisableBkUpAccess+0x20>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80048c8:	4b05      	ldr	r3, [pc, #20]	@ (80048e0 <HAL_PWR_DisableBkUpAccess+0x24>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80048ce:	687b      	ldr	r3, [r7, #4]
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	420e0020 	.word	0x420e0020
 80048e0:	40007000 	.word	0x40007000

080048e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e267      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d075      	beq.n	80049ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004902:	4b88      	ldr	r3, [pc, #544]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 030c 	and.w	r3, r3, #12
 800490a:	2b04      	cmp	r3, #4
 800490c:	d00c      	beq.n	8004928 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800490e:	4b85      	ldr	r3, [pc, #532]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004916:	2b08      	cmp	r3, #8
 8004918:	d112      	bne.n	8004940 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800491a:	4b82      	ldr	r3, [pc, #520]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004922:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004926:	d10b      	bne.n	8004940 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004928:	4b7e      	ldr	r3, [pc, #504]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d05b      	beq.n	80049ec <HAL_RCC_OscConfig+0x108>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d157      	bne.n	80049ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e242      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004948:	d106      	bne.n	8004958 <HAL_RCC_OscConfig+0x74>
 800494a:	4b76      	ldr	r3, [pc, #472]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a75      	ldr	r2, [pc, #468]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e01d      	b.n	8004994 <HAL_RCC_OscConfig+0xb0>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004960:	d10c      	bne.n	800497c <HAL_RCC_OscConfig+0x98>
 8004962:	4b70      	ldr	r3, [pc, #448]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a6f      	ldr	r2, [pc, #444]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004968:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	4b6d      	ldr	r3, [pc, #436]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a6c      	ldr	r2, [pc, #432]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004974:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	e00b      	b.n	8004994 <HAL_RCC_OscConfig+0xb0>
 800497c:	4b69      	ldr	r3, [pc, #420]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a68      	ldr	r2, [pc, #416]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	4b66      	ldr	r3, [pc, #408]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a65      	ldr	r2, [pc, #404]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 800498e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d013      	beq.n	80049c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800499c:	f7fe fbb4 	bl	8003108 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a4:	f7fe fbb0 	bl	8003108 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b64      	cmp	r3, #100	@ 0x64
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e207      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f0      	beq.n	80049a4 <HAL_RCC_OscConfig+0xc0>
 80049c2:	e014      	b.n	80049ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fe fba0 	bl	8003108 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049cc:	f7fe fb9c 	bl	8003108 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	@ 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e1f3      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049de:	4b51      	ldr	r3, [pc, #324]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0xe8>
 80049ea:	e000      	b.n	80049ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d063      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 030c 	and.w	r3, r3, #12
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00b      	beq.n	8004a1e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a06:	4b47      	ldr	r3, [pc, #284]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d11c      	bne.n	8004a4c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a12:	4b44      	ldr	r3, [pc, #272]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d116      	bne.n	8004a4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a1e:	4b41      	ldr	r3, [pc, #260]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d005      	beq.n	8004a36 <HAL_RCC_OscConfig+0x152>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d001      	beq.n	8004a36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e1c7      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a36:	4b3b      	ldr	r3, [pc, #236]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	4937      	ldr	r1, [pc, #220]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a4a:	e03a      	b.n	8004ac2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d020      	beq.n	8004a96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a54:	4b34      	ldr	r3, [pc, #208]	@ (8004b28 <HAL_RCC_OscConfig+0x244>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a5a:	f7fe fb55 	bl	8003108 <HAL_GetTick>
 8004a5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a62:	f7fe fb51 	bl	8003108 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e1a8      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a74:	4b2b      	ldr	r3, [pc, #172]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0f0      	beq.n	8004a62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a80:	4b28      	ldr	r3, [pc, #160]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4925      	ldr	r1, [pc, #148]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	600b      	str	r3, [r1, #0]
 8004a94:	e015      	b.n	8004ac2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a96:	4b24      	ldr	r3, [pc, #144]	@ (8004b28 <HAL_RCC_OscConfig+0x244>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a9c:	f7fe fb34 	bl	8003108 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aa2:	e008      	b.n	8004ab6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa4:	f7fe fb30 	bl	8003108 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e187      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1f0      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d036      	beq.n	8004b3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d016      	beq.n	8004b04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ad6:	4b15      	ldr	r3, [pc, #84]	@ (8004b2c <HAL_RCC_OscConfig+0x248>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004adc:	f7fe fb14 	bl	8003108 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ae4:	f7fe fb10 	bl	8003108 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e167      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004af6:	4b0b      	ldr	r3, [pc, #44]	@ (8004b24 <HAL_RCC_OscConfig+0x240>)
 8004af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x200>
 8004b02:	e01b      	b.n	8004b3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b04:	4b09      	ldr	r3, [pc, #36]	@ (8004b2c <HAL_RCC_OscConfig+0x248>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b0a:	f7fe fafd 	bl	8003108 <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b10:	e00e      	b.n	8004b30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b12:	f7fe faf9 	bl	8003108 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d907      	bls.n	8004b30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e150      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
 8004b24:	40023800 	.word	0x40023800
 8004b28:	42470000 	.word	0x42470000
 8004b2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b30:	4b88      	ldr	r3, [pc, #544]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004b32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b34:	f003 0302 	and.w	r3, r3, #2
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1ea      	bne.n	8004b12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0304 	and.w	r3, r3, #4
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8097 	beq.w	8004c78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b4e:	4b81      	ldr	r3, [pc, #516]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10f      	bne.n	8004b7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60bb      	str	r3, [r7, #8]
 8004b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b62:	4a7c      	ldr	r2, [pc, #496]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b6a:	4b7a      	ldr	r3, [pc, #488]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b72:	60bb      	str	r3, [r7, #8]
 8004b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b76:	2301      	movs	r3, #1
 8004b78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7a:	4b77      	ldr	r3, [pc, #476]	@ (8004d58 <HAL_RCC_OscConfig+0x474>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d118      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b86:	4b74      	ldr	r3, [pc, #464]	@ (8004d58 <HAL_RCC_OscConfig+0x474>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a73      	ldr	r2, [pc, #460]	@ (8004d58 <HAL_RCC_OscConfig+0x474>)
 8004b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b92:	f7fe fab9 	bl	8003108 <HAL_GetTick>
 8004b96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b9a:	f7fe fab5 	bl	8003108 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e10c      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bac:	4b6a      	ldr	r3, [pc, #424]	@ (8004d58 <HAL_RCC_OscConfig+0x474>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d106      	bne.n	8004bce <HAL_RCC_OscConfig+0x2ea>
 8004bc0:	4b64      	ldr	r3, [pc, #400]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc4:	4a63      	ldr	r2, [pc, #396]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bcc:	e01c      	b.n	8004c08 <HAL_RCC_OscConfig+0x324>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	2b05      	cmp	r3, #5
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x30c>
 8004bd6:	4b5f      	ldr	r3, [pc, #380]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bda:	4a5e      	ldr	r2, [pc, #376]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004bdc:	f043 0304 	orr.w	r3, r3, #4
 8004be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004be2:	4b5c      	ldr	r3, [pc, #368]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be6:	4a5b      	ldr	r2, [pc, #364]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004be8:	f043 0301 	orr.w	r3, r3, #1
 8004bec:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bee:	e00b      	b.n	8004c08 <HAL_RCC_OscConfig+0x324>
 8004bf0:	4b58      	ldr	r3, [pc, #352]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bf4:	4a57      	ldr	r2, [pc, #348]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004bf6:	f023 0301 	bic.w	r3, r3, #1
 8004bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bfc:	4b55      	ldr	r3, [pc, #340]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c00:	4a54      	ldr	r2, [pc, #336]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004c02:	f023 0304 	bic.w	r3, r3, #4
 8004c06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d015      	beq.n	8004c3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c10:	f7fe fa7a 	bl	8003108 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c16:	e00a      	b.n	8004c2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c18:	f7fe fa76 	bl	8003108 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e0cb      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c2e:	4b49      	ldr	r3, [pc, #292]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0ee      	beq.n	8004c18 <HAL_RCC_OscConfig+0x334>
 8004c3a:	e014      	b.n	8004c66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3c:	f7fe fa64 	bl	8003108 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c42:	e00a      	b.n	8004c5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c44:	f7fe fa60 	bl	8003108 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e0b5      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c5a:	4b3e      	ldr	r3, [pc, #248]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1ee      	bne.n	8004c44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c66:	7dfb      	ldrb	r3, [r7, #23]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d105      	bne.n	8004c78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c6c:	4b39      	ldr	r3, [pc, #228]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c70:	4a38      	ldr	r2, [pc, #224]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004c72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f000 80a1 	beq.w	8004dc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c82:	4b34      	ldr	r3, [pc, #208]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f003 030c 	and.w	r3, r3, #12
 8004c8a:	2b08      	cmp	r3, #8
 8004c8c:	d05c      	beq.n	8004d48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d141      	bne.n	8004d1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c96:	4b31      	ldr	r3, [pc, #196]	@ (8004d5c <HAL_RCC_OscConfig+0x478>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9c:	f7fe fa34 	bl	8003108 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ca4:	f7fe fa30 	bl	8003108 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e087      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb6:	4b27      	ldr	r3, [pc, #156]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	69da      	ldr	r2, [r3, #28]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	019b      	lsls	r3, r3, #6
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd8:	085b      	lsrs	r3, r3, #1
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	041b      	lsls	r3, r3, #16
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	061b      	lsls	r3, r3, #24
 8004ce6:	491b      	ldr	r1, [pc, #108]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cec:	4b1b      	ldr	r3, [pc, #108]	@ (8004d5c <HAL_RCC_OscConfig+0x478>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cf2:	f7fe fa09 	bl	8003108 <HAL_GetTick>
 8004cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf8:	e008      	b.n	8004d0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfa:	f7fe fa05 	bl	8003108 <HAL_GetTick>
 8004cfe:	4602      	mov	r2, r0
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	1ad3      	subs	r3, r2, r3
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d901      	bls.n	8004d0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d08:	2303      	movs	r3, #3
 8004d0a:	e05c      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d0c:	4b11      	ldr	r3, [pc, #68]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d0f0      	beq.n	8004cfa <HAL_RCC_OscConfig+0x416>
 8004d18:	e054      	b.n	8004dc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d1a:	4b10      	ldr	r3, [pc, #64]	@ (8004d5c <HAL_RCC_OscConfig+0x478>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d20:	f7fe f9f2 	bl	8003108 <HAL_GetTick>
 8004d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d26:	e008      	b.n	8004d3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d28:	f7fe f9ee 	bl	8003108 <HAL_GetTick>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d901      	bls.n	8004d3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e045      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d3a:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <HAL_RCC_OscConfig+0x470>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d1f0      	bne.n	8004d28 <HAL_RCC_OscConfig+0x444>
 8004d46:	e03d      	b.n	8004dc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d107      	bne.n	8004d60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e038      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
 8004d54:	40023800 	.word	0x40023800
 8004d58:	40007000 	.word	0x40007000
 8004d5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d60:	4b1b      	ldr	r3, [pc, #108]	@ (8004dd0 <HAL_RCC_OscConfig+0x4ec>)
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d028      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d121      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d11a      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d90:	4013      	ands	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d111      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da6:	085b      	lsrs	r3, r3, #1
 8004da8:	3b01      	subs	r3, #1
 8004daa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d107      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d001      	beq.n	8004dc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004dc4:	2300      	movs	r3, #0
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3718      	adds	r7, #24
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800

08004dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0cc      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004de8:	4b68      	ldr	r3, [pc, #416]	@ (8004f8c <HAL_RCC_ClockConfig+0x1b8>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d90c      	bls.n	8004e10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004df6:	4b65      	ldr	r3, [pc, #404]	@ (8004f8c <HAL_RCC_ClockConfig+0x1b8>)
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dfe:	4b63      	ldr	r3, [pc, #396]	@ (8004f8c <HAL_RCC_ClockConfig+0x1b8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d001      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0b8      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d020      	beq.n	8004e5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e28:	4b59      	ldr	r3, [pc, #356]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4a58      	ldr	r2, [pc, #352]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e40:	4b53      	ldr	r3, [pc, #332]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4a52      	ldr	r2, [pc, #328]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e4c:	4b50      	ldr	r3, [pc, #320]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	494d      	ldr	r1, [pc, #308]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d044      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d107      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e72:	4b47      	ldr	r3, [pc, #284]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d119      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e07f      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b02      	cmp	r3, #2
 8004e88:	d003      	beq.n	8004e92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d107      	bne.n	8004ea2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e92:	4b3f      	ldr	r3, [pc, #252]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e06f      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea2:	4b3b      	ldr	r3, [pc, #236]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d101      	bne.n	8004eb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e067      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eb2:	4b37      	ldr	r3, [pc, #220]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f023 0203 	bic.w	r2, r3, #3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	4934      	ldr	r1, [pc, #208]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ec4:	f7fe f920 	bl	8003108 <HAL_GetTick>
 8004ec8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eca:	e00a      	b.n	8004ee2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ecc:	f7fe f91c 	bl	8003108 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e04f      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 020c 	and.w	r2, r3, #12
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d1eb      	bne.n	8004ecc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ef4:	4b25      	ldr	r3, [pc, #148]	@ (8004f8c <HAL_RCC_ClockConfig+0x1b8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0307 	and.w	r3, r3, #7
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d20c      	bcs.n	8004f1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f02:	4b22      	ldr	r3, [pc, #136]	@ (8004f8c <HAL_RCC_ClockConfig+0x1b8>)
 8004f04:	683a      	ldr	r2, [r7, #0]
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0a:	4b20      	ldr	r3, [pc, #128]	@ (8004f8c <HAL_RCC_ClockConfig+0x1b8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0307 	and.w	r3, r3, #7
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d001      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e032      	b.n	8004f82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0304 	and.w	r3, r3, #4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f28:	4b19      	ldr	r3, [pc, #100]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	4916      	ldr	r1, [pc, #88]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d009      	beq.n	8004f5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f46:	4b12      	ldr	r3, [pc, #72]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	00db      	lsls	r3, r3, #3
 8004f54:	490e      	ldr	r1, [pc, #56]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f5a:	f000 f821 	bl	8004fa0 <HAL_RCC_GetSysClockFreq>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	4b0b      	ldr	r3, [pc, #44]	@ (8004f90 <HAL_RCC_ClockConfig+0x1bc>)
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	091b      	lsrs	r3, r3, #4
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	490a      	ldr	r1, [pc, #40]	@ (8004f94 <HAL_RCC_ClockConfig+0x1c0>)
 8004f6c:	5ccb      	ldrb	r3, [r1, r3]
 8004f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f72:	4a09      	ldr	r2, [pc, #36]	@ (8004f98 <HAL_RCC_ClockConfig+0x1c4>)
 8004f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f76:	4b09      	ldr	r3, [pc, #36]	@ (8004f9c <HAL_RCC_ClockConfig+0x1c8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fe f880 	bl	8003080 <HAL_InitTick>

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3710      	adds	r7, #16
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40023c00 	.word	0x40023c00
 8004f90:	40023800 	.word	0x40023800
 8004f94:	0800b058 	.word	0x0800b058
 8004f98:	20000008 	.word	0x20000008
 8004f9c:	2000000c 	.word	0x2000000c

08004fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fa4:	b090      	sub	sp, #64	@ 0x40
 8004fa6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fb8:	4b59      	ldr	r3, [pc, #356]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f003 030c 	and.w	r3, r3, #12
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d00d      	beq.n	8004fe0 <HAL_RCC_GetSysClockFreq+0x40>
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	f200 80a1 	bhi.w	800510c <HAL_RCC_GetSysClockFreq+0x16c>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <HAL_RCC_GetSysClockFreq+0x34>
 8004fce:	2b04      	cmp	r3, #4
 8004fd0:	d003      	beq.n	8004fda <HAL_RCC_GetSysClockFreq+0x3a>
 8004fd2:	e09b      	b.n	800510c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fd4:	4b53      	ldr	r3, [pc, #332]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fd8:	e09b      	b.n	8005112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fda:	4b53      	ldr	r3, [pc, #332]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x188>)
 8004fdc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fde:	e098      	b.n	8005112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fe0:	4b4f      	ldr	r3, [pc, #316]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fe8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fea:	4b4d      	ldr	r3, [pc, #308]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d028      	beq.n	8005048 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ff6:	4b4a      	ldr	r3, [pc, #296]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	099b      	lsrs	r3, r3, #6
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	623b      	str	r3, [r7, #32]
 8005000:	627a      	str	r2, [r7, #36]	@ 0x24
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005008:	2100      	movs	r1, #0
 800500a:	4b47      	ldr	r3, [pc, #284]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x188>)
 800500c:	fb03 f201 	mul.w	r2, r3, r1
 8005010:	2300      	movs	r3, #0
 8005012:	fb00 f303 	mul.w	r3, r0, r3
 8005016:	4413      	add	r3, r2
 8005018:	4a43      	ldr	r2, [pc, #268]	@ (8005128 <HAL_RCC_GetSysClockFreq+0x188>)
 800501a:	fba0 1202 	umull	r1, r2, r0, r2
 800501e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005020:	460a      	mov	r2, r1
 8005022:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005024:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005026:	4413      	add	r3, r2
 8005028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800502a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800502c:	2200      	movs	r2, #0
 800502e:	61bb      	str	r3, [r7, #24]
 8005030:	61fa      	str	r2, [r7, #28]
 8005032:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005036:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800503a:	f7fb fe05 	bl	8000c48 <__aeabi_uldivmod>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4613      	mov	r3, r2
 8005044:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005046:	e053      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005048:	4b35      	ldr	r3, [pc, #212]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x180>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	099b      	lsrs	r3, r3, #6
 800504e:	2200      	movs	r2, #0
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	617a      	str	r2, [r7, #20]
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800505a:	f04f 0b00 	mov.w	fp, #0
 800505e:	4652      	mov	r2, sl
 8005060:	465b      	mov	r3, fp
 8005062:	f04f 0000 	mov.w	r0, #0
 8005066:	f04f 0100 	mov.w	r1, #0
 800506a:	0159      	lsls	r1, r3, #5
 800506c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005070:	0150      	lsls	r0, r2, #5
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	ebb2 080a 	subs.w	r8, r2, sl
 800507a:	eb63 090b 	sbc.w	r9, r3, fp
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800508a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800508e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005092:	ebb2 0408 	subs.w	r4, r2, r8
 8005096:	eb63 0509 	sbc.w	r5, r3, r9
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	00eb      	lsls	r3, r5, #3
 80050a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050a8:	00e2      	lsls	r2, r4, #3
 80050aa:	4614      	mov	r4, r2
 80050ac:	461d      	mov	r5, r3
 80050ae:	eb14 030a 	adds.w	r3, r4, sl
 80050b2:	603b      	str	r3, [r7, #0]
 80050b4:	eb45 030b 	adc.w	r3, r5, fp
 80050b8:	607b      	str	r3, [r7, #4]
 80050ba:	f04f 0200 	mov.w	r2, #0
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050c6:	4629      	mov	r1, r5
 80050c8:	028b      	lsls	r3, r1, #10
 80050ca:	4621      	mov	r1, r4
 80050cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050d0:	4621      	mov	r1, r4
 80050d2:	028a      	lsls	r2, r1, #10
 80050d4:	4610      	mov	r0, r2
 80050d6:	4619      	mov	r1, r3
 80050d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050da:	2200      	movs	r2, #0
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	60fa      	str	r2, [r7, #12]
 80050e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050e4:	f7fb fdb0 	bl	8000c48 <__aeabi_uldivmod>
 80050e8:	4602      	mov	r2, r0
 80050ea:	460b      	mov	r3, r1
 80050ec:	4613      	mov	r3, r2
 80050ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80050f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005120 <HAL_RCC_GetSysClockFreq+0x180>)
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	0c1b      	lsrs	r3, r3, #16
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	3301      	adds	r3, #1
 80050fc:	005b      	lsls	r3, r3, #1
 80050fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005100:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800510a:	e002      	b.n	8005112 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800510c:	4b05      	ldr	r3, [pc, #20]	@ (8005124 <HAL_RCC_GetSysClockFreq+0x184>)
 800510e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005110:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005114:	4618      	mov	r0, r3
 8005116:	3740      	adds	r7, #64	@ 0x40
 8005118:	46bd      	mov	sp, r7
 800511a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800511e:	bf00      	nop
 8005120:	40023800 	.word	0x40023800
 8005124:	00f42400 	.word	0x00f42400
 8005128:	017d7840 	.word	0x017d7840

0800512c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005130:	4b03      	ldr	r3, [pc, #12]	@ (8005140 <HAL_RCC_GetHCLKFreq+0x14>)
 8005132:	681b      	ldr	r3, [r3, #0]
}
 8005134:	4618      	mov	r0, r3
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	20000008 	.word	0x20000008

08005144 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005148:	f7ff fff0 	bl	800512c <HAL_RCC_GetHCLKFreq>
 800514c:	4602      	mov	r2, r0
 800514e:	4b05      	ldr	r3, [pc, #20]	@ (8005164 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	0a9b      	lsrs	r3, r3, #10
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	4903      	ldr	r1, [pc, #12]	@ (8005168 <HAL_RCC_GetPCLK1Freq+0x24>)
 800515a:	5ccb      	ldrb	r3, [r1, r3]
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40023800 	.word	0x40023800
 8005168:	0800b068 	.word	0x0800b068

0800516c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005170:	f7ff ffdc 	bl	800512c <HAL_RCC_GetHCLKFreq>
 8005174:	4602      	mov	r2, r0
 8005176:	4b05      	ldr	r3, [pc, #20]	@ (800518c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	0b5b      	lsrs	r3, r3, #13
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	4903      	ldr	r1, [pc, #12]	@ (8005190 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005182:	5ccb      	ldrb	r3, [r1, r3]
 8005184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005188:	4618      	mov	r0, r3
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40023800 	.word	0x40023800
 8005190:	0800b068 	.word	0x0800b068

08005194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e041      	b.n	800522a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fd fbf4 	bl	80029a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4619      	mov	r1, r3
 80051d2:	4610      	mov	r0, r2
 80051d4:	f000 fee8 	bl	8005fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
	...

08005234 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005242:	b2db      	uxtb	r3, r3
 8005244:	2b01      	cmp	r3, #1
 8005246:	d001      	beq.n	800524c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e046      	b.n	80052da <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a23      	ldr	r2, [pc, #140]	@ (80052e8 <HAL_TIM_Base_Start+0xb4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d022      	beq.n	80052a4 <HAL_TIM_Base_Start+0x70>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005266:	d01d      	beq.n	80052a4 <HAL_TIM_Base_Start+0x70>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a1f      	ldr	r2, [pc, #124]	@ (80052ec <HAL_TIM_Base_Start+0xb8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d018      	beq.n	80052a4 <HAL_TIM_Base_Start+0x70>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a1e      	ldr	r2, [pc, #120]	@ (80052f0 <HAL_TIM_Base_Start+0xbc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d013      	beq.n	80052a4 <HAL_TIM_Base_Start+0x70>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a1c      	ldr	r2, [pc, #112]	@ (80052f4 <HAL_TIM_Base_Start+0xc0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d00e      	beq.n	80052a4 <HAL_TIM_Base_Start+0x70>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a1b      	ldr	r2, [pc, #108]	@ (80052f8 <HAL_TIM_Base_Start+0xc4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d009      	beq.n	80052a4 <HAL_TIM_Base_Start+0x70>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a19      	ldr	r2, [pc, #100]	@ (80052fc <HAL_TIM_Base_Start+0xc8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d004      	beq.n	80052a4 <HAL_TIM_Base_Start+0x70>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a18      	ldr	r2, [pc, #96]	@ (8005300 <HAL_TIM_Base_Start+0xcc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d111      	bne.n	80052c8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 0307 	and.w	r3, r3, #7
 80052ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b06      	cmp	r3, #6
 80052b4:	d010      	beq.n	80052d8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0201 	orr.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c6:	e007      	b.n	80052d8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40010000 	.word	0x40010000
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800
 80052f4:	40000c00 	.word	0x40000c00
 80052f8:	40010400 	.word	0x40010400
 80052fc:	40014000 	.word	0x40014000
 8005300:	40001800 	.word	0x40001800

08005304 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e041      	b.n	800539a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 f839 	bl	80053a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f000 fe30 	bl	8005fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
	...

080053b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d109      	bne.n	80053dc <HAL_TIM_PWM_Start+0x24>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	bf14      	ite	ne
 80053d4:	2301      	movne	r3, #1
 80053d6:	2300      	moveq	r3, #0
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	e022      	b.n	8005422 <HAL_TIM_PWM_Start+0x6a>
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d109      	bne.n	80053f6 <HAL_TIM_PWM_Start+0x3e>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	bf14      	ite	ne
 80053ee:	2301      	movne	r3, #1
 80053f0:	2300      	moveq	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	e015      	b.n	8005422 <HAL_TIM_PWM_Start+0x6a>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d109      	bne.n	8005410 <HAL_TIM_PWM_Start+0x58>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	e008      	b.n	8005422 <HAL_TIM_PWM_Start+0x6a>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005416:	b2db      	uxtb	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	bf14      	ite	ne
 800541c:	2301      	movne	r3, #1
 800541e:	2300      	moveq	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e07c      	b.n	8005524 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d104      	bne.n	800543a <HAL_TIM_PWM_Start+0x82>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005438:	e013      	b.n	8005462 <HAL_TIM_PWM_Start+0xaa>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b04      	cmp	r3, #4
 800543e:	d104      	bne.n	800544a <HAL_TIM_PWM_Start+0x92>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005448:	e00b      	b.n	8005462 <HAL_TIM_PWM_Start+0xaa>
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d104      	bne.n	800545a <HAL_TIM_PWM_Start+0xa2>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2202      	movs	r2, #2
 8005454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005458:	e003      	b.n	8005462 <HAL_TIM_PWM_Start+0xaa>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2201      	movs	r2, #1
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f001 f9bc 	bl	80067e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a2d      	ldr	r2, [pc, #180]	@ (800552c <HAL_TIM_PWM_Start+0x174>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d004      	beq.n	8005484 <HAL_TIM_PWM_Start+0xcc>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a2c      	ldr	r2, [pc, #176]	@ (8005530 <HAL_TIM_PWM_Start+0x178>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d101      	bne.n	8005488 <HAL_TIM_PWM_Start+0xd0>
 8005484:	2301      	movs	r3, #1
 8005486:	e000      	b.n	800548a <HAL_TIM_PWM_Start+0xd2>
 8005488:	2300      	movs	r3, #0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d007      	beq.n	800549e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800549c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a22      	ldr	r2, [pc, #136]	@ (800552c <HAL_TIM_PWM_Start+0x174>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d022      	beq.n	80054ee <HAL_TIM_PWM_Start+0x136>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b0:	d01d      	beq.n	80054ee <HAL_TIM_PWM_Start+0x136>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1f      	ldr	r2, [pc, #124]	@ (8005534 <HAL_TIM_PWM_Start+0x17c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d018      	beq.n	80054ee <HAL_TIM_PWM_Start+0x136>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a1d      	ldr	r2, [pc, #116]	@ (8005538 <HAL_TIM_PWM_Start+0x180>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d013      	beq.n	80054ee <HAL_TIM_PWM_Start+0x136>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a1c      	ldr	r2, [pc, #112]	@ (800553c <HAL_TIM_PWM_Start+0x184>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00e      	beq.n	80054ee <HAL_TIM_PWM_Start+0x136>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a16      	ldr	r2, [pc, #88]	@ (8005530 <HAL_TIM_PWM_Start+0x178>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d009      	beq.n	80054ee <HAL_TIM_PWM_Start+0x136>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a18      	ldr	r2, [pc, #96]	@ (8005540 <HAL_TIM_PWM_Start+0x188>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d004      	beq.n	80054ee <HAL_TIM_PWM_Start+0x136>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	4a16      	ldr	r2, [pc, #88]	@ (8005544 <HAL_TIM_PWM_Start+0x18c>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d111      	bne.n	8005512 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 0307 	and.w	r3, r3, #7
 80054f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b06      	cmp	r3, #6
 80054fe:	d010      	beq.n	8005522 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005510:	e007      	b.n	8005522 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0201 	orr.w	r2, r2, #1
 8005520:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3710      	adds	r7, #16
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40010000 	.word	0x40010000
 8005530:	40010400 	.word	0x40010400
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800
 800553c:	40000c00 	.word	0x40000c00
 8005540:	40014000 	.word	0x40014000
 8005544:	40001800 	.word	0x40001800

08005548 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e041      	b.n	80055de <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f839 	bl	80055e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2202      	movs	r2, #2
 8005578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	3304      	adds	r3, #4
 8005584:	4619      	mov	r1, r3
 8005586:	4610      	mov	r0, r2
 8005588:	f000 fd0e 	bl	8005fa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}

080055e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80055e6:	b480      	push	{r7}
 80055e8:	b083      	sub	sp, #12
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80055ee:	bf00      	nop
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b086      	sub	sp, #24
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
 8005602:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e097      	b.n	800573e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d106      	bne.n	8005628 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7fd fa3c 	bl	8002aa0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2202      	movs	r2, #2
 800562c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800563e:	f023 0307 	bic.w	r3, r3, #7
 8005642:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	3304      	adds	r3, #4
 800564c:	4619      	mov	r1, r3
 800564e:	4610      	mov	r0, r2
 8005650:	f000 fcaa 	bl	8005fa8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	697a      	ldr	r2, [r7, #20]
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800567c:	f023 0303 	bic.w	r3, r3, #3
 8005680:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	4313      	orrs	r3, r2
 800568e:	693a      	ldr	r2, [r7, #16]
 8005690:	4313      	orrs	r3, r2
 8005692:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800569a:	f023 030c 	bic.w	r3, r3, #12
 800569e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	68da      	ldr	r2, [r3, #12]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	021b      	lsls	r3, r3, #8
 80056b6:	4313      	orrs	r3, r2
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	011a      	lsls	r2, r3, #4
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	031b      	lsls	r3, r3, #12
 80056ca:	4313      	orrs	r3, r2
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80056d8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80056e0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	685a      	ldr	r2, [r3, #4]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	4313      	orrs	r3, r2
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b084      	sub	sp, #16
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005756:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800575e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005766:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800576e:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d110      	bne.n	8005798 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005776:	7bfb      	ldrb	r3, [r7, #15]
 8005778:	2b01      	cmp	r3, #1
 800577a:	d102      	bne.n	8005782 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800577c:	7b7b      	ldrb	r3, [r7, #13]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d001      	beq.n	8005786 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	e089      	b.n	800589a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2202      	movs	r2, #2
 8005792:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005796:	e031      	b.n	80057fc <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	2b04      	cmp	r3, #4
 800579c:	d110      	bne.n	80057c0 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800579e:	7bbb      	ldrb	r3, [r7, #14]
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d102      	bne.n	80057aa <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057a4:	7b3b      	ldrb	r3, [r7, #12]
 80057a6:	2b01      	cmp	r3, #1
 80057a8:	d001      	beq.n	80057ae <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e075      	b.n	800589a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2202      	movs	r2, #2
 80057b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2202      	movs	r2, #2
 80057ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057be:	e01d      	b.n	80057fc <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	d108      	bne.n	80057d8 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80057c6:	7bbb      	ldrb	r3, [r7, #14]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d105      	bne.n	80057d8 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80057cc:	7b7b      	ldrb	r3, [r7, #13]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d102      	bne.n	80057d8 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80057d2:	7b3b      	ldrb	r3, [r7, #12]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d001      	beq.n	80057dc <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e05e      	b.n	800589a <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2202      	movs	r2, #2
 80057e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_TIM_Encoder_Start_IT+0xc4>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b04      	cmp	r3, #4
 8005806:	d010      	beq.n	800582a <HAL_TIM_Encoder_Start_IT+0xe4>
 8005808:	e01f      	b.n	800584a <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2201      	movs	r2, #1
 8005810:	2100      	movs	r1, #0
 8005812:	4618      	mov	r0, r3
 8005814:	f000 ffe8 	bl	80067e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0202 	orr.w	r2, r2, #2
 8005826:	60da      	str	r2, [r3, #12]
      break;
 8005828:	e02e      	b.n	8005888 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2201      	movs	r2, #1
 8005830:	2104      	movs	r1, #4
 8005832:	4618      	mov	r0, r3
 8005834:	f000 ffd8 	bl	80067e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f042 0204 	orr.w	r2, r2, #4
 8005846:	60da      	str	r2, [r3, #12]
      break;
 8005848:	e01e      	b.n	8005888 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2201      	movs	r2, #1
 8005850:	2100      	movs	r1, #0
 8005852:	4618      	mov	r0, r3
 8005854:	f000 ffc8 	bl	80067e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2201      	movs	r2, #1
 800585e:	2104      	movs	r1, #4
 8005860:	4618      	mov	r0, r3
 8005862:	f000 ffc1 	bl	80067e8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0202 	orr.w	r2, r2, #2
 8005874:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68da      	ldr	r2, [r3, #12]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f042 0204 	orr.w	r2, r2, #4
 8005884:	60da      	str	r2, [r3, #12]
      break;
 8005886:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0201 	orr.w	r2, r2, #1
 8005896:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3710      	adds	r7, #16
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}

080058a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d020      	beq.n	8005906 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f003 0302 	and.w	r3, r3, #2
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d01b      	beq.n	8005906 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f06f 0202 	mvn.w	r2, #2
 80058d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7fb fc37 	bl	8001160 <HAL_TIM_IC_CaptureCallback>
 80058f2:	e005      	b.n	8005900 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f000 fb39 	bl	8005f6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 fb40 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f003 0304 	and.w	r3, r3, #4
 800590c:	2b00      	cmp	r3, #0
 800590e:	d020      	beq.n	8005952 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0304 	and.w	r3, r3, #4
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01b      	beq.n	8005952 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f06f 0204 	mvn.w	r2, #4
 8005922:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2202      	movs	r2, #2
 8005928:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005934:	2b00      	cmp	r3, #0
 8005936:	d003      	beq.n	8005940 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7fb fc11 	bl	8001160 <HAL_TIM_IC_CaptureCallback>
 800593e:	e005      	b.n	800594c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fb13 	bl	8005f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 fb1a 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	f003 0308 	and.w	r3, r3, #8
 8005958:	2b00      	cmp	r3, #0
 800595a:	d020      	beq.n	800599e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d01b      	beq.n	800599e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f06f 0208 	mvn.w	r2, #8
 800596e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2204      	movs	r2, #4
 8005974:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	f003 0303 	and.w	r3, r3, #3
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fb fbeb 	bl	8001160 <HAL_TIM_IC_CaptureCallback>
 800598a:	e005      	b.n	8005998 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 faed 	bl	8005f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 faf4 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f003 0310 	and.w	r3, r3, #16
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d020      	beq.n	80059ea <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0310 	and.w	r3, r3, #16
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d01b      	beq.n	80059ea <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f06f 0210 	mvn.w	r2, #16
 80059ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2208      	movs	r2, #8
 80059c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fb fbc5 	bl	8001160 <HAL_TIM_IC_CaptureCallback>
 80059d6:	e005      	b.n	80059e4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fac7 	bl	8005f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 face 	bl	8005f80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00c      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d007      	beq.n	8005a0e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f06f 0201 	mvn.w	r2, #1
 8005a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 faa5 	bl	8005f58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00c      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d007      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 ffd9 	bl	80069e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00c      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d007      	beq.n	8005a56 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fa9f 	bl	8005f94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f003 0320 	and.w	r3, r3, #32
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d00c      	beq.n	8005a7a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f003 0320 	and.w	r3, r3, #32
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d007      	beq.n	8005a7a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f06f 0220 	mvn.w	r2, #32
 8005a72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 ffab 	bl	80069d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005a7a:	bf00      	nop
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b086      	sub	sp, #24
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	60f8      	str	r0, [r7, #12]
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d101      	bne.n	8005aa0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	e088      	b.n	8005bb2 <HAL_TIM_IC_ConfigChannel+0x130>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11b      	bne.n	8005ae6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005abe:	f000 fccf 	bl	8006460 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	699a      	ldr	r2, [r3, #24]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 020c 	bic.w	r2, r2, #12
 8005ad0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6999      	ldr	r1, [r3, #24]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	619a      	str	r2, [r3, #24]
 8005ae4:	e060      	b.n	8005ba8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d11c      	bne.n	8005b26 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005afc:	f000 fd53 	bl	80065a6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	699a      	ldr	r2, [r3, #24]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005b0e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6999      	ldr	r1, [r3, #24]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	021a      	lsls	r2, r3, #8
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	430a      	orrs	r2, r1
 8005b22:	619a      	str	r2, [r3, #24]
 8005b24:	e040      	b.n	8005ba8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b08      	cmp	r3, #8
 8005b2a:	d11b      	bne.n	8005b64 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005b3c:	f000 fda0 	bl	8006680 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69da      	ldr	r2, [r3, #28]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f022 020c 	bic.w	r2, r2, #12
 8005b4e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69d9      	ldr	r1, [r3, #28]
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	689a      	ldr	r2, [r3, #8]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	430a      	orrs	r2, r1
 8005b60:	61da      	str	r2, [r3, #28]
 8005b62:	e021      	b.n	8005ba8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b0c      	cmp	r3, #12
 8005b68:	d11c      	bne.n	8005ba4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005b7a:	f000 fdbd 	bl	80066f8 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005b8c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69d9      	ldr	r1, [r3, #28]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	021a      	lsls	r2, r3, #8
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	61da      	str	r2, [r3, #28]
 8005ba2:	e001      	b.n	8005ba8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d101      	bne.n	8005bda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	e0ae      	b.n	8005d38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b0c      	cmp	r3, #12
 8005be6:	f200 809f 	bhi.w	8005d28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005bea:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf0:	08005c25 	.word	0x08005c25
 8005bf4:	08005d29 	.word	0x08005d29
 8005bf8:	08005d29 	.word	0x08005d29
 8005bfc:	08005d29 	.word	0x08005d29
 8005c00:	08005c65 	.word	0x08005c65
 8005c04:	08005d29 	.word	0x08005d29
 8005c08:	08005d29 	.word	0x08005d29
 8005c0c:	08005d29 	.word	0x08005d29
 8005c10:	08005ca7 	.word	0x08005ca7
 8005c14:	08005d29 	.word	0x08005d29
 8005c18:	08005d29 	.word	0x08005d29
 8005c1c:	08005d29 	.word	0x08005d29
 8005c20:	08005ce7 	.word	0x08005ce7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68b9      	ldr	r1, [r7, #8]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 fa68 	bl	8006100 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	699a      	ldr	r2, [r3, #24]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f042 0208 	orr.w	r2, r2, #8
 8005c3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	699a      	ldr	r2, [r3, #24]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0204 	bic.w	r2, r2, #4
 8005c4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6999      	ldr	r1, [r3, #24]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	691a      	ldr	r2, [r3, #16]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	619a      	str	r2, [r3, #24]
      break;
 8005c62:	e064      	b.n	8005d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fab8 	bl	80061e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6999      	ldr	r1, [r3, #24]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	691b      	ldr	r3, [r3, #16]
 8005c9a:	021a      	lsls	r2, r3, #8
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	430a      	orrs	r2, r1
 8005ca2:	619a      	str	r2, [r3, #24]
      break;
 8005ca4:	e043      	b.n	8005d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68b9      	ldr	r1, [r7, #8]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 fb0d 	bl	80062cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0208 	orr.w	r2, r2, #8
 8005cc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69da      	ldr	r2, [r3, #28]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f022 0204 	bic.w	r2, r2, #4
 8005cd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	69d9      	ldr	r1, [r3, #28]
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	691a      	ldr	r2, [r3, #16]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	61da      	str	r2, [r3, #28]
      break;
 8005ce4:	e023      	b.n	8005d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fb61 	bl	80063b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69da      	ldr	r2, [r3, #28]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69d9      	ldr	r1, [r3, #28]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	021a      	lsls	r2, r3, #8
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	430a      	orrs	r2, r1
 8005d24:	61da      	str	r2, [r3, #28]
      break;
 8005d26:	e002      	b.n	8005d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005d36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3718      	adds	r7, #24
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d101      	bne.n	8005d5c <HAL_TIM_ConfigClockSource+0x1c>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e0b4      	b.n	8005ec6 <HAL_TIM_ConfigClockSource+0x186>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d94:	d03e      	beq.n	8005e14 <HAL_TIM_ConfigClockSource+0xd4>
 8005d96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d9a:	f200 8087 	bhi.w	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005d9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005da2:	f000 8086 	beq.w	8005eb2 <HAL_TIM_ConfigClockSource+0x172>
 8005da6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005daa:	d87f      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b70      	cmp	r3, #112	@ 0x70
 8005dae:	d01a      	beq.n	8005de6 <HAL_TIM_ConfigClockSource+0xa6>
 8005db0:	2b70      	cmp	r3, #112	@ 0x70
 8005db2:	d87b      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005db4:	2b60      	cmp	r3, #96	@ 0x60
 8005db6:	d050      	beq.n	8005e5a <HAL_TIM_ConfigClockSource+0x11a>
 8005db8:	2b60      	cmp	r3, #96	@ 0x60
 8005dba:	d877      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005dbc:	2b50      	cmp	r3, #80	@ 0x50
 8005dbe:	d03c      	beq.n	8005e3a <HAL_TIM_ConfigClockSource+0xfa>
 8005dc0:	2b50      	cmp	r3, #80	@ 0x50
 8005dc2:	d873      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005dc4:	2b40      	cmp	r3, #64	@ 0x40
 8005dc6:	d058      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0x13a>
 8005dc8:	2b40      	cmp	r3, #64	@ 0x40
 8005dca:	d86f      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005dcc:	2b30      	cmp	r3, #48	@ 0x30
 8005dce:	d064      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x15a>
 8005dd0:	2b30      	cmp	r3, #48	@ 0x30
 8005dd2:	d86b      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	d060      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x15a>
 8005dd8:	2b20      	cmp	r3, #32
 8005dda:	d867      	bhi.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d05c      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x15a>
 8005de0:	2b10      	cmp	r3, #16
 8005de2:	d05a      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x15a>
 8005de4:	e062      	b.n	8005eac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005df6:	f000 fcd7 	bl	80067a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	609a      	str	r2, [r3, #8]
      break;
 8005e12:	e04f      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e24:	f000 fcc0 	bl	80067a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e36:	609a      	str	r2, [r3, #8]
      break;
 8005e38:	e03c      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e46:	461a      	mov	r2, r3
 8005e48:	f000 fb7e 	bl	8006548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2150      	movs	r1, #80	@ 0x50
 8005e52:	4618      	mov	r0, r3
 8005e54:	f000 fc8d 	bl	8006772 <TIM_ITRx_SetConfig>
      break;
 8005e58:	e02c      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e66:	461a      	mov	r2, r3
 8005e68:	f000 fbda 	bl	8006620 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2160      	movs	r1, #96	@ 0x60
 8005e72:	4618      	mov	r0, r3
 8005e74:	f000 fc7d 	bl	8006772 <TIM_ITRx_SetConfig>
      break;
 8005e78:	e01c      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e86:	461a      	mov	r2, r3
 8005e88:	f000 fb5e 	bl	8006548 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2140      	movs	r1, #64	@ 0x40
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 fc6d 	bl	8006772 <TIM_ITRx_SetConfig>
      break;
 8005e98:	e00c      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4619      	mov	r1, r3
 8005ea4:	4610      	mov	r0, r2
 8005ea6:	f000 fc64 	bl	8006772 <TIM_ITRx_SetConfig>
      break;
 8005eaa:	e003      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb0:	e000      	b.n	8005eb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005eb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
	...

08005ed0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b0c      	cmp	r3, #12
 8005ee2:	d831      	bhi.n	8005f48 <HAL_TIM_ReadCapturedValue+0x78>
 8005ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8005eec <HAL_TIM_ReadCapturedValue+0x1c>)
 8005ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eea:	bf00      	nop
 8005eec:	08005f21 	.word	0x08005f21
 8005ef0:	08005f49 	.word	0x08005f49
 8005ef4:	08005f49 	.word	0x08005f49
 8005ef8:	08005f49 	.word	0x08005f49
 8005efc:	08005f2b 	.word	0x08005f2b
 8005f00:	08005f49 	.word	0x08005f49
 8005f04:	08005f49 	.word	0x08005f49
 8005f08:	08005f49 	.word	0x08005f49
 8005f0c:	08005f35 	.word	0x08005f35
 8005f10:	08005f49 	.word	0x08005f49
 8005f14:	08005f49 	.word	0x08005f49
 8005f18:	08005f49 	.word	0x08005f49
 8005f1c:	08005f3f 	.word	0x08005f3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f26:	60fb      	str	r3, [r7, #12]

      break;
 8005f28:	e00f      	b.n	8005f4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f30:	60fb      	str	r3, [r7, #12]

      break;
 8005f32:	e00a      	b.n	8005f4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f3a:	60fb      	str	r3, [r7, #12]

      break;
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f44:	60fb      	str	r3, [r7, #12]

      break;
 8005f46:	e000      	b.n	8005f4a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005f48:	bf00      	nop
  }

  return tmpreg;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	4a46      	ldr	r2, [pc, #280]	@ (80060d4 <TIM_Base_SetConfig+0x12c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d013      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fc6:	d00f      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a43      	ldr	r2, [pc, #268]	@ (80060d8 <TIM_Base_SetConfig+0x130>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00b      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a42      	ldr	r2, [pc, #264]	@ (80060dc <TIM_Base_SetConfig+0x134>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d007      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a41      	ldr	r2, [pc, #260]	@ (80060e0 <TIM_Base_SetConfig+0x138>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d003      	beq.n	8005fe8 <TIM_Base_SetConfig+0x40>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4a40      	ldr	r2, [pc, #256]	@ (80060e4 <TIM_Base_SetConfig+0x13c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d108      	bne.n	8005ffa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	68fa      	ldr	r2, [r7, #12]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a35      	ldr	r2, [pc, #212]	@ (80060d4 <TIM_Base_SetConfig+0x12c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d02b      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006008:	d027      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a32      	ldr	r2, [pc, #200]	@ (80060d8 <TIM_Base_SetConfig+0x130>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d023      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4a31      	ldr	r2, [pc, #196]	@ (80060dc <TIM_Base_SetConfig+0x134>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01f      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a30      	ldr	r2, [pc, #192]	@ (80060e0 <TIM_Base_SetConfig+0x138>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d01b      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4a2f      	ldr	r2, [pc, #188]	@ (80060e4 <TIM_Base_SetConfig+0x13c>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d017      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2e      	ldr	r2, [pc, #184]	@ (80060e8 <TIM_Base_SetConfig+0x140>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d013      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2d      	ldr	r2, [pc, #180]	@ (80060ec <TIM_Base_SetConfig+0x144>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d00f      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a2c      	ldr	r2, [pc, #176]	@ (80060f0 <TIM_Base_SetConfig+0x148>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d00b      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a2b      	ldr	r2, [pc, #172]	@ (80060f4 <TIM_Base_SetConfig+0x14c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d007      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a2a      	ldr	r2, [pc, #168]	@ (80060f8 <TIM_Base_SetConfig+0x150>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d003      	beq.n	800605a <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a29      	ldr	r2, [pc, #164]	@ (80060fc <TIM_Base_SetConfig+0x154>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d108      	bne.n	800606c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006060:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a10      	ldr	r2, [pc, #64]	@ (80060d4 <TIM_Base_SetConfig+0x12c>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <TIM_Base_SetConfig+0xf8>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a12      	ldr	r2, [pc, #72]	@ (80060e4 <TIM_Base_SetConfig+0x13c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d103      	bne.n	80060a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d105      	bne.n	80060c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	f023 0201 	bic.w	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	611a      	str	r2, [r3, #16]
  }
}
 80060c6:	bf00      	nop
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40010000 	.word	0x40010000
 80060d8:	40000400 	.word	0x40000400
 80060dc:	40000800 	.word	0x40000800
 80060e0:	40000c00 	.word	0x40000c00
 80060e4:	40010400 	.word	0x40010400
 80060e8:	40014000 	.word	0x40014000
 80060ec:	40014400 	.word	0x40014400
 80060f0:	40014800 	.word	0x40014800
 80060f4:	40001800 	.word	0x40001800
 80060f8:	40001c00 	.word	0x40001c00
 80060fc:	40002000 	.word	0x40002000

08006100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006100:	b480      	push	{r7}
 8006102:	b087      	sub	sp, #28
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6a1b      	ldr	r3, [r3, #32]
 8006114:	f023 0201 	bic.w	r2, r3, #1
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	699b      	ldr	r3, [r3, #24]
 8006126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800612e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f023 0303 	bic.w	r3, r3, #3
 8006136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	4313      	orrs	r3, r2
 8006140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f023 0302 	bic.w	r3, r3, #2
 8006148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	689b      	ldr	r3, [r3, #8]
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	4313      	orrs	r3, r2
 8006152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	4a20      	ldr	r2, [pc, #128]	@ (80061d8 <TIM_OC1_SetConfig+0xd8>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d003      	beq.n	8006164 <TIM_OC1_SetConfig+0x64>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a1f      	ldr	r2, [pc, #124]	@ (80061dc <TIM_OC1_SetConfig+0xdc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d10c      	bne.n	800617e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f023 0308 	bic.w	r3, r3, #8
 800616a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	697a      	ldr	r2, [r7, #20]
 8006172:	4313      	orrs	r3, r2
 8006174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f023 0304 	bic.w	r3, r3, #4
 800617c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a15      	ldr	r2, [pc, #84]	@ (80061d8 <TIM_OC1_SetConfig+0xd8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d003      	beq.n	800618e <TIM_OC1_SetConfig+0x8e>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a14      	ldr	r2, [pc, #80]	@ (80061dc <TIM_OC1_SetConfig+0xdc>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d111      	bne.n	80061b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800619c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	693a      	ldr	r2, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	685a      	ldr	r2, [r3, #4]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	621a      	str	r2, [r3, #32]
}
 80061cc:	bf00      	nop
 80061ce:	371c      	adds	r7, #28
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr
 80061d8:	40010000 	.word	0x40010000
 80061dc:	40010400 	.word	0x40010400

080061e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b087      	sub	sp, #28
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a1b      	ldr	r3, [r3, #32]
 80061ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	f023 0210 	bic.w	r2, r3, #16
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	699b      	ldr	r3, [r3, #24]
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800620e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	021b      	lsls	r3, r3, #8
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	4313      	orrs	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f023 0320 	bic.w	r3, r3, #32
 800622a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	011b      	lsls	r3, r3, #4
 8006232:	697a      	ldr	r2, [r7, #20]
 8006234:	4313      	orrs	r3, r2
 8006236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	4a22      	ldr	r2, [pc, #136]	@ (80062c4 <TIM_OC2_SetConfig+0xe4>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d003      	beq.n	8006248 <TIM_OC2_SetConfig+0x68>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a21      	ldr	r2, [pc, #132]	@ (80062c8 <TIM_OC2_SetConfig+0xe8>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d10d      	bne.n	8006264 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800624e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006262:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a17      	ldr	r2, [pc, #92]	@ (80062c4 <TIM_OC2_SetConfig+0xe4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d003      	beq.n	8006274 <TIM_OC2_SetConfig+0x94>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	4a16      	ldr	r2, [pc, #88]	@ (80062c8 <TIM_OC2_SetConfig+0xe8>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d113      	bne.n	800629c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800627a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	697a      	ldr	r2, [r7, #20]
 80062b4:	621a      	str	r2, [r3, #32]
}
 80062b6:	bf00      	nop
 80062b8:	371c      	adds	r7, #28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	40010000 	.word	0x40010000
 80062c8:	40010400 	.word	0x40010400

080062cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a1b      	ldr	r3, [r3, #32]
 80062da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0303 	bic.w	r3, r3, #3
 8006302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	4313      	orrs	r3, r2
 800630c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	021b      	lsls	r3, r3, #8
 800631c:	697a      	ldr	r2, [r7, #20]
 800631e:	4313      	orrs	r3, r2
 8006320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a21      	ldr	r2, [pc, #132]	@ (80063ac <TIM_OC3_SetConfig+0xe0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d003      	beq.n	8006332 <TIM_OC3_SetConfig+0x66>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a20      	ldr	r2, [pc, #128]	@ (80063b0 <TIM_OC3_SetConfig+0xe4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d10d      	bne.n	800634e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800634c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a16      	ldr	r2, [pc, #88]	@ (80063ac <TIM_OC3_SetConfig+0xe0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d003      	beq.n	800635e <TIM_OC3_SetConfig+0x92>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a15      	ldr	r2, [pc, #84]	@ (80063b0 <TIM_OC3_SetConfig+0xe4>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d113      	bne.n	8006386 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800636c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	695b      	ldr	r3, [r3, #20]
 8006372:	011b      	lsls	r3, r3, #4
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	4313      	orrs	r3, r2
 8006378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4313      	orrs	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	697a      	ldr	r2, [r7, #20]
 800639e:	621a      	str	r2, [r3, #32]
}
 80063a0:	bf00      	nop
 80063a2:	371c      	adds	r7, #28
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	40010000 	.word	0x40010000
 80063b0:	40010400 	.word	0x40010400

080063b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a1b      	ldr	r3, [r3, #32]
 80063c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	021b      	lsls	r3, r3, #8
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	031b      	lsls	r3, r3, #12
 8006406:	693a      	ldr	r2, [r7, #16]
 8006408:	4313      	orrs	r3, r2
 800640a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a12      	ldr	r2, [pc, #72]	@ (8006458 <TIM_OC4_SetConfig+0xa4>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_OC4_SetConfig+0x68>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a11      	ldr	r2, [pc, #68]	@ (800645c <TIM_OC4_SetConfig+0xa8>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d109      	bne.n	8006430 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006422:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	019b      	lsls	r3, r3, #6
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	68fa      	ldr	r2, [r7, #12]
 800643a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685a      	ldr	r2, [r3, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	621a      	str	r2, [r3, #32]
}
 800644a:	bf00      	nop
 800644c:	371c      	adds	r7, #28
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop
 8006458:	40010000 	.word	0x40010000
 800645c:	40010400 	.word	0x40010400

08006460 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006460:	b480      	push	{r7}
 8006462:	b087      	sub	sp, #28
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f023 0201 	bic.w	r2, r3, #1
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	4a28      	ldr	r2, [pc, #160]	@ (800652c <TIM_TI1_SetConfig+0xcc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d01b      	beq.n	80064c6 <TIM_TI1_SetConfig+0x66>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006494:	d017      	beq.n	80064c6 <TIM_TI1_SetConfig+0x66>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4a25      	ldr	r2, [pc, #148]	@ (8006530 <TIM_TI1_SetConfig+0xd0>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <TIM_TI1_SetConfig+0x66>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	4a24      	ldr	r2, [pc, #144]	@ (8006534 <TIM_TI1_SetConfig+0xd4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00f      	beq.n	80064c6 <TIM_TI1_SetConfig+0x66>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	4a23      	ldr	r2, [pc, #140]	@ (8006538 <TIM_TI1_SetConfig+0xd8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00b      	beq.n	80064c6 <TIM_TI1_SetConfig+0x66>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4a22      	ldr	r2, [pc, #136]	@ (800653c <TIM_TI1_SetConfig+0xdc>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d007      	beq.n	80064c6 <TIM_TI1_SetConfig+0x66>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4a21      	ldr	r2, [pc, #132]	@ (8006540 <TIM_TI1_SetConfig+0xe0>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d003      	beq.n	80064c6 <TIM_TI1_SetConfig+0x66>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	4a20      	ldr	r2, [pc, #128]	@ (8006544 <TIM_TI1_SetConfig+0xe4>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d101      	bne.n	80064ca <TIM_TI1_SetConfig+0x6a>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e000      	b.n	80064cc <TIM_TI1_SetConfig+0x6c>
 80064ca:	2300      	movs	r3, #0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f023 0303 	bic.w	r3, r3, #3
 80064d6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4313      	orrs	r3, r2
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e003      	b.n	80064ea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f043 0301 	orr.w	r3, r3, #1
 80064e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	011b      	lsls	r3, r3, #4
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f023 030a 	bic.w	r3, r3, #10
 8006504:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	f003 030a 	and.w	r3, r3, #10
 800650c:	693a      	ldr	r2, [r7, #16]
 800650e:	4313      	orrs	r3, r2
 8006510:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	621a      	str	r2, [r3, #32]
}
 800651e:	bf00      	nop
 8006520:	371c      	adds	r7, #28
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40010000 	.word	0x40010000
 8006530:	40000400 	.word	0x40000400
 8006534:	40000800 	.word	0x40000800
 8006538:	40000c00 	.word	0x40000c00
 800653c:	40010400 	.word	0x40010400
 8006540:	40014000 	.word	0x40014000
 8006544:	40001800 	.word	0x40001800

08006548 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	f023 0201 	bic.w	r2, r3, #1
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006572:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	011b      	lsls	r3, r3, #4
 8006578:	693a      	ldr	r2, [r7, #16]
 800657a:	4313      	orrs	r3, r2
 800657c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f023 030a 	bic.w	r3, r3, #10
 8006584:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006586:	697a      	ldr	r2, [r7, #20]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4313      	orrs	r3, r2
 800658c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	621a      	str	r2, [r3, #32]
}
 800659a:	bf00      	nop
 800659c:	371c      	adds	r7, #28
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b087      	sub	sp, #28
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a1b      	ldr	r3, [r3, #32]
 80065b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6a1b      	ldr	r3, [r3, #32]
 80065be:	f023 0210 	bic.w	r2, r3, #16
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	021b      	lsls	r3, r3, #8
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	4313      	orrs	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80065e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	031b      	lsls	r3, r3, #12
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80065f8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	011b      	lsls	r3, r3, #4
 80065fe:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	4313      	orrs	r3, r2
 8006606:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	621a      	str	r2, [r3, #32]
}
 8006614:	bf00      	nop
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006620:	b480      	push	{r7}
 8006622:	b087      	sub	sp, #28
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	6a1b      	ldr	r3, [r3, #32]
 8006636:	f023 0210 	bic.w	r2, r3, #16
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	699b      	ldr	r3, [r3, #24]
 8006642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800664a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	031b      	lsls	r3, r3, #12
 8006650:	693a      	ldr	r2, [r7, #16]
 8006652:	4313      	orrs	r3, r2
 8006654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800665c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	693a      	ldr	r2, [r7, #16]
 800666c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	621a      	str	r2, [r3, #32]
}
 8006674:	bf00      	nop
 8006676:	371c      	adds	r7, #28
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	607a      	str	r2, [r7, #4]
 800668c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	69db      	ldr	r3, [r3, #28]
 80066a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f023 0303 	bic.w	r3, r3, #3
 80066ac:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80066ae:	693a      	ldr	r2, [r7, #16]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066bc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80066d0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	021b      	lsls	r3, r3, #8
 80066d6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80066da:	697a      	ldr	r2, [r7, #20]
 80066dc:	4313      	orrs	r3, r2
 80066de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	621a      	str	r2, [r3, #32]
}
 80066ec:	bf00      	nop
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006724:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4313      	orrs	r3, r2
 800672e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006736:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	031b      	lsls	r3, r3, #12
 800673c:	b29b      	uxth	r3, r3
 800673e:	693a      	ldr	r2, [r7, #16]
 8006740:	4313      	orrs	r3, r2
 8006742:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800674a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	031b      	lsls	r3, r3, #12
 8006750:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006772:	b480      	push	{r7}
 8006774:	b085      	sub	sp, #20
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
 800677a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006788:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4313      	orrs	r3, r2
 8006790:	f043 0307 	orr.w	r3, r3, #7
 8006794:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	609a      	str	r2, [r3, #8]
}
 800679c:	bf00      	nop
 800679e:	3714      	adds	r7, #20
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
 80067b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80067c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	021a      	lsls	r2, r3, #8
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	431a      	orrs	r2, r3
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	609a      	str	r2, [r3, #8]
}
 80067dc:	bf00      	nop
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	2201      	movs	r2, #1
 80067fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006800:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a1a      	ldr	r2, [r3, #32]
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	43db      	mvns	r3, r3
 800680a:	401a      	ands	r2, r3
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6a1a      	ldr	r2, [r3, #32]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	f003 031f 	and.w	r3, r3, #31
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	fa01 f303 	lsl.w	r3, r1, r3
 8006820:	431a      	orrs	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	621a      	str	r2, [r3, #32]
}
 8006826:	bf00      	nop
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
	...

08006834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006848:	2302      	movs	r3, #2
 800684a:	e05a      	b.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a21      	ldr	r2, [pc, #132]	@ (8006910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d022      	beq.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006898:	d01d      	beq.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a1d      	ldr	r2, [pc, #116]	@ (8006914 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d018      	beq.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a1b      	ldr	r2, [pc, #108]	@ (8006918 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1a      	ldr	r2, [pc, #104]	@ (800691c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00e      	beq.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a18      	ldr	r2, [pc, #96]	@ (8006920 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d009      	beq.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a17      	ldr	r2, [pc, #92]	@ (8006924 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d004      	beq.n	80068d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a15      	ldr	r2, [pc, #84]	@ (8006928 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d10c      	bne.n	80068f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68ba      	ldr	r2, [r7, #8]
 80068ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	40010000 	.word	0x40010000
 8006914:	40000400 	.word	0x40000400
 8006918:	40000800 	.word	0x40000800
 800691c:	40000c00 	.word	0x40000c00
 8006920:	40010400 	.word	0x40010400
 8006924:	40014000 	.word	0x40014000
 8006928:	40001800 	.word	0x40001800

0800692c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800692c:	b480      	push	{r7}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006936:	2300      	movs	r3, #0
 8006938:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006940:	2b01      	cmp	r3, #1
 8006942:	d101      	bne.n	8006948 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006944:	2302      	movs	r3, #2
 8006946:	e03d      	b.n	80069c4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	4313      	orrs	r3, r2
 800695c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	4313      	orrs	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	4313      	orrs	r3, r2
 8006978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4313      	orrs	r3, r2
 8006986:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	691b      	ldr	r3, [r3, #16]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	695b      	ldr	r3, [r3, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	3714      	adds	r7, #20
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d101      	bne.n	8006a0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e042      	b.n	8006a90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d106      	bne.n	8006a24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7fc f93a 	bl	8002c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2224      	movs	r2, #36	@ 0x24
 8006a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fcdb 	bl	80073f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	691a      	ldr	r2, [r3, #16]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695a      	ldr	r2, [r3, #20]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	68da      	ldr	r2, [r3, #12]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2220      	movs	r2, #32
 8006a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	4613      	mov	r3, r2
 8006aa4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d112      	bne.n	8006ad8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <HAL_UART_Receive_IT+0x26>
 8006ab8:	88fb      	ldrh	r3, [r7, #6]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e00b      	b.n	8006ada <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	461a      	mov	r2, r3
 8006acc:	68b9      	ldr	r1, [r7, #8]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 faba 	bl	8007048 <UART_Start_Receive_IT>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	e000      	b.n	8006ada <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006ad8:	2302      	movs	r3, #2
  }
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
	...

08006ae4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b0ba      	sub	sp, #232	@ 0xe8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	695b      	ldr	r3, [r3, #20]
 8006b06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006b10:	2300      	movs	r3, #0
 8006b12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b1a:	f003 030f 	and.w	r3, r3, #15
 8006b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10f      	bne.n	8006b4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <HAL_UART_IRQHandler+0x66>
 8006b36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b3a:	f003 0320 	and.w	r3, r3, #32
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d003      	beq.n	8006b4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fb99 	bl	800727a <UART_Receive_IT>
      return;
 8006b48:	e25b      	b.n	8007002 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	f000 80de 	beq.w	8006d10 <HAL_UART_IRQHandler+0x22c>
 8006b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b64:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 80d1 	beq.w	8006d10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d00b      	beq.n	8006b92 <HAL_UART_IRQHandler+0xae>
 8006b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d005      	beq.n	8006b92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b8a:	f043 0201 	orr.w	r2, r3, #1
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b96:	f003 0304 	and.w	r3, r3, #4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <HAL_UART_IRQHandler+0xd2>
 8006b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ba2:	f003 0301 	and.w	r3, r3, #1
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d005      	beq.n	8006bb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bae:	f043 0202 	orr.w	r2, r3, #2
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00b      	beq.n	8006bda <HAL_UART_IRQHandler+0xf6>
 8006bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d005      	beq.n	8006bda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bd2:	f043 0204 	orr.w	r2, r3, #4
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bde:	f003 0308 	and.w	r3, r3, #8
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d011      	beq.n	8006c0a <HAL_UART_IRQHandler+0x126>
 8006be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d105      	bne.n	8006bfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bf6:	f003 0301 	and.w	r3, r3, #1
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d005      	beq.n	8006c0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c02:	f043 0208 	orr.w	r2, r3, #8
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 81f2 	beq.w	8006ff8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <HAL_UART_IRQHandler+0x14e>
 8006c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d002      	beq.n	8006c32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fb24 	bl	800727a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c3c:	2b40      	cmp	r3, #64	@ 0x40
 8006c3e:	bf0c      	ite	eq
 8006c40:	2301      	moveq	r3, #1
 8006c42:	2300      	movne	r3, #0
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c4e:	f003 0308 	and.w	r3, r3, #8
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d103      	bne.n	8006c5e <HAL_UART_IRQHandler+0x17a>
 8006c56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d04f      	beq.n	8006cfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa2c 	bl	80070bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c6e:	2b40      	cmp	r3, #64	@ 0x40
 8006c70:	d141      	bne.n	8006cf6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	3314      	adds	r3, #20
 8006c78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	3314      	adds	r3, #20
 8006c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1d9      	bne.n	8006c72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d013      	beq.n	8006cee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cca:	4a7e      	ldr	r2, [pc, #504]	@ (8006ec4 <HAL_UART_IRQHandler+0x3e0>)
 8006ccc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fc fbc9 	bl	800346a <HAL_DMA_Abort_IT>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d016      	beq.n	8006d0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cec:	e00e      	b.n	8006d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f994 	bl	800701c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cf4:	e00a      	b.n	8006d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f990 	bl	800701c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cfc:	e006      	b.n	8006d0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f000 f98c 	bl	800701c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006d0a:	e175      	b.n	8006ff8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d0c:	bf00      	nop
    return;
 8006d0e:	e173      	b.n	8006ff8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	f040 814f 	bne.w	8006fb8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d1e:	f003 0310 	and.w	r3, r3, #16
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	f000 8148 	beq.w	8006fb8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006d2c:	f003 0310 	and.w	r3, r3, #16
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f000 8141 	beq.w	8006fb8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d36:	2300      	movs	r3, #0
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	60bb      	str	r3, [r7, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	60bb      	str	r3, [r7, #8]
 8006d4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	695b      	ldr	r3, [r3, #20]
 8006d52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d56:	2b40      	cmp	r3, #64	@ 0x40
 8006d58:	f040 80b6 	bne.w	8006ec8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 8145 	beq.w	8006ffc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	f080 813e 	bcs.w	8006ffc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d86:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d92:	f000 8088 	beq.w	8006ea6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	330c      	adds	r3, #12
 8006d9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006da4:	e853 3f00 	ldrex	r3, [r3]
 8006da8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006db0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006db4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	330c      	adds	r3, #12
 8006dbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006dc2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006dc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006dce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006dd2:	e841 2300 	strex	r3, r2, [r1]
 8006dd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1d9      	bne.n	8006d96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3314      	adds	r3, #20
 8006de8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006df2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006df4:	f023 0301 	bic.w	r3, r3, #1
 8006df8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3314      	adds	r3, #20
 8006e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006e06:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006e0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006e0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006e18:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e1      	bne.n	8006de2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3314      	adds	r3, #20
 8006e24:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006e2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e34:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3314      	adds	r3, #20
 8006e3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006e42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006e44:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e46:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006e48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006e4a:	e841 2300 	strex	r3, r2, [r1]
 8006e4e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006e50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e3      	bne.n	8006e1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	330c      	adds	r3, #12
 8006e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e6e:	e853 3f00 	ldrex	r3, [r3]
 8006e72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e76:	f023 0310 	bic.w	r3, r3, #16
 8006e7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	330c      	adds	r3, #12
 8006e84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006e88:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006e8a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e90:	e841 2300 	strex	r3, r2, [r1]
 8006e94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d1e3      	bne.n	8006e64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fc fa72 	bl	800338a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f8b7 	bl	8007030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006ec2:	e09b      	b.n	8006ffc <HAL_UART_IRQHandler+0x518>
 8006ec4:	08007183 	.word	0x08007183
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 808e 	beq.w	8007000 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006ee4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f000 8089 	beq.w	8007000 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	330c      	adds	r3, #12
 8006ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef8:	e853 3f00 	ldrex	r3, [r3]
 8006efc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006efe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	330c      	adds	r3, #12
 8006f0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006f12:	647a      	str	r2, [r7, #68]	@ 0x44
 8006f14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e3      	bne.n	8006eee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	3314      	adds	r3, #20
 8006f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	e853 3f00 	ldrex	r3, [r3]
 8006f34:	623b      	str	r3, [r7, #32]
   return(result);
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	f023 0301 	bic.w	r3, r3, #1
 8006f3c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	3314      	adds	r3, #20
 8006f46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006f4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e3      	bne.n	8006f26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2220      	movs	r2, #32
 8006f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	e853 3f00 	ldrex	r3, [r3]
 8006f7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f023 0310 	bic.w	r3, r3, #16
 8006f82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	330c      	adds	r3, #12
 8006f8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006f90:	61fa      	str	r2, [r7, #28]
 8006f92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f94:	69b9      	ldr	r1, [r7, #24]
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	e841 2300 	strex	r3, r2, [r1]
 8006f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e3      	bne.n	8006f6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2202      	movs	r2, #2
 8006fa8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006faa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f83d 	bl	8007030 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006fb6:	e023      	b.n	8007000 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x4f4>
 8006fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d003      	beq.n	8006fd8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f8ea 	bl	80071aa <UART_Transmit_IT>
    return;
 8006fd6:	e014      	b.n	8007002 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006fd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00e      	beq.n	8007002 <HAL_UART_IRQHandler+0x51e>
 8006fe4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f92a 	bl	800724a <UART_EndTransmit_IT>
    return;
 8006ff6:	e004      	b.n	8007002 <HAL_UART_IRQHandler+0x51e>
    return;
 8006ff8:	bf00      	nop
 8006ffa:	e002      	b.n	8007002 <HAL_UART_IRQHandler+0x51e>
      return;
 8006ffc:	bf00      	nop
 8006ffe:	e000      	b.n	8007002 <HAL_UART_IRQHandler+0x51e>
      return;
 8007000:	bf00      	nop
  }
}
 8007002:	37e8      	adds	r7, #232	@ 0xe8
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800701c:	b480      	push	{r7}
 800701e:	b083      	sub	sp, #12
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007024:	bf00      	nop
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	4613      	mov	r3, r2
 8007054:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68ba      	ldr	r2, [r7, #8]
 800705a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	88fa      	ldrh	r2, [r7, #6]
 8007060:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	88fa      	ldrh	r2, [r7, #6]
 8007066:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2222      	movs	r2, #34	@ 0x22
 8007072:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d007      	beq.n	800708e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68da      	ldr	r2, [r3, #12]
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800708c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	695a      	ldr	r2, [r3, #20]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f042 0201 	orr.w	r2, r2, #1
 800709c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f042 0220 	orr.w	r2, r2, #32
 80070ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070ae:	2300      	movs	r3, #0
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3714      	adds	r7, #20
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070bc:	b480      	push	{r7}
 80070be:	b095      	sub	sp, #84	@ 0x54
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	330c      	adds	r3, #12
 80070ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070ce:	e853 3f00 	ldrex	r3, [r3]
 80070d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80070da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	330c      	adds	r3, #12
 80070e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80070e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80070ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80070ec:	e841 2300 	strex	r3, r2, [r1]
 80070f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80070f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d1e5      	bne.n	80070c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	3314      	adds	r3, #20
 80070fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	61fb      	str	r3, [r7, #28]
   return(result);
 8007108:	69fb      	ldr	r3, [r7, #28]
 800710a:	f023 0301 	bic.w	r3, r3, #1
 800710e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	3314      	adds	r3, #20
 8007116:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007118:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800711a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800711e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e5      	bne.n	80070f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007130:	2b01      	cmp	r3, #1
 8007132:	d119      	bne.n	8007168 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	330c      	adds	r3, #12
 800713a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	e853 3f00 	ldrex	r3, [r3]
 8007142:	60bb      	str	r3, [r7, #8]
   return(result);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	f023 0310 	bic.w	r3, r3, #16
 800714a:	647b      	str	r3, [r7, #68]	@ 0x44
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	330c      	adds	r3, #12
 8007152:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007154:	61ba      	str	r2, [r7, #24]
 8007156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	6979      	ldr	r1, [r7, #20]
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	e841 2300 	strex	r3, r2, [r1]
 8007160:	613b      	str	r3, [r7, #16]
   return(result);
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1e5      	bne.n	8007134 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007176:	bf00      	nop
 8007178:	3754      	adds	r7, #84	@ 0x54
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800718e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800719c:	68f8      	ldr	r0, [r7, #12]
 800719e:	f7ff ff3d 	bl	800701c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071a2:	bf00      	nop
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b085      	sub	sp, #20
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b21      	cmp	r3, #33	@ 0x21
 80071bc:	d13e      	bne.n	800723c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071c6:	d114      	bne.n	80071f2 <UART_Transmit_IT+0x48>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d110      	bne.n	80071f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a1b      	ldr	r3, [r3, #32]
 80071d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	881b      	ldrh	r3, [r3, #0]
 80071da:	461a      	mov	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a1b      	ldr	r3, [r3, #32]
 80071ea:	1c9a      	adds	r2, r3, #2
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	621a      	str	r2, [r3, #32]
 80071f0:	e008      	b.n	8007204 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	1c59      	adds	r1, r3, #1
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	6211      	str	r1, [r2, #32]
 80071fc:	781a      	ldrb	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007208:	b29b      	uxth	r3, r3
 800720a:	3b01      	subs	r3, #1
 800720c:	b29b      	uxth	r3, r3
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	4619      	mov	r1, r3
 8007212:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10f      	bne.n	8007238 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	68da      	ldr	r2, [r3, #12]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007226:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68da      	ldr	r2, [r3, #12]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007236:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007238:	2300      	movs	r3, #0
 800723a:	e000      	b.n	800723e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800723c:	2302      	movs	r3, #2
  }
}
 800723e:	4618      	mov	r0, r3
 8007240:	3714      	adds	r7, #20
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800724a:	b580      	push	{r7, lr}
 800724c:	b082      	sub	sp, #8
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68da      	ldr	r2, [r3, #12]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007260:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2220      	movs	r2, #32
 8007266:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f7ff fecc 	bl	8007008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b08c      	sub	sp, #48	@ 0x30
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b22      	cmp	r3, #34	@ 0x22
 800728c:	f040 80ae 	bne.w	80073ec <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007298:	d117      	bne.n	80072ca <UART_Receive_IT+0x50>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d113      	bne.n	80072ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072aa:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c2:	1c9a      	adds	r2, r3, #2
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80072c8:	e026      	b.n	8007318 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072dc:	d007      	beq.n	80072ee <UART_Receive_IT+0x74>
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10a      	bne.n	80072fc <UART_Receive_IT+0x82>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d106      	bne.n	80072fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	e008      	b.n	800730e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007308:	b2da      	uxtb	r2, r3
 800730a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800730c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007312:	1c5a      	adds	r2, r3, #1
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800731c:	b29b      	uxth	r3, r3
 800731e:	3b01      	subs	r3, #1
 8007320:	b29b      	uxth	r3, r3
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	4619      	mov	r1, r3
 8007326:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007328:	2b00      	cmp	r3, #0
 800732a:	d15d      	bne.n	80073e8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0220 	bic.w	r2, r2, #32
 800733a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800734a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	695a      	ldr	r2, [r3, #20]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 0201 	bic.w	r2, r2, #1
 800735a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2220      	movs	r2, #32
 8007360:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736e:	2b01      	cmp	r3, #1
 8007370:	d135      	bne.n	80073de <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	330c      	adds	r3, #12
 800737e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	613b      	str	r3, [r7, #16]
   return(result);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f023 0310 	bic.w	r3, r3, #16
 800738e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	330c      	adds	r3, #12
 8007396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007398:	623a      	str	r2, [r7, #32]
 800739a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	69f9      	ldr	r1, [r7, #28]
 800739e:	6a3a      	ldr	r2, [r7, #32]
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e5      	bne.n	8007378 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0310 	and.w	r3, r3, #16
 80073b6:	2b10      	cmp	r3, #16
 80073b8:	d10a      	bne.n	80073d0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073ba:	2300      	movs	r3, #0
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073d4:	4619      	mov	r1, r3
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7ff fe2a 	bl	8007030 <HAL_UARTEx_RxEventCallback>
 80073dc:	e002      	b.n	80073e4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7f9 ff64 	bl	80012ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80073e4:	2300      	movs	r3, #0
 80073e6:	e002      	b.n	80073ee <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e000      	b.n	80073ee <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80073ec:	2302      	movs	r3, #2
  }
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3730      	adds	r7, #48	@ 0x30
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073fc:	b0c0      	sub	sp, #256	@ 0x100
 80073fe:	af00      	add	r7, sp, #0
 8007400:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691b      	ldr	r3, [r3, #16]
 800740c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007414:	68d9      	ldr	r1, [r3, #12]
 8007416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	ea40 0301 	orr.w	r3, r0, r1
 8007420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007426:	689a      	ldr	r2, [r3, #8]
 8007428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	431a      	orrs	r2, r3
 8007430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007434:	695b      	ldr	r3, [r3, #20]
 8007436:	431a      	orrs	r2, r3
 8007438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	4313      	orrs	r3, r2
 8007440:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007450:	f021 010c 	bic.w	r1, r1, #12
 8007454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800745e:	430b      	orrs	r3, r1
 8007460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800746e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007472:	6999      	ldr	r1, [r3, #24]
 8007474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	ea40 0301 	orr.w	r3, r0, r1
 800747e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007484:	681a      	ldr	r2, [r3, #0]
 8007486:	4b8f      	ldr	r3, [pc, #572]	@ (80076c4 <UART_SetConfig+0x2cc>)
 8007488:	429a      	cmp	r2, r3
 800748a:	d005      	beq.n	8007498 <UART_SetConfig+0xa0>
 800748c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	4b8d      	ldr	r3, [pc, #564]	@ (80076c8 <UART_SetConfig+0x2d0>)
 8007494:	429a      	cmp	r2, r3
 8007496:	d104      	bne.n	80074a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007498:	f7fd fe68 	bl	800516c <HAL_RCC_GetPCLK2Freq>
 800749c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80074a0:	e003      	b.n	80074aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80074a2:	f7fd fe4f 	bl	8005144 <HAL_RCC_GetPCLK1Freq>
 80074a6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80074aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80074b4:	f040 810c 	bne.w	80076d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80074b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074bc:	2200      	movs	r2, #0
 80074be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074c2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80074c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80074ca:	4622      	mov	r2, r4
 80074cc:	462b      	mov	r3, r5
 80074ce:	1891      	adds	r1, r2, r2
 80074d0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80074d2:	415b      	adcs	r3, r3
 80074d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80074da:	4621      	mov	r1, r4
 80074dc:	eb12 0801 	adds.w	r8, r2, r1
 80074e0:	4629      	mov	r1, r5
 80074e2:	eb43 0901 	adc.w	r9, r3, r1
 80074e6:	f04f 0200 	mov.w	r2, #0
 80074ea:	f04f 0300 	mov.w	r3, #0
 80074ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074fa:	4690      	mov	r8, r2
 80074fc:	4699      	mov	r9, r3
 80074fe:	4623      	mov	r3, r4
 8007500:	eb18 0303 	adds.w	r3, r8, r3
 8007504:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007508:	462b      	mov	r3, r5
 800750a:	eb49 0303 	adc.w	r3, r9, r3
 800750e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800751e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007522:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007526:	460b      	mov	r3, r1
 8007528:	18db      	adds	r3, r3, r3
 800752a:	653b      	str	r3, [r7, #80]	@ 0x50
 800752c:	4613      	mov	r3, r2
 800752e:	eb42 0303 	adc.w	r3, r2, r3
 8007532:	657b      	str	r3, [r7, #84]	@ 0x54
 8007534:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007538:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800753c:	f7f9 fb84 	bl	8000c48 <__aeabi_uldivmod>
 8007540:	4602      	mov	r2, r0
 8007542:	460b      	mov	r3, r1
 8007544:	4b61      	ldr	r3, [pc, #388]	@ (80076cc <UART_SetConfig+0x2d4>)
 8007546:	fba3 2302 	umull	r2, r3, r3, r2
 800754a:	095b      	lsrs	r3, r3, #5
 800754c:	011c      	lsls	r4, r3, #4
 800754e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007552:	2200      	movs	r2, #0
 8007554:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007558:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800755c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007560:	4642      	mov	r2, r8
 8007562:	464b      	mov	r3, r9
 8007564:	1891      	adds	r1, r2, r2
 8007566:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007568:	415b      	adcs	r3, r3
 800756a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800756c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007570:	4641      	mov	r1, r8
 8007572:	eb12 0a01 	adds.w	sl, r2, r1
 8007576:	4649      	mov	r1, r9
 8007578:	eb43 0b01 	adc.w	fp, r3, r1
 800757c:	f04f 0200 	mov.w	r2, #0
 8007580:	f04f 0300 	mov.w	r3, #0
 8007584:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007588:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800758c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007590:	4692      	mov	sl, r2
 8007592:	469b      	mov	fp, r3
 8007594:	4643      	mov	r3, r8
 8007596:	eb1a 0303 	adds.w	r3, sl, r3
 800759a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800759e:	464b      	mov	r3, r9
 80075a0:	eb4b 0303 	adc.w	r3, fp, r3
 80075a4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80075a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075b4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80075b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80075bc:	460b      	mov	r3, r1
 80075be:	18db      	adds	r3, r3, r3
 80075c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80075c2:	4613      	mov	r3, r2
 80075c4:	eb42 0303 	adc.w	r3, r2, r3
 80075c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80075ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80075ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80075d2:	f7f9 fb39 	bl	8000c48 <__aeabi_uldivmod>
 80075d6:	4602      	mov	r2, r0
 80075d8:	460b      	mov	r3, r1
 80075da:	4611      	mov	r1, r2
 80075dc:	4b3b      	ldr	r3, [pc, #236]	@ (80076cc <UART_SetConfig+0x2d4>)
 80075de:	fba3 2301 	umull	r2, r3, r3, r1
 80075e2:	095b      	lsrs	r3, r3, #5
 80075e4:	2264      	movs	r2, #100	@ 0x64
 80075e6:	fb02 f303 	mul.w	r3, r2, r3
 80075ea:	1acb      	subs	r3, r1, r3
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80075f2:	4b36      	ldr	r3, [pc, #216]	@ (80076cc <UART_SetConfig+0x2d4>)
 80075f4:	fba3 2302 	umull	r2, r3, r3, r2
 80075f8:	095b      	lsrs	r3, r3, #5
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007600:	441c      	add	r4, r3
 8007602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007606:	2200      	movs	r2, #0
 8007608:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800760c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007610:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007614:	4642      	mov	r2, r8
 8007616:	464b      	mov	r3, r9
 8007618:	1891      	adds	r1, r2, r2
 800761a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800761c:	415b      	adcs	r3, r3
 800761e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007624:	4641      	mov	r1, r8
 8007626:	1851      	adds	r1, r2, r1
 8007628:	6339      	str	r1, [r7, #48]	@ 0x30
 800762a:	4649      	mov	r1, r9
 800762c:	414b      	adcs	r3, r1
 800762e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800763c:	4659      	mov	r1, fp
 800763e:	00cb      	lsls	r3, r1, #3
 8007640:	4651      	mov	r1, sl
 8007642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007646:	4651      	mov	r1, sl
 8007648:	00ca      	lsls	r2, r1, #3
 800764a:	4610      	mov	r0, r2
 800764c:	4619      	mov	r1, r3
 800764e:	4603      	mov	r3, r0
 8007650:	4642      	mov	r2, r8
 8007652:	189b      	adds	r3, r3, r2
 8007654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007658:	464b      	mov	r3, r9
 800765a:	460a      	mov	r2, r1
 800765c:	eb42 0303 	adc.w	r3, r2, r3
 8007660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007670:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007678:	460b      	mov	r3, r1
 800767a:	18db      	adds	r3, r3, r3
 800767c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800767e:	4613      	mov	r3, r2
 8007680:	eb42 0303 	adc.w	r3, r2, r3
 8007684:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800768a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800768e:	f7f9 fadb 	bl	8000c48 <__aeabi_uldivmod>
 8007692:	4602      	mov	r2, r0
 8007694:	460b      	mov	r3, r1
 8007696:	4b0d      	ldr	r3, [pc, #52]	@ (80076cc <UART_SetConfig+0x2d4>)
 8007698:	fba3 1302 	umull	r1, r3, r3, r2
 800769c:	095b      	lsrs	r3, r3, #5
 800769e:	2164      	movs	r1, #100	@ 0x64
 80076a0:	fb01 f303 	mul.w	r3, r1, r3
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	3332      	adds	r3, #50	@ 0x32
 80076aa:	4a08      	ldr	r2, [pc, #32]	@ (80076cc <UART_SetConfig+0x2d4>)
 80076ac:	fba2 2303 	umull	r2, r3, r2, r3
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	f003 0207 	and.w	r2, r3, #7
 80076b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4422      	add	r2, r4
 80076be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80076c0:	e106      	b.n	80078d0 <UART_SetConfig+0x4d8>
 80076c2:	bf00      	nop
 80076c4:	40011000 	.word	0x40011000
 80076c8:	40011400 	.word	0x40011400
 80076cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80076d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076d4:	2200      	movs	r2, #0
 80076d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80076de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80076e2:	4642      	mov	r2, r8
 80076e4:	464b      	mov	r3, r9
 80076e6:	1891      	adds	r1, r2, r2
 80076e8:	6239      	str	r1, [r7, #32]
 80076ea:	415b      	adcs	r3, r3
 80076ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80076ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076f2:	4641      	mov	r1, r8
 80076f4:	1854      	adds	r4, r2, r1
 80076f6:	4649      	mov	r1, r9
 80076f8:	eb43 0501 	adc.w	r5, r3, r1
 80076fc:	f04f 0200 	mov.w	r2, #0
 8007700:	f04f 0300 	mov.w	r3, #0
 8007704:	00eb      	lsls	r3, r5, #3
 8007706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800770a:	00e2      	lsls	r2, r4, #3
 800770c:	4614      	mov	r4, r2
 800770e:	461d      	mov	r5, r3
 8007710:	4643      	mov	r3, r8
 8007712:	18e3      	adds	r3, r4, r3
 8007714:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007718:	464b      	mov	r3, r9
 800771a:	eb45 0303 	adc.w	r3, r5, r3
 800771e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800772e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007732:	f04f 0200 	mov.w	r2, #0
 8007736:	f04f 0300 	mov.w	r3, #0
 800773a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800773e:	4629      	mov	r1, r5
 8007740:	008b      	lsls	r3, r1, #2
 8007742:	4621      	mov	r1, r4
 8007744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007748:	4621      	mov	r1, r4
 800774a:	008a      	lsls	r2, r1, #2
 800774c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007750:	f7f9 fa7a 	bl	8000c48 <__aeabi_uldivmod>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4b60      	ldr	r3, [pc, #384]	@ (80078dc <UART_SetConfig+0x4e4>)
 800775a:	fba3 2302 	umull	r2, r3, r3, r2
 800775e:	095b      	lsrs	r3, r3, #5
 8007760:	011c      	lsls	r4, r3, #4
 8007762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007766:	2200      	movs	r2, #0
 8007768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800776c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007770:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007774:	4642      	mov	r2, r8
 8007776:	464b      	mov	r3, r9
 8007778:	1891      	adds	r1, r2, r2
 800777a:	61b9      	str	r1, [r7, #24]
 800777c:	415b      	adcs	r3, r3
 800777e:	61fb      	str	r3, [r7, #28]
 8007780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007784:	4641      	mov	r1, r8
 8007786:	1851      	adds	r1, r2, r1
 8007788:	6139      	str	r1, [r7, #16]
 800778a:	4649      	mov	r1, r9
 800778c:	414b      	adcs	r3, r1
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	f04f 0200 	mov.w	r2, #0
 8007794:	f04f 0300 	mov.w	r3, #0
 8007798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800779c:	4659      	mov	r1, fp
 800779e:	00cb      	lsls	r3, r1, #3
 80077a0:	4651      	mov	r1, sl
 80077a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80077a6:	4651      	mov	r1, sl
 80077a8:	00ca      	lsls	r2, r1, #3
 80077aa:	4610      	mov	r0, r2
 80077ac:	4619      	mov	r1, r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	4642      	mov	r2, r8
 80077b2:	189b      	adds	r3, r3, r2
 80077b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077b8:	464b      	mov	r3, r9
 80077ba:	460a      	mov	r2, r1
 80077bc:	eb42 0303 	adc.w	r3, r2, r3
 80077c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077ce:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	f04f 0300 	mov.w	r3, #0
 80077d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80077dc:	4649      	mov	r1, r9
 80077de:	008b      	lsls	r3, r1, #2
 80077e0:	4641      	mov	r1, r8
 80077e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077e6:	4641      	mov	r1, r8
 80077e8:	008a      	lsls	r2, r1, #2
 80077ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80077ee:	f7f9 fa2b 	bl	8000c48 <__aeabi_uldivmod>
 80077f2:	4602      	mov	r2, r0
 80077f4:	460b      	mov	r3, r1
 80077f6:	4611      	mov	r1, r2
 80077f8:	4b38      	ldr	r3, [pc, #224]	@ (80078dc <UART_SetConfig+0x4e4>)
 80077fa:	fba3 2301 	umull	r2, r3, r3, r1
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	2264      	movs	r2, #100	@ 0x64
 8007802:	fb02 f303 	mul.w	r3, r2, r3
 8007806:	1acb      	subs	r3, r1, r3
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	3332      	adds	r3, #50	@ 0x32
 800780c:	4a33      	ldr	r2, [pc, #204]	@ (80078dc <UART_SetConfig+0x4e4>)
 800780e:	fba2 2303 	umull	r2, r3, r2, r3
 8007812:	095b      	lsrs	r3, r3, #5
 8007814:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007818:	441c      	add	r4, r3
 800781a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800781e:	2200      	movs	r2, #0
 8007820:	673b      	str	r3, [r7, #112]	@ 0x70
 8007822:	677a      	str	r2, [r7, #116]	@ 0x74
 8007824:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007828:	4642      	mov	r2, r8
 800782a:	464b      	mov	r3, r9
 800782c:	1891      	adds	r1, r2, r2
 800782e:	60b9      	str	r1, [r7, #8]
 8007830:	415b      	adcs	r3, r3
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007838:	4641      	mov	r1, r8
 800783a:	1851      	adds	r1, r2, r1
 800783c:	6039      	str	r1, [r7, #0]
 800783e:	4649      	mov	r1, r9
 8007840:	414b      	adcs	r3, r1
 8007842:	607b      	str	r3, [r7, #4]
 8007844:	f04f 0200 	mov.w	r2, #0
 8007848:	f04f 0300 	mov.w	r3, #0
 800784c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007850:	4659      	mov	r1, fp
 8007852:	00cb      	lsls	r3, r1, #3
 8007854:	4651      	mov	r1, sl
 8007856:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800785a:	4651      	mov	r1, sl
 800785c:	00ca      	lsls	r2, r1, #3
 800785e:	4610      	mov	r0, r2
 8007860:	4619      	mov	r1, r3
 8007862:	4603      	mov	r3, r0
 8007864:	4642      	mov	r2, r8
 8007866:	189b      	adds	r3, r3, r2
 8007868:	66bb      	str	r3, [r7, #104]	@ 0x68
 800786a:	464b      	mov	r3, r9
 800786c:	460a      	mov	r2, r1
 800786e:	eb42 0303 	adc.w	r3, r2, r3
 8007872:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	663b      	str	r3, [r7, #96]	@ 0x60
 800787e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007880:	f04f 0200 	mov.w	r2, #0
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800788c:	4649      	mov	r1, r9
 800788e:	008b      	lsls	r3, r1, #2
 8007890:	4641      	mov	r1, r8
 8007892:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007896:	4641      	mov	r1, r8
 8007898:	008a      	lsls	r2, r1, #2
 800789a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800789e:	f7f9 f9d3 	bl	8000c48 <__aeabi_uldivmod>
 80078a2:	4602      	mov	r2, r0
 80078a4:	460b      	mov	r3, r1
 80078a6:	4b0d      	ldr	r3, [pc, #52]	@ (80078dc <UART_SetConfig+0x4e4>)
 80078a8:	fba3 1302 	umull	r1, r3, r3, r2
 80078ac:	095b      	lsrs	r3, r3, #5
 80078ae:	2164      	movs	r1, #100	@ 0x64
 80078b0:	fb01 f303 	mul.w	r3, r1, r3
 80078b4:	1ad3      	subs	r3, r2, r3
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	3332      	adds	r3, #50	@ 0x32
 80078ba:	4a08      	ldr	r2, [pc, #32]	@ (80078dc <UART_SetConfig+0x4e4>)
 80078bc:	fba2 2303 	umull	r2, r3, r2, r3
 80078c0:	095b      	lsrs	r3, r3, #5
 80078c2:	f003 020f 	and.w	r2, r3, #15
 80078c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4422      	add	r2, r4
 80078ce:	609a      	str	r2, [r3, #8]
}
 80078d0:	bf00      	nop
 80078d2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80078d6:	46bd      	mov	sp, r7
 80078d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078dc:	51eb851f 	.word	0x51eb851f

080078e0 <__cvt>:
 80078e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078e4:	ec57 6b10 	vmov	r6, r7, d0
 80078e8:	2f00      	cmp	r7, #0
 80078ea:	460c      	mov	r4, r1
 80078ec:	4619      	mov	r1, r3
 80078ee:	463b      	mov	r3, r7
 80078f0:	bfbb      	ittet	lt
 80078f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80078f6:	461f      	movlt	r7, r3
 80078f8:	2300      	movge	r3, #0
 80078fa:	232d      	movlt	r3, #45	@ 0x2d
 80078fc:	700b      	strb	r3, [r1, #0]
 80078fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007900:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007904:	4691      	mov	r9, r2
 8007906:	f023 0820 	bic.w	r8, r3, #32
 800790a:	bfbc      	itt	lt
 800790c:	4632      	movlt	r2, r6
 800790e:	4616      	movlt	r6, r2
 8007910:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007914:	d005      	beq.n	8007922 <__cvt+0x42>
 8007916:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800791a:	d100      	bne.n	800791e <__cvt+0x3e>
 800791c:	3401      	adds	r4, #1
 800791e:	2102      	movs	r1, #2
 8007920:	e000      	b.n	8007924 <__cvt+0x44>
 8007922:	2103      	movs	r1, #3
 8007924:	ab03      	add	r3, sp, #12
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	ab02      	add	r3, sp, #8
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	ec47 6b10 	vmov	d0, r6, r7
 8007930:	4653      	mov	r3, sl
 8007932:	4622      	mov	r2, r4
 8007934:	f000 fe5c 	bl	80085f0 <_dtoa_r>
 8007938:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800793c:	4605      	mov	r5, r0
 800793e:	d119      	bne.n	8007974 <__cvt+0x94>
 8007940:	f019 0f01 	tst.w	r9, #1
 8007944:	d00e      	beq.n	8007964 <__cvt+0x84>
 8007946:	eb00 0904 	add.w	r9, r0, r4
 800794a:	2200      	movs	r2, #0
 800794c:	2300      	movs	r3, #0
 800794e:	4630      	mov	r0, r6
 8007950:	4639      	mov	r1, r7
 8007952:	f7f9 f8b9 	bl	8000ac8 <__aeabi_dcmpeq>
 8007956:	b108      	cbz	r0, 800795c <__cvt+0x7c>
 8007958:	f8cd 900c 	str.w	r9, [sp, #12]
 800795c:	2230      	movs	r2, #48	@ 0x30
 800795e:	9b03      	ldr	r3, [sp, #12]
 8007960:	454b      	cmp	r3, r9
 8007962:	d31e      	bcc.n	80079a2 <__cvt+0xc2>
 8007964:	9b03      	ldr	r3, [sp, #12]
 8007966:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007968:	1b5b      	subs	r3, r3, r5
 800796a:	4628      	mov	r0, r5
 800796c:	6013      	str	r3, [r2, #0]
 800796e:	b004      	add	sp, #16
 8007970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007974:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007978:	eb00 0904 	add.w	r9, r0, r4
 800797c:	d1e5      	bne.n	800794a <__cvt+0x6a>
 800797e:	7803      	ldrb	r3, [r0, #0]
 8007980:	2b30      	cmp	r3, #48	@ 0x30
 8007982:	d10a      	bne.n	800799a <__cvt+0xba>
 8007984:	2200      	movs	r2, #0
 8007986:	2300      	movs	r3, #0
 8007988:	4630      	mov	r0, r6
 800798a:	4639      	mov	r1, r7
 800798c:	f7f9 f89c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007990:	b918      	cbnz	r0, 800799a <__cvt+0xba>
 8007992:	f1c4 0401 	rsb	r4, r4, #1
 8007996:	f8ca 4000 	str.w	r4, [sl]
 800799a:	f8da 3000 	ldr.w	r3, [sl]
 800799e:	4499      	add	r9, r3
 80079a0:	e7d3      	b.n	800794a <__cvt+0x6a>
 80079a2:	1c59      	adds	r1, r3, #1
 80079a4:	9103      	str	r1, [sp, #12]
 80079a6:	701a      	strb	r2, [r3, #0]
 80079a8:	e7d9      	b.n	800795e <__cvt+0x7e>

080079aa <__exponent>:
 80079aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079ac:	2900      	cmp	r1, #0
 80079ae:	bfba      	itte	lt
 80079b0:	4249      	neglt	r1, r1
 80079b2:	232d      	movlt	r3, #45	@ 0x2d
 80079b4:	232b      	movge	r3, #43	@ 0x2b
 80079b6:	2909      	cmp	r1, #9
 80079b8:	7002      	strb	r2, [r0, #0]
 80079ba:	7043      	strb	r3, [r0, #1]
 80079bc:	dd29      	ble.n	8007a12 <__exponent+0x68>
 80079be:	f10d 0307 	add.w	r3, sp, #7
 80079c2:	461d      	mov	r5, r3
 80079c4:	270a      	movs	r7, #10
 80079c6:	461a      	mov	r2, r3
 80079c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80079cc:	fb07 1416 	mls	r4, r7, r6, r1
 80079d0:	3430      	adds	r4, #48	@ 0x30
 80079d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80079d6:	460c      	mov	r4, r1
 80079d8:	2c63      	cmp	r4, #99	@ 0x63
 80079da:	f103 33ff 	add.w	r3, r3, #4294967295
 80079de:	4631      	mov	r1, r6
 80079e0:	dcf1      	bgt.n	80079c6 <__exponent+0x1c>
 80079e2:	3130      	adds	r1, #48	@ 0x30
 80079e4:	1e94      	subs	r4, r2, #2
 80079e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80079ea:	1c41      	adds	r1, r0, #1
 80079ec:	4623      	mov	r3, r4
 80079ee:	42ab      	cmp	r3, r5
 80079f0:	d30a      	bcc.n	8007a08 <__exponent+0x5e>
 80079f2:	f10d 0309 	add.w	r3, sp, #9
 80079f6:	1a9b      	subs	r3, r3, r2
 80079f8:	42ac      	cmp	r4, r5
 80079fa:	bf88      	it	hi
 80079fc:	2300      	movhi	r3, #0
 80079fe:	3302      	adds	r3, #2
 8007a00:	4403      	add	r3, r0
 8007a02:	1a18      	subs	r0, r3, r0
 8007a04:	b003      	add	sp, #12
 8007a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a08:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007a0c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007a10:	e7ed      	b.n	80079ee <__exponent+0x44>
 8007a12:	2330      	movs	r3, #48	@ 0x30
 8007a14:	3130      	adds	r1, #48	@ 0x30
 8007a16:	7083      	strb	r3, [r0, #2]
 8007a18:	70c1      	strb	r1, [r0, #3]
 8007a1a:	1d03      	adds	r3, r0, #4
 8007a1c:	e7f1      	b.n	8007a02 <__exponent+0x58>
	...

08007a20 <_printf_float>:
 8007a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	b08d      	sub	sp, #52	@ 0x34
 8007a26:	460c      	mov	r4, r1
 8007a28:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007a2c:	4616      	mov	r6, r2
 8007a2e:	461f      	mov	r7, r3
 8007a30:	4605      	mov	r5, r0
 8007a32:	f000 fcdb 	bl	80083ec <_localeconv_r>
 8007a36:	6803      	ldr	r3, [r0, #0]
 8007a38:	9304      	str	r3, [sp, #16]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7f8 fc18 	bl	8000270 <strlen>
 8007a40:	2300      	movs	r3, #0
 8007a42:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a44:	f8d8 3000 	ldr.w	r3, [r8]
 8007a48:	9005      	str	r0, [sp, #20]
 8007a4a:	3307      	adds	r3, #7
 8007a4c:	f023 0307 	bic.w	r3, r3, #7
 8007a50:	f103 0208 	add.w	r2, r3, #8
 8007a54:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007a58:	f8d4 b000 	ldr.w	fp, [r4]
 8007a5c:	f8c8 2000 	str.w	r2, [r8]
 8007a60:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a64:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007a68:	9307      	str	r3, [sp, #28]
 8007a6a:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a6e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007a72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a76:	4b9c      	ldr	r3, [pc, #624]	@ (8007ce8 <_printf_float+0x2c8>)
 8007a78:	f04f 32ff 	mov.w	r2, #4294967295
 8007a7c:	f7f9 f856 	bl	8000b2c <__aeabi_dcmpun>
 8007a80:	bb70      	cbnz	r0, 8007ae0 <_printf_float+0xc0>
 8007a82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a86:	4b98      	ldr	r3, [pc, #608]	@ (8007ce8 <_printf_float+0x2c8>)
 8007a88:	f04f 32ff 	mov.w	r2, #4294967295
 8007a8c:	f7f9 f830 	bl	8000af0 <__aeabi_dcmple>
 8007a90:	bb30      	cbnz	r0, 8007ae0 <_printf_float+0xc0>
 8007a92:	2200      	movs	r2, #0
 8007a94:	2300      	movs	r3, #0
 8007a96:	4640      	mov	r0, r8
 8007a98:	4649      	mov	r1, r9
 8007a9a:	f7f9 f81f 	bl	8000adc <__aeabi_dcmplt>
 8007a9e:	b110      	cbz	r0, 8007aa6 <_printf_float+0x86>
 8007aa0:	232d      	movs	r3, #45	@ 0x2d
 8007aa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aa6:	4a91      	ldr	r2, [pc, #580]	@ (8007cec <_printf_float+0x2cc>)
 8007aa8:	4b91      	ldr	r3, [pc, #580]	@ (8007cf0 <_printf_float+0x2d0>)
 8007aaa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007aae:	bf94      	ite	ls
 8007ab0:	4690      	movls	r8, r2
 8007ab2:	4698      	movhi	r8, r3
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	6123      	str	r3, [r4, #16]
 8007ab8:	f02b 0304 	bic.w	r3, fp, #4
 8007abc:	6023      	str	r3, [r4, #0]
 8007abe:	f04f 0900 	mov.w	r9, #0
 8007ac2:	9700      	str	r7, [sp, #0]
 8007ac4:	4633      	mov	r3, r6
 8007ac6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4628      	mov	r0, r5
 8007acc:	f000 f9d2 	bl	8007e74 <_printf_common>
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	f040 808d 	bne.w	8007bf0 <_printf_float+0x1d0>
 8007ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8007ada:	b00d      	add	sp, #52	@ 0x34
 8007adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ae0:	4642      	mov	r2, r8
 8007ae2:	464b      	mov	r3, r9
 8007ae4:	4640      	mov	r0, r8
 8007ae6:	4649      	mov	r1, r9
 8007ae8:	f7f9 f820 	bl	8000b2c <__aeabi_dcmpun>
 8007aec:	b140      	cbz	r0, 8007b00 <_printf_float+0xe0>
 8007aee:	464b      	mov	r3, r9
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	bfbc      	itt	lt
 8007af4:	232d      	movlt	r3, #45	@ 0x2d
 8007af6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007afa:	4a7e      	ldr	r2, [pc, #504]	@ (8007cf4 <_printf_float+0x2d4>)
 8007afc:	4b7e      	ldr	r3, [pc, #504]	@ (8007cf8 <_printf_float+0x2d8>)
 8007afe:	e7d4      	b.n	8007aaa <_printf_float+0x8a>
 8007b00:	6863      	ldr	r3, [r4, #4]
 8007b02:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007b06:	9206      	str	r2, [sp, #24]
 8007b08:	1c5a      	adds	r2, r3, #1
 8007b0a:	d13b      	bne.n	8007b84 <_printf_float+0x164>
 8007b0c:	2306      	movs	r3, #6
 8007b0e:	6063      	str	r3, [r4, #4]
 8007b10:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007b14:	2300      	movs	r3, #0
 8007b16:	6022      	str	r2, [r4, #0]
 8007b18:	9303      	str	r3, [sp, #12]
 8007b1a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b1c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007b20:	ab09      	add	r3, sp, #36	@ 0x24
 8007b22:	9300      	str	r3, [sp, #0]
 8007b24:	6861      	ldr	r1, [r4, #4]
 8007b26:	ec49 8b10 	vmov	d0, r8, r9
 8007b2a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f7ff fed6 	bl	80078e0 <__cvt>
 8007b34:	9b06      	ldr	r3, [sp, #24]
 8007b36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b38:	2b47      	cmp	r3, #71	@ 0x47
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	d129      	bne.n	8007b92 <_printf_float+0x172>
 8007b3e:	1cc8      	adds	r0, r1, #3
 8007b40:	db02      	blt.n	8007b48 <_printf_float+0x128>
 8007b42:	6863      	ldr	r3, [r4, #4]
 8007b44:	4299      	cmp	r1, r3
 8007b46:	dd41      	ble.n	8007bcc <_printf_float+0x1ac>
 8007b48:	f1aa 0a02 	sub.w	sl, sl, #2
 8007b4c:	fa5f fa8a 	uxtb.w	sl, sl
 8007b50:	3901      	subs	r1, #1
 8007b52:	4652      	mov	r2, sl
 8007b54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007b58:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b5a:	f7ff ff26 	bl	80079aa <__exponent>
 8007b5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b60:	1813      	adds	r3, r2, r0
 8007b62:	2a01      	cmp	r2, #1
 8007b64:	4681      	mov	r9, r0
 8007b66:	6123      	str	r3, [r4, #16]
 8007b68:	dc02      	bgt.n	8007b70 <_printf_float+0x150>
 8007b6a:	6822      	ldr	r2, [r4, #0]
 8007b6c:	07d2      	lsls	r2, r2, #31
 8007b6e:	d501      	bpl.n	8007b74 <_printf_float+0x154>
 8007b70:	3301      	adds	r3, #1
 8007b72:	6123      	str	r3, [r4, #16]
 8007b74:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d0a2      	beq.n	8007ac2 <_printf_float+0xa2>
 8007b7c:	232d      	movs	r3, #45	@ 0x2d
 8007b7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b82:	e79e      	b.n	8007ac2 <_printf_float+0xa2>
 8007b84:	9a06      	ldr	r2, [sp, #24]
 8007b86:	2a47      	cmp	r2, #71	@ 0x47
 8007b88:	d1c2      	bne.n	8007b10 <_printf_float+0xf0>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1c0      	bne.n	8007b10 <_printf_float+0xf0>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e7bd      	b.n	8007b0e <_printf_float+0xee>
 8007b92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b96:	d9db      	bls.n	8007b50 <_printf_float+0x130>
 8007b98:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007b9c:	d118      	bne.n	8007bd0 <_printf_float+0x1b0>
 8007b9e:	2900      	cmp	r1, #0
 8007ba0:	6863      	ldr	r3, [r4, #4]
 8007ba2:	dd0b      	ble.n	8007bbc <_printf_float+0x19c>
 8007ba4:	6121      	str	r1, [r4, #16]
 8007ba6:	b913      	cbnz	r3, 8007bae <_printf_float+0x18e>
 8007ba8:	6822      	ldr	r2, [r4, #0]
 8007baa:	07d0      	lsls	r0, r2, #31
 8007bac:	d502      	bpl.n	8007bb4 <_printf_float+0x194>
 8007bae:	3301      	adds	r3, #1
 8007bb0:	440b      	add	r3, r1
 8007bb2:	6123      	str	r3, [r4, #16]
 8007bb4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007bb6:	f04f 0900 	mov.w	r9, #0
 8007bba:	e7db      	b.n	8007b74 <_printf_float+0x154>
 8007bbc:	b913      	cbnz	r3, 8007bc4 <_printf_float+0x1a4>
 8007bbe:	6822      	ldr	r2, [r4, #0]
 8007bc0:	07d2      	lsls	r2, r2, #31
 8007bc2:	d501      	bpl.n	8007bc8 <_printf_float+0x1a8>
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	e7f4      	b.n	8007bb2 <_printf_float+0x192>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	e7f2      	b.n	8007bb2 <_printf_float+0x192>
 8007bcc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007bd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bd2:	4299      	cmp	r1, r3
 8007bd4:	db05      	blt.n	8007be2 <_printf_float+0x1c2>
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	6121      	str	r1, [r4, #16]
 8007bda:	07d8      	lsls	r0, r3, #31
 8007bdc:	d5ea      	bpl.n	8007bb4 <_printf_float+0x194>
 8007bde:	1c4b      	adds	r3, r1, #1
 8007be0:	e7e7      	b.n	8007bb2 <_printf_float+0x192>
 8007be2:	2900      	cmp	r1, #0
 8007be4:	bfd4      	ite	le
 8007be6:	f1c1 0202 	rsble	r2, r1, #2
 8007bea:	2201      	movgt	r2, #1
 8007bec:	4413      	add	r3, r2
 8007bee:	e7e0      	b.n	8007bb2 <_printf_float+0x192>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	055a      	lsls	r2, r3, #21
 8007bf4:	d407      	bmi.n	8007c06 <_printf_float+0x1e6>
 8007bf6:	6923      	ldr	r3, [r4, #16]
 8007bf8:	4642      	mov	r2, r8
 8007bfa:	4631      	mov	r1, r6
 8007bfc:	4628      	mov	r0, r5
 8007bfe:	47b8      	blx	r7
 8007c00:	3001      	adds	r0, #1
 8007c02:	d12b      	bne.n	8007c5c <_printf_float+0x23c>
 8007c04:	e767      	b.n	8007ad6 <_printf_float+0xb6>
 8007c06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007c0a:	f240 80dd 	bls.w	8007dc8 <_printf_float+0x3a8>
 8007c0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c12:	2200      	movs	r2, #0
 8007c14:	2300      	movs	r3, #0
 8007c16:	f7f8 ff57 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c1a:	2800      	cmp	r0, #0
 8007c1c:	d033      	beq.n	8007c86 <_printf_float+0x266>
 8007c1e:	4a37      	ldr	r2, [pc, #220]	@ (8007cfc <_printf_float+0x2dc>)
 8007c20:	2301      	movs	r3, #1
 8007c22:	4631      	mov	r1, r6
 8007c24:	4628      	mov	r0, r5
 8007c26:	47b8      	blx	r7
 8007c28:	3001      	adds	r0, #1
 8007c2a:	f43f af54 	beq.w	8007ad6 <_printf_float+0xb6>
 8007c2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007c32:	4543      	cmp	r3, r8
 8007c34:	db02      	blt.n	8007c3c <_printf_float+0x21c>
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	07d8      	lsls	r0, r3, #31
 8007c3a:	d50f      	bpl.n	8007c5c <_printf_float+0x23c>
 8007c3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c40:	4631      	mov	r1, r6
 8007c42:	4628      	mov	r0, r5
 8007c44:	47b8      	blx	r7
 8007c46:	3001      	adds	r0, #1
 8007c48:	f43f af45 	beq.w	8007ad6 <_printf_float+0xb6>
 8007c4c:	f04f 0900 	mov.w	r9, #0
 8007c50:	f108 38ff 	add.w	r8, r8, #4294967295
 8007c54:	f104 0a1a 	add.w	sl, r4, #26
 8007c58:	45c8      	cmp	r8, r9
 8007c5a:	dc09      	bgt.n	8007c70 <_printf_float+0x250>
 8007c5c:	6823      	ldr	r3, [r4, #0]
 8007c5e:	079b      	lsls	r3, r3, #30
 8007c60:	f100 8103 	bmi.w	8007e6a <_printf_float+0x44a>
 8007c64:	68e0      	ldr	r0, [r4, #12]
 8007c66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c68:	4298      	cmp	r0, r3
 8007c6a:	bfb8      	it	lt
 8007c6c:	4618      	movlt	r0, r3
 8007c6e:	e734      	b.n	8007ada <_printf_float+0xba>
 8007c70:	2301      	movs	r3, #1
 8007c72:	4652      	mov	r2, sl
 8007c74:	4631      	mov	r1, r6
 8007c76:	4628      	mov	r0, r5
 8007c78:	47b8      	blx	r7
 8007c7a:	3001      	adds	r0, #1
 8007c7c:	f43f af2b 	beq.w	8007ad6 <_printf_float+0xb6>
 8007c80:	f109 0901 	add.w	r9, r9, #1
 8007c84:	e7e8      	b.n	8007c58 <_printf_float+0x238>
 8007c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	dc39      	bgt.n	8007d00 <_printf_float+0x2e0>
 8007c8c:	4a1b      	ldr	r2, [pc, #108]	@ (8007cfc <_printf_float+0x2dc>)
 8007c8e:	2301      	movs	r3, #1
 8007c90:	4631      	mov	r1, r6
 8007c92:	4628      	mov	r0, r5
 8007c94:	47b8      	blx	r7
 8007c96:	3001      	adds	r0, #1
 8007c98:	f43f af1d 	beq.w	8007ad6 <_printf_float+0xb6>
 8007c9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007ca0:	ea59 0303 	orrs.w	r3, r9, r3
 8007ca4:	d102      	bne.n	8007cac <_printf_float+0x28c>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	07d9      	lsls	r1, r3, #31
 8007caa:	d5d7      	bpl.n	8007c5c <_printf_float+0x23c>
 8007cac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cb0:	4631      	mov	r1, r6
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	47b8      	blx	r7
 8007cb6:	3001      	adds	r0, #1
 8007cb8:	f43f af0d 	beq.w	8007ad6 <_printf_float+0xb6>
 8007cbc:	f04f 0a00 	mov.w	sl, #0
 8007cc0:	f104 0b1a 	add.w	fp, r4, #26
 8007cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc6:	425b      	negs	r3, r3
 8007cc8:	4553      	cmp	r3, sl
 8007cca:	dc01      	bgt.n	8007cd0 <_printf_float+0x2b0>
 8007ccc:	464b      	mov	r3, r9
 8007cce:	e793      	b.n	8007bf8 <_printf_float+0x1d8>
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	465a      	mov	r2, fp
 8007cd4:	4631      	mov	r1, r6
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	47b8      	blx	r7
 8007cda:	3001      	adds	r0, #1
 8007cdc:	f43f aefb 	beq.w	8007ad6 <_printf_float+0xb6>
 8007ce0:	f10a 0a01 	add.w	sl, sl, #1
 8007ce4:	e7ee      	b.n	8007cc4 <_printf_float+0x2a4>
 8007ce6:	bf00      	nop
 8007ce8:	7fefffff 	.word	0x7fefffff
 8007cec:	0800b070 	.word	0x0800b070
 8007cf0:	0800b074 	.word	0x0800b074
 8007cf4:	0800b078 	.word	0x0800b078
 8007cf8:	0800b07c 	.word	0x0800b07c
 8007cfc:	0800b080 	.word	0x0800b080
 8007d00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d06:	4553      	cmp	r3, sl
 8007d08:	bfa8      	it	ge
 8007d0a:	4653      	movge	r3, sl
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	4699      	mov	r9, r3
 8007d10:	dc36      	bgt.n	8007d80 <_printf_float+0x360>
 8007d12:	f04f 0b00 	mov.w	fp, #0
 8007d16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d1a:	f104 021a 	add.w	r2, r4, #26
 8007d1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d20:	9306      	str	r3, [sp, #24]
 8007d22:	eba3 0309 	sub.w	r3, r3, r9
 8007d26:	455b      	cmp	r3, fp
 8007d28:	dc31      	bgt.n	8007d8e <_printf_float+0x36e>
 8007d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d2c:	459a      	cmp	sl, r3
 8007d2e:	dc3a      	bgt.n	8007da6 <_printf_float+0x386>
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	07da      	lsls	r2, r3, #31
 8007d34:	d437      	bmi.n	8007da6 <_printf_float+0x386>
 8007d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d38:	ebaa 0903 	sub.w	r9, sl, r3
 8007d3c:	9b06      	ldr	r3, [sp, #24]
 8007d3e:	ebaa 0303 	sub.w	r3, sl, r3
 8007d42:	4599      	cmp	r9, r3
 8007d44:	bfa8      	it	ge
 8007d46:	4699      	movge	r9, r3
 8007d48:	f1b9 0f00 	cmp.w	r9, #0
 8007d4c:	dc33      	bgt.n	8007db6 <_printf_float+0x396>
 8007d4e:	f04f 0800 	mov.w	r8, #0
 8007d52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d56:	f104 0b1a 	add.w	fp, r4, #26
 8007d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d5c:	ebaa 0303 	sub.w	r3, sl, r3
 8007d60:	eba3 0309 	sub.w	r3, r3, r9
 8007d64:	4543      	cmp	r3, r8
 8007d66:	f77f af79 	ble.w	8007c5c <_printf_float+0x23c>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	465a      	mov	r2, fp
 8007d6e:	4631      	mov	r1, r6
 8007d70:	4628      	mov	r0, r5
 8007d72:	47b8      	blx	r7
 8007d74:	3001      	adds	r0, #1
 8007d76:	f43f aeae 	beq.w	8007ad6 <_printf_float+0xb6>
 8007d7a:	f108 0801 	add.w	r8, r8, #1
 8007d7e:	e7ec      	b.n	8007d5a <_printf_float+0x33a>
 8007d80:	4642      	mov	r2, r8
 8007d82:	4631      	mov	r1, r6
 8007d84:	4628      	mov	r0, r5
 8007d86:	47b8      	blx	r7
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d1c2      	bne.n	8007d12 <_printf_float+0x2f2>
 8007d8c:	e6a3      	b.n	8007ad6 <_printf_float+0xb6>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	9206      	str	r2, [sp, #24]
 8007d96:	47b8      	blx	r7
 8007d98:	3001      	adds	r0, #1
 8007d9a:	f43f ae9c 	beq.w	8007ad6 <_printf_float+0xb6>
 8007d9e:	9a06      	ldr	r2, [sp, #24]
 8007da0:	f10b 0b01 	add.w	fp, fp, #1
 8007da4:	e7bb      	b.n	8007d1e <_printf_float+0x2fe>
 8007da6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007daa:	4631      	mov	r1, r6
 8007dac:	4628      	mov	r0, r5
 8007dae:	47b8      	blx	r7
 8007db0:	3001      	adds	r0, #1
 8007db2:	d1c0      	bne.n	8007d36 <_printf_float+0x316>
 8007db4:	e68f      	b.n	8007ad6 <_printf_float+0xb6>
 8007db6:	9a06      	ldr	r2, [sp, #24]
 8007db8:	464b      	mov	r3, r9
 8007dba:	4442      	add	r2, r8
 8007dbc:	4631      	mov	r1, r6
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	47b8      	blx	r7
 8007dc2:	3001      	adds	r0, #1
 8007dc4:	d1c3      	bne.n	8007d4e <_printf_float+0x32e>
 8007dc6:	e686      	b.n	8007ad6 <_printf_float+0xb6>
 8007dc8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007dcc:	f1ba 0f01 	cmp.w	sl, #1
 8007dd0:	dc01      	bgt.n	8007dd6 <_printf_float+0x3b6>
 8007dd2:	07db      	lsls	r3, r3, #31
 8007dd4:	d536      	bpl.n	8007e44 <_printf_float+0x424>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	4642      	mov	r2, r8
 8007dda:	4631      	mov	r1, r6
 8007ddc:	4628      	mov	r0, r5
 8007dde:	47b8      	blx	r7
 8007de0:	3001      	adds	r0, #1
 8007de2:	f43f ae78 	beq.w	8007ad6 <_printf_float+0xb6>
 8007de6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dea:	4631      	mov	r1, r6
 8007dec:	4628      	mov	r0, r5
 8007dee:	47b8      	blx	r7
 8007df0:	3001      	adds	r0, #1
 8007df2:	f43f ae70 	beq.w	8007ad6 <_printf_float+0xb6>
 8007df6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e02:	f7f8 fe61 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e06:	b9c0      	cbnz	r0, 8007e3a <_printf_float+0x41a>
 8007e08:	4653      	mov	r3, sl
 8007e0a:	f108 0201 	add.w	r2, r8, #1
 8007e0e:	4631      	mov	r1, r6
 8007e10:	4628      	mov	r0, r5
 8007e12:	47b8      	blx	r7
 8007e14:	3001      	adds	r0, #1
 8007e16:	d10c      	bne.n	8007e32 <_printf_float+0x412>
 8007e18:	e65d      	b.n	8007ad6 <_printf_float+0xb6>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	465a      	mov	r2, fp
 8007e1e:	4631      	mov	r1, r6
 8007e20:	4628      	mov	r0, r5
 8007e22:	47b8      	blx	r7
 8007e24:	3001      	adds	r0, #1
 8007e26:	f43f ae56 	beq.w	8007ad6 <_printf_float+0xb6>
 8007e2a:	f108 0801 	add.w	r8, r8, #1
 8007e2e:	45d0      	cmp	r8, sl
 8007e30:	dbf3      	blt.n	8007e1a <_printf_float+0x3fa>
 8007e32:	464b      	mov	r3, r9
 8007e34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007e38:	e6df      	b.n	8007bfa <_printf_float+0x1da>
 8007e3a:	f04f 0800 	mov.w	r8, #0
 8007e3e:	f104 0b1a 	add.w	fp, r4, #26
 8007e42:	e7f4      	b.n	8007e2e <_printf_float+0x40e>
 8007e44:	2301      	movs	r3, #1
 8007e46:	4642      	mov	r2, r8
 8007e48:	e7e1      	b.n	8007e0e <_printf_float+0x3ee>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	464a      	mov	r2, r9
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f ae3e 	beq.w	8007ad6 <_printf_float+0xb6>
 8007e5a:	f108 0801 	add.w	r8, r8, #1
 8007e5e:	68e3      	ldr	r3, [r4, #12]
 8007e60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e62:	1a5b      	subs	r3, r3, r1
 8007e64:	4543      	cmp	r3, r8
 8007e66:	dcf0      	bgt.n	8007e4a <_printf_float+0x42a>
 8007e68:	e6fc      	b.n	8007c64 <_printf_float+0x244>
 8007e6a:	f04f 0800 	mov.w	r8, #0
 8007e6e:	f104 0919 	add.w	r9, r4, #25
 8007e72:	e7f4      	b.n	8007e5e <_printf_float+0x43e>

08007e74 <_printf_common>:
 8007e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e78:	4616      	mov	r6, r2
 8007e7a:	4698      	mov	r8, r3
 8007e7c:	688a      	ldr	r2, [r1, #8]
 8007e7e:	690b      	ldr	r3, [r1, #16]
 8007e80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e84:	4293      	cmp	r3, r2
 8007e86:	bfb8      	it	lt
 8007e88:	4613      	movlt	r3, r2
 8007e8a:	6033      	str	r3, [r6, #0]
 8007e8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e90:	4607      	mov	r7, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	b10a      	cbz	r2, 8007e9a <_printf_common+0x26>
 8007e96:	3301      	adds	r3, #1
 8007e98:	6033      	str	r3, [r6, #0]
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	0699      	lsls	r1, r3, #26
 8007e9e:	bf42      	ittt	mi
 8007ea0:	6833      	ldrmi	r3, [r6, #0]
 8007ea2:	3302      	addmi	r3, #2
 8007ea4:	6033      	strmi	r3, [r6, #0]
 8007ea6:	6825      	ldr	r5, [r4, #0]
 8007ea8:	f015 0506 	ands.w	r5, r5, #6
 8007eac:	d106      	bne.n	8007ebc <_printf_common+0x48>
 8007eae:	f104 0a19 	add.w	sl, r4, #25
 8007eb2:	68e3      	ldr	r3, [r4, #12]
 8007eb4:	6832      	ldr	r2, [r6, #0]
 8007eb6:	1a9b      	subs	r3, r3, r2
 8007eb8:	42ab      	cmp	r3, r5
 8007eba:	dc26      	bgt.n	8007f0a <_printf_common+0x96>
 8007ebc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ec0:	6822      	ldr	r2, [r4, #0]
 8007ec2:	3b00      	subs	r3, #0
 8007ec4:	bf18      	it	ne
 8007ec6:	2301      	movne	r3, #1
 8007ec8:	0692      	lsls	r2, r2, #26
 8007eca:	d42b      	bmi.n	8007f24 <_printf_common+0xb0>
 8007ecc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ed0:	4641      	mov	r1, r8
 8007ed2:	4638      	mov	r0, r7
 8007ed4:	47c8      	blx	r9
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	d01e      	beq.n	8007f18 <_printf_common+0xa4>
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	6922      	ldr	r2, [r4, #16]
 8007ede:	f003 0306 	and.w	r3, r3, #6
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	bf02      	ittt	eq
 8007ee6:	68e5      	ldreq	r5, [r4, #12]
 8007ee8:	6833      	ldreq	r3, [r6, #0]
 8007eea:	1aed      	subeq	r5, r5, r3
 8007eec:	68a3      	ldr	r3, [r4, #8]
 8007eee:	bf0c      	ite	eq
 8007ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ef4:	2500      	movne	r5, #0
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	bfc4      	itt	gt
 8007efa:	1a9b      	subgt	r3, r3, r2
 8007efc:	18ed      	addgt	r5, r5, r3
 8007efe:	2600      	movs	r6, #0
 8007f00:	341a      	adds	r4, #26
 8007f02:	42b5      	cmp	r5, r6
 8007f04:	d11a      	bne.n	8007f3c <_printf_common+0xc8>
 8007f06:	2000      	movs	r0, #0
 8007f08:	e008      	b.n	8007f1c <_printf_common+0xa8>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	4652      	mov	r2, sl
 8007f0e:	4641      	mov	r1, r8
 8007f10:	4638      	mov	r0, r7
 8007f12:	47c8      	blx	r9
 8007f14:	3001      	adds	r0, #1
 8007f16:	d103      	bne.n	8007f20 <_printf_common+0xac>
 8007f18:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f20:	3501      	adds	r5, #1
 8007f22:	e7c6      	b.n	8007eb2 <_printf_common+0x3e>
 8007f24:	18e1      	adds	r1, r4, r3
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	2030      	movs	r0, #48	@ 0x30
 8007f2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f2e:	4422      	add	r2, r4
 8007f30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f38:	3302      	adds	r3, #2
 8007f3a:	e7c7      	b.n	8007ecc <_printf_common+0x58>
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	4622      	mov	r2, r4
 8007f40:	4641      	mov	r1, r8
 8007f42:	4638      	mov	r0, r7
 8007f44:	47c8      	blx	r9
 8007f46:	3001      	adds	r0, #1
 8007f48:	d0e6      	beq.n	8007f18 <_printf_common+0xa4>
 8007f4a:	3601      	adds	r6, #1
 8007f4c:	e7d9      	b.n	8007f02 <_printf_common+0x8e>
	...

08007f50 <_printf_i>:
 8007f50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f54:	7e0f      	ldrb	r7, [r1, #24]
 8007f56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f58:	2f78      	cmp	r7, #120	@ 0x78
 8007f5a:	4691      	mov	r9, r2
 8007f5c:	4680      	mov	r8, r0
 8007f5e:	460c      	mov	r4, r1
 8007f60:	469a      	mov	sl, r3
 8007f62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f66:	d807      	bhi.n	8007f78 <_printf_i+0x28>
 8007f68:	2f62      	cmp	r7, #98	@ 0x62
 8007f6a:	d80a      	bhi.n	8007f82 <_printf_i+0x32>
 8007f6c:	2f00      	cmp	r7, #0
 8007f6e:	f000 80d2 	beq.w	8008116 <_printf_i+0x1c6>
 8007f72:	2f58      	cmp	r7, #88	@ 0x58
 8007f74:	f000 80b9 	beq.w	80080ea <_printf_i+0x19a>
 8007f78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f80:	e03a      	b.n	8007ff8 <_printf_i+0xa8>
 8007f82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f86:	2b15      	cmp	r3, #21
 8007f88:	d8f6      	bhi.n	8007f78 <_printf_i+0x28>
 8007f8a:	a101      	add	r1, pc, #4	@ (adr r1, 8007f90 <_printf_i+0x40>)
 8007f8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f90:	08007fe9 	.word	0x08007fe9
 8007f94:	08007ffd 	.word	0x08007ffd
 8007f98:	08007f79 	.word	0x08007f79
 8007f9c:	08007f79 	.word	0x08007f79
 8007fa0:	08007f79 	.word	0x08007f79
 8007fa4:	08007f79 	.word	0x08007f79
 8007fa8:	08007ffd 	.word	0x08007ffd
 8007fac:	08007f79 	.word	0x08007f79
 8007fb0:	08007f79 	.word	0x08007f79
 8007fb4:	08007f79 	.word	0x08007f79
 8007fb8:	08007f79 	.word	0x08007f79
 8007fbc:	080080fd 	.word	0x080080fd
 8007fc0:	08008027 	.word	0x08008027
 8007fc4:	080080b7 	.word	0x080080b7
 8007fc8:	08007f79 	.word	0x08007f79
 8007fcc:	08007f79 	.word	0x08007f79
 8007fd0:	0800811f 	.word	0x0800811f
 8007fd4:	08007f79 	.word	0x08007f79
 8007fd8:	08008027 	.word	0x08008027
 8007fdc:	08007f79 	.word	0x08007f79
 8007fe0:	08007f79 	.word	0x08007f79
 8007fe4:	080080bf 	.word	0x080080bf
 8007fe8:	6833      	ldr	r3, [r6, #0]
 8007fea:	1d1a      	adds	r2, r3, #4
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	6032      	str	r2, [r6, #0]
 8007ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ff4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e09d      	b.n	8008138 <_printf_i+0x1e8>
 8007ffc:	6833      	ldr	r3, [r6, #0]
 8007ffe:	6820      	ldr	r0, [r4, #0]
 8008000:	1d19      	adds	r1, r3, #4
 8008002:	6031      	str	r1, [r6, #0]
 8008004:	0606      	lsls	r6, r0, #24
 8008006:	d501      	bpl.n	800800c <_printf_i+0xbc>
 8008008:	681d      	ldr	r5, [r3, #0]
 800800a:	e003      	b.n	8008014 <_printf_i+0xc4>
 800800c:	0645      	lsls	r5, r0, #25
 800800e:	d5fb      	bpl.n	8008008 <_printf_i+0xb8>
 8008010:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008014:	2d00      	cmp	r5, #0
 8008016:	da03      	bge.n	8008020 <_printf_i+0xd0>
 8008018:	232d      	movs	r3, #45	@ 0x2d
 800801a:	426d      	negs	r5, r5
 800801c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008020:	4859      	ldr	r0, [pc, #356]	@ (8008188 <_printf_i+0x238>)
 8008022:	230a      	movs	r3, #10
 8008024:	e011      	b.n	800804a <_printf_i+0xfa>
 8008026:	6821      	ldr	r1, [r4, #0]
 8008028:	6833      	ldr	r3, [r6, #0]
 800802a:	0608      	lsls	r0, r1, #24
 800802c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008030:	d402      	bmi.n	8008038 <_printf_i+0xe8>
 8008032:	0649      	lsls	r1, r1, #25
 8008034:	bf48      	it	mi
 8008036:	b2ad      	uxthmi	r5, r5
 8008038:	2f6f      	cmp	r7, #111	@ 0x6f
 800803a:	4853      	ldr	r0, [pc, #332]	@ (8008188 <_printf_i+0x238>)
 800803c:	6033      	str	r3, [r6, #0]
 800803e:	bf14      	ite	ne
 8008040:	230a      	movne	r3, #10
 8008042:	2308      	moveq	r3, #8
 8008044:	2100      	movs	r1, #0
 8008046:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800804a:	6866      	ldr	r6, [r4, #4]
 800804c:	60a6      	str	r6, [r4, #8]
 800804e:	2e00      	cmp	r6, #0
 8008050:	bfa2      	ittt	ge
 8008052:	6821      	ldrge	r1, [r4, #0]
 8008054:	f021 0104 	bicge.w	r1, r1, #4
 8008058:	6021      	strge	r1, [r4, #0]
 800805a:	b90d      	cbnz	r5, 8008060 <_printf_i+0x110>
 800805c:	2e00      	cmp	r6, #0
 800805e:	d04b      	beq.n	80080f8 <_printf_i+0x1a8>
 8008060:	4616      	mov	r6, r2
 8008062:	fbb5 f1f3 	udiv	r1, r5, r3
 8008066:	fb03 5711 	mls	r7, r3, r1, r5
 800806a:	5dc7      	ldrb	r7, [r0, r7]
 800806c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008070:	462f      	mov	r7, r5
 8008072:	42bb      	cmp	r3, r7
 8008074:	460d      	mov	r5, r1
 8008076:	d9f4      	bls.n	8008062 <_printf_i+0x112>
 8008078:	2b08      	cmp	r3, #8
 800807a:	d10b      	bne.n	8008094 <_printf_i+0x144>
 800807c:	6823      	ldr	r3, [r4, #0]
 800807e:	07df      	lsls	r7, r3, #31
 8008080:	d508      	bpl.n	8008094 <_printf_i+0x144>
 8008082:	6923      	ldr	r3, [r4, #16]
 8008084:	6861      	ldr	r1, [r4, #4]
 8008086:	4299      	cmp	r1, r3
 8008088:	bfde      	ittt	le
 800808a:	2330      	movle	r3, #48	@ 0x30
 800808c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008090:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008094:	1b92      	subs	r2, r2, r6
 8008096:	6122      	str	r2, [r4, #16]
 8008098:	f8cd a000 	str.w	sl, [sp]
 800809c:	464b      	mov	r3, r9
 800809e:	aa03      	add	r2, sp, #12
 80080a0:	4621      	mov	r1, r4
 80080a2:	4640      	mov	r0, r8
 80080a4:	f7ff fee6 	bl	8007e74 <_printf_common>
 80080a8:	3001      	adds	r0, #1
 80080aa:	d14a      	bne.n	8008142 <_printf_i+0x1f2>
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295
 80080b0:	b004      	add	sp, #16
 80080b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	f043 0320 	orr.w	r3, r3, #32
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	4833      	ldr	r0, [pc, #204]	@ (800818c <_printf_i+0x23c>)
 80080c0:	2778      	movs	r7, #120	@ 0x78
 80080c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	6831      	ldr	r1, [r6, #0]
 80080ca:	061f      	lsls	r7, r3, #24
 80080cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80080d0:	d402      	bmi.n	80080d8 <_printf_i+0x188>
 80080d2:	065f      	lsls	r7, r3, #25
 80080d4:	bf48      	it	mi
 80080d6:	b2ad      	uxthmi	r5, r5
 80080d8:	6031      	str	r1, [r6, #0]
 80080da:	07d9      	lsls	r1, r3, #31
 80080dc:	bf44      	itt	mi
 80080de:	f043 0320 	orrmi.w	r3, r3, #32
 80080e2:	6023      	strmi	r3, [r4, #0]
 80080e4:	b11d      	cbz	r5, 80080ee <_printf_i+0x19e>
 80080e6:	2310      	movs	r3, #16
 80080e8:	e7ac      	b.n	8008044 <_printf_i+0xf4>
 80080ea:	4827      	ldr	r0, [pc, #156]	@ (8008188 <_printf_i+0x238>)
 80080ec:	e7e9      	b.n	80080c2 <_printf_i+0x172>
 80080ee:	6823      	ldr	r3, [r4, #0]
 80080f0:	f023 0320 	bic.w	r3, r3, #32
 80080f4:	6023      	str	r3, [r4, #0]
 80080f6:	e7f6      	b.n	80080e6 <_printf_i+0x196>
 80080f8:	4616      	mov	r6, r2
 80080fa:	e7bd      	b.n	8008078 <_printf_i+0x128>
 80080fc:	6833      	ldr	r3, [r6, #0]
 80080fe:	6825      	ldr	r5, [r4, #0]
 8008100:	6961      	ldr	r1, [r4, #20]
 8008102:	1d18      	adds	r0, r3, #4
 8008104:	6030      	str	r0, [r6, #0]
 8008106:	062e      	lsls	r6, r5, #24
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	d501      	bpl.n	8008110 <_printf_i+0x1c0>
 800810c:	6019      	str	r1, [r3, #0]
 800810e:	e002      	b.n	8008116 <_printf_i+0x1c6>
 8008110:	0668      	lsls	r0, r5, #25
 8008112:	d5fb      	bpl.n	800810c <_printf_i+0x1bc>
 8008114:	8019      	strh	r1, [r3, #0]
 8008116:	2300      	movs	r3, #0
 8008118:	6123      	str	r3, [r4, #16]
 800811a:	4616      	mov	r6, r2
 800811c:	e7bc      	b.n	8008098 <_printf_i+0x148>
 800811e:	6833      	ldr	r3, [r6, #0]
 8008120:	1d1a      	adds	r2, r3, #4
 8008122:	6032      	str	r2, [r6, #0]
 8008124:	681e      	ldr	r6, [r3, #0]
 8008126:	6862      	ldr	r2, [r4, #4]
 8008128:	2100      	movs	r1, #0
 800812a:	4630      	mov	r0, r6
 800812c:	f7f8 f850 	bl	80001d0 <memchr>
 8008130:	b108      	cbz	r0, 8008136 <_printf_i+0x1e6>
 8008132:	1b80      	subs	r0, r0, r6
 8008134:	6060      	str	r0, [r4, #4]
 8008136:	6863      	ldr	r3, [r4, #4]
 8008138:	6123      	str	r3, [r4, #16]
 800813a:	2300      	movs	r3, #0
 800813c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008140:	e7aa      	b.n	8008098 <_printf_i+0x148>
 8008142:	6923      	ldr	r3, [r4, #16]
 8008144:	4632      	mov	r2, r6
 8008146:	4649      	mov	r1, r9
 8008148:	4640      	mov	r0, r8
 800814a:	47d0      	blx	sl
 800814c:	3001      	adds	r0, #1
 800814e:	d0ad      	beq.n	80080ac <_printf_i+0x15c>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	079b      	lsls	r3, r3, #30
 8008154:	d413      	bmi.n	800817e <_printf_i+0x22e>
 8008156:	68e0      	ldr	r0, [r4, #12]
 8008158:	9b03      	ldr	r3, [sp, #12]
 800815a:	4298      	cmp	r0, r3
 800815c:	bfb8      	it	lt
 800815e:	4618      	movlt	r0, r3
 8008160:	e7a6      	b.n	80080b0 <_printf_i+0x160>
 8008162:	2301      	movs	r3, #1
 8008164:	4632      	mov	r2, r6
 8008166:	4649      	mov	r1, r9
 8008168:	4640      	mov	r0, r8
 800816a:	47d0      	blx	sl
 800816c:	3001      	adds	r0, #1
 800816e:	d09d      	beq.n	80080ac <_printf_i+0x15c>
 8008170:	3501      	adds	r5, #1
 8008172:	68e3      	ldr	r3, [r4, #12]
 8008174:	9903      	ldr	r1, [sp, #12]
 8008176:	1a5b      	subs	r3, r3, r1
 8008178:	42ab      	cmp	r3, r5
 800817a:	dcf2      	bgt.n	8008162 <_printf_i+0x212>
 800817c:	e7eb      	b.n	8008156 <_printf_i+0x206>
 800817e:	2500      	movs	r5, #0
 8008180:	f104 0619 	add.w	r6, r4, #25
 8008184:	e7f5      	b.n	8008172 <_printf_i+0x222>
 8008186:	bf00      	nop
 8008188:	0800b082 	.word	0x0800b082
 800818c:	0800b093 	.word	0x0800b093

08008190 <std>:
 8008190:	2300      	movs	r3, #0
 8008192:	b510      	push	{r4, lr}
 8008194:	4604      	mov	r4, r0
 8008196:	e9c0 3300 	strd	r3, r3, [r0]
 800819a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800819e:	6083      	str	r3, [r0, #8]
 80081a0:	8181      	strh	r1, [r0, #12]
 80081a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80081a4:	81c2      	strh	r2, [r0, #14]
 80081a6:	6183      	str	r3, [r0, #24]
 80081a8:	4619      	mov	r1, r3
 80081aa:	2208      	movs	r2, #8
 80081ac:	305c      	adds	r0, #92	@ 0x5c
 80081ae:	f000 f914 	bl	80083da <memset>
 80081b2:	4b0d      	ldr	r3, [pc, #52]	@ (80081e8 <std+0x58>)
 80081b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80081b6:	4b0d      	ldr	r3, [pc, #52]	@ (80081ec <std+0x5c>)
 80081b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081ba:	4b0d      	ldr	r3, [pc, #52]	@ (80081f0 <std+0x60>)
 80081bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80081be:	4b0d      	ldr	r3, [pc, #52]	@ (80081f4 <std+0x64>)
 80081c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80081c2:	4b0d      	ldr	r3, [pc, #52]	@ (80081f8 <std+0x68>)
 80081c4:	6224      	str	r4, [r4, #32]
 80081c6:	429c      	cmp	r4, r3
 80081c8:	d006      	beq.n	80081d8 <std+0x48>
 80081ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081ce:	4294      	cmp	r4, r2
 80081d0:	d002      	beq.n	80081d8 <std+0x48>
 80081d2:	33d0      	adds	r3, #208	@ 0xd0
 80081d4:	429c      	cmp	r4, r3
 80081d6:	d105      	bne.n	80081e4 <std+0x54>
 80081d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80081dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e0:	f000 b978 	b.w	80084d4 <__retarget_lock_init_recursive>
 80081e4:	bd10      	pop	{r4, pc}
 80081e6:	bf00      	nop
 80081e8:	08008355 	.word	0x08008355
 80081ec:	08008377 	.word	0x08008377
 80081f0:	080083af 	.word	0x080083af
 80081f4:	080083d3 	.word	0x080083d3
 80081f8:	20000c98 	.word	0x20000c98

080081fc <stdio_exit_handler>:
 80081fc:	4a02      	ldr	r2, [pc, #8]	@ (8008208 <stdio_exit_handler+0xc>)
 80081fe:	4903      	ldr	r1, [pc, #12]	@ (800820c <stdio_exit_handler+0x10>)
 8008200:	4803      	ldr	r0, [pc, #12]	@ (8008210 <stdio_exit_handler+0x14>)
 8008202:	f000 b869 	b.w	80082d8 <_fwalk_sglue>
 8008206:	bf00      	nop
 8008208:	20000014 	.word	0x20000014
 800820c:	08009e35 	.word	0x08009e35
 8008210:	20000024 	.word	0x20000024

08008214 <cleanup_stdio>:
 8008214:	6841      	ldr	r1, [r0, #4]
 8008216:	4b0c      	ldr	r3, [pc, #48]	@ (8008248 <cleanup_stdio+0x34>)
 8008218:	4299      	cmp	r1, r3
 800821a:	b510      	push	{r4, lr}
 800821c:	4604      	mov	r4, r0
 800821e:	d001      	beq.n	8008224 <cleanup_stdio+0x10>
 8008220:	f001 fe08 	bl	8009e34 <_fflush_r>
 8008224:	68a1      	ldr	r1, [r4, #8]
 8008226:	4b09      	ldr	r3, [pc, #36]	@ (800824c <cleanup_stdio+0x38>)
 8008228:	4299      	cmp	r1, r3
 800822a:	d002      	beq.n	8008232 <cleanup_stdio+0x1e>
 800822c:	4620      	mov	r0, r4
 800822e:	f001 fe01 	bl	8009e34 <_fflush_r>
 8008232:	68e1      	ldr	r1, [r4, #12]
 8008234:	4b06      	ldr	r3, [pc, #24]	@ (8008250 <cleanup_stdio+0x3c>)
 8008236:	4299      	cmp	r1, r3
 8008238:	d004      	beq.n	8008244 <cleanup_stdio+0x30>
 800823a:	4620      	mov	r0, r4
 800823c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008240:	f001 bdf8 	b.w	8009e34 <_fflush_r>
 8008244:	bd10      	pop	{r4, pc}
 8008246:	bf00      	nop
 8008248:	20000c98 	.word	0x20000c98
 800824c:	20000d00 	.word	0x20000d00
 8008250:	20000d68 	.word	0x20000d68

08008254 <global_stdio_init.part.0>:
 8008254:	b510      	push	{r4, lr}
 8008256:	4b0b      	ldr	r3, [pc, #44]	@ (8008284 <global_stdio_init.part.0+0x30>)
 8008258:	4c0b      	ldr	r4, [pc, #44]	@ (8008288 <global_stdio_init.part.0+0x34>)
 800825a:	4a0c      	ldr	r2, [pc, #48]	@ (800828c <global_stdio_init.part.0+0x38>)
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	4620      	mov	r0, r4
 8008260:	2200      	movs	r2, #0
 8008262:	2104      	movs	r1, #4
 8008264:	f7ff ff94 	bl	8008190 <std>
 8008268:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800826c:	2201      	movs	r2, #1
 800826e:	2109      	movs	r1, #9
 8008270:	f7ff ff8e 	bl	8008190 <std>
 8008274:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008278:	2202      	movs	r2, #2
 800827a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800827e:	2112      	movs	r1, #18
 8008280:	f7ff bf86 	b.w	8008190 <std>
 8008284:	20000dd0 	.word	0x20000dd0
 8008288:	20000c98 	.word	0x20000c98
 800828c:	080081fd 	.word	0x080081fd

08008290 <__sfp_lock_acquire>:
 8008290:	4801      	ldr	r0, [pc, #4]	@ (8008298 <__sfp_lock_acquire+0x8>)
 8008292:	f000 b920 	b.w	80084d6 <__retarget_lock_acquire_recursive>
 8008296:	bf00      	nop
 8008298:	20000dd9 	.word	0x20000dd9

0800829c <__sfp_lock_release>:
 800829c:	4801      	ldr	r0, [pc, #4]	@ (80082a4 <__sfp_lock_release+0x8>)
 800829e:	f000 b91b 	b.w	80084d8 <__retarget_lock_release_recursive>
 80082a2:	bf00      	nop
 80082a4:	20000dd9 	.word	0x20000dd9

080082a8 <__sinit>:
 80082a8:	b510      	push	{r4, lr}
 80082aa:	4604      	mov	r4, r0
 80082ac:	f7ff fff0 	bl	8008290 <__sfp_lock_acquire>
 80082b0:	6a23      	ldr	r3, [r4, #32]
 80082b2:	b11b      	cbz	r3, 80082bc <__sinit+0x14>
 80082b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082b8:	f7ff bff0 	b.w	800829c <__sfp_lock_release>
 80082bc:	4b04      	ldr	r3, [pc, #16]	@ (80082d0 <__sinit+0x28>)
 80082be:	6223      	str	r3, [r4, #32]
 80082c0:	4b04      	ldr	r3, [pc, #16]	@ (80082d4 <__sinit+0x2c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1f5      	bne.n	80082b4 <__sinit+0xc>
 80082c8:	f7ff ffc4 	bl	8008254 <global_stdio_init.part.0>
 80082cc:	e7f2      	b.n	80082b4 <__sinit+0xc>
 80082ce:	bf00      	nop
 80082d0:	08008215 	.word	0x08008215
 80082d4:	20000dd0 	.word	0x20000dd0

080082d8 <_fwalk_sglue>:
 80082d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082dc:	4607      	mov	r7, r0
 80082de:	4688      	mov	r8, r1
 80082e0:	4614      	mov	r4, r2
 80082e2:	2600      	movs	r6, #0
 80082e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082e8:	f1b9 0901 	subs.w	r9, r9, #1
 80082ec:	d505      	bpl.n	80082fa <_fwalk_sglue+0x22>
 80082ee:	6824      	ldr	r4, [r4, #0]
 80082f0:	2c00      	cmp	r4, #0
 80082f2:	d1f7      	bne.n	80082e4 <_fwalk_sglue+0xc>
 80082f4:	4630      	mov	r0, r6
 80082f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082fa:	89ab      	ldrh	r3, [r5, #12]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d907      	bls.n	8008310 <_fwalk_sglue+0x38>
 8008300:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008304:	3301      	adds	r3, #1
 8008306:	d003      	beq.n	8008310 <_fwalk_sglue+0x38>
 8008308:	4629      	mov	r1, r5
 800830a:	4638      	mov	r0, r7
 800830c:	47c0      	blx	r8
 800830e:	4306      	orrs	r6, r0
 8008310:	3568      	adds	r5, #104	@ 0x68
 8008312:	e7e9      	b.n	80082e8 <_fwalk_sglue+0x10>

08008314 <siprintf>:
 8008314:	b40e      	push	{r1, r2, r3}
 8008316:	b500      	push	{lr}
 8008318:	b09c      	sub	sp, #112	@ 0x70
 800831a:	ab1d      	add	r3, sp, #116	@ 0x74
 800831c:	9002      	str	r0, [sp, #8]
 800831e:	9006      	str	r0, [sp, #24]
 8008320:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008324:	4809      	ldr	r0, [pc, #36]	@ (800834c <siprintf+0x38>)
 8008326:	9107      	str	r1, [sp, #28]
 8008328:	9104      	str	r1, [sp, #16]
 800832a:	4909      	ldr	r1, [pc, #36]	@ (8008350 <siprintf+0x3c>)
 800832c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008330:	9105      	str	r1, [sp, #20]
 8008332:	6800      	ldr	r0, [r0, #0]
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	a902      	add	r1, sp, #8
 8008338:	f001 fbfc 	bl	8009b34 <_svfiprintf_r>
 800833c:	9b02      	ldr	r3, [sp, #8]
 800833e:	2200      	movs	r2, #0
 8008340:	701a      	strb	r2, [r3, #0]
 8008342:	b01c      	add	sp, #112	@ 0x70
 8008344:	f85d eb04 	ldr.w	lr, [sp], #4
 8008348:	b003      	add	sp, #12
 800834a:	4770      	bx	lr
 800834c:	20000020 	.word	0x20000020
 8008350:	ffff0208 	.word	0xffff0208

08008354 <__sread>:
 8008354:	b510      	push	{r4, lr}
 8008356:	460c      	mov	r4, r1
 8008358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800835c:	f000 f86c 	bl	8008438 <_read_r>
 8008360:	2800      	cmp	r0, #0
 8008362:	bfab      	itete	ge
 8008364:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008366:	89a3      	ldrhlt	r3, [r4, #12]
 8008368:	181b      	addge	r3, r3, r0
 800836a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800836e:	bfac      	ite	ge
 8008370:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008372:	81a3      	strhlt	r3, [r4, #12]
 8008374:	bd10      	pop	{r4, pc}

08008376 <__swrite>:
 8008376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800837a:	461f      	mov	r7, r3
 800837c:	898b      	ldrh	r3, [r1, #12]
 800837e:	05db      	lsls	r3, r3, #23
 8008380:	4605      	mov	r5, r0
 8008382:	460c      	mov	r4, r1
 8008384:	4616      	mov	r6, r2
 8008386:	d505      	bpl.n	8008394 <__swrite+0x1e>
 8008388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800838c:	2302      	movs	r3, #2
 800838e:	2200      	movs	r2, #0
 8008390:	f000 f840 	bl	8008414 <_lseek_r>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800839a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800839e:	81a3      	strh	r3, [r4, #12]
 80083a0:	4632      	mov	r2, r6
 80083a2:	463b      	mov	r3, r7
 80083a4:	4628      	mov	r0, r5
 80083a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083aa:	f000 b857 	b.w	800845c <_write_r>

080083ae <__sseek>:
 80083ae:	b510      	push	{r4, lr}
 80083b0:	460c      	mov	r4, r1
 80083b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b6:	f000 f82d 	bl	8008414 <_lseek_r>
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	89a3      	ldrh	r3, [r4, #12]
 80083be:	bf15      	itete	ne
 80083c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80083ca:	81a3      	strheq	r3, [r4, #12]
 80083cc:	bf18      	it	ne
 80083ce:	81a3      	strhne	r3, [r4, #12]
 80083d0:	bd10      	pop	{r4, pc}

080083d2 <__sclose>:
 80083d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d6:	f000 b80d 	b.w	80083f4 <_close_r>

080083da <memset>:
 80083da:	4402      	add	r2, r0
 80083dc:	4603      	mov	r3, r0
 80083de:	4293      	cmp	r3, r2
 80083e0:	d100      	bne.n	80083e4 <memset+0xa>
 80083e2:	4770      	bx	lr
 80083e4:	f803 1b01 	strb.w	r1, [r3], #1
 80083e8:	e7f9      	b.n	80083de <memset+0x4>
	...

080083ec <_localeconv_r>:
 80083ec:	4800      	ldr	r0, [pc, #0]	@ (80083f0 <_localeconv_r+0x4>)
 80083ee:	4770      	bx	lr
 80083f0:	20000160 	.word	0x20000160

080083f4 <_close_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4d06      	ldr	r5, [pc, #24]	@ (8008410 <_close_r+0x1c>)
 80083f8:	2300      	movs	r3, #0
 80083fa:	4604      	mov	r4, r0
 80083fc:	4608      	mov	r0, r1
 80083fe:	602b      	str	r3, [r5, #0]
 8008400:	f7fa fd76 	bl	8002ef0 <_close>
 8008404:	1c43      	adds	r3, r0, #1
 8008406:	d102      	bne.n	800840e <_close_r+0x1a>
 8008408:	682b      	ldr	r3, [r5, #0]
 800840a:	b103      	cbz	r3, 800840e <_close_r+0x1a>
 800840c:	6023      	str	r3, [r4, #0]
 800840e:	bd38      	pop	{r3, r4, r5, pc}
 8008410:	20000dd4 	.word	0x20000dd4

08008414 <_lseek_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d07      	ldr	r5, [pc, #28]	@ (8008434 <_lseek_r+0x20>)
 8008418:	4604      	mov	r4, r0
 800841a:	4608      	mov	r0, r1
 800841c:	4611      	mov	r1, r2
 800841e:	2200      	movs	r2, #0
 8008420:	602a      	str	r2, [r5, #0]
 8008422:	461a      	mov	r2, r3
 8008424:	f7fa fd8b 	bl	8002f3e <_lseek>
 8008428:	1c43      	adds	r3, r0, #1
 800842a:	d102      	bne.n	8008432 <_lseek_r+0x1e>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	b103      	cbz	r3, 8008432 <_lseek_r+0x1e>
 8008430:	6023      	str	r3, [r4, #0]
 8008432:	bd38      	pop	{r3, r4, r5, pc}
 8008434:	20000dd4 	.word	0x20000dd4

08008438 <_read_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	4d07      	ldr	r5, [pc, #28]	@ (8008458 <_read_r+0x20>)
 800843c:	4604      	mov	r4, r0
 800843e:	4608      	mov	r0, r1
 8008440:	4611      	mov	r1, r2
 8008442:	2200      	movs	r2, #0
 8008444:	602a      	str	r2, [r5, #0]
 8008446:	461a      	mov	r2, r3
 8008448:	f7fa fd19 	bl	8002e7e <_read>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_read_r+0x1e>
 8008450:	682b      	ldr	r3, [r5, #0]
 8008452:	b103      	cbz	r3, 8008456 <_read_r+0x1e>
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	20000dd4 	.word	0x20000dd4

0800845c <_write_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4d07      	ldr	r5, [pc, #28]	@ (800847c <_write_r+0x20>)
 8008460:	4604      	mov	r4, r0
 8008462:	4608      	mov	r0, r1
 8008464:	4611      	mov	r1, r2
 8008466:	2200      	movs	r2, #0
 8008468:	602a      	str	r2, [r5, #0]
 800846a:	461a      	mov	r2, r3
 800846c:	f7fa fd24 	bl	8002eb8 <_write>
 8008470:	1c43      	adds	r3, r0, #1
 8008472:	d102      	bne.n	800847a <_write_r+0x1e>
 8008474:	682b      	ldr	r3, [r5, #0]
 8008476:	b103      	cbz	r3, 800847a <_write_r+0x1e>
 8008478:	6023      	str	r3, [r4, #0]
 800847a:	bd38      	pop	{r3, r4, r5, pc}
 800847c:	20000dd4 	.word	0x20000dd4

08008480 <__errno>:
 8008480:	4b01      	ldr	r3, [pc, #4]	@ (8008488 <__errno+0x8>)
 8008482:	6818      	ldr	r0, [r3, #0]
 8008484:	4770      	bx	lr
 8008486:	bf00      	nop
 8008488:	20000020 	.word	0x20000020

0800848c <__libc_init_array>:
 800848c:	b570      	push	{r4, r5, r6, lr}
 800848e:	4d0d      	ldr	r5, [pc, #52]	@ (80084c4 <__libc_init_array+0x38>)
 8008490:	4c0d      	ldr	r4, [pc, #52]	@ (80084c8 <__libc_init_array+0x3c>)
 8008492:	1b64      	subs	r4, r4, r5
 8008494:	10a4      	asrs	r4, r4, #2
 8008496:	2600      	movs	r6, #0
 8008498:	42a6      	cmp	r6, r4
 800849a:	d109      	bne.n	80084b0 <__libc_init_array+0x24>
 800849c:	4d0b      	ldr	r5, [pc, #44]	@ (80084cc <__libc_init_array+0x40>)
 800849e:	4c0c      	ldr	r4, [pc, #48]	@ (80084d0 <__libc_init_array+0x44>)
 80084a0:	f002 f866 	bl	800a570 <_init>
 80084a4:	1b64      	subs	r4, r4, r5
 80084a6:	10a4      	asrs	r4, r4, #2
 80084a8:	2600      	movs	r6, #0
 80084aa:	42a6      	cmp	r6, r4
 80084ac:	d105      	bne.n	80084ba <__libc_init_array+0x2e>
 80084ae:	bd70      	pop	{r4, r5, r6, pc}
 80084b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b4:	4798      	blx	r3
 80084b6:	3601      	adds	r6, #1
 80084b8:	e7ee      	b.n	8008498 <__libc_init_array+0xc>
 80084ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80084be:	4798      	blx	r3
 80084c0:	3601      	adds	r6, #1
 80084c2:	e7f2      	b.n	80084aa <__libc_init_array+0x1e>
 80084c4:	0800b3e8 	.word	0x0800b3e8
 80084c8:	0800b3e8 	.word	0x0800b3e8
 80084cc:	0800b3e8 	.word	0x0800b3e8
 80084d0:	0800b3ec 	.word	0x0800b3ec

080084d4 <__retarget_lock_init_recursive>:
 80084d4:	4770      	bx	lr

080084d6 <__retarget_lock_acquire_recursive>:
 80084d6:	4770      	bx	lr

080084d8 <__retarget_lock_release_recursive>:
 80084d8:	4770      	bx	lr

080084da <quorem>:
 80084da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084de:	6903      	ldr	r3, [r0, #16]
 80084e0:	690c      	ldr	r4, [r1, #16]
 80084e2:	42a3      	cmp	r3, r4
 80084e4:	4607      	mov	r7, r0
 80084e6:	db7e      	blt.n	80085e6 <quorem+0x10c>
 80084e8:	3c01      	subs	r4, #1
 80084ea:	f101 0814 	add.w	r8, r1, #20
 80084ee:	00a3      	lsls	r3, r4, #2
 80084f0:	f100 0514 	add.w	r5, r0, #20
 80084f4:	9300      	str	r3, [sp, #0]
 80084f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084fa:	9301      	str	r3, [sp, #4]
 80084fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008500:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008504:	3301      	adds	r3, #1
 8008506:	429a      	cmp	r2, r3
 8008508:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800850c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008510:	d32e      	bcc.n	8008570 <quorem+0x96>
 8008512:	f04f 0a00 	mov.w	sl, #0
 8008516:	46c4      	mov	ip, r8
 8008518:	46ae      	mov	lr, r5
 800851a:	46d3      	mov	fp, sl
 800851c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008520:	b298      	uxth	r0, r3
 8008522:	fb06 a000 	mla	r0, r6, r0, sl
 8008526:	0c02      	lsrs	r2, r0, #16
 8008528:	0c1b      	lsrs	r3, r3, #16
 800852a:	fb06 2303 	mla	r3, r6, r3, r2
 800852e:	f8de 2000 	ldr.w	r2, [lr]
 8008532:	b280      	uxth	r0, r0
 8008534:	b292      	uxth	r2, r2
 8008536:	1a12      	subs	r2, r2, r0
 8008538:	445a      	add	r2, fp
 800853a:	f8de 0000 	ldr.w	r0, [lr]
 800853e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008542:	b29b      	uxth	r3, r3
 8008544:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008548:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800854c:	b292      	uxth	r2, r2
 800854e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008552:	45e1      	cmp	r9, ip
 8008554:	f84e 2b04 	str.w	r2, [lr], #4
 8008558:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800855c:	d2de      	bcs.n	800851c <quorem+0x42>
 800855e:	9b00      	ldr	r3, [sp, #0]
 8008560:	58eb      	ldr	r3, [r5, r3]
 8008562:	b92b      	cbnz	r3, 8008570 <quorem+0x96>
 8008564:	9b01      	ldr	r3, [sp, #4]
 8008566:	3b04      	subs	r3, #4
 8008568:	429d      	cmp	r5, r3
 800856a:	461a      	mov	r2, r3
 800856c:	d32f      	bcc.n	80085ce <quorem+0xf4>
 800856e:	613c      	str	r4, [r7, #16]
 8008570:	4638      	mov	r0, r7
 8008572:	f001 f97b 	bl	800986c <__mcmp>
 8008576:	2800      	cmp	r0, #0
 8008578:	db25      	blt.n	80085c6 <quorem+0xec>
 800857a:	4629      	mov	r1, r5
 800857c:	2000      	movs	r0, #0
 800857e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008582:	f8d1 c000 	ldr.w	ip, [r1]
 8008586:	fa1f fe82 	uxth.w	lr, r2
 800858a:	fa1f f38c 	uxth.w	r3, ip
 800858e:	eba3 030e 	sub.w	r3, r3, lr
 8008592:	4403      	add	r3, r0
 8008594:	0c12      	lsrs	r2, r2, #16
 8008596:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800859a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800859e:	b29b      	uxth	r3, r3
 80085a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80085a4:	45c1      	cmp	r9, r8
 80085a6:	f841 3b04 	str.w	r3, [r1], #4
 80085aa:	ea4f 4022 	mov.w	r0, r2, asr #16
 80085ae:	d2e6      	bcs.n	800857e <quorem+0xa4>
 80085b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085b8:	b922      	cbnz	r2, 80085c4 <quorem+0xea>
 80085ba:	3b04      	subs	r3, #4
 80085bc:	429d      	cmp	r5, r3
 80085be:	461a      	mov	r2, r3
 80085c0:	d30b      	bcc.n	80085da <quorem+0x100>
 80085c2:	613c      	str	r4, [r7, #16]
 80085c4:	3601      	adds	r6, #1
 80085c6:	4630      	mov	r0, r6
 80085c8:	b003      	add	sp, #12
 80085ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ce:	6812      	ldr	r2, [r2, #0]
 80085d0:	3b04      	subs	r3, #4
 80085d2:	2a00      	cmp	r2, #0
 80085d4:	d1cb      	bne.n	800856e <quorem+0x94>
 80085d6:	3c01      	subs	r4, #1
 80085d8:	e7c6      	b.n	8008568 <quorem+0x8e>
 80085da:	6812      	ldr	r2, [r2, #0]
 80085dc:	3b04      	subs	r3, #4
 80085de:	2a00      	cmp	r2, #0
 80085e0:	d1ef      	bne.n	80085c2 <quorem+0xe8>
 80085e2:	3c01      	subs	r4, #1
 80085e4:	e7ea      	b.n	80085bc <quorem+0xe2>
 80085e6:	2000      	movs	r0, #0
 80085e8:	e7ee      	b.n	80085c8 <quorem+0xee>
 80085ea:	0000      	movs	r0, r0
 80085ec:	0000      	movs	r0, r0
	...

080085f0 <_dtoa_r>:
 80085f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f4:	69c7      	ldr	r7, [r0, #28]
 80085f6:	b099      	sub	sp, #100	@ 0x64
 80085f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085fc:	ec55 4b10 	vmov	r4, r5, d0
 8008600:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008602:	9109      	str	r1, [sp, #36]	@ 0x24
 8008604:	4683      	mov	fp, r0
 8008606:	920e      	str	r2, [sp, #56]	@ 0x38
 8008608:	9313      	str	r3, [sp, #76]	@ 0x4c
 800860a:	b97f      	cbnz	r7, 800862c <_dtoa_r+0x3c>
 800860c:	2010      	movs	r0, #16
 800860e:	f000 fdfd 	bl	800920c <malloc>
 8008612:	4602      	mov	r2, r0
 8008614:	f8cb 001c 	str.w	r0, [fp, #28]
 8008618:	b920      	cbnz	r0, 8008624 <_dtoa_r+0x34>
 800861a:	4ba7      	ldr	r3, [pc, #668]	@ (80088b8 <_dtoa_r+0x2c8>)
 800861c:	21ef      	movs	r1, #239	@ 0xef
 800861e:	48a7      	ldr	r0, [pc, #668]	@ (80088bc <_dtoa_r+0x2cc>)
 8008620:	f001 fc68 	bl	8009ef4 <__assert_func>
 8008624:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008628:	6007      	str	r7, [r0, #0]
 800862a:	60c7      	str	r7, [r0, #12]
 800862c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008630:	6819      	ldr	r1, [r3, #0]
 8008632:	b159      	cbz	r1, 800864c <_dtoa_r+0x5c>
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	604a      	str	r2, [r1, #4]
 8008638:	2301      	movs	r3, #1
 800863a:	4093      	lsls	r3, r2
 800863c:	608b      	str	r3, [r1, #8]
 800863e:	4658      	mov	r0, fp
 8008640:	f000 feda 	bl	80093f8 <_Bfree>
 8008644:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]
 800864c:	1e2b      	subs	r3, r5, #0
 800864e:	bfb9      	ittee	lt
 8008650:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008654:	9303      	strlt	r3, [sp, #12]
 8008656:	2300      	movge	r3, #0
 8008658:	6033      	strge	r3, [r6, #0]
 800865a:	9f03      	ldr	r7, [sp, #12]
 800865c:	4b98      	ldr	r3, [pc, #608]	@ (80088c0 <_dtoa_r+0x2d0>)
 800865e:	bfbc      	itt	lt
 8008660:	2201      	movlt	r2, #1
 8008662:	6032      	strlt	r2, [r6, #0]
 8008664:	43bb      	bics	r3, r7
 8008666:	d112      	bne.n	800868e <_dtoa_r+0x9e>
 8008668:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800866a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008674:	4323      	orrs	r3, r4
 8008676:	f000 854d 	beq.w	8009114 <_dtoa_r+0xb24>
 800867a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800867c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80088d4 <_dtoa_r+0x2e4>
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 854f 	beq.w	8009124 <_dtoa_r+0xb34>
 8008686:	f10a 0303 	add.w	r3, sl, #3
 800868a:	f000 bd49 	b.w	8009120 <_dtoa_r+0xb30>
 800868e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008692:	2200      	movs	r2, #0
 8008694:	ec51 0b17 	vmov	r0, r1, d7
 8008698:	2300      	movs	r3, #0
 800869a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800869e:	f7f8 fa13 	bl	8000ac8 <__aeabi_dcmpeq>
 80086a2:	4680      	mov	r8, r0
 80086a4:	b158      	cbz	r0, 80086be <_dtoa_r+0xce>
 80086a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80086a8:	2301      	movs	r3, #1
 80086aa:	6013      	str	r3, [r2, #0]
 80086ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80086ae:	b113      	cbz	r3, 80086b6 <_dtoa_r+0xc6>
 80086b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80086b2:	4b84      	ldr	r3, [pc, #528]	@ (80088c4 <_dtoa_r+0x2d4>)
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80088d8 <_dtoa_r+0x2e8>
 80086ba:	f000 bd33 	b.w	8009124 <_dtoa_r+0xb34>
 80086be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80086c2:	aa16      	add	r2, sp, #88	@ 0x58
 80086c4:	a917      	add	r1, sp, #92	@ 0x5c
 80086c6:	4658      	mov	r0, fp
 80086c8:	f001 f980 	bl	80099cc <__d2b>
 80086cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80086d0:	4681      	mov	r9, r0
 80086d2:	2e00      	cmp	r6, #0
 80086d4:	d077      	beq.n	80087c6 <_dtoa_r+0x1d6>
 80086d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80086dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80086e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80086ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80086f0:	4619      	mov	r1, r3
 80086f2:	2200      	movs	r2, #0
 80086f4:	4b74      	ldr	r3, [pc, #464]	@ (80088c8 <_dtoa_r+0x2d8>)
 80086f6:	f7f7 fdc7 	bl	8000288 <__aeabi_dsub>
 80086fa:	a369      	add	r3, pc, #420	@ (adr r3, 80088a0 <_dtoa_r+0x2b0>)
 80086fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008700:	f7f7 ff7a 	bl	80005f8 <__aeabi_dmul>
 8008704:	a368      	add	r3, pc, #416	@ (adr r3, 80088a8 <_dtoa_r+0x2b8>)
 8008706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800870a:	f7f7 fdbf 	bl	800028c <__adddf3>
 800870e:	4604      	mov	r4, r0
 8008710:	4630      	mov	r0, r6
 8008712:	460d      	mov	r5, r1
 8008714:	f7f7 ff06 	bl	8000524 <__aeabi_i2d>
 8008718:	a365      	add	r3, pc, #404	@ (adr r3, 80088b0 <_dtoa_r+0x2c0>)
 800871a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871e:	f7f7 ff6b 	bl	80005f8 <__aeabi_dmul>
 8008722:	4602      	mov	r2, r0
 8008724:	460b      	mov	r3, r1
 8008726:	4620      	mov	r0, r4
 8008728:	4629      	mov	r1, r5
 800872a:	f7f7 fdaf 	bl	800028c <__adddf3>
 800872e:	4604      	mov	r4, r0
 8008730:	460d      	mov	r5, r1
 8008732:	f7f8 fa11 	bl	8000b58 <__aeabi_d2iz>
 8008736:	2200      	movs	r2, #0
 8008738:	4607      	mov	r7, r0
 800873a:	2300      	movs	r3, #0
 800873c:	4620      	mov	r0, r4
 800873e:	4629      	mov	r1, r5
 8008740:	f7f8 f9cc 	bl	8000adc <__aeabi_dcmplt>
 8008744:	b140      	cbz	r0, 8008758 <_dtoa_r+0x168>
 8008746:	4638      	mov	r0, r7
 8008748:	f7f7 feec 	bl	8000524 <__aeabi_i2d>
 800874c:	4622      	mov	r2, r4
 800874e:	462b      	mov	r3, r5
 8008750:	f7f8 f9ba 	bl	8000ac8 <__aeabi_dcmpeq>
 8008754:	b900      	cbnz	r0, 8008758 <_dtoa_r+0x168>
 8008756:	3f01      	subs	r7, #1
 8008758:	2f16      	cmp	r7, #22
 800875a:	d851      	bhi.n	8008800 <_dtoa_r+0x210>
 800875c:	4b5b      	ldr	r3, [pc, #364]	@ (80088cc <_dtoa_r+0x2dc>)
 800875e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008766:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800876a:	f7f8 f9b7 	bl	8000adc <__aeabi_dcmplt>
 800876e:	2800      	cmp	r0, #0
 8008770:	d048      	beq.n	8008804 <_dtoa_r+0x214>
 8008772:	3f01      	subs	r7, #1
 8008774:	2300      	movs	r3, #0
 8008776:	9312      	str	r3, [sp, #72]	@ 0x48
 8008778:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800877a:	1b9b      	subs	r3, r3, r6
 800877c:	1e5a      	subs	r2, r3, #1
 800877e:	bf44      	itt	mi
 8008780:	f1c3 0801 	rsbmi	r8, r3, #1
 8008784:	2300      	movmi	r3, #0
 8008786:	9208      	str	r2, [sp, #32]
 8008788:	bf54      	ite	pl
 800878a:	f04f 0800 	movpl.w	r8, #0
 800878e:	9308      	strmi	r3, [sp, #32]
 8008790:	2f00      	cmp	r7, #0
 8008792:	db39      	blt.n	8008808 <_dtoa_r+0x218>
 8008794:	9b08      	ldr	r3, [sp, #32]
 8008796:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008798:	443b      	add	r3, r7
 800879a:	9308      	str	r3, [sp, #32]
 800879c:	2300      	movs	r3, #0
 800879e:	930a      	str	r3, [sp, #40]	@ 0x28
 80087a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087a2:	2b09      	cmp	r3, #9
 80087a4:	d864      	bhi.n	8008870 <_dtoa_r+0x280>
 80087a6:	2b05      	cmp	r3, #5
 80087a8:	bfc4      	itt	gt
 80087aa:	3b04      	subgt	r3, #4
 80087ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80087ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087b0:	f1a3 0302 	sub.w	r3, r3, #2
 80087b4:	bfcc      	ite	gt
 80087b6:	2400      	movgt	r4, #0
 80087b8:	2401      	movle	r4, #1
 80087ba:	2b03      	cmp	r3, #3
 80087bc:	d863      	bhi.n	8008886 <_dtoa_r+0x296>
 80087be:	e8df f003 	tbb	[pc, r3]
 80087c2:	372a      	.short	0x372a
 80087c4:	5535      	.short	0x5535
 80087c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80087ca:	441e      	add	r6, r3
 80087cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80087d0:	2b20      	cmp	r3, #32
 80087d2:	bfc1      	itttt	gt
 80087d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80087d8:	409f      	lslgt	r7, r3
 80087da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80087de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80087e2:	bfd6      	itet	le
 80087e4:	f1c3 0320 	rsble	r3, r3, #32
 80087e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80087ec:	fa04 f003 	lslle.w	r0, r4, r3
 80087f0:	f7f7 fe88 	bl	8000504 <__aeabi_ui2d>
 80087f4:	2201      	movs	r2, #1
 80087f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80087fa:	3e01      	subs	r6, #1
 80087fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80087fe:	e777      	b.n	80086f0 <_dtoa_r+0x100>
 8008800:	2301      	movs	r3, #1
 8008802:	e7b8      	b.n	8008776 <_dtoa_r+0x186>
 8008804:	9012      	str	r0, [sp, #72]	@ 0x48
 8008806:	e7b7      	b.n	8008778 <_dtoa_r+0x188>
 8008808:	427b      	negs	r3, r7
 800880a:	930a      	str	r3, [sp, #40]	@ 0x28
 800880c:	2300      	movs	r3, #0
 800880e:	eba8 0807 	sub.w	r8, r8, r7
 8008812:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008814:	e7c4      	b.n	80087a0 <_dtoa_r+0x1b0>
 8008816:	2300      	movs	r3, #0
 8008818:	930b      	str	r3, [sp, #44]	@ 0x2c
 800881a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800881c:	2b00      	cmp	r3, #0
 800881e:	dc35      	bgt.n	800888c <_dtoa_r+0x29c>
 8008820:	2301      	movs	r3, #1
 8008822:	9300      	str	r3, [sp, #0]
 8008824:	9307      	str	r3, [sp, #28]
 8008826:	461a      	mov	r2, r3
 8008828:	920e      	str	r2, [sp, #56]	@ 0x38
 800882a:	e00b      	b.n	8008844 <_dtoa_r+0x254>
 800882c:	2301      	movs	r3, #1
 800882e:	e7f3      	b.n	8008818 <_dtoa_r+0x228>
 8008830:	2300      	movs	r3, #0
 8008832:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008834:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008836:	18fb      	adds	r3, r7, r3
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	3301      	adds	r3, #1
 800883c:	2b01      	cmp	r3, #1
 800883e:	9307      	str	r3, [sp, #28]
 8008840:	bfb8      	it	lt
 8008842:	2301      	movlt	r3, #1
 8008844:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008848:	2100      	movs	r1, #0
 800884a:	2204      	movs	r2, #4
 800884c:	f102 0514 	add.w	r5, r2, #20
 8008850:	429d      	cmp	r5, r3
 8008852:	d91f      	bls.n	8008894 <_dtoa_r+0x2a4>
 8008854:	6041      	str	r1, [r0, #4]
 8008856:	4658      	mov	r0, fp
 8008858:	f000 fd8e 	bl	8009378 <_Balloc>
 800885c:	4682      	mov	sl, r0
 800885e:	2800      	cmp	r0, #0
 8008860:	d13c      	bne.n	80088dc <_dtoa_r+0x2ec>
 8008862:	4b1b      	ldr	r3, [pc, #108]	@ (80088d0 <_dtoa_r+0x2e0>)
 8008864:	4602      	mov	r2, r0
 8008866:	f240 11af 	movw	r1, #431	@ 0x1af
 800886a:	e6d8      	b.n	800861e <_dtoa_r+0x2e>
 800886c:	2301      	movs	r3, #1
 800886e:	e7e0      	b.n	8008832 <_dtoa_r+0x242>
 8008870:	2401      	movs	r4, #1
 8008872:	2300      	movs	r3, #0
 8008874:	9309      	str	r3, [sp, #36]	@ 0x24
 8008876:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008878:	f04f 33ff 	mov.w	r3, #4294967295
 800887c:	9300      	str	r3, [sp, #0]
 800887e:	9307      	str	r3, [sp, #28]
 8008880:	2200      	movs	r2, #0
 8008882:	2312      	movs	r3, #18
 8008884:	e7d0      	b.n	8008828 <_dtoa_r+0x238>
 8008886:	2301      	movs	r3, #1
 8008888:	930b      	str	r3, [sp, #44]	@ 0x2c
 800888a:	e7f5      	b.n	8008878 <_dtoa_r+0x288>
 800888c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	9307      	str	r3, [sp, #28]
 8008892:	e7d7      	b.n	8008844 <_dtoa_r+0x254>
 8008894:	3101      	adds	r1, #1
 8008896:	0052      	lsls	r2, r2, #1
 8008898:	e7d8      	b.n	800884c <_dtoa_r+0x25c>
 800889a:	bf00      	nop
 800889c:	f3af 8000 	nop.w
 80088a0:	636f4361 	.word	0x636f4361
 80088a4:	3fd287a7 	.word	0x3fd287a7
 80088a8:	8b60c8b3 	.word	0x8b60c8b3
 80088ac:	3fc68a28 	.word	0x3fc68a28
 80088b0:	509f79fb 	.word	0x509f79fb
 80088b4:	3fd34413 	.word	0x3fd34413
 80088b8:	0800b0b1 	.word	0x0800b0b1
 80088bc:	0800b0c8 	.word	0x0800b0c8
 80088c0:	7ff00000 	.word	0x7ff00000
 80088c4:	0800b081 	.word	0x0800b081
 80088c8:	3ff80000 	.word	0x3ff80000
 80088cc:	0800b1c0 	.word	0x0800b1c0
 80088d0:	0800b120 	.word	0x0800b120
 80088d4:	0800b0ad 	.word	0x0800b0ad
 80088d8:	0800b080 	.word	0x0800b080
 80088dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088e0:	6018      	str	r0, [r3, #0]
 80088e2:	9b07      	ldr	r3, [sp, #28]
 80088e4:	2b0e      	cmp	r3, #14
 80088e6:	f200 80a4 	bhi.w	8008a32 <_dtoa_r+0x442>
 80088ea:	2c00      	cmp	r4, #0
 80088ec:	f000 80a1 	beq.w	8008a32 <_dtoa_r+0x442>
 80088f0:	2f00      	cmp	r7, #0
 80088f2:	dd33      	ble.n	800895c <_dtoa_r+0x36c>
 80088f4:	4bad      	ldr	r3, [pc, #692]	@ (8008bac <_dtoa_r+0x5bc>)
 80088f6:	f007 020f 	and.w	r2, r7, #15
 80088fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088fe:	ed93 7b00 	vldr	d7, [r3]
 8008902:	05f8      	lsls	r0, r7, #23
 8008904:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008908:	ea4f 1427 	mov.w	r4, r7, asr #4
 800890c:	d516      	bpl.n	800893c <_dtoa_r+0x34c>
 800890e:	4ba8      	ldr	r3, [pc, #672]	@ (8008bb0 <_dtoa_r+0x5c0>)
 8008910:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008914:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008918:	f7f7 ff98 	bl	800084c <__aeabi_ddiv>
 800891c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008920:	f004 040f 	and.w	r4, r4, #15
 8008924:	2603      	movs	r6, #3
 8008926:	4da2      	ldr	r5, [pc, #648]	@ (8008bb0 <_dtoa_r+0x5c0>)
 8008928:	b954      	cbnz	r4, 8008940 <_dtoa_r+0x350>
 800892a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800892e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008932:	f7f7 ff8b 	bl	800084c <__aeabi_ddiv>
 8008936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800893a:	e028      	b.n	800898e <_dtoa_r+0x39e>
 800893c:	2602      	movs	r6, #2
 800893e:	e7f2      	b.n	8008926 <_dtoa_r+0x336>
 8008940:	07e1      	lsls	r1, r4, #31
 8008942:	d508      	bpl.n	8008956 <_dtoa_r+0x366>
 8008944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008948:	e9d5 2300 	ldrd	r2, r3, [r5]
 800894c:	f7f7 fe54 	bl	80005f8 <__aeabi_dmul>
 8008950:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008954:	3601      	adds	r6, #1
 8008956:	1064      	asrs	r4, r4, #1
 8008958:	3508      	adds	r5, #8
 800895a:	e7e5      	b.n	8008928 <_dtoa_r+0x338>
 800895c:	f000 80d2 	beq.w	8008b04 <_dtoa_r+0x514>
 8008960:	427c      	negs	r4, r7
 8008962:	4b92      	ldr	r3, [pc, #584]	@ (8008bac <_dtoa_r+0x5bc>)
 8008964:	4d92      	ldr	r5, [pc, #584]	@ (8008bb0 <_dtoa_r+0x5c0>)
 8008966:	f004 020f 	and.w	r2, r4, #15
 800896a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800896e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008972:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008976:	f7f7 fe3f 	bl	80005f8 <__aeabi_dmul>
 800897a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800897e:	1124      	asrs	r4, r4, #4
 8008980:	2300      	movs	r3, #0
 8008982:	2602      	movs	r6, #2
 8008984:	2c00      	cmp	r4, #0
 8008986:	f040 80b2 	bne.w	8008aee <_dtoa_r+0x4fe>
 800898a:	2b00      	cmp	r3, #0
 800898c:	d1d3      	bne.n	8008936 <_dtoa_r+0x346>
 800898e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008990:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 80b7 	beq.w	8008b08 <_dtoa_r+0x518>
 800899a:	4b86      	ldr	r3, [pc, #536]	@ (8008bb4 <_dtoa_r+0x5c4>)
 800899c:	2200      	movs	r2, #0
 800899e:	4620      	mov	r0, r4
 80089a0:	4629      	mov	r1, r5
 80089a2:	f7f8 f89b 	bl	8000adc <__aeabi_dcmplt>
 80089a6:	2800      	cmp	r0, #0
 80089a8:	f000 80ae 	beq.w	8008b08 <_dtoa_r+0x518>
 80089ac:	9b07      	ldr	r3, [sp, #28]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	f000 80aa 	beq.w	8008b08 <_dtoa_r+0x518>
 80089b4:	9b00      	ldr	r3, [sp, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	dd37      	ble.n	8008a2a <_dtoa_r+0x43a>
 80089ba:	1e7b      	subs	r3, r7, #1
 80089bc:	9304      	str	r3, [sp, #16]
 80089be:	4620      	mov	r0, r4
 80089c0:	4b7d      	ldr	r3, [pc, #500]	@ (8008bb8 <_dtoa_r+0x5c8>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	4629      	mov	r1, r5
 80089c6:	f7f7 fe17 	bl	80005f8 <__aeabi_dmul>
 80089ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ce:	9c00      	ldr	r4, [sp, #0]
 80089d0:	3601      	adds	r6, #1
 80089d2:	4630      	mov	r0, r6
 80089d4:	f7f7 fda6 	bl	8000524 <__aeabi_i2d>
 80089d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089dc:	f7f7 fe0c 	bl	80005f8 <__aeabi_dmul>
 80089e0:	4b76      	ldr	r3, [pc, #472]	@ (8008bbc <_dtoa_r+0x5cc>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	f7f7 fc52 	bl	800028c <__adddf3>
 80089e8:	4605      	mov	r5, r0
 80089ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80089ee:	2c00      	cmp	r4, #0
 80089f0:	f040 808d 	bne.w	8008b0e <_dtoa_r+0x51e>
 80089f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089f8:	4b71      	ldr	r3, [pc, #452]	@ (8008bc0 <_dtoa_r+0x5d0>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	f7f7 fc44 	bl	8000288 <__aeabi_dsub>
 8008a00:	4602      	mov	r2, r0
 8008a02:	460b      	mov	r3, r1
 8008a04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a08:	462a      	mov	r2, r5
 8008a0a:	4633      	mov	r3, r6
 8008a0c:	f7f8 f884 	bl	8000b18 <__aeabi_dcmpgt>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f040 828b 	bne.w	8008f2c <_dtoa_r+0x93c>
 8008a16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a1a:	462a      	mov	r2, r5
 8008a1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008a20:	f7f8 f85c 	bl	8000adc <__aeabi_dcmplt>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f040 8128 	bne.w	8008c7a <_dtoa_r+0x68a>
 8008a2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008a2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008a32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f2c0 815a 	blt.w	8008cee <_dtoa_r+0x6fe>
 8008a3a:	2f0e      	cmp	r7, #14
 8008a3c:	f300 8157 	bgt.w	8008cee <_dtoa_r+0x6fe>
 8008a40:	4b5a      	ldr	r3, [pc, #360]	@ (8008bac <_dtoa_r+0x5bc>)
 8008a42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008a46:	ed93 7b00 	vldr	d7, [r3]
 8008a4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	ed8d 7b00 	vstr	d7, [sp]
 8008a52:	da03      	bge.n	8008a5c <_dtoa_r+0x46c>
 8008a54:	9b07      	ldr	r3, [sp, #28]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f340 8101 	ble.w	8008c5e <_dtoa_r+0x66e>
 8008a5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a60:	4656      	mov	r6, sl
 8008a62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a66:	4620      	mov	r0, r4
 8008a68:	4629      	mov	r1, r5
 8008a6a:	f7f7 feef 	bl	800084c <__aeabi_ddiv>
 8008a6e:	f7f8 f873 	bl	8000b58 <__aeabi_d2iz>
 8008a72:	4680      	mov	r8, r0
 8008a74:	f7f7 fd56 	bl	8000524 <__aeabi_i2d>
 8008a78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a7c:	f7f7 fdbc 	bl	80005f8 <__aeabi_dmul>
 8008a80:	4602      	mov	r2, r0
 8008a82:	460b      	mov	r3, r1
 8008a84:	4620      	mov	r0, r4
 8008a86:	4629      	mov	r1, r5
 8008a88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008a8c:	f7f7 fbfc 	bl	8000288 <__aeabi_dsub>
 8008a90:	f806 4b01 	strb.w	r4, [r6], #1
 8008a94:	9d07      	ldr	r5, [sp, #28]
 8008a96:	eba6 040a 	sub.w	r4, r6, sl
 8008a9a:	42a5      	cmp	r5, r4
 8008a9c:	4602      	mov	r2, r0
 8008a9e:	460b      	mov	r3, r1
 8008aa0:	f040 8117 	bne.w	8008cd2 <_dtoa_r+0x6e2>
 8008aa4:	f7f7 fbf2 	bl	800028c <__adddf3>
 8008aa8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aac:	4604      	mov	r4, r0
 8008aae:	460d      	mov	r5, r1
 8008ab0:	f7f8 f832 	bl	8000b18 <__aeabi_dcmpgt>
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	f040 80f9 	bne.w	8008cac <_dtoa_r+0x6bc>
 8008aba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008abe:	4620      	mov	r0, r4
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	f7f8 f801 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ac6:	b118      	cbz	r0, 8008ad0 <_dtoa_r+0x4e0>
 8008ac8:	f018 0f01 	tst.w	r8, #1
 8008acc:	f040 80ee 	bne.w	8008cac <_dtoa_r+0x6bc>
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	4658      	mov	r0, fp
 8008ad4:	f000 fc90 	bl	80093f8 <_Bfree>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	7033      	strb	r3, [r6, #0]
 8008adc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008ade:	3701      	adds	r7, #1
 8008ae0:	601f      	str	r7, [r3, #0]
 8008ae2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	f000 831d 	beq.w	8009124 <_dtoa_r+0xb34>
 8008aea:	601e      	str	r6, [r3, #0]
 8008aec:	e31a      	b.n	8009124 <_dtoa_r+0xb34>
 8008aee:	07e2      	lsls	r2, r4, #31
 8008af0:	d505      	bpl.n	8008afe <_dtoa_r+0x50e>
 8008af2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008af6:	f7f7 fd7f 	bl	80005f8 <__aeabi_dmul>
 8008afa:	3601      	adds	r6, #1
 8008afc:	2301      	movs	r3, #1
 8008afe:	1064      	asrs	r4, r4, #1
 8008b00:	3508      	adds	r5, #8
 8008b02:	e73f      	b.n	8008984 <_dtoa_r+0x394>
 8008b04:	2602      	movs	r6, #2
 8008b06:	e742      	b.n	800898e <_dtoa_r+0x39e>
 8008b08:	9c07      	ldr	r4, [sp, #28]
 8008b0a:	9704      	str	r7, [sp, #16]
 8008b0c:	e761      	b.n	80089d2 <_dtoa_r+0x3e2>
 8008b0e:	4b27      	ldr	r3, [pc, #156]	@ (8008bac <_dtoa_r+0x5bc>)
 8008b10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008b12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008b16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008b1a:	4454      	add	r4, sl
 8008b1c:	2900      	cmp	r1, #0
 8008b1e:	d053      	beq.n	8008bc8 <_dtoa_r+0x5d8>
 8008b20:	4928      	ldr	r1, [pc, #160]	@ (8008bc4 <_dtoa_r+0x5d4>)
 8008b22:	2000      	movs	r0, #0
 8008b24:	f7f7 fe92 	bl	800084c <__aeabi_ddiv>
 8008b28:	4633      	mov	r3, r6
 8008b2a:	462a      	mov	r2, r5
 8008b2c:	f7f7 fbac 	bl	8000288 <__aeabi_dsub>
 8008b30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b34:	4656      	mov	r6, sl
 8008b36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b3a:	f7f8 f80d 	bl	8000b58 <__aeabi_d2iz>
 8008b3e:	4605      	mov	r5, r0
 8008b40:	f7f7 fcf0 	bl	8000524 <__aeabi_i2d>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b4c:	f7f7 fb9c 	bl	8000288 <__aeabi_dsub>
 8008b50:	3530      	adds	r5, #48	@ 0x30
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b5a:	f806 5b01 	strb.w	r5, [r6], #1
 8008b5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b62:	f7f7 ffbb 	bl	8000adc <__aeabi_dcmplt>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d171      	bne.n	8008c4e <_dtoa_r+0x65e>
 8008b6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b6e:	4911      	ldr	r1, [pc, #68]	@ (8008bb4 <_dtoa_r+0x5c4>)
 8008b70:	2000      	movs	r0, #0
 8008b72:	f7f7 fb89 	bl	8000288 <__aeabi_dsub>
 8008b76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b7a:	f7f7 ffaf 	bl	8000adc <__aeabi_dcmplt>
 8008b7e:	2800      	cmp	r0, #0
 8008b80:	f040 8095 	bne.w	8008cae <_dtoa_r+0x6be>
 8008b84:	42a6      	cmp	r6, r4
 8008b86:	f43f af50 	beq.w	8008a2a <_dtoa_r+0x43a>
 8008b8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008bb8 <_dtoa_r+0x5c8>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	f7f7 fd31 	bl	80005f8 <__aeabi_dmul>
 8008b96:	4b08      	ldr	r3, [pc, #32]	@ (8008bb8 <_dtoa_r+0x5c8>)
 8008b98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ba2:	f7f7 fd29 	bl	80005f8 <__aeabi_dmul>
 8008ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008baa:	e7c4      	b.n	8008b36 <_dtoa_r+0x546>
 8008bac:	0800b1c0 	.word	0x0800b1c0
 8008bb0:	0800b198 	.word	0x0800b198
 8008bb4:	3ff00000 	.word	0x3ff00000
 8008bb8:	40240000 	.word	0x40240000
 8008bbc:	401c0000 	.word	0x401c0000
 8008bc0:	40140000 	.word	0x40140000
 8008bc4:	3fe00000 	.word	0x3fe00000
 8008bc8:	4631      	mov	r1, r6
 8008bca:	4628      	mov	r0, r5
 8008bcc:	f7f7 fd14 	bl	80005f8 <__aeabi_dmul>
 8008bd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008bd4:	9415      	str	r4, [sp, #84]	@ 0x54
 8008bd6:	4656      	mov	r6, sl
 8008bd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bdc:	f7f7 ffbc 	bl	8000b58 <__aeabi_d2iz>
 8008be0:	4605      	mov	r5, r0
 8008be2:	f7f7 fc9f 	bl	8000524 <__aeabi_i2d>
 8008be6:	4602      	mov	r2, r0
 8008be8:	460b      	mov	r3, r1
 8008bea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bee:	f7f7 fb4b 	bl	8000288 <__aeabi_dsub>
 8008bf2:	3530      	adds	r5, #48	@ 0x30
 8008bf4:	f806 5b01 	strb.w	r5, [r6], #1
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	42a6      	cmp	r6, r4
 8008bfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c02:	f04f 0200 	mov.w	r2, #0
 8008c06:	d124      	bne.n	8008c52 <_dtoa_r+0x662>
 8008c08:	4bac      	ldr	r3, [pc, #688]	@ (8008ebc <_dtoa_r+0x8cc>)
 8008c0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008c0e:	f7f7 fb3d 	bl	800028c <__adddf3>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c1a:	f7f7 ff7d 	bl	8000b18 <__aeabi_dcmpgt>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	d145      	bne.n	8008cae <_dtoa_r+0x6be>
 8008c22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008c26:	49a5      	ldr	r1, [pc, #660]	@ (8008ebc <_dtoa_r+0x8cc>)
 8008c28:	2000      	movs	r0, #0
 8008c2a:	f7f7 fb2d 	bl	8000288 <__aeabi_dsub>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c36:	f7f7 ff51 	bl	8000adc <__aeabi_dcmplt>
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	f43f aef5 	beq.w	8008a2a <_dtoa_r+0x43a>
 8008c40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008c42:	1e73      	subs	r3, r6, #1
 8008c44:	9315      	str	r3, [sp, #84]	@ 0x54
 8008c46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c4a:	2b30      	cmp	r3, #48	@ 0x30
 8008c4c:	d0f8      	beq.n	8008c40 <_dtoa_r+0x650>
 8008c4e:	9f04      	ldr	r7, [sp, #16]
 8008c50:	e73e      	b.n	8008ad0 <_dtoa_r+0x4e0>
 8008c52:	4b9b      	ldr	r3, [pc, #620]	@ (8008ec0 <_dtoa_r+0x8d0>)
 8008c54:	f7f7 fcd0 	bl	80005f8 <__aeabi_dmul>
 8008c58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c5c:	e7bc      	b.n	8008bd8 <_dtoa_r+0x5e8>
 8008c5e:	d10c      	bne.n	8008c7a <_dtoa_r+0x68a>
 8008c60:	4b98      	ldr	r3, [pc, #608]	@ (8008ec4 <_dtoa_r+0x8d4>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c68:	f7f7 fcc6 	bl	80005f8 <__aeabi_dmul>
 8008c6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c70:	f7f7 ff48 	bl	8000b04 <__aeabi_dcmpge>
 8008c74:	2800      	cmp	r0, #0
 8008c76:	f000 8157 	beq.w	8008f28 <_dtoa_r+0x938>
 8008c7a:	2400      	movs	r4, #0
 8008c7c:	4625      	mov	r5, r4
 8008c7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c80:	43db      	mvns	r3, r3
 8008c82:	9304      	str	r3, [sp, #16]
 8008c84:	4656      	mov	r6, sl
 8008c86:	2700      	movs	r7, #0
 8008c88:	4621      	mov	r1, r4
 8008c8a:	4658      	mov	r0, fp
 8008c8c:	f000 fbb4 	bl	80093f8 <_Bfree>
 8008c90:	2d00      	cmp	r5, #0
 8008c92:	d0dc      	beq.n	8008c4e <_dtoa_r+0x65e>
 8008c94:	b12f      	cbz	r7, 8008ca2 <_dtoa_r+0x6b2>
 8008c96:	42af      	cmp	r7, r5
 8008c98:	d003      	beq.n	8008ca2 <_dtoa_r+0x6b2>
 8008c9a:	4639      	mov	r1, r7
 8008c9c:	4658      	mov	r0, fp
 8008c9e:	f000 fbab 	bl	80093f8 <_Bfree>
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	4658      	mov	r0, fp
 8008ca6:	f000 fba7 	bl	80093f8 <_Bfree>
 8008caa:	e7d0      	b.n	8008c4e <_dtoa_r+0x65e>
 8008cac:	9704      	str	r7, [sp, #16]
 8008cae:	4633      	mov	r3, r6
 8008cb0:	461e      	mov	r6, r3
 8008cb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cb6:	2a39      	cmp	r2, #57	@ 0x39
 8008cb8:	d107      	bne.n	8008cca <_dtoa_r+0x6da>
 8008cba:	459a      	cmp	sl, r3
 8008cbc:	d1f8      	bne.n	8008cb0 <_dtoa_r+0x6c0>
 8008cbe:	9a04      	ldr	r2, [sp, #16]
 8008cc0:	3201      	adds	r2, #1
 8008cc2:	9204      	str	r2, [sp, #16]
 8008cc4:	2230      	movs	r2, #48	@ 0x30
 8008cc6:	f88a 2000 	strb.w	r2, [sl]
 8008cca:	781a      	ldrb	r2, [r3, #0]
 8008ccc:	3201      	adds	r2, #1
 8008cce:	701a      	strb	r2, [r3, #0]
 8008cd0:	e7bd      	b.n	8008c4e <_dtoa_r+0x65e>
 8008cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8008ec0 <_dtoa_r+0x8d0>)
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f7f7 fc8f 	bl	80005f8 <__aeabi_dmul>
 8008cda:	2200      	movs	r2, #0
 8008cdc:	2300      	movs	r3, #0
 8008cde:	4604      	mov	r4, r0
 8008ce0:	460d      	mov	r5, r1
 8008ce2:	f7f7 fef1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	f43f aebb 	beq.w	8008a62 <_dtoa_r+0x472>
 8008cec:	e6f0      	b.n	8008ad0 <_dtoa_r+0x4e0>
 8008cee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008cf0:	2a00      	cmp	r2, #0
 8008cf2:	f000 80db 	beq.w	8008eac <_dtoa_r+0x8bc>
 8008cf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008cf8:	2a01      	cmp	r2, #1
 8008cfa:	f300 80bf 	bgt.w	8008e7c <_dtoa_r+0x88c>
 8008cfe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008d00:	2a00      	cmp	r2, #0
 8008d02:	f000 80b7 	beq.w	8008e74 <_dtoa_r+0x884>
 8008d06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008d0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d0c:	4646      	mov	r6, r8
 8008d0e:	9a08      	ldr	r2, [sp, #32]
 8008d10:	2101      	movs	r1, #1
 8008d12:	441a      	add	r2, r3
 8008d14:	4658      	mov	r0, fp
 8008d16:	4498      	add	r8, r3
 8008d18:	9208      	str	r2, [sp, #32]
 8008d1a:	f000 fc21 	bl	8009560 <__i2b>
 8008d1e:	4605      	mov	r5, r0
 8008d20:	b15e      	cbz	r6, 8008d3a <_dtoa_r+0x74a>
 8008d22:	9b08      	ldr	r3, [sp, #32]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	dd08      	ble.n	8008d3a <_dtoa_r+0x74a>
 8008d28:	42b3      	cmp	r3, r6
 8008d2a:	9a08      	ldr	r2, [sp, #32]
 8008d2c:	bfa8      	it	ge
 8008d2e:	4633      	movge	r3, r6
 8008d30:	eba8 0803 	sub.w	r8, r8, r3
 8008d34:	1af6      	subs	r6, r6, r3
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	9308      	str	r3, [sp, #32]
 8008d3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d3c:	b1f3      	cbz	r3, 8008d7c <_dtoa_r+0x78c>
 8008d3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f000 80b7 	beq.w	8008eb4 <_dtoa_r+0x8c4>
 8008d46:	b18c      	cbz	r4, 8008d6c <_dtoa_r+0x77c>
 8008d48:	4629      	mov	r1, r5
 8008d4a:	4622      	mov	r2, r4
 8008d4c:	4658      	mov	r0, fp
 8008d4e:	f000 fcc7 	bl	80096e0 <__pow5mult>
 8008d52:	464a      	mov	r2, r9
 8008d54:	4601      	mov	r1, r0
 8008d56:	4605      	mov	r5, r0
 8008d58:	4658      	mov	r0, fp
 8008d5a:	f000 fc17 	bl	800958c <__multiply>
 8008d5e:	4649      	mov	r1, r9
 8008d60:	9004      	str	r0, [sp, #16]
 8008d62:	4658      	mov	r0, fp
 8008d64:	f000 fb48 	bl	80093f8 <_Bfree>
 8008d68:	9b04      	ldr	r3, [sp, #16]
 8008d6a:	4699      	mov	r9, r3
 8008d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d6e:	1b1a      	subs	r2, r3, r4
 8008d70:	d004      	beq.n	8008d7c <_dtoa_r+0x78c>
 8008d72:	4649      	mov	r1, r9
 8008d74:	4658      	mov	r0, fp
 8008d76:	f000 fcb3 	bl	80096e0 <__pow5mult>
 8008d7a:	4681      	mov	r9, r0
 8008d7c:	2101      	movs	r1, #1
 8008d7e:	4658      	mov	r0, fp
 8008d80:	f000 fbee 	bl	8009560 <__i2b>
 8008d84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d86:	4604      	mov	r4, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f000 81cf 	beq.w	800912c <_dtoa_r+0xb3c>
 8008d8e:	461a      	mov	r2, r3
 8008d90:	4601      	mov	r1, r0
 8008d92:	4658      	mov	r0, fp
 8008d94:	f000 fca4 	bl	80096e0 <__pow5mult>
 8008d98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d9a:	2b01      	cmp	r3, #1
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	f300 8095 	bgt.w	8008ecc <_dtoa_r+0x8dc>
 8008da2:	9b02      	ldr	r3, [sp, #8]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f040 8087 	bne.w	8008eb8 <_dtoa_r+0x8c8>
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f040 8089 	bne.w	8008ec8 <_dtoa_r+0x8d8>
 8008db6:	9b03      	ldr	r3, [sp, #12]
 8008db8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008dbc:	0d1b      	lsrs	r3, r3, #20
 8008dbe:	051b      	lsls	r3, r3, #20
 8008dc0:	b12b      	cbz	r3, 8008dce <_dtoa_r+0x7de>
 8008dc2:	9b08      	ldr	r3, [sp, #32]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	9308      	str	r3, [sp, #32]
 8008dc8:	f108 0801 	add.w	r8, r8, #1
 8008dcc:	2301      	movs	r3, #1
 8008dce:	930a      	str	r3, [sp, #40]	@ 0x28
 8008dd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	f000 81b0 	beq.w	8009138 <_dtoa_r+0xb48>
 8008dd8:	6923      	ldr	r3, [r4, #16]
 8008dda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008dde:	6918      	ldr	r0, [r3, #16]
 8008de0:	f000 fb72 	bl	80094c8 <__hi0bits>
 8008de4:	f1c0 0020 	rsb	r0, r0, #32
 8008de8:	9b08      	ldr	r3, [sp, #32]
 8008dea:	4418      	add	r0, r3
 8008dec:	f010 001f 	ands.w	r0, r0, #31
 8008df0:	d077      	beq.n	8008ee2 <_dtoa_r+0x8f2>
 8008df2:	f1c0 0320 	rsb	r3, r0, #32
 8008df6:	2b04      	cmp	r3, #4
 8008df8:	dd6b      	ble.n	8008ed2 <_dtoa_r+0x8e2>
 8008dfa:	9b08      	ldr	r3, [sp, #32]
 8008dfc:	f1c0 001c 	rsb	r0, r0, #28
 8008e00:	4403      	add	r3, r0
 8008e02:	4480      	add	r8, r0
 8008e04:	4406      	add	r6, r0
 8008e06:	9308      	str	r3, [sp, #32]
 8008e08:	f1b8 0f00 	cmp.w	r8, #0
 8008e0c:	dd05      	ble.n	8008e1a <_dtoa_r+0x82a>
 8008e0e:	4649      	mov	r1, r9
 8008e10:	4642      	mov	r2, r8
 8008e12:	4658      	mov	r0, fp
 8008e14:	f000 fcbe 	bl	8009794 <__lshift>
 8008e18:	4681      	mov	r9, r0
 8008e1a:	9b08      	ldr	r3, [sp, #32]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	dd05      	ble.n	8008e2c <_dtoa_r+0x83c>
 8008e20:	4621      	mov	r1, r4
 8008e22:	461a      	mov	r2, r3
 8008e24:	4658      	mov	r0, fp
 8008e26:	f000 fcb5 	bl	8009794 <__lshift>
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d059      	beq.n	8008ee6 <_dtoa_r+0x8f6>
 8008e32:	4621      	mov	r1, r4
 8008e34:	4648      	mov	r0, r9
 8008e36:	f000 fd19 	bl	800986c <__mcmp>
 8008e3a:	2800      	cmp	r0, #0
 8008e3c:	da53      	bge.n	8008ee6 <_dtoa_r+0x8f6>
 8008e3e:	1e7b      	subs	r3, r7, #1
 8008e40:	9304      	str	r3, [sp, #16]
 8008e42:	4649      	mov	r1, r9
 8008e44:	2300      	movs	r3, #0
 8008e46:	220a      	movs	r2, #10
 8008e48:	4658      	mov	r0, fp
 8008e4a:	f000 faf7 	bl	800943c <__multadd>
 8008e4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e50:	4681      	mov	r9, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 8172 	beq.w	800913c <_dtoa_r+0xb4c>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	4629      	mov	r1, r5
 8008e5c:	220a      	movs	r2, #10
 8008e5e:	4658      	mov	r0, fp
 8008e60:	f000 faec 	bl	800943c <__multadd>
 8008e64:	9b00      	ldr	r3, [sp, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	4605      	mov	r5, r0
 8008e6a:	dc67      	bgt.n	8008f3c <_dtoa_r+0x94c>
 8008e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e6e:	2b02      	cmp	r3, #2
 8008e70:	dc41      	bgt.n	8008ef6 <_dtoa_r+0x906>
 8008e72:	e063      	b.n	8008f3c <_dtoa_r+0x94c>
 8008e74:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008e76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008e7a:	e746      	b.n	8008d0a <_dtoa_r+0x71a>
 8008e7c:	9b07      	ldr	r3, [sp, #28]
 8008e7e:	1e5c      	subs	r4, r3, #1
 8008e80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e82:	42a3      	cmp	r3, r4
 8008e84:	bfbf      	itttt	lt
 8008e86:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008e88:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008e8a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008e8c:	1ae3      	sublt	r3, r4, r3
 8008e8e:	bfb4      	ite	lt
 8008e90:	18d2      	addlt	r2, r2, r3
 8008e92:	1b1c      	subge	r4, r3, r4
 8008e94:	9b07      	ldr	r3, [sp, #28]
 8008e96:	bfbc      	itt	lt
 8008e98:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008e9a:	2400      	movlt	r4, #0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	bfb5      	itete	lt
 8008ea0:	eba8 0603 	sublt.w	r6, r8, r3
 8008ea4:	9b07      	ldrge	r3, [sp, #28]
 8008ea6:	2300      	movlt	r3, #0
 8008ea8:	4646      	movge	r6, r8
 8008eaa:	e730      	b.n	8008d0e <_dtoa_r+0x71e>
 8008eac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008eae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008eb0:	4646      	mov	r6, r8
 8008eb2:	e735      	b.n	8008d20 <_dtoa_r+0x730>
 8008eb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008eb6:	e75c      	b.n	8008d72 <_dtoa_r+0x782>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	e788      	b.n	8008dce <_dtoa_r+0x7de>
 8008ebc:	3fe00000 	.word	0x3fe00000
 8008ec0:	40240000 	.word	0x40240000
 8008ec4:	40140000 	.word	0x40140000
 8008ec8:	9b02      	ldr	r3, [sp, #8]
 8008eca:	e780      	b.n	8008dce <_dtoa_r+0x7de>
 8008ecc:	2300      	movs	r3, #0
 8008ece:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ed0:	e782      	b.n	8008dd8 <_dtoa_r+0x7e8>
 8008ed2:	d099      	beq.n	8008e08 <_dtoa_r+0x818>
 8008ed4:	9a08      	ldr	r2, [sp, #32]
 8008ed6:	331c      	adds	r3, #28
 8008ed8:	441a      	add	r2, r3
 8008eda:	4498      	add	r8, r3
 8008edc:	441e      	add	r6, r3
 8008ede:	9208      	str	r2, [sp, #32]
 8008ee0:	e792      	b.n	8008e08 <_dtoa_r+0x818>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	e7f6      	b.n	8008ed4 <_dtoa_r+0x8e4>
 8008ee6:	9b07      	ldr	r3, [sp, #28]
 8008ee8:	9704      	str	r7, [sp, #16]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	dc20      	bgt.n	8008f30 <_dtoa_r+0x940>
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ef2:	2b02      	cmp	r3, #2
 8008ef4:	dd1e      	ble.n	8008f34 <_dtoa_r+0x944>
 8008ef6:	9b00      	ldr	r3, [sp, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	f47f aec0 	bne.w	8008c7e <_dtoa_r+0x68e>
 8008efe:	4621      	mov	r1, r4
 8008f00:	2205      	movs	r2, #5
 8008f02:	4658      	mov	r0, fp
 8008f04:	f000 fa9a 	bl	800943c <__multadd>
 8008f08:	4601      	mov	r1, r0
 8008f0a:	4604      	mov	r4, r0
 8008f0c:	4648      	mov	r0, r9
 8008f0e:	f000 fcad 	bl	800986c <__mcmp>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	f77f aeb3 	ble.w	8008c7e <_dtoa_r+0x68e>
 8008f18:	4656      	mov	r6, sl
 8008f1a:	2331      	movs	r3, #49	@ 0x31
 8008f1c:	f806 3b01 	strb.w	r3, [r6], #1
 8008f20:	9b04      	ldr	r3, [sp, #16]
 8008f22:	3301      	adds	r3, #1
 8008f24:	9304      	str	r3, [sp, #16]
 8008f26:	e6ae      	b.n	8008c86 <_dtoa_r+0x696>
 8008f28:	9c07      	ldr	r4, [sp, #28]
 8008f2a:	9704      	str	r7, [sp, #16]
 8008f2c:	4625      	mov	r5, r4
 8008f2e:	e7f3      	b.n	8008f18 <_dtoa_r+0x928>
 8008f30:	9b07      	ldr	r3, [sp, #28]
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 8104 	beq.w	8009144 <_dtoa_r+0xb54>
 8008f3c:	2e00      	cmp	r6, #0
 8008f3e:	dd05      	ble.n	8008f4c <_dtoa_r+0x95c>
 8008f40:	4629      	mov	r1, r5
 8008f42:	4632      	mov	r2, r6
 8008f44:	4658      	mov	r0, fp
 8008f46:	f000 fc25 	bl	8009794 <__lshift>
 8008f4a:	4605      	mov	r5, r0
 8008f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d05a      	beq.n	8009008 <_dtoa_r+0xa18>
 8008f52:	6869      	ldr	r1, [r5, #4]
 8008f54:	4658      	mov	r0, fp
 8008f56:	f000 fa0f 	bl	8009378 <_Balloc>
 8008f5a:	4606      	mov	r6, r0
 8008f5c:	b928      	cbnz	r0, 8008f6a <_dtoa_r+0x97a>
 8008f5e:	4b84      	ldr	r3, [pc, #528]	@ (8009170 <_dtoa_r+0xb80>)
 8008f60:	4602      	mov	r2, r0
 8008f62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008f66:	f7ff bb5a 	b.w	800861e <_dtoa_r+0x2e>
 8008f6a:	692a      	ldr	r2, [r5, #16]
 8008f6c:	3202      	adds	r2, #2
 8008f6e:	0092      	lsls	r2, r2, #2
 8008f70:	f105 010c 	add.w	r1, r5, #12
 8008f74:	300c      	adds	r0, #12
 8008f76:	f000 ffaf 	bl	8009ed8 <memcpy>
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4658      	mov	r0, fp
 8008f80:	f000 fc08 	bl	8009794 <__lshift>
 8008f84:	f10a 0301 	add.w	r3, sl, #1
 8008f88:	9307      	str	r3, [sp, #28]
 8008f8a:	9b00      	ldr	r3, [sp, #0]
 8008f8c:	4453      	add	r3, sl
 8008f8e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f90:	9b02      	ldr	r3, [sp, #8]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	462f      	mov	r7, r5
 8008f98:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f9a:	4605      	mov	r5, r0
 8008f9c:	9b07      	ldr	r3, [sp, #28]
 8008f9e:	4621      	mov	r1, r4
 8008fa0:	3b01      	subs	r3, #1
 8008fa2:	4648      	mov	r0, r9
 8008fa4:	9300      	str	r3, [sp, #0]
 8008fa6:	f7ff fa98 	bl	80084da <quorem>
 8008faa:	4639      	mov	r1, r7
 8008fac:	9002      	str	r0, [sp, #8]
 8008fae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008fb2:	4648      	mov	r0, r9
 8008fb4:	f000 fc5a 	bl	800986c <__mcmp>
 8008fb8:	462a      	mov	r2, r5
 8008fba:	9008      	str	r0, [sp, #32]
 8008fbc:	4621      	mov	r1, r4
 8008fbe:	4658      	mov	r0, fp
 8008fc0:	f000 fc70 	bl	80098a4 <__mdiff>
 8008fc4:	68c2      	ldr	r2, [r0, #12]
 8008fc6:	4606      	mov	r6, r0
 8008fc8:	bb02      	cbnz	r2, 800900c <_dtoa_r+0xa1c>
 8008fca:	4601      	mov	r1, r0
 8008fcc:	4648      	mov	r0, r9
 8008fce:	f000 fc4d 	bl	800986c <__mcmp>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	4631      	mov	r1, r6
 8008fd6:	4658      	mov	r0, fp
 8008fd8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fda:	f000 fa0d 	bl	80093f8 <_Bfree>
 8008fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fe0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008fe2:	9e07      	ldr	r6, [sp, #28]
 8008fe4:	ea43 0102 	orr.w	r1, r3, r2
 8008fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fea:	4319      	orrs	r1, r3
 8008fec:	d110      	bne.n	8009010 <_dtoa_r+0xa20>
 8008fee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ff2:	d029      	beq.n	8009048 <_dtoa_r+0xa58>
 8008ff4:	9b08      	ldr	r3, [sp, #32]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	dd02      	ble.n	8009000 <_dtoa_r+0xa10>
 8008ffa:	9b02      	ldr	r3, [sp, #8]
 8008ffc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009000:	9b00      	ldr	r3, [sp, #0]
 8009002:	f883 8000 	strb.w	r8, [r3]
 8009006:	e63f      	b.n	8008c88 <_dtoa_r+0x698>
 8009008:	4628      	mov	r0, r5
 800900a:	e7bb      	b.n	8008f84 <_dtoa_r+0x994>
 800900c:	2201      	movs	r2, #1
 800900e:	e7e1      	b.n	8008fd4 <_dtoa_r+0x9e4>
 8009010:	9b08      	ldr	r3, [sp, #32]
 8009012:	2b00      	cmp	r3, #0
 8009014:	db04      	blt.n	8009020 <_dtoa_r+0xa30>
 8009016:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009018:	430b      	orrs	r3, r1
 800901a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800901c:	430b      	orrs	r3, r1
 800901e:	d120      	bne.n	8009062 <_dtoa_r+0xa72>
 8009020:	2a00      	cmp	r2, #0
 8009022:	dded      	ble.n	8009000 <_dtoa_r+0xa10>
 8009024:	4649      	mov	r1, r9
 8009026:	2201      	movs	r2, #1
 8009028:	4658      	mov	r0, fp
 800902a:	f000 fbb3 	bl	8009794 <__lshift>
 800902e:	4621      	mov	r1, r4
 8009030:	4681      	mov	r9, r0
 8009032:	f000 fc1b 	bl	800986c <__mcmp>
 8009036:	2800      	cmp	r0, #0
 8009038:	dc03      	bgt.n	8009042 <_dtoa_r+0xa52>
 800903a:	d1e1      	bne.n	8009000 <_dtoa_r+0xa10>
 800903c:	f018 0f01 	tst.w	r8, #1
 8009040:	d0de      	beq.n	8009000 <_dtoa_r+0xa10>
 8009042:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009046:	d1d8      	bne.n	8008ffa <_dtoa_r+0xa0a>
 8009048:	9a00      	ldr	r2, [sp, #0]
 800904a:	2339      	movs	r3, #57	@ 0x39
 800904c:	7013      	strb	r3, [r2, #0]
 800904e:	4633      	mov	r3, r6
 8009050:	461e      	mov	r6, r3
 8009052:	3b01      	subs	r3, #1
 8009054:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009058:	2a39      	cmp	r2, #57	@ 0x39
 800905a:	d052      	beq.n	8009102 <_dtoa_r+0xb12>
 800905c:	3201      	adds	r2, #1
 800905e:	701a      	strb	r2, [r3, #0]
 8009060:	e612      	b.n	8008c88 <_dtoa_r+0x698>
 8009062:	2a00      	cmp	r2, #0
 8009064:	dd07      	ble.n	8009076 <_dtoa_r+0xa86>
 8009066:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800906a:	d0ed      	beq.n	8009048 <_dtoa_r+0xa58>
 800906c:	9a00      	ldr	r2, [sp, #0]
 800906e:	f108 0301 	add.w	r3, r8, #1
 8009072:	7013      	strb	r3, [r2, #0]
 8009074:	e608      	b.n	8008c88 <_dtoa_r+0x698>
 8009076:	9b07      	ldr	r3, [sp, #28]
 8009078:	9a07      	ldr	r2, [sp, #28]
 800907a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800907e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009080:	4293      	cmp	r3, r2
 8009082:	d028      	beq.n	80090d6 <_dtoa_r+0xae6>
 8009084:	4649      	mov	r1, r9
 8009086:	2300      	movs	r3, #0
 8009088:	220a      	movs	r2, #10
 800908a:	4658      	mov	r0, fp
 800908c:	f000 f9d6 	bl	800943c <__multadd>
 8009090:	42af      	cmp	r7, r5
 8009092:	4681      	mov	r9, r0
 8009094:	f04f 0300 	mov.w	r3, #0
 8009098:	f04f 020a 	mov.w	r2, #10
 800909c:	4639      	mov	r1, r7
 800909e:	4658      	mov	r0, fp
 80090a0:	d107      	bne.n	80090b2 <_dtoa_r+0xac2>
 80090a2:	f000 f9cb 	bl	800943c <__multadd>
 80090a6:	4607      	mov	r7, r0
 80090a8:	4605      	mov	r5, r0
 80090aa:	9b07      	ldr	r3, [sp, #28]
 80090ac:	3301      	adds	r3, #1
 80090ae:	9307      	str	r3, [sp, #28]
 80090b0:	e774      	b.n	8008f9c <_dtoa_r+0x9ac>
 80090b2:	f000 f9c3 	bl	800943c <__multadd>
 80090b6:	4629      	mov	r1, r5
 80090b8:	4607      	mov	r7, r0
 80090ba:	2300      	movs	r3, #0
 80090bc:	220a      	movs	r2, #10
 80090be:	4658      	mov	r0, fp
 80090c0:	f000 f9bc 	bl	800943c <__multadd>
 80090c4:	4605      	mov	r5, r0
 80090c6:	e7f0      	b.n	80090aa <_dtoa_r+0xaba>
 80090c8:	9b00      	ldr	r3, [sp, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	bfcc      	ite	gt
 80090ce:	461e      	movgt	r6, r3
 80090d0:	2601      	movle	r6, #1
 80090d2:	4456      	add	r6, sl
 80090d4:	2700      	movs	r7, #0
 80090d6:	4649      	mov	r1, r9
 80090d8:	2201      	movs	r2, #1
 80090da:	4658      	mov	r0, fp
 80090dc:	f000 fb5a 	bl	8009794 <__lshift>
 80090e0:	4621      	mov	r1, r4
 80090e2:	4681      	mov	r9, r0
 80090e4:	f000 fbc2 	bl	800986c <__mcmp>
 80090e8:	2800      	cmp	r0, #0
 80090ea:	dcb0      	bgt.n	800904e <_dtoa_r+0xa5e>
 80090ec:	d102      	bne.n	80090f4 <_dtoa_r+0xb04>
 80090ee:	f018 0f01 	tst.w	r8, #1
 80090f2:	d1ac      	bne.n	800904e <_dtoa_r+0xa5e>
 80090f4:	4633      	mov	r3, r6
 80090f6:	461e      	mov	r6, r3
 80090f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090fc:	2a30      	cmp	r2, #48	@ 0x30
 80090fe:	d0fa      	beq.n	80090f6 <_dtoa_r+0xb06>
 8009100:	e5c2      	b.n	8008c88 <_dtoa_r+0x698>
 8009102:	459a      	cmp	sl, r3
 8009104:	d1a4      	bne.n	8009050 <_dtoa_r+0xa60>
 8009106:	9b04      	ldr	r3, [sp, #16]
 8009108:	3301      	adds	r3, #1
 800910a:	9304      	str	r3, [sp, #16]
 800910c:	2331      	movs	r3, #49	@ 0x31
 800910e:	f88a 3000 	strb.w	r3, [sl]
 8009112:	e5b9      	b.n	8008c88 <_dtoa_r+0x698>
 8009114:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009116:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009174 <_dtoa_r+0xb84>
 800911a:	b11b      	cbz	r3, 8009124 <_dtoa_r+0xb34>
 800911c:	f10a 0308 	add.w	r3, sl, #8
 8009120:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009122:	6013      	str	r3, [r2, #0]
 8009124:	4650      	mov	r0, sl
 8009126:	b019      	add	sp, #100	@ 0x64
 8009128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800912e:	2b01      	cmp	r3, #1
 8009130:	f77f ae37 	ble.w	8008da2 <_dtoa_r+0x7b2>
 8009134:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009136:	930a      	str	r3, [sp, #40]	@ 0x28
 8009138:	2001      	movs	r0, #1
 800913a:	e655      	b.n	8008de8 <_dtoa_r+0x7f8>
 800913c:	9b00      	ldr	r3, [sp, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	f77f aed6 	ble.w	8008ef0 <_dtoa_r+0x900>
 8009144:	4656      	mov	r6, sl
 8009146:	4621      	mov	r1, r4
 8009148:	4648      	mov	r0, r9
 800914a:	f7ff f9c6 	bl	80084da <quorem>
 800914e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009152:	f806 8b01 	strb.w	r8, [r6], #1
 8009156:	9b00      	ldr	r3, [sp, #0]
 8009158:	eba6 020a 	sub.w	r2, r6, sl
 800915c:	4293      	cmp	r3, r2
 800915e:	ddb3      	ble.n	80090c8 <_dtoa_r+0xad8>
 8009160:	4649      	mov	r1, r9
 8009162:	2300      	movs	r3, #0
 8009164:	220a      	movs	r2, #10
 8009166:	4658      	mov	r0, fp
 8009168:	f000 f968 	bl	800943c <__multadd>
 800916c:	4681      	mov	r9, r0
 800916e:	e7ea      	b.n	8009146 <_dtoa_r+0xb56>
 8009170:	0800b120 	.word	0x0800b120
 8009174:	0800b0a4 	.word	0x0800b0a4

08009178 <_free_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4605      	mov	r5, r0
 800917c:	2900      	cmp	r1, #0
 800917e:	d041      	beq.n	8009204 <_free_r+0x8c>
 8009180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009184:	1f0c      	subs	r4, r1, #4
 8009186:	2b00      	cmp	r3, #0
 8009188:	bfb8      	it	lt
 800918a:	18e4      	addlt	r4, r4, r3
 800918c:	f000 f8e8 	bl	8009360 <__malloc_lock>
 8009190:	4a1d      	ldr	r2, [pc, #116]	@ (8009208 <_free_r+0x90>)
 8009192:	6813      	ldr	r3, [r2, #0]
 8009194:	b933      	cbnz	r3, 80091a4 <_free_r+0x2c>
 8009196:	6063      	str	r3, [r4, #4]
 8009198:	6014      	str	r4, [r2, #0]
 800919a:	4628      	mov	r0, r5
 800919c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091a0:	f000 b8e4 	b.w	800936c <__malloc_unlock>
 80091a4:	42a3      	cmp	r3, r4
 80091a6:	d908      	bls.n	80091ba <_free_r+0x42>
 80091a8:	6820      	ldr	r0, [r4, #0]
 80091aa:	1821      	adds	r1, r4, r0
 80091ac:	428b      	cmp	r3, r1
 80091ae:	bf01      	itttt	eq
 80091b0:	6819      	ldreq	r1, [r3, #0]
 80091b2:	685b      	ldreq	r3, [r3, #4]
 80091b4:	1809      	addeq	r1, r1, r0
 80091b6:	6021      	streq	r1, [r4, #0]
 80091b8:	e7ed      	b.n	8009196 <_free_r+0x1e>
 80091ba:	461a      	mov	r2, r3
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	b10b      	cbz	r3, 80091c4 <_free_r+0x4c>
 80091c0:	42a3      	cmp	r3, r4
 80091c2:	d9fa      	bls.n	80091ba <_free_r+0x42>
 80091c4:	6811      	ldr	r1, [r2, #0]
 80091c6:	1850      	adds	r0, r2, r1
 80091c8:	42a0      	cmp	r0, r4
 80091ca:	d10b      	bne.n	80091e4 <_free_r+0x6c>
 80091cc:	6820      	ldr	r0, [r4, #0]
 80091ce:	4401      	add	r1, r0
 80091d0:	1850      	adds	r0, r2, r1
 80091d2:	4283      	cmp	r3, r0
 80091d4:	6011      	str	r1, [r2, #0]
 80091d6:	d1e0      	bne.n	800919a <_free_r+0x22>
 80091d8:	6818      	ldr	r0, [r3, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	6053      	str	r3, [r2, #4]
 80091de:	4408      	add	r0, r1
 80091e0:	6010      	str	r0, [r2, #0]
 80091e2:	e7da      	b.n	800919a <_free_r+0x22>
 80091e4:	d902      	bls.n	80091ec <_free_r+0x74>
 80091e6:	230c      	movs	r3, #12
 80091e8:	602b      	str	r3, [r5, #0]
 80091ea:	e7d6      	b.n	800919a <_free_r+0x22>
 80091ec:	6820      	ldr	r0, [r4, #0]
 80091ee:	1821      	adds	r1, r4, r0
 80091f0:	428b      	cmp	r3, r1
 80091f2:	bf04      	itt	eq
 80091f4:	6819      	ldreq	r1, [r3, #0]
 80091f6:	685b      	ldreq	r3, [r3, #4]
 80091f8:	6063      	str	r3, [r4, #4]
 80091fa:	bf04      	itt	eq
 80091fc:	1809      	addeq	r1, r1, r0
 80091fe:	6021      	streq	r1, [r4, #0]
 8009200:	6054      	str	r4, [r2, #4]
 8009202:	e7ca      	b.n	800919a <_free_r+0x22>
 8009204:	bd38      	pop	{r3, r4, r5, pc}
 8009206:	bf00      	nop
 8009208:	20000de0 	.word	0x20000de0

0800920c <malloc>:
 800920c:	4b02      	ldr	r3, [pc, #8]	@ (8009218 <malloc+0xc>)
 800920e:	4601      	mov	r1, r0
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	f000 b825 	b.w	8009260 <_malloc_r>
 8009216:	bf00      	nop
 8009218:	20000020 	.word	0x20000020

0800921c <sbrk_aligned>:
 800921c:	b570      	push	{r4, r5, r6, lr}
 800921e:	4e0f      	ldr	r6, [pc, #60]	@ (800925c <sbrk_aligned+0x40>)
 8009220:	460c      	mov	r4, r1
 8009222:	6831      	ldr	r1, [r6, #0]
 8009224:	4605      	mov	r5, r0
 8009226:	b911      	cbnz	r1, 800922e <sbrk_aligned+0x12>
 8009228:	f000 fe46 	bl	8009eb8 <_sbrk_r>
 800922c:	6030      	str	r0, [r6, #0]
 800922e:	4621      	mov	r1, r4
 8009230:	4628      	mov	r0, r5
 8009232:	f000 fe41 	bl	8009eb8 <_sbrk_r>
 8009236:	1c43      	adds	r3, r0, #1
 8009238:	d103      	bne.n	8009242 <sbrk_aligned+0x26>
 800923a:	f04f 34ff 	mov.w	r4, #4294967295
 800923e:	4620      	mov	r0, r4
 8009240:	bd70      	pop	{r4, r5, r6, pc}
 8009242:	1cc4      	adds	r4, r0, #3
 8009244:	f024 0403 	bic.w	r4, r4, #3
 8009248:	42a0      	cmp	r0, r4
 800924a:	d0f8      	beq.n	800923e <sbrk_aligned+0x22>
 800924c:	1a21      	subs	r1, r4, r0
 800924e:	4628      	mov	r0, r5
 8009250:	f000 fe32 	bl	8009eb8 <_sbrk_r>
 8009254:	3001      	adds	r0, #1
 8009256:	d1f2      	bne.n	800923e <sbrk_aligned+0x22>
 8009258:	e7ef      	b.n	800923a <sbrk_aligned+0x1e>
 800925a:	bf00      	nop
 800925c:	20000ddc 	.word	0x20000ddc

08009260 <_malloc_r>:
 8009260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009264:	1ccd      	adds	r5, r1, #3
 8009266:	f025 0503 	bic.w	r5, r5, #3
 800926a:	3508      	adds	r5, #8
 800926c:	2d0c      	cmp	r5, #12
 800926e:	bf38      	it	cc
 8009270:	250c      	movcc	r5, #12
 8009272:	2d00      	cmp	r5, #0
 8009274:	4606      	mov	r6, r0
 8009276:	db01      	blt.n	800927c <_malloc_r+0x1c>
 8009278:	42a9      	cmp	r1, r5
 800927a:	d904      	bls.n	8009286 <_malloc_r+0x26>
 800927c:	230c      	movs	r3, #12
 800927e:	6033      	str	r3, [r6, #0]
 8009280:	2000      	movs	r0, #0
 8009282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009286:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800935c <_malloc_r+0xfc>
 800928a:	f000 f869 	bl	8009360 <__malloc_lock>
 800928e:	f8d8 3000 	ldr.w	r3, [r8]
 8009292:	461c      	mov	r4, r3
 8009294:	bb44      	cbnz	r4, 80092e8 <_malloc_r+0x88>
 8009296:	4629      	mov	r1, r5
 8009298:	4630      	mov	r0, r6
 800929a:	f7ff ffbf 	bl	800921c <sbrk_aligned>
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	4604      	mov	r4, r0
 80092a2:	d158      	bne.n	8009356 <_malloc_r+0xf6>
 80092a4:	f8d8 4000 	ldr.w	r4, [r8]
 80092a8:	4627      	mov	r7, r4
 80092aa:	2f00      	cmp	r7, #0
 80092ac:	d143      	bne.n	8009336 <_malloc_r+0xd6>
 80092ae:	2c00      	cmp	r4, #0
 80092b0:	d04b      	beq.n	800934a <_malloc_r+0xea>
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	4639      	mov	r1, r7
 80092b6:	4630      	mov	r0, r6
 80092b8:	eb04 0903 	add.w	r9, r4, r3
 80092bc:	f000 fdfc 	bl	8009eb8 <_sbrk_r>
 80092c0:	4581      	cmp	r9, r0
 80092c2:	d142      	bne.n	800934a <_malloc_r+0xea>
 80092c4:	6821      	ldr	r1, [r4, #0]
 80092c6:	1a6d      	subs	r5, r5, r1
 80092c8:	4629      	mov	r1, r5
 80092ca:	4630      	mov	r0, r6
 80092cc:	f7ff ffa6 	bl	800921c <sbrk_aligned>
 80092d0:	3001      	adds	r0, #1
 80092d2:	d03a      	beq.n	800934a <_malloc_r+0xea>
 80092d4:	6823      	ldr	r3, [r4, #0]
 80092d6:	442b      	add	r3, r5
 80092d8:	6023      	str	r3, [r4, #0]
 80092da:	f8d8 3000 	ldr.w	r3, [r8]
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	bb62      	cbnz	r2, 800933c <_malloc_r+0xdc>
 80092e2:	f8c8 7000 	str.w	r7, [r8]
 80092e6:	e00f      	b.n	8009308 <_malloc_r+0xa8>
 80092e8:	6822      	ldr	r2, [r4, #0]
 80092ea:	1b52      	subs	r2, r2, r5
 80092ec:	d420      	bmi.n	8009330 <_malloc_r+0xd0>
 80092ee:	2a0b      	cmp	r2, #11
 80092f0:	d917      	bls.n	8009322 <_malloc_r+0xc2>
 80092f2:	1961      	adds	r1, r4, r5
 80092f4:	42a3      	cmp	r3, r4
 80092f6:	6025      	str	r5, [r4, #0]
 80092f8:	bf18      	it	ne
 80092fa:	6059      	strne	r1, [r3, #4]
 80092fc:	6863      	ldr	r3, [r4, #4]
 80092fe:	bf08      	it	eq
 8009300:	f8c8 1000 	streq.w	r1, [r8]
 8009304:	5162      	str	r2, [r4, r5]
 8009306:	604b      	str	r3, [r1, #4]
 8009308:	4630      	mov	r0, r6
 800930a:	f000 f82f 	bl	800936c <__malloc_unlock>
 800930e:	f104 000b 	add.w	r0, r4, #11
 8009312:	1d23      	adds	r3, r4, #4
 8009314:	f020 0007 	bic.w	r0, r0, #7
 8009318:	1ac2      	subs	r2, r0, r3
 800931a:	bf1c      	itt	ne
 800931c:	1a1b      	subne	r3, r3, r0
 800931e:	50a3      	strne	r3, [r4, r2]
 8009320:	e7af      	b.n	8009282 <_malloc_r+0x22>
 8009322:	6862      	ldr	r2, [r4, #4]
 8009324:	42a3      	cmp	r3, r4
 8009326:	bf0c      	ite	eq
 8009328:	f8c8 2000 	streq.w	r2, [r8]
 800932c:	605a      	strne	r2, [r3, #4]
 800932e:	e7eb      	b.n	8009308 <_malloc_r+0xa8>
 8009330:	4623      	mov	r3, r4
 8009332:	6864      	ldr	r4, [r4, #4]
 8009334:	e7ae      	b.n	8009294 <_malloc_r+0x34>
 8009336:	463c      	mov	r4, r7
 8009338:	687f      	ldr	r7, [r7, #4]
 800933a:	e7b6      	b.n	80092aa <_malloc_r+0x4a>
 800933c:	461a      	mov	r2, r3
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	42a3      	cmp	r3, r4
 8009342:	d1fb      	bne.n	800933c <_malloc_r+0xdc>
 8009344:	2300      	movs	r3, #0
 8009346:	6053      	str	r3, [r2, #4]
 8009348:	e7de      	b.n	8009308 <_malloc_r+0xa8>
 800934a:	230c      	movs	r3, #12
 800934c:	6033      	str	r3, [r6, #0]
 800934e:	4630      	mov	r0, r6
 8009350:	f000 f80c 	bl	800936c <__malloc_unlock>
 8009354:	e794      	b.n	8009280 <_malloc_r+0x20>
 8009356:	6005      	str	r5, [r0, #0]
 8009358:	e7d6      	b.n	8009308 <_malloc_r+0xa8>
 800935a:	bf00      	nop
 800935c:	20000de0 	.word	0x20000de0

08009360 <__malloc_lock>:
 8009360:	4801      	ldr	r0, [pc, #4]	@ (8009368 <__malloc_lock+0x8>)
 8009362:	f7ff b8b8 	b.w	80084d6 <__retarget_lock_acquire_recursive>
 8009366:	bf00      	nop
 8009368:	20000dd8 	.word	0x20000dd8

0800936c <__malloc_unlock>:
 800936c:	4801      	ldr	r0, [pc, #4]	@ (8009374 <__malloc_unlock+0x8>)
 800936e:	f7ff b8b3 	b.w	80084d8 <__retarget_lock_release_recursive>
 8009372:	bf00      	nop
 8009374:	20000dd8 	.word	0x20000dd8

08009378 <_Balloc>:
 8009378:	b570      	push	{r4, r5, r6, lr}
 800937a:	69c6      	ldr	r6, [r0, #28]
 800937c:	4604      	mov	r4, r0
 800937e:	460d      	mov	r5, r1
 8009380:	b976      	cbnz	r6, 80093a0 <_Balloc+0x28>
 8009382:	2010      	movs	r0, #16
 8009384:	f7ff ff42 	bl	800920c <malloc>
 8009388:	4602      	mov	r2, r0
 800938a:	61e0      	str	r0, [r4, #28]
 800938c:	b920      	cbnz	r0, 8009398 <_Balloc+0x20>
 800938e:	4b18      	ldr	r3, [pc, #96]	@ (80093f0 <_Balloc+0x78>)
 8009390:	4818      	ldr	r0, [pc, #96]	@ (80093f4 <_Balloc+0x7c>)
 8009392:	216b      	movs	r1, #107	@ 0x6b
 8009394:	f000 fdae 	bl	8009ef4 <__assert_func>
 8009398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800939c:	6006      	str	r6, [r0, #0]
 800939e:	60c6      	str	r6, [r0, #12]
 80093a0:	69e6      	ldr	r6, [r4, #28]
 80093a2:	68f3      	ldr	r3, [r6, #12]
 80093a4:	b183      	cbz	r3, 80093c8 <_Balloc+0x50>
 80093a6:	69e3      	ldr	r3, [r4, #28]
 80093a8:	68db      	ldr	r3, [r3, #12]
 80093aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80093ae:	b9b8      	cbnz	r0, 80093e0 <_Balloc+0x68>
 80093b0:	2101      	movs	r1, #1
 80093b2:	fa01 f605 	lsl.w	r6, r1, r5
 80093b6:	1d72      	adds	r2, r6, #5
 80093b8:	0092      	lsls	r2, r2, #2
 80093ba:	4620      	mov	r0, r4
 80093bc:	f000 fdb8 	bl	8009f30 <_calloc_r>
 80093c0:	b160      	cbz	r0, 80093dc <_Balloc+0x64>
 80093c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80093c6:	e00e      	b.n	80093e6 <_Balloc+0x6e>
 80093c8:	2221      	movs	r2, #33	@ 0x21
 80093ca:	2104      	movs	r1, #4
 80093cc:	4620      	mov	r0, r4
 80093ce:	f000 fdaf 	bl	8009f30 <_calloc_r>
 80093d2:	69e3      	ldr	r3, [r4, #28]
 80093d4:	60f0      	str	r0, [r6, #12]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e4      	bne.n	80093a6 <_Balloc+0x2e>
 80093dc:	2000      	movs	r0, #0
 80093de:	bd70      	pop	{r4, r5, r6, pc}
 80093e0:	6802      	ldr	r2, [r0, #0]
 80093e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093e6:	2300      	movs	r3, #0
 80093e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093ec:	e7f7      	b.n	80093de <_Balloc+0x66>
 80093ee:	bf00      	nop
 80093f0:	0800b0b1 	.word	0x0800b0b1
 80093f4:	0800b131 	.word	0x0800b131

080093f8 <_Bfree>:
 80093f8:	b570      	push	{r4, r5, r6, lr}
 80093fa:	69c6      	ldr	r6, [r0, #28]
 80093fc:	4605      	mov	r5, r0
 80093fe:	460c      	mov	r4, r1
 8009400:	b976      	cbnz	r6, 8009420 <_Bfree+0x28>
 8009402:	2010      	movs	r0, #16
 8009404:	f7ff ff02 	bl	800920c <malloc>
 8009408:	4602      	mov	r2, r0
 800940a:	61e8      	str	r0, [r5, #28]
 800940c:	b920      	cbnz	r0, 8009418 <_Bfree+0x20>
 800940e:	4b09      	ldr	r3, [pc, #36]	@ (8009434 <_Bfree+0x3c>)
 8009410:	4809      	ldr	r0, [pc, #36]	@ (8009438 <_Bfree+0x40>)
 8009412:	218f      	movs	r1, #143	@ 0x8f
 8009414:	f000 fd6e 	bl	8009ef4 <__assert_func>
 8009418:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800941c:	6006      	str	r6, [r0, #0]
 800941e:	60c6      	str	r6, [r0, #12]
 8009420:	b13c      	cbz	r4, 8009432 <_Bfree+0x3a>
 8009422:	69eb      	ldr	r3, [r5, #28]
 8009424:	6862      	ldr	r2, [r4, #4]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800942c:	6021      	str	r1, [r4, #0]
 800942e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009432:	bd70      	pop	{r4, r5, r6, pc}
 8009434:	0800b0b1 	.word	0x0800b0b1
 8009438:	0800b131 	.word	0x0800b131

0800943c <__multadd>:
 800943c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009440:	690d      	ldr	r5, [r1, #16]
 8009442:	4607      	mov	r7, r0
 8009444:	460c      	mov	r4, r1
 8009446:	461e      	mov	r6, r3
 8009448:	f101 0c14 	add.w	ip, r1, #20
 800944c:	2000      	movs	r0, #0
 800944e:	f8dc 3000 	ldr.w	r3, [ip]
 8009452:	b299      	uxth	r1, r3
 8009454:	fb02 6101 	mla	r1, r2, r1, r6
 8009458:	0c1e      	lsrs	r6, r3, #16
 800945a:	0c0b      	lsrs	r3, r1, #16
 800945c:	fb02 3306 	mla	r3, r2, r6, r3
 8009460:	b289      	uxth	r1, r1
 8009462:	3001      	adds	r0, #1
 8009464:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009468:	4285      	cmp	r5, r0
 800946a:	f84c 1b04 	str.w	r1, [ip], #4
 800946e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009472:	dcec      	bgt.n	800944e <__multadd+0x12>
 8009474:	b30e      	cbz	r6, 80094ba <__multadd+0x7e>
 8009476:	68a3      	ldr	r3, [r4, #8]
 8009478:	42ab      	cmp	r3, r5
 800947a:	dc19      	bgt.n	80094b0 <__multadd+0x74>
 800947c:	6861      	ldr	r1, [r4, #4]
 800947e:	4638      	mov	r0, r7
 8009480:	3101      	adds	r1, #1
 8009482:	f7ff ff79 	bl	8009378 <_Balloc>
 8009486:	4680      	mov	r8, r0
 8009488:	b928      	cbnz	r0, 8009496 <__multadd+0x5a>
 800948a:	4602      	mov	r2, r0
 800948c:	4b0c      	ldr	r3, [pc, #48]	@ (80094c0 <__multadd+0x84>)
 800948e:	480d      	ldr	r0, [pc, #52]	@ (80094c4 <__multadd+0x88>)
 8009490:	21ba      	movs	r1, #186	@ 0xba
 8009492:	f000 fd2f 	bl	8009ef4 <__assert_func>
 8009496:	6922      	ldr	r2, [r4, #16]
 8009498:	3202      	adds	r2, #2
 800949a:	f104 010c 	add.w	r1, r4, #12
 800949e:	0092      	lsls	r2, r2, #2
 80094a0:	300c      	adds	r0, #12
 80094a2:	f000 fd19 	bl	8009ed8 <memcpy>
 80094a6:	4621      	mov	r1, r4
 80094a8:	4638      	mov	r0, r7
 80094aa:	f7ff ffa5 	bl	80093f8 <_Bfree>
 80094ae:	4644      	mov	r4, r8
 80094b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80094b4:	3501      	adds	r5, #1
 80094b6:	615e      	str	r6, [r3, #20]
 80094b8:	6125      	str	r5, [r4, #16]
 80094ba:	4620      	mov	r0, r4
 80094bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c0:	0800b120 	.word	0x0800b120
 80094c4:	0800b131 	.word	0x0800b131

080094c8 <__hi0bits>:
 80094c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80094cc:	4603      	mov	r3, r0
 80094ce:	bf36      	itet	cc
 80094d0:	0403      	lslcc	r3, r0, #16
 80094d2:	2000      	movcs	r0, #0
 80094d4:	2010      	movcc	r0, #16
 80094d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094da:	bf3c      	itt	cc
 80094dc:	021b      	lslcc	r3, r3, #8
 80094de:	3008      	addcc	r0, #8
 80094e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094e4:	bf3c      	itt	cc
 80094e6:	011b      	lslcc	r3, r3, #4
 80094e8:	3004      	addcc	r0, #4
 80094ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094ee:	bf3c      	itt	cc
 80094f0:	009b      	lslcc	r3, r3, #2
 80094f2:	3002      	addcc	r0, #2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	db05      	blt.n	8009504 <__hi0bits+0x3c>
 80094f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80094fc:	f100 0001 	add.w	r0, r0, #1
 8009500:	bf08      	it	eq
 8009502:	2020      	moveq	r0, #32
 8009504:	4770      	bx	lr

08009506 <__lo0bits>:
 8009506:	6803      	ldr	r3, [r0, #0]
 8009508:	4602      	mov	r2, r0
 800950a:	f013 0007 	ands.w	r0, r3, #7
 800950e:	d00b      	beq.n	8009528 <__lo0bits+0x22>
 8009510:	07d9      	lsls	r1, r3, #31
 8009512:	d421      	bmi.n	8009558 <__lo0bits+0x52>
 8009514:	0798      	lsls	r0, r3, #30
 8009516:	bf49      	itett	mi
 8009518:	085b      	lsrmi	r3, r3, #1
 800951a:	089b      	lsrpl	r3, r3, #2
 800951c:	2001      	movmi	r0, #1
 800951e:	6013      	strmi	r3, [r2, #0]
 8009520:	bf5c      	itt	pl
 8009522:	6013      	strpl	r3, [r2, #0]
 8009524:	2002      	movpl	r0, #2
 8009526:	4770      	bx	lr
 8009528:	b299      	uxth	r1, r3
 800952a:	b909      	cbnz	r1, 8009530 <__lo0bits+0x2a>
 800952c:	0c1b      	lsrs	r3, r3, #16
 800952e:	2010      	movs	r0, #16
 8009530:	b2d9      	uxtb	r1, r3
 8009532:	b909      	cbnz	r1, 8009538 <__lo0bits+0x32>
 8009534:	3008      	adds	r0, #8
 8009536:	0a1b      	lsrs	r3, r3, #8
 8009538:	0719      	lsls	r1, r3, #28
 800953a:	bf04      	itt	eq
 800953c:	091b      	lsreq	r3, r3, #4
 800953e:	3004      	addeq	r0, #4
 8009540:	0799      	lsls	r1, r3, #30
 8009542:	bf04      	itt	eq
 8009544:	089b      	lsreq	r3, r3, #2
 8009546:	3002      	addeq	r0, #2
 8009548:	07d9      	lsls	r1, r3, #31
 800954a:	d403      	bmi.n	8009554 <__lo0bits+0x4e>
 800954c:	085b      	lsrs	r3, r3, #1
 800954e:	f100 0001 	add.w	r0, r0, #1
 8009552:	d003      	beq.n	800955c <__lo0bits+0x56>
 8009554:	6013      	str	r3, [r2, #0]
 8009556:	4770      	bx	lr
 8009558:	2000      	movs	r0, #0
 800955a:	4770      	bx	lr
 800955c:	2020      	movs	r0, #32
 800955e:	4770      	bx	lr

08009560 <__i2b>:
 8009560:	b510      	push	{r4, lr}
 8009562:	460c      	mov	r4, r1
 8009564:	2101      	movs	r1, #1
 8009566:	f7ff ff07 	bl	8009378 <_Balloc>
 800956a:	4602      	mov	r2, r0
 800956c:	b928      	cbnz	r0, 800957a <__i2b+0x1a>
 800956e:	4b05      	ldr	r3, [pc, #20]	@ (8009584 <__i2b+0x24>)
 8009570:	4805      	ldr	r0, [pc, #20]	@ (8009588 <__i2b+0x28>)
 8009572:	f240 1145 	movw	r1, #325	@ 0x145
 8009576:	f000 fcbd 	bl	8009ef4 <__assert_func>
 800957a:	2301      	movs	r3, #1
 800957c:	6144      	str	r4, [r0, #20]
 800957e:	6103      	str	r3, [r0, #16]
 8009580:	bd10      	pop	{r4, pc}
 8009582:	bf00      	nop
 8009584:	0800b120 	.word	0x0800b120
 8009588:	0800b131 	.word	0x0800b131

0800958c <__multiply>:
 800958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009590:	4614      	mov	r4, r2
 8009592:	690a      	ldr	r2, [r1, #16]
 8009594:	6923      	ldr	r3, [r4, #16]
 8009596:	429a      	cmp	r2, r3
 8009598:	bfa8      	it	ge
 800959a:	4623      	movge	r3, r4
 800959c:	460f      	mov	r7, r1
 800959e:	bfa4      	itt	ge
 80095a0:	460c      	movge	r4, r1
 80095a2:	461f      	movge	r7, r3
 80095a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80095a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80095ac:	68a3      	ldr	r3, [r4, #8]
 80095ae:	6861      	ldr	r1, [r4, #4]
 80095b0:	eb0a 0609 	add.w	r6, sl, r9
 80095b4:	42b3      	cmp	r3, r6
 80095b6:	b085      	sub	sp, #20
 80095b8:	bfb8      	it	lt
 80095ba:	3101      	addlt	r1, #1
 80095bc:	f7ff fedc 	bl	8009378 <_Balloc>
 80095c0:	b930      	cbnz	r0, 80095d0 <__multiply+0x44>
 80095c2:	4602      	mov	r2, r0
 80095c4:	4b44      	ldr	r3, [pc, #272]	@ (80096d8 <__multiply+0x14c>)
 80095c6:	4845      	ldr	r0, [pc, #276]	@ (80096dc <__multiply+0x150>)
 80095c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80095cc:	f000 fc92 	bl	8009ef4 <__assert_func>
 80095d0:	f100 0514 	add.w	r5, r0, #20
 80095d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095d8:	462b      	mov	r3, r5
 80095da:	2200      	movs	r2, #0
 80095dc:	4543      	cmp	r3, r8
 80095de:	d321      	bcc.n	8009624 <__multiply+0x98>
 80095e0:	f107 0114 	add.w	r1, r7, #20
 80095e4:	f104 0214 	add.w	r2, r4, #20
 80095e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80095ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80095f0:	9302      	str	r3, [sp, #8]
 80095f2:	1b13      	subs	r3, r2, r4
 80095f4:	3b15      	subs	r3, #21
 80095f6:	f023 0303 	bic.w	r3, r3, #3
 80095fa:	3304      	adds	r3, #4
 80095fc:	f104 0715 	add.w	r7, r4, #21
 8009600:	42ba      	cmp	r2, r7
 8009602:	bf38      	it	cc
 8009604:	2304      	movcc	r3, #4
 8009606:	9301      	str	r3, [sp, #4]
 8009608:	9b02      	ldr	r3, [sp, #8]
 800960a:	9103      	str	r1, [sp, #12]
 800960c:	428b      	cmp	r3, r1
 800960e:	d80c      	bhi.n	800962a <__multiply+0x9e>
 8009610:	2e00      	cmp	r6, #0
 8009612:	dd03      	ble.n	800961c <__multiply+0x90>
 8009614:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009618:	2b00      	cmp	r3, #0
 800961a:	d05b      	beq.n	80096d4 <__multiply+0x148>
 800961c:	6106      	str	r6, [r0, #16]
 800961e:	b005      	add	sp, #20
 8009620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009624:	f843 2b04 	str.w	r2, [r3], #4
 8009628:	e7d8      	b.n	80095dc <__multiply+0x50>
 800962a:	f8b1 a000 	ldrh.w	sl, [r1]
 800962e:	f1ba 0f00 	cmp.w	sl, #0
 8009632:	d024      	beq.n	800967e <__multiply+0xf2>
 8009634:	f104 0e14 	add.w	lr, r4, #20
 8009638:	46a9      	mov	r9, r5
 800963a:	f04f 0c00 	mov.w	ip, #0
 800963e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009642:	f8d9 3000 	ldr.w	r3, [r9]
 8009646:	fa1f fb87 	uxth.w	fp, r7
 800964a:	b29b      	uxth	r3, r3
 800964c:	fb0a 330b 	mla	r3, sl, fp, r3
 8009650:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009654:	f8d9 7000 	ldr.w	r7, [r9]
 8009658:	4463      	add	r3, ip
 800965a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800965e:	fb0a c70b 	mla	r7, sl, fp, ip
 8009662:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009666:	b29b      	uxth	r3, r3
 8009668:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800966c:	4572      	cmp	r2, lr
 800966e:	f849 3b04 	str.w	r3, [r9], #4
 8009672:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009676:	d8e2      	bhi.n	800963e <__multiply+0xb2>
 8009678:	9b01      	ldr	r3, [sp, #4]
 800967a:	f845 c003 	str.w	ip, [r5, r3]
 800967e:	9b03      	ldr	r3, [sp, #12]
 8009680:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009684:	3104      	adds	r1, #4
 8009686:	f1b9 0f00 	cmp.w	r9, #0
 800968a:	d021      	beq.n	80096d0 <__multiply+0x144>
 800968c:	682b      	ldr	r3, [r5, #0]
 800968e:	f104 0c14 	add.w	ip, r4, #20
 8009692:	46ae      	mov	lr, r5
 8009694:	f04f 0a00 	mov.w	sl, #0
 8009698:	f8bc b000 	ldrh.w	fp, [ip]
 800969c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80096a0:	fb09 770b 	mla	r7, r9, fp, r7
 80096a4:	4457      	add	r7, sl
 80096a6:	b29b      	uxth	r3, r3
 80096a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80096ac:	f84e 3b04 	str.w	r3, [lr], #4
 80096b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80096b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096b8:	f8be 3000 	ldrh.w	r3, [lr]
 80096bc:	fb09 330a 	mla	r3, r9, sl, r3
 80096c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80096c4:	4562      	cmp	r2, ip
 80096c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096ca:	d8e5      	bhi.n	8009698 <__multiply+0x10c>
 80096cc:	9f01      	ldr	r7, [sp, #4]
 80096ce:	51eb      	str	r3, [r5, r7]
 80096d0:	3504      	adds	r5, #4
 80096d2:	e799      	b.n	8009608 <__multiply+0x7c>
 80096d4:	3e01      	subs	r6, #1
 80096d6:	e79b      	b.n	8009610 <__multiply+0x84>
 80096d8:	0800b120 	.word	0x0800b120
 80096dc:	0800b131 	.word	0x0800b131

080096e0 <__pow5mult>:
 80096e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096e4:	4615      	mov	r5, r2
 80096e6:	f012 0203 	ands.w	r2, r2, #3
 80096ea:	4607      	mov	r7, r0
 80096ec:	460e      	mov	r6, r1
 80096ee:	d007      	beq.n	8009700 <__pow5mult+0x20>
 80096f0:	4c25      	ldr	r4, [pc, #148]	@ (8009788 <__pow5mult+0xa8>)
 80096f2:	3a01      	subs	r2, #1
 80096f4:	2300      	movs	r3, #0
 80096f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096fa:	f7ff fe9f 	bl	800943c <__multadd>
 80096fe:	4606      	mov	r6, r0
 8009700:	10ad      	asrs	r5, r5, #2
 8009702:	d03d      	beq.n	8009780 <__pow5mult+0xa0>
 8009704:	69fc      	ldr	r4, [r7, #28]
 8009706:	b97c      	cbnz	r4, 8009728 <__pow5mult+0x48>
 8009708:	2010      	movs	r0, #16
 800970a:	f7ff fd7f 	bl	800920c <malloc>
 800970e:	4602      	mov	r2, r0
 8009710:	61f8      	str	r0, [r7, #28]
 8009712:	b928      	cbnz	r0, 8009720 <__pow5mult+0x40>
 8009714:	4b1d      	ldr	r3, [pc, #116]	@ (800978c <__pow5mult+0xac>)
 8009716:	481e      	ldr	r0, [pc, #120]	@ (8009790 <__pow5mult+0xb0>)
 8009718:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800971c:	f000 fbea 	bl	8009ef4 <__assert_func>
 8009720:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009724:	6004      	str	r4, [r0, #0]
 8009726:	60c4      	str	r4, [r0, #12]
 8009728:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800972c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009730:	b94c      	cbnz	r4, 8009746 <__pow5mult+0x66>
 8009732:	f240 2171 	movw	r1, #625	@ 0x271
 8009736:	4638      	mov	r0, r7
 8009738:	f7ff ff12 	bl	8009560 <__i2b>
 800973c:	2300      	movs	r3, #0
 800973e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009742:	4604      	mov	r4, r0
 8009744:	6003      	str	r3, [r0, #0]
 8009746:	f04f 0900 	mov.w	r9, #0
 800974a:	07eb      	lsls	r3, r5, #31
 800974c:	d50a      	bpl.n	8009764 <__pow5mult+0x84>
 800974e:	4631      	mov	r1, r6
 8009750:	4622      	mov	r2, r4
 8009752:	4638      	mov	r0, r7
 8009754:	f7ff ff1a 	bl	800958c <__multiply>
 8009758:	4631      	mov	r1, r6
 800975a:	4680      	mov	r8, r0
 800975c:	4638      	mov	r0, r7
 800975e:	f7ff fe4b 	bl	80093f8 <_Bfree>
 8009762:	4646      	mov	r6, r8
 8009764:	106d      	asrs	r5, r5, #1
 8009766:	d00b      	beq.n	8009780 <__pow5mult+0xa0>
 8009768:	6820      	ldr	r0, [r4, #0]
 800976a:	b938      	cbnz	r0, 800977c <__pow5mult+0x9c>
 800976c:	4622      	mov	r2, r4
 800976e:	4621      	mov	r1, r4
 8009770:	4638      	mov	r0, r7
 8009772:	f7ff ff0b 	bl	800958c <__multiply>
 8009776:	6020      	str	r0, [r4, #0]
 8009778:	f8c0 9000 	str.w	r9, [r0]
 800977c:	4604      	mov	r4, r0
 800977e:	e7e4      	b.n	800974a <__pow5mult+0x6a>
 8009780:	4630      	mov	r0, r6
 8009782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009786:	bf00      	nop
 8009788:	0800b18c 	.word	0x0800b18c
 800978c:	0800b0b1 	.word	0x0800b0b1
 8009790:	0800b131 	.word	0x0800b131

08009794 <__lshift>:
 8009794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009798:	460c      	mov	r4, r1
 800979a:	6849      	ldr	r1, [r1, #4]
 800979c:	6923      	ldr	r3, [r4, #16]
 800979e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80097a2:	68a3      	ldr	r3, [r4, #8]
 80097a4:	4607      	mov	r7, r0
 80097a6:	4691      	mov	r9, r2
 80097a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80097ac:	f108 0601 	add.w	r6, r8, #1
 80097b0:	42b3      	cmp	r3, r6
 80097b2:	db0b      	blt.n	80097cc <__lshift+0x38>
 80097b4:	4638      	mov	r0, r7
 80097b6:	f7ff fddf 	bl	8009378 <_Balloc>
 80097ba:	4605      	mov	r5, r0
 80097bc:	b948      	cbnz	r0, 80097d2 <__lshift+0x3e>
 80097be:	4602      	mov	r2, r0
 80097c0:	4b28      	ldr	r3, [pc, #160]	@ (8009864 <__lshift+0xd0>)
 80097c2:	4829      	ldr	r0, [pc, #164]	@ (8009868 <__lshift+0xd4>)
 80097c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80097c8:	f000 fb94 	bl	8009ef4 <__assert_func>
 80097cc:	3101      	adds	r1, #1
 80097ce:	005b      	lsls	r3, r3, #1
 80097d0:	e7ee      	b.n	80097b0 <__lshift+0x1c>
 80097d2:	2300      	movs	r3, #0
 80097d4:	f100 0114 	add.w	r1, r0, #20
 80097d8:	f100 0210 	add.w	r2, r0, #16
 80097dc:	4618      	mov	r0, r3
 80097de:	4553      	cmp	r3, sl
 80097e0:	db33      	blt.n	800984a <__lshift+0xb6>
 80097e2:	6920      	ldr	r0, [r4, #16]
 80097e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097e8:	f104 0314 	add.w	r3, r4, #20
 80097ec:	f019 091f 	ands.w	r9, r9, #31
 80097f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097f8:	d02b      	beq.n	8009852 <__lshift+0xbe>
 80097fa:	f1c9 0e20 	rsb	lr, r9, #32
 80097fe:	468a      	mov	sl, r1
 8009800:	2200      	movs	r2, #0
 8009802:	6818      	ldr	r0, [r3, #0]
 8009804:	fa00 f009 	lsl.w	r0, r0, r9
 8009808:	4310      	orrs	r0, r2
 800980a:	f84a 0b04 	str.w	r0, [sl], #4
 800980e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009812:	459c      	cmp	ip, r3
 8009814:	fa22 f20e 	lsr.w	r2, r2, lr
 8009818:	d8f3      	bhi.n	8009802 <__lshift+0x6e>
 800981a:	ebac 0304 	sub.w	r3, ip, r4
 800981e:	3b15      	subs	r3, #21
 8009820:	f023 0303 	bic.w	r3, r3, #3
 8009824:	3304      	adds	r3, #4
 8009826:	f104 0015 	add.w	r0, r4, #21
 800982a:	4584      	cmp	ip, r0
 800982c:	bf38      	it	cc
 800982e:	2304      	movcc	r3, #4
 8009830:	50ca      	str	r2, [r1, r3]
 8009832:	b10a      	cbz	r2, 8009838 <__lshift+0xa4>
 8009834:	f108 0602 	add.w	r6, r8, #2
 8009838:	3e01      	subs	r6, #1
 800983a:	4638      	mov	r0, r7
 800983c:	612e      	str	r6, [r5, #16]
 800983e:	4621      	mov	r1, r4
 8009840:	f7ff fdda 	bl	80093f8 <_Bfree>
 8009844:	4628      	mov	r0, r5
 8009846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800984a:	f842 0f04 	str.w	r0, [r2, #4]!
 800984e:	3301      	adds	r3, #1
 8009850:	e7c5      	b.n	80097de <__lshift+0x4a>
 8009852:	3904      	subs	r1, #4
 8009854:	f853 2b04 	ldr.w	r2, [r3], #4
 8009858:	f841 2f04 	str.w	r2, [r1, #4]!
 800985c:	459c      	cmp	ip, r3
 800985e:	d8f9      	bhi.n	8009854 <__lshift+0xc0>
 8009860:	e7ea      	b.n	8009838 <__lshift+0xa4>
 8009862:	bf00      	nop
 8009864:	0800b120 	.word	0x0800b120
 8009868:	0800b131 	.word	0x0800b131

0800986c <__mcmp>:
 800986c:	690a      	ldr	r2, [r1, #16]
 800986e:	4603      	mov	r3, r0
 8009870:	6900      	ldr	r0, [r0, #16]
 8009872:	1a80      	subs	r0, r0, r2
 8009874:	b530      	push	{r4, r5, lr}
 8009876:	d10e      	bne.n	8009896 <__mcmp+0x2a>
 8009878:	3314      	adds	r3, #20
 800987a:	3114      	adds	r1, #20
 800987c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009880:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009884:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009888:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800988c:	4295      	cmp	r5, r2
 800988e:	d003      	beq.n	8009898 <__mcmp+0x2c>
 8009890:	d205      	bcs.n	800989e <__mcmp+0x32>
 8009892:	f04f 30ff 	mov.w	r0, #4294967295
 8009896:	bd30      	pop	{r4, r5, pc}
 8009898:	42a3      	cmp	r3, r4
 800989a:	d3f3      	bcc.n	8009884 <__mcmp+0x18>
 800989c:	e7fb      	b.n	8009896 <__mcmp+0x2a>
 800989e:	2001      	movs	r0, #1
 80098a0:	e7f9      	b.n	8009896 <__mcmp+0x2a>
	...

080098a4 <__mdiff>:
 80098a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a8:	4689      	mov	r9, r1
 80098aa:	4606      	mov	r6, r0
 80098ac:	4611      	mov	r1, r2
 80098ae:	4648      	mov	r0, r9
 80098b0:	4614      	mov	r4, r2
 80098b2:	f7ff ffdb 	bl	800986c <__mcmp>
 80098b6:	1e05      	subs	r5, r0, #0
 80098b8:	d112      	bne.n	80098e0 <__mdiff+0x3c>
 80098ba:	4629      	mov	r1, r5
 80098bc:	4630      	mov	r0, r6
 80098be:	f7ff fd5b 	bl	8009378 <_Balloc>
 80098c2:	4602      	mov	r2, r0
 80098c4:	b928      	cbnz	r0, 80098d2 <__mdiff+0x2e>
 80098c6:	4b3f      	ldr	r3, [pc, #252]	@ (80099c4 <__mdiff+0x120>)
 80098c8:	f240 2137 	movw	r1, #567	@ 0x237
 80098cc:	483e      	ldr	r0, [pc, #248]	@ (80099c8 <__mdiff+0x124>)
 80098ce:	f000 fb11 	bl	8009ef4 <__assert_func>
 80098d2:	2301      	movs	r3, #1
 80098d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098d8:	4610      	mov	r0, r2
 80098da:	b003      	add	sp, #12
 80098dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098e0:	bfbc      	itt	lt
 80098e2:	464b      	movlt	r3, r9
 80098e4:	46a1      	movlt	r9, r4
 80098e6:	4630      	mov	r0, r6
 80098e8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80098ec:	bfba      	itte	lt
 80098ee:	461c      	movlt	r4, r3
 80098f0:	2501      	movlt	r5, #1
 80098f2:	2500      	movge	r5, #0
 80098f4:	f7ff fd40 	bl	8009378 <_Balloc>
 80098f8:	4602      	mov	r2, r0
 80098fa:	b918      	cbnz	r0, 8009904 <__mdiff+0x60>
 80098fc:	4b31      	ldr	r3, [pc, #196]	@ (80099c4 <__mdiff+0x120>)
 80098fe:	f240 2145 	movw	r1, #581	@ 0x245
 8009902:	e7e3      	b.n	80098cc <__mdiff+0x28>
 8009904:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009908:	6926      	ldr	r6, [r4, #16]
 800990a:	60c5      	str	r5, [r0, #12]
 800990c:	f109 0310 	add.w	r3, r9, #16
 8009910:	f109 0514 	add.w	r5, r9, #20
 8009914:	f104 0e14 	add.w	lr, r4, #20
 8009918:	f100 0b14 	add.w	fp, r0, #20
 800991c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009920:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009924:	9301      	str	r3, [sp, #4]
 8009926:	46d9      	mov	r9, fp
 8009928:	f04f 0c00 	mov.w	ip, #0
 800992c:	9b01      	ldr	r3, [sp, #4]
 800992e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009932:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	fa1f f38a 	uxth.w	r3, sl
 800993c:	4619      	mov	r1, r3
 800993e:	b283      	uxth	r3, r0
 8009940:	1acb      	subs	r3, r1, r3
 8009942:	0c00      	lsrs	r0, r0, #16
 8009944:	4463      	add	r3, ip
 8009946:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800994a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800994e:	b29b      	uxth	r3, r3
 8009950:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009954:	4576      	cmp	r6, lr
 8009956:	f849 3b04 	str.w	r3, [r9], #4
 800995a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800995e:	d8e5      	bhi.n	800992c <__mdiff+0x88>
 8009960:	1b33      	subs	r3, r6, r4
 8009962:	3b15      	subs	r3, #21
 8009964:	f023 0303 	bic.w	r3, r3, #3
 8009968:	3415      	adds	r4, #21
 800996a:	3304      	adds	r3, #4
 800996c:	42a6      	cmp	r6, r4
 800996e:	bf38      	it	cc
 8009970:	2304      	movcc	r3, #4
 8009972:	441d      	add	r5, r3
 8009974:	445b      	add	r3, fp
 8009976:	461e      	mov	r6, r3
 8009978:	462c      	mov	r4, r5
 800997a:	4544      	cmp	r4, r8
 800997c:	d30e      	bcc.n	800999c <__mdiff+0xf8>
 800997e:	f108 0103 	add.w	r1, r8, #3
 8009982:	1b49      	subs	r1, r1, r5
 8009984:	f021 0103 	bic.w	r1, r1, #3
 8009988:	3d03      	subs	r5, #3
 800998a:	45a8      	cmp	r8, r5
 800998c:	bf38      	it	cc
 800998e:	2100      	movcc	r1, #0
 8009990:	440b      	add	r3, r1
 8009992:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009996:	b191      	cbz	r1, 80099be <__mdiff+0x11a>
 8009998:	6117      	str	r7, [r2, #16]
 800999a:	e79d      	b.n	80098d8 <__mdiff+0x34>
 800999c:	f854 1b04 	ldr.w	r1, [r4], #4
 80099a0:	46e6      	mov	lr, ip
 80099a2:	0c08      	lsrs	r0, r1, #16
 80099a4:	fa1c fc81 	uxtah	ip, ip, r1
 80099a8:	4471      	add	r1, lr
 80099aa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80099ae:	b289      	uxth	r1, r1
 80099b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099b4:	f846 1b04 	str.w	r1, [r6], #4
 80099b8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099bc:	e7dd      	b.n	800997a <__mdiff+0xd6>
 80099be:	3f01      	subs	r7, #1
 80099c0:	e7e7      	b.n	8009992 <__mdiff+0xee>
 80099c2:	bf00      	nop
 80099c4:	0800b120 	.word	0x0800b120
 80099c8:	0800b131 	.word	0x0800b131

080099cc <__d2b>:
 80099cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80099d0:	460f      	mov	r7, r1
 80099d2:	2101      	movs	r1, #1
 80099d4:	ec59 8b10 	vmov	r8, r9, d0
 80099d8:	4616      	mov	r6, r2
 80099da:	f7ff fccd 	bl	8009378 <_Balloc>
 80099de:	4604      	mov	r4, r0
 80099e0:	b930      	cbnz	r0, 80099f0 <__d2b+0x24>
 80099e2:	4602      	mov	r2, r0
 80099e4:	4b23      	ldr	r3, [pc, #140]	@ (8009a74 <__d2b+0xa8>)
 80099e6:	4824      	ldr	r0, [pc, #144]	@ (8009a78 <__d2b+0xac>)
 80099e8:	f240 310f 	movw	r1, #783	@ 0x30f
 80099ec:	f000 fa82 	bl	8009ef4 <__assert_func>
 80099f0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80099f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099f8:	b10d      	cbz	r5, 80099fe <__d2b+0x32>
 80099fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099fe:	9301      	str	r3, [sp, #4]
 8009a00:	f1b8 0300 	subs.w	r3, r8, #0
 8009a04:	d023      	beq.n	8009a4e <__d2b+0x82>
 8009a06:	4668      	mov	r0, sp
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	f7ff fd7c 	bl	8009506 <__lo0bits>
 8009a0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009a12:	b1d0      	cbz	r0, 8009a4a <__d2b+0x7e>
 8009a14:	f1c0 0320 	rsb	r3, r0, #32
 8009a18:	fa02 f303 	lsl.w	r3, r2, r3
 8009a1c:	430b      	orrs	r3, r1
 8009a1e:	40c2      	lsrs	r2, r0
 8009a20:	6163      	str	r3, [r4, #20]
 8009a22:	9201      	str	r2, [sp, #4]
 8009a24:	9b01      	ldr	r3, [sp, #4]
 8009a26:	61a3      	str	r3, [r4, #24]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	bf0c      	ite	eq
 8009a2c:	2201      	moveq	r2, #1
 8009a2e:	2202      	movne	r2, #2
 8009a30:	6122      	str	r2, [r4, #16]
 8009a32:	b1a5      	cbz	r5, 8009a5e <__d2b+0x92>
 8009a34:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009a38:	4405      	add	r5, r0
 8009a3a:	603d      	str	r5, [r7, #0]
 8009a3c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009a40:	6030      	str	r0, [r6, #0]
 8009a42:	4620      	mov	r0, r4
 8009a44:	b003      	add	sp, #12
 8009a46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a4a:	6161      	str	r1, [r4, #20]
 8009a4c:	e7ea      	b.n	8009a24 <__d2b+0x58>
 8009a4e:	a801      	add	r0, sp, #4
 8009a50:	f7ff fd59 	bl	8009506 <__lo0bits>
 8009a54:	9b01      	ldr	r3, [sp, #4]
 8009a56:	6163      	str	r3, [r4, #20]
 8009a58:	3020      	adds	r0, #32
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	e7e8      	b.n	8009a30 <__d2b+0x64>
 8009a5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009a66:	6038      	str	r0, [r7, #0]
 8009a68:	6918      	ldr	r0, [r3, #16]
 8009a6a:	f7ff fd2d 	bl	80094c8 <__hi0bits>
 8009a6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a72:	e7e5      	b.n	8009a40 <__d2b+0x74>
 8009a74:	0800b120 	.word	0x0800b120
 8009a78:	0800b131 	.word	0x0800b131

08009a7c <__ssputs_r>:
 8009a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a80:	688e      	ldr	r6, [r1, #8]
 8009a82:	461f      	mov	r7, r3
 8009a84:	42be      	cmp	r6, r7
 8009a86:	680b      	ldr	r3, [r1, #0]
 8009a88:	4682      	mov	sl, r0
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	4690      	mov	r8, r2
 8009a8e:	d82d      	bhi.n	8009aec <__ssputs_r+0x70>
 8009a90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009a98:	d026      	beq.n	8009ae8 <__ssputs_r+0x6c>
 8009a9a:	6965      	ldr	r5, [r4, #20]
 8009a9c:	6909      	ldr	r1, [r1, #16]
 8009a9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009aa2:	eba3 0901 	sub.w	r9, r3, r1
 8009aa6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009aaa:	1c7b      	adds	r3, r7, #1
 8009aac:	444b      	add	r3, r9
 8009aae:	106d      	asrs	r5, r5, #1
 8009ab0:	429d      	cmp	r5, r3
 8009ab2:	bf38      	it	cc
 8009ab4:	461d      	movcc	r5, r3
 8009ab6:	0553      	lsls	r3, r2, #21
 8009ab8:	d527      	bpl.n	8009b0a <__ssputs_r+0x8e>
 8009aba:	4629      	mov	r1, r5
 8009abc:	f7ff fbd0 	bl	8009260 <_malloc_r>
 8009ac0:	4606      	mov	r6, r0
 8009ac2:	b360      	cbz	r0, 8009b1e <__ssputs_r+0xa2>
 8009ac4:	6921      	ldr	r1, [r4, #16]
 8009ac6:	464a      	mov	r2, r9
 8009ac8:	f000 fa06 	bl	8009ed8 <memcpy>
 8009acc:	89a3      	ldrh	r3, [r4, #12]
 8009ace:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ad6:	81a3      	strh	r3, [r4, #12]
 8009ad8:	6126      	str	r6, [r4, #16]
 8009ada:	6165      	str	r5, [r4, #20]
 8009adc:	444e      	add	r6, r9
 8009ade:	eba5 0509 	sub.w	r5, r5, r9
 8009ae2:	6026      	str	r6, [r4, #0]
 8009ae4:	60a5      	str	r5, [r4, #8]
 8009ae6:	463e      	mov	r6, r7
 8009ae8:	42be      	cmp	r6, r7
 8009aea:	d900      	bls.n	8009aee <__ssputs_r+0x72>
 8009aec:	463e      	mov	r6, r7
 8009aee:	6820      	ldr	r0, [r4, #0]
 8009af0:	4632      	mov	r2, r6
 8009af2:	4641      	mov	r1, r8
 8009af4:	f000 f9c6 	bl	8009e84 <memmove>
 8009af8:	68a3      	ldr	r3, [r4, #8]
 8009afa:	1b9b      	subs	r3, r3, r6
 8009afc:	60a3      	str	r3, [r4, #8]
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	4433      	add	r3, r6
 8009b02:	6023      	str	r3, [r4, #0]
 8009b04:	2000      	movs	r0, #0
 8009b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b0a:	462a      	mov	r2, r5
 8009b0c:	f000 fa36 	bl	8009f7c <_realloc_r>
 8009b10:	4606      	mov	r6, r0
 8009b12:	2800      	cmp	r0, #0
 8009b14:	d1e0      	bne.n	8009ad8 <__ssputs_r+0x5c>
 8009b16:	6921      	ldr	r1, [r4, #16]
 8009b18:	4650      	mov	r0, sl
 8009b1a:	f7ff fb2d 	bl	8009178 <_free_r>
 8009b1e:	230c      	movs	r3, #12
 8009b20:	f8ca 3000 	str.w	r3, [sl]
 8009b24:	89a3      	ldrh	r3, [r4, #12]
 8009b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b2a:	81a3      	strh	r3, [r4, #12]
 8009b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b30:	e7e9      	b.n	8009b06 <__ssputs_r+0x8a>
	...

08009b34 <_svfiprintf_r>:
 8009b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b38:	4698      	mov	r8, r3
 8009b3a:	898b      	ldrh	r3, [r1, #12]
 8009b3c:	061b      	lsls	r3, r3, #24
 8009b3e:	b09d      	sub	sp, #116	@ 0x74
 8009b40:	4607      	mov	r7, r0
 8009b42:	460d      	mov	r5, r1
 8009b44:	4614      	mov	r4, r2
 8009b46:	d510      	bpl.n	8009b6a <_svfiprintf_r+0x36>
 8009b48:	690b      	ldr	r3, [r1, #16]
 8009b4a:	b973      	cbnz	r3, 8009b6a <_svfiprintf_r+0x36>
 8009b4c:	2140      	movs	r1, #64	@ 0x40
 8009b4e:	f7ff fb87 	bl	8009260 <_malloc_r>
 8009b52:	6028      	str	r0, [r5, #0]
 8009b54:	6128      	str	r0, [r5, #16]
 8009b56:	b930      	cbnz	r0, 8009b66 <_svfiprintf_r+0x32>
 8009b58:	230c      	movs	r3, #12
 8009b5a:	603b      	str	r3, [r7, #0]
 8009b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b60:	b01d      	add	sp, #116	@ 0x74
 8009b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b66:	2340      	movs	r3, #64	@ 0x40
 8009b68:	616b      	str	r3, [r5, #20]
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b6e:	2320      	movs	r3, #32
 8009b70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009b74:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b78:	2330      	movs	r3, #48	@ 0x30
 8009b7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009d18 <_svfiprintf_r+0x1e4>
 8009b7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009b82:	f04f 0901 	mov.w	r9, #1
 8009b86:	4623      	mov	r3, r4
 8009b88:	469a      	mov	sl, r3
 8009b8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b8e:	b10a      	cbz	r2, 8009b94 <_svfiprintf_r+0x60>
 8009b90:	2a25      	cmp	r2, #37	@ 0x25
 8009b92:	d1f9      	bne.n	8009b88 <_svfiprintf_r+0x54>
 8009b94:	ebba 0b04 	subs.w	fp, sl, r4
 8009b98:	d00b      	beq.n	8009bb2 <_svfiprintf_r+0x7e>
 8009b9a:	465b      	mov	r3, fp
 8009b9c:	4622      	mov	r2, r4
 8009b9e:	4629      	mov	r1, r5
 8009ba0:	4638      	mov	r0, r7
 8009ba2:	f7ff ff6b 	bl	8009a7c <__ssputs_r>
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	f000 80a7 	beq.w	8009cfa <_svfiprintf_r+0x1c6>
 8009bac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bae:	445a      	add	r2, fp
 8009bb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	f000 809f 	beq.w	8009cfa <_svfiprintf_r+0x1c6>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bc6:	f10a 0a01 	add.w	sl, sl, #1
 8009bca:	9304      	str	r3, [sp, #16]
 8009bcc:	9307      	str	r3, [sp, #28]
 8009bce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009bd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009bd4:	4654      	mov	r4, sl
 8009bd6:	2205      	movs	r2, #5
 8009bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bdc:	484e      	ldr	r0, [pc, #312]	@ (8009d18 <_svfiprintf_r+0x1e4>)
 8009bde:	f7f6 faf7 	bl	80001d0 <memchr>
 8009be2:	9a04      	ldr	r2, [sp, #16]
 8009be4:	b9d8      	cbnz	r0, 8009c1e <_svfiprintf_r+0xea>
 8009be6:	06d0      	lsls	r0, r2, #27
 8009be8:	bf44      	itt	mi
 8009bea:	2320      	movmi	r3, #32
 8009bec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bf0:	0711      	lsls	r1, r2, #28
 8009bf2:	bf44      	itt	mi
 8009bf4:	232b      	movmi	r3, #43	@ 0x2b
 8009bf6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8009bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c00:	d015      	beq.n	8009c2e <_svfiprintf_r+0xfa>
 8009c02:	9a07      	ldr	r2, [sp, #28]
 8009c04:	4654      	mov	r4, sl
 8009c06:	2000      	movs	r0, #0
 8009c08:	f04f 0c0a 	mov.w	ip, #10
 8009c0c:	4621      	mov	r1, r4
 8009c0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c12:	3b30      	subs	r3, #48	@ 0x30
 8009c14:	2b09      	cmp	r3, #9
 8009c16:	d94b      	bls.n	8009cb0 <_svfiprintf_r+0x17c>
 8009c18:	b1b0      	cbz	r0, 8009c48 <_svfiprintf_r+0x114>
 8009c1a:	9207      	str	r2, [sp, #28]
 8009c1c:	e014      	b.n	8009c48 <_svfiprintf_r+0x114>
 8009c1e:	eba0 0308 	sub.w	r3, r0, r8
 8009c22:	fa09 f303 	lsl.w	r3, r9, r3
 8009c26:	4313      	orrs	r3, r2
 8009c28:	9304      	str	r3, [sp, #16]
 8009c2a:	46a2      	mov	sl, r4
 8009c2c:	e7d2      	b.n	8009bd4 <_svfiprintf_r+0xa0>
 8009c2e:	9b03      	ldr	r3, [sp, #12]
 8009c30:	1d19      	adds	r1, r3, #4
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	9103      	str	r1, [sp, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	bfbb      	ittet	lt
 8009c3a:	425b      	neglt	r3, r3
 8009c3c:	f042 0202 	orrlt.w	r2, r2, #2
 8009c40:	9307      	strge	r3, [sp, #28]
 8009c42:	9307      	strlt	r3, [sp, #28]
 8009c44:	bfb8      	it	lt
 8009c46:	9204      	strlt	r2, [sp, #16]
 8009c48:	7823      	ldrb	r3, [r4, #0]
 8009c4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009c4c:	d10a      	bne.n	8009c64 <_svfiprintf_r+0x130>
 8009c4e:	7863      	ldrb	r3, [r4, #1]
 8009c50:	2b2a      	cmp	r3, #42	@ 0x2a
 8009c52:	d132      	bne.n	8009cba <_svfiprintf_r+0x186>
 8009c54:	9b03      	ldr	r3, [sp, #12]
 8009c56:	1d1a      	adds	r2, r3, #4
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	9203      	str	r2, [sp, #12]
 8009c5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009c60:	3402      	adds	r4, #2
 8009c62:	9305      	str	r3, [sp, #20]
 8009c64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009d28 <_svfiprintf_r+0x1f4>
 8009c68:	7821      	ldrb	r1, [r4, #0]
 8009c6a:	2203      	movs	r2, #3
 8009c6c:	4650      	mov	r0, sl
 8009c6e:	f7f6 faaf 	bl	80001d0 <memchr>
 8009c72:	b138      	cbz	r0, 8009c84 <_svfiprintf_r+0x150>
 8009c74:	9b04      	ldr	r3, [sp, #16]
 8009c76:	eba0 000a 	sub.w	r0, r0, sl
 8009c7a:	2240      	movs	r2, #64	@ 0x40
 8009c7c:	4082      	lsls	r2, r0
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	3401      	adds	r4, #1
 8009c82:	9304      	str	r3, [sp, #16]
 8009c84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c88:	4824      	ldr	r0, [pc, #144]	@ (8009d1c <_svfiprintf_r+0x1e8>)
 8009c8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009c8e:	2206      	movs	r2, #6
 8009c90:	f7f6 fa9e 	bl	80001d0 <memchr>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d036      	beq.n	8009d06 <_svfiprintf_r+0x1d2>
 8009c98:	4b21      	ldr	r3, [pc, #132]	@ (8009d20 <_svfiprintf_r+0x1ec>)
 8009c9a:	bb1b      	cbnz	r3, 8009ce4 <_svfiprintf_r+0x1b0>
 8009c9c:	9b03      	ldr	r3, [sp, #12]
 8009c9e:	3307      	adds	r3, #7
 8009ca0:	f023 0307 	bic.w	r3, r3, #7
 8009ca4:	3308      	adds	r3, #8
 8009ca6:	9303      	str	r3, [sp, #12]
 8009ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009caa:	4433      	add	r3, r6
 8009cac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cae:	e76a      	b.n	8009b86 <_svfiprintf_r+0x52>
 8009cb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cb4:	460c      	mov	r4, r1
 8009cb6:	2001      	movs	r0, #1
 8009cb8:	e7a8      	b.n	8009c0c <_svfiprintf_r+0xd8>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	3401      	adds	r4, #1
 8009cbe:	9305      	str	r3, [sp, #20]
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	f04f 0c0a 	mov.w	ip, #10
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ccc:	3a30      	subs	r2, #48	@ 0x30
 8009cce:	2a09      	cmp	r2, #9
 8009cd0:	d903      	bls.n	8009cda <_svfiprintf_r+0x1a6>
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d0c6      	beq.n	8009c64 <_svfiprintf_r+0x130>
 8009cd6:	9105      	str	r1, [sp, #20]
 8009cd8:	e7c4      	b.n	8009c64 <_svfiprintf_r+0x130>
 8009cda:	fb0c 2101 	mla	r1, ip, r1, r2
 8009cde:	4604      	mov	r4, r0
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e7f0      	b.n	8009cc6 <_svfiprintf_r+0x192>
 8009ce4:	ab03      	add	r3, sp, #12
 8009ce6:	9300      	str	r3, [sp, #0]
 8009ce8:	462a      	mov	r2, r5
 8009cea:	4b0e      	ldr	r3, [pc, #56]	@ (8009d24 <_svfiprintf_r+0x1f0>)
 8009cec:	a904      	add	r1, sp, #16
 8009cee:	4638      	mov	r0, r7
 8009cf0:	f7fd fe96 	bl	8007a20 <_printf_float>
 8009cf4:	1c42      	adds	r2, r0, #1
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	d1d6      	bne.n	8009ca8 <_svfiprintf_r+0x174>
 8009cfa:	89ab      	ldrh	r3, [r5, #12]
 8009cfc:	065b      	lsls	r3, r3, #25
 8009cfe:	f53f af2d 	bmi.w	8009b5c <_svfiprintf_r+0x28>
 8009d02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009d04:	e72c      	b.n	8009b60 <_svfiprintf_r+0x2c>
 8009d06:	ab03      	add	r3, sp, #12
 8009d08:	9300      	str	r3, [sp, #0]
 8009d0a:	462a      	mov	r2, r5
 8009d0c:	4b05      	ldr	r3, [pc, #20]	@ (8009d24 <_svfiprintf_r+0x1f0>)
 8009d0e:	a904      	add	r1, sp, #16
 8009d10:	4638      	mov	r0, r7
 8009d12:	f7fe f91d 	bl	8007f50 <_printf_i>
 8009d16:	e7ed      	b.n	8009cf4 <_svfiprintf_r+0x1c0>
 8009d18:	0800b288 	.word	0x0800b288
 8009d1c:	0800b292 	.word	0x0800b292
 8009d20:	08007a21 	.word	0x08007a21
 8009d24:	08009a7d 	.word	0x08009a7d
 8009d28:	0800b28e 	.word	0x0800b28e

08009d2c <__sflush_r>:
 8009d2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d34:	0716      	lsls	r6, r2, #28
 8009d36:	4605      	mov	r5, r0
 8009d38:	460c      	mov	r4, r1
 8009d3a:	d454      	bmi.n	8009de6 <__sflush_r+0xba>
 8009d3c:	684b      	ldr	r3, [r1, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	dc02      	bgt.n	8009d48 <__sflush_r+0x1c>
 8009d42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	dd48      	ble.n	8009dda <__sflush_r+0xae>
 8009d48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d4a:	2e00      	cmp	r6, #0
 8009d4c:	d045      	beq.n	8009dda <__sflush_r+0xae>
 8009d4e:	2300      	movs	r3, #0
 8009d50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d54:	682f      	ldr	r7, [r5, #0]
 8009d56:	6a21      	ldr	r1, [r4, #32]
 8009d58:	602b      	str	r3, [r5, #0]
 8009d5a:	d030      	beq.n	8009dbe <__sflush_r+0x92>
 8009d5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	0759      	lsls	r1, r3, #29
 8009d62:	d505      	bpl.n	8009d70 <__sflush_r+0x44>
 8009d64:	6863      	ldr	r3, [r4, #4]
 8009d66:	1ad2      	subs	r2, r2, r3
 8009d68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d6a:	b10b      	cbz	r3, 8009d70 <__sflush_r+0x44>
 8009d6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d6e:	1ad2      	subs	r2, r2, r3
 8009d70:	2300      	movs	r3, #0
 8009d72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d74:	6a21      	ldr	r1, [r4, #32]
 8009d76:	4628      	mov	r0, r5
 8009d78:	47b0      	blx	r6
 8009d7a:	1c43      	adds	r3, r0, #1
 8009d7c:	89a3      	ldrh	r3, [r4, #12]
 8009d7e:	d106      	bne.n	8009d8e <__sflush_r+0x62>
 8009d80:	6829      	ldr	r1, [r5, #0]
 8009d82:	291d      	cmp	r1, #29
 8009d84:	d82b      	bhi.n	8009dde <__sflush_r+0xb2>
 8009d86:	4a2a      	ldr	r2, [pc, #168]	@ (8009e30 <__sflush_r+0x104>)
 8009d88:	410a      	asrs	r2, r1
 8009d8a:	07d6      	lsls	r6, r2, #31
 8009d8c:	d427      	bmi.n	8009dde <__sflush_r+0xb2>
 8009d8e:	2200      	movs	r2, #0
 8009d90:	6062      	str	r2, [r4, #4]
 8009d92:	04d9      	lsls	r1, r3, #19
 8009d94:	6922      	ldr	r2, [r4, #16]
 8009d96:	6022      	str	r2, [r4, #0]
 8009d98:	d504      	bpl.n	8009da4 <__sflush_r+0x78>
 8009d9a:	1c42      	adds	r2, r0, #1
 8009d9c:	d101      	bne.n	8009da2 <__sflush_r+0x76>
 8009d9e:	682b      	ldr	r3, [r5, #0]
 8009da0:	b903      	cbnz	r3, 8009da4 <__sflush_r+0x78>
 8009da2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009da4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009da6:	602f      	str	r7, [r5, #0]
 8009da8:	b1b9      	cbz	r1, 8009dda <__sflush_r+0xae>
 8009daa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dae:	4299      	cmp	r1, r3
 8009db0:	d002      	beq.n	8009db8 <__sflush_r+0x8c>
 8009db2:	4628      	mov	r0, r5
 8009db4:	f7ff f9e0 	bl	8009178 <_free_r>
 8009db8:	2300      	movs	r3, #0
 8009dba:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dbc:	e00d      	b.n	8009dda <__sflush_r+0xae>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	47b0      	blx	r6
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	1c50      	adds	r0, r2, #1
 8009dc8:	d1c9      	bne.n	8009d5e <__sflush_r+0x32>
 8009dca:	682b      	ldr	r3, [r5, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d0c6      	beq.n	8009d5e <__sflush_r+0x32>
 8009dd0:	2b1d      	cmp	r3, #29
 8009dd2:	d001      	beq.n	8009dd8 <__sflush_r+0xac>
 8009dd4:	2b16      	cmp	r3, #22
 8009dd6:	d11e      	bne.n	8009e16 <__sflush_r+0xea>
 8009dd8:	602f      	str	r7, [r5, #0]
 8009dda:	2000      	movs	r0, #0
 8009ddc:	e022      	b.n	8009e24 <__sflush_r+0xf8>
 8009dde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009de2:	b21b      	sxth	r3, r3
 8009de4:	e01b      	b.n	8009e1e <__sflush_r+0xf2>
 8009de6:	690f      	ldr	r7, [r1, #16]
 8009de8:	2f00      	cmp	r7, #0
 8009dea:	d0f6      	beq.n	8009dda <__sflush_r+0xae>
 8009dec:	0793      	lsls	r3, r2, #30
 8009dee:	680e      	ldr	r6, [r1, #0]
 8009df0:	bf08      	it	eq
 8009df2:	694b      	ldreq	r3, [r1, #20]
 8009df4:	600f      	str	r7, [r1, #0]
 8009df6:	bf18      	it	ne
 8009df8:	2300      	movne	r3, #0
 8009dfa:	eba6 0807 	sub.w	r8, r6, r7
 8009dfe:	608b      	str	r3, [r1, #8]
 8009e00:	f1b8 0f00 	cmp.w	r8, #0
 8009e04:	dde9      	ble.n	8009dda <__sflush_r+0xae>
 8009e06:	6a21      	ldr	r1, [r4, #32]
 8009e08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009e0a:	4643      	mov	r3, r8
 8009e0c:	463a      	mov	r2, r7
 8009e0e:	4628      	mov	r0, r5
 8009e10:	47b0      	blx	r6
 8009e12:	2800      	cmp	r0, #0
 8009e14:	dc08      	bgt.n	8009e28 <__sflush_r+0xfc>
 8009e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e1e:	81a3      	strh	r3, [r4, #12]
 8009e20:	f04f 30ff 	mov.w	r0, #4294967295
 8009e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e28:	4407      	add	r7, r0
 8009e2a:	eba8 0800 	sub.w	r8, r8, r0
 8009e2e:	e7e7      	b.n	8009e00 <__sflush_r+0xd4>
 8009e30:	dfbffffe 	.word	0xdfbffffe

08009e34 <_fflush_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	690b      	ldr	r3, [r1, #16]
 8009e38:	4605      	mov	r5, r0
 8009e3a:	460c      	mov	r4, r1
 8009e3c:	b913      	cbnz	r3, 8009e44 <_fflush_r+0x10>
 8009e3e:	2500      	movs	r5, #0
 8009e40:	4628      	mov	r0, r5
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	b118      	cbz	r0, 8009e4e <_fflush_r+0x1a>
 8009e46:	6a03      	ldr	r3, [r0, #32]
 8009e48:	b90b      	cbnz	r3, 8009e4e <_fflush_r+0x1a>
 8009e4a:	f7fe fa2d 	bl	80082a8 <__sinit>
 8009e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d0f3      	beq.n	8009e3e <_fflush_r+0xa>
 8009e56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e58:	07d0      	lsls	r0, r2, #31
 8009e5a:	d404      	bmi.n	8009e66 <_fflush_r+0x32>
 8009e5c:	0599      	lsls	r1, r3, #22
 8009e5e:	d402      	bmi.n	8009e66 <_fflush_r+0x32>
 8009e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e62:	f7fe fb38 	bl	80084d6 <__retarget_lock_acquire_recursive>
 8009e66:	4628      	mov	r0, r5
 8009e68:	4621      	mov	r1, r4
 8009e6a:	f7ff ff5f 	bl	8009d2c <__sflush_r>
 8009e6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e70:	07da      	lsls	r2, r3, #31
 8009e72:	4605      	mov	r5, r0
 8009e74:	d4e4      	bmi.n	8009e40 <_fflush_r+0xc>
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	059b      	lsls	r3, r3, #22
 8009e7a:	d4e1      	bmi.n	8009e40 <_fflush_r+0xc>
 8009e7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e7e:	f7fe fb2b 	bl	80084d8 <__retarget_lock_release_recursive>
 8009e82:	e7dd      	b.n	8009e40 <_fflush_r+0xc>

08009e84 <memmove>:
 8009e84:	4288      	cmp	r0, r1
 8009e86:	b510      	push	{r4, lr}
 8009e88:	eb01 0402 	add.w	r4, r1, r2
 8009e8c:	d902      	bls.n	8009e94 <memmove+0x10>
 8009e8e:	4284      	cmp	r4, r0
 8009e90:	4623      	mov	r3, r4
 8009e92:	d807      	bhi.n	8009ea4 <memmove+0x20>
 8009e94:	1e43      	subs	r3, r0, #1
 8009e96:	42a1      	cmp	r1, r4
 8009e98:	d008      	beq.n	8009eac <memmove+0x28>
 8009e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ea2:	e7f8      	b.n	8009e96 <memmove+0x12>
 8009ea4:	4402      	add	r2, r0
 8009ea6:	4601      	mov	r1, r0
 8009ea8:	428a      	cmp	r2, r1
 8009eaa:	d100      	bne.n	8009eae <memmove+0x2a>
 8009eac:	bd10      	pop	{r4, pc}
 8009eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009eb6:	e7f7      	b.n	8009ea8 <memmove+0x24>

08009eb8 <_sbrk_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4d06      	ldr	r5, [pc, #24]	@ (8009ed4 <_sbrk_r+0x1c>)
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	4608      	mov	r0, r1
 8009ec2:	602b      	str	r3, [r5, #0]
 8009ec4:	f7f9 f848 	bl	8002f58 <_sbrk>
 8009ec8:	1c43      	adds	r3, r0, #1
 8009eca:	d102      	bne.n	8009ed2 <_sbrk_r+0x1a>
 8009ecc:	682b      	ldr	r3, [r5, #0]
 8009ece:	b103      	cbz	r3, 8009ed2 <_sbrk_r+0x1a>
 8009ed0:	6023      	str	r3, [r4, #0]
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	20000dd4 	.word	0x20000dd4

08009ed8 <memcpy>:
 8009ed8:	440a      	add	r2, r1
 8009eda:	4291      	cmp	r1, r2
 8009edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ee0:	d100      	bne.n	8009ee4 <memcpy+0xc>
 8009ee2:	4770      	bx	lr
 8009ee4:	b510      	push	{r4, lr}
 8009ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eee:	4291      	cmp	r1, r2
 8009ef0:	d1f9      	bne.n	8009ee6 <memcpy+0xe>
 8009ef2:	bd10      	pop	{r4, pc}

08009ef4 <__assert_func>:
 8009ef4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009ef6:	4614      	mov	r4, r2
 8009ef8:	461a      	mov	r2, r3
 8009efa:	4b09      	ldr	r3, [pc, #36]	@ (8009f20 <__assert_func+0x2c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	4605      	mov	r5, r0
 8009f00:	68d8      	ldr	r0, [r3, #12]
 8009f02:	b954      	cbnz	r4, 8009f1a <__assert_func+0x26>
 8009f04:	4b07      	ldr	r3, [pc, #28]	@ (8009f24 <__assert_func+0x30>)
 8009f06:	461c      	mov	r4, r3
 8009f08:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f0c:	9100      	str	r1, [sp, #0]
 8009f0e:	462b      	mov	r3, r5
 8009f10:	4905      	ldr	r1, [pc, #20]	@ (8009f28 <__assert_func+0x34>)
 8009f12:	f000 f86f 	bl	8009ff4 <fiprintf>
 8009f16:	f000 f87f 	bl	800a018 <abort>
 8009f1a:	4b04      	ldr	r3, [pc, #16]	@ (8009f2c <__assert_func+0x38>)
 8009f1c:	e7f4      	b.n	8009f08 <__assert_func+0x14>
 8009f1e:	bf00      	nop
 8009f20:	20000020 	.word	0x20000020
 8009f24:	0800b2de 	.word	0x0800b2de
 8009f28:	0800b2b0 	.word	0x0800b2b0
 8009f2c:	0800b2a3 	.word	0x0800b2a3

08009f30 <_calloc_r>:
 8009f30:	b570      	push	{r4, r5, r6, lr}
 8009f32:	fba1 5402 	umull	r5, r4, r1, r2
 8009f36:	b93c      	cbnz	r4, 8009f48 <_calloc_r+0x18>
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7ff f991 	bl	8009260 <_malloc_r>
 8009f3e:	4606      	mov	r6, r0
 8009f40:	b928      	cbnz	r0, 8009f4e <_calloc_r+0x1e>
 8009f42:	2600      	movs	r6, #0
 8009f44:	4630      	mov	r0, r6
 8009f46:	bd70      	pop	{r4, r5, r6, pc}
 8009f48:	220c      	movs	r2, #12
 8009f4a:	6002      	str	r2, [r0, #0]
 8009f4c:	e7f9      	b.n	8009f42 <_calloc_r+0x12>
 8009f4e:	462a      	mov	r2, r5
 8009f50:	4621      	mov	r1, r4
 8009f52:	f7fe fa42 	bl	80083da <memset>
 8009f56:	e7f5      	b.n	8009f44 <_calloc_r+0x14>

08009f58 <__ascii_mbtowc>:
 8009f58:	b082      	sub	sp, #8
 8009f5a:	b901      	cbnz	r1, 8009f5e <__ascii_mbtowc+0x6>
 8009f5c:	a901      	add	r1, sp, #4
 8009f5e:	b142      	cbz	r2, 8009f72 <__ascii_mbtowc+0x1a>
 8009f60:	b14b      	cbz	r3, 8009f76 <__ascii_mbtowc+0x1e>
 8009f62:	7813      	ldrb	r3, [r2, #0]
 8009f64:	600b      	str	r3, [r1, #0]
 8009f66:	7812      	ldrb	r2, [r2, #0]
 8009f68:	1e10      	subs	r0, r2, #0
 8009f6a:	bf18      	it	ne
 8009f6c:	2001      	movne	r0, #1
 8009f6e:	b002      	add	sp, #8
 8009f70:	4770      	bx	lr
 8009f72:	4610      	mov	r0, r2
 8009f74:	e7fb      	b.n	8009f6e <__ascii_mbtowc+0x16>
 8009f76:	f06f 0001 	mvn.w	r0, #1
 8009f7a:	e7f8      	b.n	8009f6e <__ascii_mbtowc+0x16>

08009f7c <_realloc_r>:
 8009f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f80:	4680      	mov	r8, r0
 8009f82:	4615      	mov	r5, r2
 8009f84:	460c      	mov	r4, r1
 8009f86:	b921      	cbnz	r1, 8009f92 <_realloc_r+0x16>
 8009f88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8c:	4611      	mov	r1, r2
 8009f8e:	f7ff b967 	b.w	8009260 <_malloc_r>
 8009f92:	b92a      	cbnz	r2, 8009fa0 <_realloc_r+0x24>
 8009f94:	f7ff f8f0 	bl	8009178 <_free_r>
 8009f98:	2400      	movs	r4, #0
 8009f9a:	4620      	mov	r0, r4
 8009f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fa0:	f000 f841 	bl	800a026 <_malloc_usable_size_r>
 8009fa4:	4285      	cmp	r5, r0
 8009fa6:	4606      	mov	r6, r0
 8009fa8:	d802      	bhi.n	8009fb0 <_realloc_r+0x34>
 8009faa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009fae:	d8f4      	bhi.n	8009f9a <_realloc_r+0x1e>
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	f7ff f954 	bl	8009260 <_malloc_r>
 8009fb8:	4607      	mov	r7, r0
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d0ec      	beq.n	8009f98 <_realloc_r+0x1c>
 8009fbe:	42b5      	cmp	r5, r6
 8009fc0:	462a      	mov	r2, r5
 8009fc2:	4621      	mov	r1, r4
 8009fc4:	bf28      	it	cs
 8009fc6:	4632      	movcs	r2, r6
 8009fc8:	f7ff ff86 	bl	8009ed8 <memcpy>
 8009fcc:	4621      	mov	r1, r4
 8009fce:	4640      	mov	r0, r8
 8009fd0:	f7ff f8d2 	bl	8009178 <_free_r>
 8009fd4:	463c      	mov	r4, r7
 8009fd6:	e7e0      	b.n	8009f9a <_realloc_r+0x1e>

08009fd8 <__ascii_wctomb>:
 8009fd8:	4603      	mov	r3, r0
 8009fda:	4608      	mov	r0, r1
 8009fdc:	b141      	cbz	r1, 8009ff0 <__ascii_wctomb+0x18>
 8009fde:	2aff      	cmp	r2, #255	@ 0xff
 8009fe0:	d904      	bls.n	8009fec <__ascii_wctomb+0x14>
 8009fe2:	228a      	movs	r2, #138	@ 0x8a
 8009fe4:	601a      	str	r2, [r3, #0]
 8009fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fea:	4770      	bx	lr
 8009fec:	700a      	strb	r2, [r1, #0]
 8009fee:	2001      	movs	r0, #1
 8009ff0:	4770      	bx	lr
	...

08009ff4 <fiprintf>:
 8009ff4:	b40e      	push	{r1, r2, r3}
 8009ff6:	b503      	push	{r0, r1, lr}
 8009ff8:	4601      	mov	r1, r0
 8009ffa:	ab03      	add	r3, sp, #12
 8009ffc:	4805      	ldr	r0, [pc, #20]	@ (800a014 <fiprintf+0x20>)
 8009ffe:	f853 2b04 	ldr.w	r2, [r3], #4
 800a002:	6800      	ldr	r0, [r0, #0]
 800a004:	9301      	str	r3, [sp, #4]
 800a006:	f000 f83f 	bl	800a088 <_vfiprintf_r>
 800a00a:	b002      	add	sp, #8
 800a00c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a010:	b003      	add	sp, #12
 800a012:	4770      	bx	lr
 800a014:	20000020 	.word	0x20000020

0800a018 <abort>:
 800a018:	b508      	push	{r3, lr}
 800a01a:	2006      	movs	r0, #6
 800a01c:	f000 fa08 	bl	800a430 <raise>
 800a020:	2001      	movs	r0, #1
 800a022:	f7f8 ff21 	bl	8002e68 <_exit>

0800a026 <_malloc_usable_size_r>:
 800a026:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a02a:	1f18      	subs	r0, r3, #4
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	bfbc      	itt	lt
 800a030:	580b      	ldrlt	r3, [r1, r0]
 800a032:	18c0      	addlt	r0, r0, r3
 800a034:	4770      	bx	lr

0800a036 <__sfputc_r>:
 800a036:	6893      	ldr	r3, [r2, #8]
 800a038:	3b01      	subs	r3, #1
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	b410      	push	{r4}
 800a03e:	6093      	str	r3, [r2, #8]
 800a040:	da08      	bge.n	800a054 <__sfputc_r+0x1e>
 800a042:	6994      	ldr	r4, [r2, #24]
 800a044:	42a3      	cmp	r3, r4
 800a046:	db01      	blt.n	800a04c <__sfputc_r+0x16>
 800a048:	290a      	cmp	r1, #10
 800a04a:	d103      	bne.n	800a054 <__sfputc_r+0x1e>
 800a04c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a050:	f000 b932 	b.w	800a2b8 <__swbuf_r>
 800a054:	6813      	ldr	r3, [r2, #0]
 800a056:	1c58      	adds	r0, r3, #1
 800a058:	6010      	str	r0, [r2, #0]
 800a05a:	7019      	strb	r1, [r3, #0]
 800a05c:	4608      	mov	r0, r1
 800a05e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <__sfputs_r>:
 800a064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a066:	4606      	mov	r6, r0
 800a068:	460f      	mov	r7, r1
 800a06a:	4614      	mov	r4, r2
 800a06c:	18d5      	adds	r5, r2, r3
 800a06e:	42ac      	cmp	r4, r5
 800a070:	d101      	bne.n	800a076 <__sfputs_r+0x12>
 800a072:	2000      	movs	r0, #0
 800a074:	e007      	b.n	800a086 <__sfputs_r+0x22>
 800a076:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a07a:	463a      	mov	r2, r7
 800a07c:	4630      	mov	r0, r6
 800a07e:	f7ff ffda 	bl	800a036 <__sfputc_r>
 800a082:	1c43      	adds	r3, r0, #1
 800a084:	d1f3      	bne.n	800a06e <__sfputs_r+0xa>
 800a086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a088 <_vfiprintf_r>:
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	460d      	mov	r5, r1
 800a08e:	b09d      	sub	sp, #116	@ 0x74
 800a090:	4614      	mov	r4, r2
 800a092:	4698      	mov	r8, r3
 800a094:	4606      	mov	r6, r0
 800a096:	b118      	cbz	r0, 800a0a0 <_vfiprintf_r+0x18>
 800a098:	6a03      	ldr	r3, [r0, #32]
 800a09a:	b90b      	cbnz	r3, 800a0a0 <_vfiprintf_r+0x18>
 800a09c:	f7fe f904 	bl	80082a8 <__sinit>
 800a0a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0a2:	07d9      	lsls	r1, r3, #31
 800a0a4:	d405      	bmi.n	800a0b2 <_vfiprintf_r+0x2a>
 800a0a6:	89ab      	ldrh	r3, [r5, #12]
 800a0a8:	059a      	lsls	r2, r3, #22
 800a0aa:	d402      	bmi.n	800a0b2 <_vfiprintf_r+0x2a>
 800a0ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0ae:	f7fe fa12 	bl	80084d6 <__retarget_lock_acquire_recursive>
 800a0b2:	89ab      	ldrh	r3, [r5, #12]
 800a0b4:	071b      	lsls	r3, r3, #28
 800a0b6:	d501      	bpl.n	800a0bc <_vfiprintf_r+0x34>
 800a0b8:	692b      	ldr	r3, [r5, #16]
 800a0ba:	b99b      	cbnz	r3, 800a0e4 <_vfiprintf_r+0x5c>
 800a0bc:	4629      	mov	r1, r5
 800a0be:	4630      	mov	r0, r6
 800a0c0:	f000 f938 	bl	800a334 <__swsetup_r>
 800a0c4:	b170      	cbz	r0, 800a0e4 <_vfiprintf_r+0x5c>
 800a0c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0c8:	07dc      	lsls	r4, r3, #31
 800a0ca:	d504      	bpl.n	800a0d6 <_vfiprintf_r+0x4e>
 800a0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0d0:	b01d      	add	sp, #116	@ 0x74
 800a0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d6:	89ab      	ldrh	r3, [r5, #12]
 800a0d8:	0598      	lsls	r0, r3, #22
 800a0da:	d4f7      	bmi.n	800a0cc <_vfiprintf_r+0x44>
 800a0dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a0de:	f7fe f9fb 	bl	80084d8 <__retarget_lock_release_recursive>
 800a0e2:	e7f3      	b.n	800a0cc <_vfiprintf_r+0x44>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0e8:	2320      	movs	r3, #32
 800a0ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a0ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0f2:	2330      	movs	r3, #48	@ 0x30
 800a0f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a2a4 <_vfiprintf_r+0x21c>
 800a0f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a0fc:	f04f 0901 	mov.w	r9, #1
 800a100:	4623      	mov	r3, r4
 800a102:	469a      	mov	sl, r3
 800a104:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a108:	b10a      	cbz	r2, 800a10e <_vfiprintf_r+0x86>
 800a10a:	2a25      	cmp	r2, #37	@ 0x25
 800a10c:	d1f9      	bne.n	800a102 <_vfiprintf_r+0x7a>
 800a10e:	ebba 0b04 	subs.w	fp, sl, r4
 800a112:	d00b      	beq.n	800a12c <_vfiprintf_r+0xa4>
 800a114:	465b      	mov	r3, fp
 800a116:	4622      	mov	r2, r4
 800a118:	4629      	mov	r1, r5
 800a11a:	4630      	mov	r0, r6
 800a11c:	f7ff ffa2 	bl	800a064 <__sfputs_r>
 800a120:	3001      	adds	r0, #1
 800a122:	f000 80a7 	beq.w	800a274 <_vfiprintf_r+0x1ec>
 800a126:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a128:	445a      	add	r2, fp
 800a12a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a12c:	f89a 3000 	ldrb.w	r3, [sl]
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 809f 	beq.w	800a274 <_vfiprintf_r+0x1ec>
 800a136:	2300      	movs	r3, #0
 800a138:	f04f 32ff 	mov.w	r2, #4294967295
 800a13c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a140:	f10a 0a01 	add.w	sl, sl, #1
 800a144:	9304      	str	r3, [sp, #16]
 800a146:	9307      	str	r3, [sp, #28]
 800a148:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a14c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a14e:	4654      	mov	r4, sl
 800a150:	2205      	movs	r2, #5
 800a152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a156:	4853      	ldr	r0, [pc, #332]	@ (800a2a4 <_vfiprintf_r+0x21c>)
 800a158:	f7f6 f83a 	bl	80001d0 <memchr>
 800a15c:	9a04      	ldr	r2, [sp, #16]
 800a15e:	b9d8      	cbnz	r0, 800a198 <_vfiprintf_r+0x110>
 800a160:	06d1      	lsls	r1, r2, #27
 800a162:	bf44      	itt	mi
 800a164:	2320      	movmi	r3, #32
 800a166:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a16a:	0713      	lsls	r3, r2, #28
 800a16c:	bf44      	itt	mi
 800a16e:	232b      	movmi	r3, #43	@ 0x2b
 800a170:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a174:	f89a 3000 	ldrb.w	r3, [sl]
 800a178:	2b2a      	cmp	r3, #42	@ 0x2a
 800a17a:	d015      	beq.n	800a1a8 <_vfiprintf_r+0x120>
 800a17c:	9a07      	ldr	r2, [sp, #28]
 800a17e:	4654      	mov	r4, sl
 800a180:	2000      	movs	r0, #0
 800a182:	f04f 0c0a 	mov.w	ip, #10
 800a186:	4621      	mov	r1, r4
 800a188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a18c:	3b30      	subs	r3, #48	@ 0x30
 800a18e:	2b09      	cmp	r3, #9
 800a190:	d94b      	bls.n	800a22a <_vfiprintf_r+0x1a2>
 800a192:	b1b0      	cbz	r0, 800a1c2 <_vfiprintf_r+0x13a>
 800a194:	9207      	str	r2, [sp, #28]
 800a196:	e014      	b.n	800a1c2 <_vfiprintf_r+0x13a>
 800a198:	eba0 0308 	sub.w	r3, r0, r8
 800a19c:	fa09 f303 	lsl.w	r3, r9, r3
 800a1a0:	4313      	orrs	r3, r2
 800a1a2:	9304      	str	r3, [sp, #16]
 800a1a4:	46a2      	mov	sl, r4
 800a1a6:	e7d2      	b.n	800a14e <_vfiprintf_r+0xc6>
 800a1a8:	9b03      	ldr	r3, [sp, #12]
 800a1aa:	1d19      	adds	r1, r3, #4
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	9103      	str	r1, [sp, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	bfbb      	ittet	lt
 800a1b4:	425b      	neglt	r3, r3
 800a1b6:	f042 0202 	orrlt.w	r2, r2, #2
 800a1ba:	9307      	strge	r3, [sp, #28]
 800a1bc:	9307      	strlt	r3, [sp, #28]
 800a1be:	bfb8      	it	lt
 800a1c0:	9204      	strlt	r2, [sp, #16]
 800a1c2:	7823      	ldrb	r3, [r4, #0]
 800a1c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a1c6:	d10a      	bne.n	800a1de <_vfiprintf_r+0x156>
 800a1c8:	7863      	ldrb	r3, [r4, #1]
 800a1ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1cc:	d132      	bne.n	800a234 <_vfiprintf_r+0x1ac>
 800a1ce:	9b03      	ldr	r3, [sp, #12]
 800a1d0:	1d1a      	adds	r2, r3, #4
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	9203      	str	r2, [sp, #12]
 800a1d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a1da:	3402      	adds	r4, #2
 800a1dc:	9305      	str	r3, [sp, #20]
 800a1de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a2b4 <_vfiprintf_r+0x22c>
 800a1e2:	7821      	ldrb	r1, [r4, #0]
 800a1e4:	2203      	movs	r2, #3
 800a1e6:	4650      	mov	r0, sl
 800a1e8:	f7f5 fff2 	bl	80001d0 <memchr>
 800a1ec:	b138      	cbz	r0, 800a1fe <_vfiprintf_r+0x176>
 800a1ee:	9b04      	ldr	r3, [sp, #16]
 800a1f0:	eba0 000a 	sub.w	r0, r0, sl
 800a1f4:	2240      	movs	r2, #64	@ 0x40
 800a1f6:	4082      	lsls	r2, r0
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	3401      	adds	r4, #1
 800a1fc:	9304      	str	r3, [sp, #16]
 800a1fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a202:	4829      	ldr	r0, [pc, #164]	@ (800a2a8 <_vfiprintf_r+0x220>)
 800a204:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a208:	2206      	movs	r2, #6
 800a20a:	f7f5 ffe1 	bl	80001d0 <memchr>
 800a20e:	2800      	cmp	r0, #0
 800a210:	d03f      	beq.n	800a292 <_vfiprintf_r+0x20a>
 800a212:	4b26      	ldr	r3, [pc, #152]	@ (800a2ac <_vfiprintf_r+0x224>)
 800a214:	bb1b      	cbnz	r3, 800a25e <_vfiprintf_r+0x1d6>
 800a216:	9b03      	ldr	r3, [sp, #12]
 800a218:	3307      	adds	r3, #7
 800a21a:	f023 0307 	bic.w	r3, r3, #7
 800a21e:	3308      	adds	r3, #8
 800a220:	9303      	str	r3, [sp, #12]
 800a222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a224:	443b      	add	r3, r7
 800a226:	9309      	str	r3, [sp, #36]	@ 0x24
 800a228:	e76a      	b.n	800a100 <_vfiprintf_r+0x78>
 800a22a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a22e:	460c      	mov	r4, r1
 800a230:	2001      	movs	r0, #1
 800a232:	e7a8      	b.n	800a186 <_vfiprintf_r+0xfe>
 800a234:	2300      	movs	r3, #0
 800a236:	3401      	adds	r4, #1
 800a238:	9305      	str	r3, [sp, #20]
 800a23a:	4619      	mov	r1, r3
 800a23c:	f04f 0c0a 	mov.w	ip, #10
 800a240:	4620      	mov	r0, r4
 800a242:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a246:	3a30      	subs	r2, #48	@ 0x30
 800a248:	2a09      	cmp	r2, #9
 800a24a:	d903      	bls.n	800a254 <_vfiprintf_r+0x1cc>
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d0c6      	beq.n	800a1de <_vfiprintf_r+0x156>
 800a250:	9105      	str	r1, [sp, #20]
 800a252:	e7c4      	b.n	800a1de <_vfiprintf_r+0x156>
 800a254:	fb0c 2101 	mla	r1, ip, r1, r2
 800a258:	4604      	mov	r4, r0
 800a25a:	2301      	movs	r3, #1
 800a25c:	e7f0      	b.n	800a240 <_vfiprintf_r+0x1b8>
 800a25e:	ab03      	add	r3, sp, #12
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	462a      	mov	r2, r5
 800a264:	4b12      	ldr	r3, [pc, #72]	@ (800a2b0 <_vfiprintf_r+0x228>)
 800a266:	a904      	add	r1, sp, #16
 800a268:	4630      	mov	r0, r6
 800a26a:	f7fd fbd9 	bl	8007a20 <_printf_float>
 800a26e:	4607      	mov	r7, r0
 800a270:	1c78      	adds	r0, r7, #1
 800a272:	d1d6      	bne.n	800a222 <_vfiprintf_r+0x19a>
 800a274:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a276:	07d9      	lsls	r1, r3, #31
 800a278:	d405      	bmi.n	800a286 <_vfiprintf_r+0x1fe>
 800a27a:	89ab      	ldrh	r3, [r5, #12]
 800a27c:	059a      	lsls	r2, r3, #22
 800a27e:	d402      	bmi.n	800a286 <_vfiprintf_r+0x1fe>
 800a280:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a282:	f7fe f929 	bl	80084d8 <__retarget_lock_release_recursive>
 800a286:	89ab      	ldrh	r3, [r5, #12]
 800a288:	065b      	lsls	r3, r3, #25
 800a28a:	f53f af1f 	bmi.w	800a0cc <_vfiprintf_r+0x44>
 800a28e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a290:	e71e      	b.n	800a0d0 <_vfiprintf_r+0x48>
 800a292:	ab03      	add	r3, sp, #12
 800a294:	9300      	str	r3, [sp, #0]
 800a296:	462a      	mov	r2, r5
 800a298:	4b05      	ldr	r3, [pc, #20]	@ (800a2b0 <_vfiprintf_r+0x228>)
 800a29a:	a904      	add	r1, sp, #16
 800a29c:	4630      	mov	r0, r6
 800a29e:	f7fd fe57 	bl	8007f50 <_printf_i>
 800a2a2:	e7e4      	b.n	800a26e <_vfiprintf_r+0x1e6>
 800a2a4:	0800b288 	.word	0x0800b288
 800a2a8:	0800b292 	.word	0x0800b292
 800a2ac:	08007a21 	.word	0x08007a21
 800a2b0:	0800a065 	.word	0x0800a065
 800a2b4:	0800b28e 	.word	0x0800b28e

0800a2b8 <__swbuf_r>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	460e      	mov	r6, r1
 800a2bc:	4614      	mov	r4, r2
 800a2be:	4605      	mov	r5, r0
 800a2c0:	b118      	cbz	r0, 800a2ca <__swbuf_r+0x12>
 800a2c2:	6a03      	ldr	r3, [r0, #32]
 800a2c4:	b90b      	cbnz	r3, 800a2ca <__swbuf_r+0x12>
 800a2c6:	f7fd ffef 	bl	80082a8 <__sinit>
 800a2ca:	69a3      	ldr	r3, [r4, #24]
 800a2cc:	60a3      	str	r3, [r4, #8]
 800a2ce:	89a3      	ldrh	r3, [r4, #12]
 800a2d0:	071a      	lsls	r2, r3, #28
 800a2d2:	d501      	bpl.n	800a2d8 <__swbuf_r+0x20>
 800a2d4:	6923      	ldr	r3, [r4, #16]
 800a2d6:	b943      	cbnz	r3, 800a2ea <__swbuf_r+0x32>
 800a2d8:	4621      	mov	r1, r4
 800a2da:	4628      	mov	r0, r5
 800a2dc:	f000 f82a 	bl	800a334 <__swsetup_r>
 800a2e0:	b118      	cbz	r0, 800a2ea <__swbuf_r+0x32>
 800a2e2:	f04f 37ff 	mov.w	r7, #4294967295
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	6922      	ldr	r2, [r4, #16]
 800a2ee:	1a98      	subs	r0, r3, r2
 800a2f0:	6963      	ldr	r3, [r4, #20]
 800a2f2:	b2f6      	uxtb	r6, r6
 800a2f4:	4283      	cmp	r3, r0
 800a2f6:	4637      	mov	r7, r6
 800a2f8:	dc05      	bgt.n	800a306 <__swbuf_r+0x4e>
 800a2fa:	4621      	mov	r1, r4
 800a2fc:	4628      	mov	r0, r5
 800a2fe:	f7ff fd99 	bl	8009e34 <_fflush_r>
 800a302:	2800      	cmp	r0, #0
 800a304:	d1ed      	bne.n	800a2e2 <__swbuf_r+0x2a>
 800a306:	68a3      	ldr	r3, [r4, #8]
 800a308:	3b01      	subs	r3, #1
 800a30a:	60a3      	str	r3, [r4, #8]
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	1c5a      	adds	r2, r3, #1
 800a310:	6022      	str	r2, [r4, #0]
 800a312:	701e      	strb	r6, [r3, #0]
 800a314:	6962      	ldr	r2, [r4, #20]
 800a316:	1c43      	adds	r3, r0, #1
 800a318:	429a      	cmp	r2, r3
 800a31a:	d004      	beq.n	800a326 <__swbuf_r+0x6e>
 800a31c:	89a3      	ldrh	r3, [r4, #12]
 800a31e:	07db      	lsls	r3, r3, #31
 800a320:	d5e1      	bpl.n	800a2e6 <__swbuf_r+0x2e>
 800a322:	2e0a      	cmp	r6, #10
 800a324:	d1df      	bne.n	800a2e6 <__swbuf_r+0x2e>
 800a326:	4621      	mov	r1, r4
 800a328:	4628      	mov	r0, r5
 800a32a:	f7ff fd83 	bl	8009e34 <_fflush_r>
 800a32e:	2800      	cmp	r0, #0
 800a330:	d0d9      	beq.n	800a2e6 <__swbuf_r+0x2e>
 800a332:	e7d6      	b.n	800a2e2 <__swbuf_r+0x2a>

0800a334 <__swsetup_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	4b29      	ldr	r3, [pc, #164]	@ (800a3dc <__swsetup_r+0xa8>)
 800a338:	4605      	mov	r5, r0
 800a33a:	6818      	ldr	r0, [r3, #0]
 800a33c:	460c      	mov	r4, r1
 800a33e:	b118      	cbz	r0, 800a348 <__swsetup_r+0x14>
 800a340:	6a03      	ldr	r3, [r0, #32]
 800a342:	b90b      	cbnz	r3, 800a348 <__swsetup_r+0x14>
 800a344:	f7fd ffb0 	bl	80082a8 <__sinit>
 800a348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a34c:	0719      	lsls	r1, r3, #28
 800a34e:	d422      	bmi.n	800a396 <__swsetup_r+0x62>
 800a350:	06da      	lsls	r2, r3, #27
 800a352:	d407      	bmi.n	800a364 <__swsetup_r+0x30>
 800a354:	2209      	movs	r2, #9
 800a356:	602a      	str	r2, [r5, #0]
 800a358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a35c:	81a3      	strh	r3, [r4, #12]
 800a35e:	f04f 30ff 	mov.w	r0, #4294967295
 800a362:	e033      	b.n	800a3cc <__swsetup_r+0x98>
 800a364:	0758      	lsls	r0, r3, #29
 800a366:	d512      	bpl.n	800a38e <__swsetup_r+0x5a>
 800a368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a36a:	b141      	cbz	r1, 800a37e <__swsetup_r+0x4a>
 800a36c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a370:	4299      	cmp	r1, r3
 800a372:	d002      	beq.n	800a37a <__swsetup_r+0x46>
 800a374:	4628      	mov	r0, r5
 800a376:	f7fe feff 	bl	8009178 <_free_r>
 800a37a:	2300      	movs	r3, #0
 800a37c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a37e:	89a3      	ldrh	r3, [r4, #12]
 800a380:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a384:	81a3      	strh	r3, [r4, #12]
 800a386:	2300      	movs	r3, #0
 800a388:	6063      	str	r3, [r4, #4]
 800a38a:	6923      	ldr	r3, [r4, #16]
 800a38c:	6023      	str	r3, [r4, #0]
 800a38e:	89a3      	ldrh	r3, [r4, #12]
 800a390:	f043 0308 	orr.w	r3, r3, #8
 800a394:	81a3      	strh	r3, [r4, #12]
 800a396:	6923      	ldr	r3, [r4, #16]
 800a398:	b94b      	cbnz	r3, 800a3ae <__swsetup_r+0x7a>
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a3a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3a4:	d003      	beq.n	800a3ae <__swsetup_r+0x7a>
 800a3a6:	4621      	mov	r1, r4
 800a3a8:	4628      	mov	r0, r5
 800a3aa:	f000 f883 	bl	800a4b4 <__smakebuf_r>
 800a3ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3b2:	f013 0201 	ands.w	r2, r3, #1
 800a3b6:	d00a      	beq.n	800a3ce <__swsetup_r+0x9a>
 800a3b8:	2200      	movs	r2, #0
 800a3ba:	60a2      	str	r2, [r4, #8]
 800a3bc:	6962      	ldr	r2, [r4, #20]
 800a3be:	4252      	negs	r2, r2
 800a3c0:	61a2      	str	r2, [r4, #24]
 800a3c2:	6922      	ldr	r2, [r4, #16]
 800a3c4:	b942      	cbnz	r2, 800a3d8 <__swsetup_r+0xa4>
 800a3c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a3ca:	d1c5      	bne.n	800a358 <__swsetup_r+0x24>
 800a3cc:	bd38      	pop	{r3, r4, r5, pc}
 800a3ce:	0799      	lsls	r1, r3, #30
 800a3d0:	bf58      	it	pl
 800a3d2:	6962      	ldrpl	r2, [r4, #20]
 800a3d4:	60a2      	str	r2, [r4, #8]
 800a3d6:	e7f4      	b.n	800a3c2 <__swsetup_r+0x8e>
 800a3d8:	2000      	movs	r0, #0
 800a3da:	e7f7      	b.n	800a3cc <__swsetup_r+0x98>
 800a3dc:	20000020 	.word	0x20000020

0800a3e0 <_raise_r>:
 800a3e0:	291f      	cmp	r1, #31
 800a3e2:	b538      	push	{r3, r4, r5, lr}
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	d904      	bls.n	800a3f4 <_raise_r+0x14>
 800a3ea:	2316      	movs	r3, #22
 800a3ec:	6003      	str	r3, [r0, #0]
 800a3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f2:	bd38      	pop	{r3, r4, r5, pc}
 800a3f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a3f6:	b112      	cbz	r2, 800a3fe <_raise_r+0x1e>
 800a3f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a3fc:	b94b      	cbnz	r3, 800a412 <_raise_r+0x32>
 800a3fe:	4628      	mov	r0, r5
 800a400:	f000 f830 	bl	800a464 <_getpid_r>
 800a404:	4622      	mov	r2, r4
 800a406:	4601      	mov	r1, r0
 800a408:	4628      	mov	r0, r5
 800a40a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a40e:	f000 b817 	b.w	800a440 <_kill_r>
 800a412:	2b01      	cmp	r3, #1
 800a414:	d00a      	beq.n	800a42c <_raise_r+0x4c>
 800a416:	1c59      	adds	r1, r3, #1
 800a418:	d103      	bne.n	800a422 <_raise_r+0x42>
 800a41a:	2316      	movs	r3, #22
 800a41c:	6003      	str	r3, [r0, #0]
 800a41e:	2001      	movs	r0, #1
 800a420:	e7e7      	b.n	800a3f2 <_raise_r+0x12>
 800a422:	2100      	movs	r1, #0
 800a424:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a428:	4620      	mov	r0, r4
 800a42a:	4798      	blx	r3
 800a42c:	2000      	movs	r0, #0
 800a42e:	e7e0      	b.n	800a3f2 <_raise_r+0x12>

0800a430 <raise>:
 800a430:	4b02      	ldr	r3, [pc, #8]	@ (800a43c <raise+0xc>)
 800a432:	4601      	mov	r1, r0
 800a434:	6818      	ldr	r0, [r3, #0]
 800a436:	f7ff bfd3 	b.w	800a3e0 <_raise_r>
 800a43a:	bf00      	nop
 800a43c:	20000020 	.word	0x20000020

0800a440 <_kill_r>:
 800a440:	b538      	push	{r3, r4, r5, lr}
 800a442:	4d07      	ldr	r5, [pc, #28]	@ (800a460 <_kill_r+0x20>)
 800a444:	2300      	movs	r3, #0
 800a446:	4604      	mov	r4, r0
 800a448:	4608      	mov	r0, r1
 800a44a:	4611      	mov	r1, r2
 800a44c:	602b      	str	r3, [r5, #0]
 800a44e:	f7f8 fcfb 	bl	8002e48 <_kill>
 800a452:	1c43      	adds	r3, r0, #1
 800a454:	d102      	bne.n	800a45c <_kill_r+0x1c>
 800a456:	682b      	ldr	r3, [r5, #0]
 800a458:	b103      	cbz	r3, 800a45c <_kill_r+0x1c>
 800a45a:	6023      	str	r3, [r4, #0]
 800a45c:	bd38      	pop	{r3, r4, r5, pc}
 800a45e:	bf00      	nop
 800a460:	20000dd4 	.word	0x20000dd4

0800a464 <_getpid_r>:
 800a464:	f7f8 bce8 	b.w	8002e38 <_getpid>

0800a468 <__swhatbuf_r>:
 800a468:	b570      	push	{r4, r5, r6, lr}
 800a46a:	460c      	mov	r4, r1
 800a46c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a470:	2900      	cmp	r1, #0
 800a472:	b096      	sub	sp, #88	@ 0x58
 800a474:	4615      	mov	r5, r2
 800a476:	461e      	mov	r6, r3
 800a478:	da0d      	bge.n	800a496 <__swhatbuf_r+0x2e>
 800a47a:	89a3      	ldrh	r3, [r4, #12]
 800a47c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a480:	f04f 0100 	mov.w	r1, #0
 800a484:	bf14      	ite	ne
 800a486:	2340      	movne	r3, #64	@ 0x40
 800a488:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a48c:	2000      	movs	r0, #0
 800a48e:	6031      	str	r1, [r6, #0]
 800a490:	602b      	str	r3, [r5, #0]
 800a492:	b016      	add	sp, #88	@ 0x58
 800a494:	bd70      	pop	{r4, r5, r6, pc}
 800a496:	466a      	mov	r2, sp
 800a498:	f000 f848 	bl	800a52c <_fstat_r>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	dbec      	blt.n	800a47a <__swhatbuf_r+0x12>
 800a4a0:	9901      	ldr	r1, [sp, #4]
 800a4a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a4a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a4aa:	4259      	negs	r1, r3
 800a4ac:	4159      	adcs	r1, r3
 800a4ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4b2:	e7eb      	b.n	800a48c <__swhatbuf_r+0x24>

0800a4b4 <__smakebuf_r>:
 800a4b4:	898b      	ldrh	r3, [r1, #12]
 800a4b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4b8:	079d      	lsls	r5, r3, #30
 800a4ba:	4606      	mov	r6, r0
 800a4bc:	460c      	mov	r4, r1
 800a4be:	d507      	bpl.n	800a4d0 <__smakebuf_r+0x1c>
 800a4c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a4c4:	6023      	str	r3, [r4, #0]
 800a4c6:	6123      	str	r3, [r4, #16]
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	6163      	str	r3, [r4, #20]
 800a4cc:	b003      	add	sp, #12
 800a4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4d0:	ab01      	add	r3, sp, #4
 800a4d2:	466a      	mov	r2, sp
 800a4d4:	f7ff ffc8 	bl	800a468 <__swhatbuf_r>
 800a4d8:	9f00      	ldr	r7, [sp, #0]
 800a4da:	4605      	mov	r5, r0
 800a4dc:	4639      	mov	r1, r7
 800a4de:	4630      	mov	r0, r6
 800a4e0:	f7fe febe 	bl	8009260 <_malloc_r>
 800a4e4:	b948      	cbnz	r0, 800a4fa <__smakebuf_r+0x46>
 800a4e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ea:	059a      	lsls	r2, r3, #22
 800a4ec:	d4ee      	bmi.n	800a4cc <__smakebuf_r+0x18>
 800a4ee:	f023 0303 	bic.w	r3, r3, #3
 800a4f2:	f043 0302 	orr.w	r3, r3, #2
 800a4f6:	81a3      	strh	r3, [r4, #12]
 800a4f8:	e7e2      	b.n	800a4c0 <__smakebuf_r+0xc>
 800a4fa:	89a3      	ldrh	r3, [r4, #12]
 800a4fc:	6020      	str	r0, [r4, #0]
 800a4fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a502:	81a3      	strh	r3, [r4, #12]
 800a504:	9b01      	ldr	r3, [sp, #4]
 800a506:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a50a:	b15b      	cbz	r3, 800a524 <__smakebuf_r+0x70>
 800a50c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a510:	4630      	mov	r0, r6
 800a512:	f000 f81d 	bl	800a550 <_isatty_r>
 800a516:	b128      	cbz	r0, 800a524 <__smakebuf_r+0x70>
 800a518:	89a3      	ldrh	r3, [r4, #12]
 800a51a:	f023 0303 	bic.w	r3, r3, #3
 800a51e:	f043 0301 	orr.w	r3, r3, #1
 800a522:	81a3      	strh	r3, [r4, #12]
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	431d      	orrs	r5, r3
 800a528:	81a5      	strh	r5, [r4, #12]
 800a52a:	e7cf      	b.n	800a4cc <__smakebuf_r+0x18>

0800a52c <_fstat_r>:
 800a52c:	b538      	push	{r3, r4, r5, lr}
 800a52e:	4d07      	ldr	r5, [pc, #28]	@ (800a54c <_fstat_r+0x20>)
 800a530:	2300      	movs	r3, #0
 800a532:	4604      	mov	r4, r0
 800a534:	4608      	mov	r0, r1
 800a536:	4611      	mov	r1, r2
 800a538:	602b      	str	r3, [r5, #0]
 800a53a:	f7f8 fce5 	bl	8002f08 <_fstat>
 800a53e:	1c43      	adds	r3, r0, #1
 800a540:	d102      	bne.n	800a548 <_fstat_r+0x1c>
 800a542:	682b      	ldr	r3, [r5, #0]
 800a544:	b103      	cbz	r3, 800a548 <_fstat_r+0x1c>
 800a546:	6023      	str	r3, [r4, #0]
 800a548:	bd38      	pop	{r3, r4, r5, pc}
 800a54a:	bf00      	nop
 800a54c:	20000dd4 	.word	0x20000dd4

0800a550 <_isatty_r>:
 800a550:	b538      	push	{r3, r4, r5, lr}
 800a552:	4d06      	ldr	r5, [pc, #24]	@ (800a56c <_isatty_r+0x1c>)
 800a554:	2300      	movs	r3, #0
 800a556:	4604      	mov	r4, r0
 800a558:	4608      	mov	r0, r1
 800a55a:	602b      	str	r3, [r5, #0]
 800a55c:	f7f8 fce4 	bl	8002f28 <_isatty>
 800a560:	1c43      	adds	r3, r0, #1
 800a562:	d102      	bne.n	800a56a <_isatty_r+0x1a>
 800a564:	682b      	ldr	r3, [r5, #0]
 800a566:	b103      	cbz	r3, 800a56a <_isatty_r+0x1a>
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	bd38      	pop	{r3, r4, r5, pc}
 800a56c:	20000dd4 	.word	0x20000dd4

0800a570 <_init>:
 800a570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a572:	bf00      	nop
 800a574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a576:	bc08      	pop	{r3}
 800a578:	469e      	mov	lr, r3
 800a57a:	4770      	bx	lr

0800a57c <_fini>:
 800a57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a57e:	bf00      	nop
 800a580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a582:	bc08      	pop	{r3}
 800a584:	469e      	mov	lr, r3
 800a586:	4770      	bx	lr
