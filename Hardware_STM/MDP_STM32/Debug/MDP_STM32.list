
MDP_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005064  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b00  080051f4  080051f4  000061f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cf4  08005cf4  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cf4  08005cf4  00006cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cfc  08005cfc  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cfc  08005cfc  00006cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d00  08005d00  00006d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005d04  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000705c  2**0
                  CONTENTS
 10 .bss          00000740  2000005c  2000005c  0000705c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000079c  2000079c  0000705c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010d6a  00000000  00000000  0000708c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025c0  00000000  00000000  00017df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  0001a3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d1f  00000000  00000000  0001b468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ca2  00000000  00000000  0001c187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014c51  00000000  00000000  0003ee29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf0eb  00000000  00000000  00053a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00122b65  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c7c  00000000  00000000  00122ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000cc  00000000  00000000  00127824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051dc 	.word	0x080051dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080051dc 	.word	0x080051dc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2f>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000844:	bf24      	itt	cs
 8000846:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800084a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800084e:	d90d      	bls.n	800086c <__aeabi_d2f+0x30>
 8000850:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000854:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000858:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800085c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000860:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000864:	bf08      	it	eq
 8000866:	f020 0001 	biceq.w	r0, r0, #1
 800086a:	4770      	bx	lr
 800086c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000870:	d121      	bne.n	80008b6 <__aeabi_d2f+0x7a>
 8000872:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000876:	bfbc      	itt	lt
 8000878:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800087c:	4770      	bxlt	lr
 800087e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000882:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000886:	f1c2 0218 	rsb	r2, r2, #24
 800088a:	f1c2 0c20 	rsb	ip, r2, #32
 800088e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000892:	fa20 f002 	lsr.w	r0, r0, r2
 8000896:	bf18      	it	ne
 8000898:	f040 0001 	orrne.w	r0, r0, #1
 800089c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008a8:	ea40 000c 	orr.w	r0, r0, ip
 80008ac:	fa23 f302 	lsr.w	r3, r3, r2
 80008b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008b4:	e7cc      	b.n	8000850 <__aeabi_d2f+0x14>
 80008b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ba:	d107      	bne.n	80008cc <__aeabi_d2f+0x90>
 80008bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008c0:	bf1e      	ittt	ne
 80008c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008ca:	4770      	bxne	lr
 80008cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <__aeabi_uldivmod>:
 80008dc:	b953      	cbnz	r3, 80008f4 <__aeabi_uldivmod+0x18>
 80008de:	b94a      	cbnz	r2, 80008f4 <__aeabi_uldivmod+0x18>
 80008e0:	2900      	cmp	r1, #0
 80008e2:	bf08      	it	eq
 80008e4:	2800      	cmpeq	r0, #0
 80008e6:	bf1c      	itt	ne
 80008e8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ec:	f04f 30ff 	movne.w	r0, #4294967295
 80008f0:	f000 b96a 	b.w	8000bc8 <__aeabi_idiv0>
 80008f4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008fc:	f000 f806 	bl	800090c <__udivmoddi4>
 8000900:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000904:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000908:	b004      	add	sp, #16
 800090a:	4770      	bx	lr

0800090c <__udivmoddi4>:
 800090c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000910:	9d08      	ldr	r5, [sp, #32]
 8000912:	460c      	mov	r4, r1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d14e      	bne.n	80009b6 <__udivmoddi4+0xaa>
 8000918:	4694      	mov	ip, r2
 800091a:	458c      	cmp	ip, r1
 800091c:	4686      	mov	lr, r0
 800091e:	fab2 f282 	clz	r2, r2
 8000922:	d962      	bls.n	80009ea <__udivmoddi4+0xde>
 8000924:	b14a      	cbz	r2, 800093a <__udivmoddi4+0x2e>
 8000926:	f1c2 0320 	rsb	r3, r2, #32
 800092a:	4091      	lsls	r1, r2
 800092c:	fa20 f303 	lsr.w	r3, r0, r3
 8000930:	fa0c fc02 	lsl.w	ip, ip, r2
 8000934:	4319      	orrs	r1, r3
 8000936:	fa00 fe02 	lsl.w	lr, r0, r2
 800093a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800093e:	fa1f f68c 	uxth.w	r6, ip
 8000942:	fbb1 f4f7 	udiv	r4, r1, r7
 8000946:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800094a:	fb07 1114 	mls	r1, r7, r4, r1
 800094e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000952:	fb04 f106 	mul.w	r1, r4, r6
 8000956:	4299      	cmp	r1, r3
 8000958:	d90a      	bls.n	8000970 <__udivmoddi4+0x64>
 800095a:	eb1c 0303 	adds.w	r3, ip, r3
 800095e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000962:	f080 8112 	bcs.w	8000b8a <__udivmoddi4+0x27e>
 8000966:	4299      	cmp	r1, r3
 8000968:	f240 810f 	bls.w	8000b8a <__udivmoddi4+0x27e>
 800096c:	3c02      	subs	r4, #2
 800096e:	4463      	add	r3, ip
 8000970:	1a59      	subs	r1, r3, r1
 8000972:	fa1f f38e 	uxth.w	r3, lr
 8000976:	fbb1 f0f7 	udiv	r0, r1, r7
 800097a:	fb07 1110 	mls	r1, r7, r0, r1
 800097e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000982:	fb00 f606 	mul.w	r6, r0, r6
 8000986:	429e      	cmp	r6, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x94>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000992:	f080 80fc 	bcs.w	8000b8e <__udivmoddi4+0x282>
 8000996:	429e      	cmp	r6, r3
 8000998:	f240 80f9 	bls.w	8000b8e <__udivmoddi4+0x282>
 800099c:	4463      	add	r3, ip
 800099e:	3802      	subs	r0, #2
 80009a0:	1b9b      	subs	r3, r3, r6
 80009a2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80009a6:	2100      	movs	r1, #0
 80009a8:	b11d      	cbz	r5, 80009b2 <__udivmoddi4+0xa6>
 80009aa:	40d3      	lsrs	r3, r2
 80009ac:	2200      	movs	r2, #0
 80009ae:	e9c5 3200 	strd	r3, r2, [r5]
 80009b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009b6:	428b      	cmp	r3, r1
 80009b8:	d905      	bls.n	80009c6 <__udivmoddi4+0xba>
 80009ba:	b10d      	cbz	r5, 80009c0 <__udivmoddi4+0xb4>
 80009bc:	e9c5 0100 	strd	r0, r1, [r5]
 80009c0:	2100      	movs	r1, #0
 80009c2:	4608      	mov	r0, r1
 80009c4:	e7f5      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009c6:	fab3 f183 	clz	r1, r3
 80009ca:	2900      	cmp	r1, #0
 80009cc:	d146      	bne.n	8000a5c <__udivmoddi4+0x150>
 80009ce:	42a3      	cmp	r3, r4
 80009d0:	d302      	bcc.n	80009d8 <__udivmoddi4+0xcc>
 80009d2:	4290      	cmp	r0, r2
 80009d4:	f0c0 80f0 	bcc.w	8000bb8 <__udivmoddi4+0x2ac>
 80009d8:	1a86      	subs	r6, r0, r2
 80009da:	eb64 0303 	sbc.w	r3, r4, r3
 80009de:	2001      	movs	r0, #1
 80009e0:	2d00      	cmp	r5, #0
 80009e2:	d0e6      	beq.n	80009b2 <__udivmoddi4+0xa6>
 80009e4:	e9c5 6300 	strd	r6, r3, [r5]
 80009e8:	e7e3      	b.n	80009b2 <__udivmoddi4+0xa6>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	f040 8090 	bne.w	8000b10 <__udivmoddi4+0x204>
 80009f0:	eba1 040c 	sub.w	r4, r1, ip
 80009f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009f8:	fa1f f78c 	uxth.w	r7, ip
 80009fc:	2101      	movs	r1, #1
 80009fe:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a06:	fb08 4416 	mls	r4, r8, r6, r4
 8000a0a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a0e:	fb07 f006 	mul.w	r0, r7, r6
 8000a12:	4298      	cmp	r0, r3
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x11c>
 8000a16:	eb1c 0303 	adds.w	r3, ip, r3
 8000a1a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x11a>
 8000a20:	4298      	cmp	r0, r3
 8000a22:	f200 80cd 	bhi.w	8000bc0 <__udivmoddi4+0x2b4>
 8000a26:	4626      	mov	r6, r4
 8000a28:	1a1c      	subs	r4, r3, r0
 8000a2a:	fa1f f38e 	uxth.w	r3, lr
 8000a2e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a32:	fb08 4410 	mls	r4, r8, r0, r4
 8000a36:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a3a:	fb00 f707 	mul.w	r7, r0, r7
 8000a3e:	429f      	cmp	r7, r3
 8000a40:	d908      	bls.n	8000a54 <__udivmoddi4+0x148>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a4a:	d202      	bcs.n	8000a52 <__udivmoddi4+0x146>
 8000a4c:	429f      	cmp	r7, r3
 8000a4e:	f200 80b0 	bhi.w	8000bb2 <__udivmoddi4+0x2a6>
 8000a52:	4620      	mov	r0, r4
 8000a54:	1bdb      	subs	r3, r3, r7
 8000a56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a5a:	e7a5      	b.n	80009a8 <__udivmoddi4+0x9c>
 8000a5c:	f1c1 0620 	rsb	r6, r1, #32
 8000a60:	408b      	lsls	r3, r1
 8000a62:	fa22 f706 	lsr.w	r7, r2, r6
 8000a66:	431f      	orrs	r7, r3
 8000a68:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a6c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a70:	ea43 030c 	orr.w	r3, r3, ip
 8000a74:	40f4      	lsrs	r4, r6
 8000a76:	fa00 f801 	lsl.w	r8, r0, r1
 8000a7a:	0c38      	lsrs	r0, r7, #16
 8000a7c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a80:	fbb4 fef0 	udiv	lr, r4, r0
 8000a84:	fa1f fc87 	uxth.w	ip, r7
 8000a88:	fb00 441e 	mls	r4, r0, lr, r4
 8000a8c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a90:	fb0e f90c 	mul.w	r9, lr, ip
 8000a94:	45a1      	cmp	r9, r4
 8000a96:	fa02 f201 	lsl.w	r2, r2, r1
 8000a9a:	d90a      	bls.n	8000ab2 <__udivmoddi4+0x1a6>
 8000a9c:	193c      	adds	r4, r7, r4
 8000a9e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000aa2:	f080 8084 	bcs.w	8000bae <__udivmoddi4+0x2a2>
 8000aa6:	45a1      	cmp	r9, r4
 8000aa8:	f240 8081 	bls.w	8000bae <__udivmoddi4+0x2a2>
 8000aac:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ab0:	443c      	add	r4, r7
 8000ab2:	eba4 0409 	sub.w	r4, r4, r9
 8000ab6:	fa1f f983 	uxth.w	r9, r3
 8000aba:	fbb4 f3f0 	udiv	r3, r4, r0
 8000abe:	fb00 4413 	mls	r4, r0, r3, r4
 8000ac2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ac6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aca:	45a4      	cmp	ip, r4
 8000acc:	d907      	bls.n	8000ade <__udivmoddi4+0x1d2>
 8000ace:	193c      	adds	r4, r7, r4
 8000ad0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ad4:	d267      	bcs.n	8000ba6 <__udivmoddi4+0x29a>
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	d965      	bls.n	8000ba6 <__udivmoddi4+0x29a>
 8000ada:	3b02      	subs	r3, #2
 8000adc:	443c      	add	r4, r7
 8000ade:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ae2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ae6:	eba4 040c 	sub.w	r4, r4, ip
 8000aea:	429c      	cmp	r4, r3
 8000aec:	46ce      	mov	lr, r9
 8000aee:	469c      	mov	ip, r3
 8000af0:	d351      	bcc.n	8000b96 <__udivmoddi4+0x28a>
 8000af2:	d04e      	beq.n	8000b92 <__udivmoddi4+0x286>
 8000af4:	b155      	cbz	r5, 8000b0c <__udivmoddi4+0x200>
 8000af6:	ebb8 030e 	subs.w	r3, r8, lr
 8000afa:	eb64 040c 	sbc.w	r4, r4, ip
 8000afe:	fa04 f606 	lsl.w	r6, r4, r6
 8000b02:	40cb      	lsrs	r3, r1
 8000b04:	431e      	orrs	r6, r3
 8000b06:	40cc      	lsrs	r4, r1
 8000b08:	e9c5 6400 	strd	r6, r4, [r5]
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	e750      	b.n	80009b2 <__udivmoddi4+0xa6>
 8000b10:	f1c2 0320 	rsb	r3, r2, #32
 8000b14:	fa20 f103 	lsr.w	r1, r0, r3
 8000b18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b1c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b20:	4094      	lsls	r4, r2
 8000b22:	430c      	orrs	r4, r1
 8000b24:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b28:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2c:	fa1f f78c 	uxth.w	r7, ip
 8000b30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b34:	fb08 3110 	mls	r1, r8, r0, r3
 8000b38:	0c23      	lsrs	r3, r4, #16
 8000b3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b3e:	fb00 f107 	mul.w	r1, r0, r7
 8000b42:	4299      	cmp	r1, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x24c>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b4e:	d22c      	bcs.n	8000baa <__udivmoddi4+0x29e>
 8000b50:	4299      	cmp	r1, r3
 8000b52:	d92a      	bls.n	8000baa <__udivmoddi4+0x29e>
 8000b54:	3802      	subs	r0, #2
 8000b56:	4463      	add	r3, ip
 8000b58:	1a5b      	subs	r3, r3, r1
 8000b5a:	b2a4      	uxth	r4, r4
 8000b5c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b60:	fb08 3311 	mls	r3, r8, r1, r3
 8000b64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b68:	fb01 f307 	mul.w	r3, r1, r7
 8000b6c:	42a3      	cmp	r3, r4
 8000b6e:	d908      	bls.n	8000b82 <__udivmoddi4+0x276>
 8000b70:	eb1c 0404 	adds.w	r4, ip, r4
 8000b74:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b78:	d213      	bcs.n	8000ba2 <__udivmoddi4+0x296>
 8000b7a:	42a3      	cmp	r3, r4
 8000b7c:	d911      	bls.n	8000ba2 <__udivmoddi4+0x296>
 8000b7e:	3902      	subs	r1, #2
 8000b80:	4464      	add	r4, ip
 8000b82:	1ae4      	subs	r4, r4, r3
 8000b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b88:	e739      	b.n	80009fe <__udivmoddi4+0xf2>
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	e6f0      	b.n	8000970 <__udivmoddi4+0x64>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e706      	b.n	80009a0 <__udivmoddi4+0x94>
 8000b92:	45c8      	cmp	r8, r9
 8000b94:	d2ae      	bcs.n	8000af4 <__udivmoddi4+0x1e8>
 8000b96:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b9a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b9e:	3801      	subs	r0, #1
 8000ba0:	e7a8      	b.n	8000af4 <__udivmoddi4+0x1e8>
 8000ba2:	4631      	mov	r1, r6
 8000ba4:	e7ed      	b.n	8000b82 <__udivmoddi4+0x276>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e799      	b.n	8000ade <__udivmoddi4+0x1d2>
 8000baa:	4630      	mov	r0, r6
 8000bac:	e7d4      	b.n	8000b58 <__udivmoddi4+0x24c>
 8000bae:	46d6      	mov	lr, sl
 8000bb0:	e77f      	b.n	8000ab2 <__udivmoddi4+0x1a6>
 8000bb2:	4463      	add	r3, ip
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	e74d      	b.n	8000a54 <__udivmoddi4+0x148>
 8000bb8:	4606      	mov	r6, r0
 8000bba:	4623      	mov	r3, r4
 8000bbc:	4608      	mov	r0, r1
 8000bbe:	e70f      	b.n	80009e0 <__udivmoddi4+0xd4>
 8000bc0:	3e02      	subs	r6, #2
 8000bc2:	4463      	add	r3, ip
 8000bc4:	e730      	b.n	8000a28 <__udivmoddi4+0x11c>
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_idiv0>:
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <is_USER_button_pressed>:

#include "helper.h"


/*---------- OLED INTERACTION ----------*/
bool is_USER_button_pressed() {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin) == GPIO_PIN_RESET;
 8000bd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000bd4:	4805      	ldr	r0, [pc, #20]	@ (8000bec <is_USER_button_pressed+0x20>)
 8000bd6:	f001 fd6f 	bl	80026b8 <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf0c      	ite	eq
 8000be0:	2301      	moveq	r3, #1
 8000be2:	2300      	movne	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40020c00 	.word	0x40020c00

08000bf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b09a      	sub	sp, #104	@ 0x68
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  uint8_t buffer[100] = "Hello";
 8000bf6:	4a2b      	ldr	r2, [pc, #172]	@ (8000ca4 <main+0xb4>)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	6810      	ldr	r0, [r2, #0]
 8000bfc:	6018      	str	r0, [r3, #0]
 8000bfe:	8892      	ldrh	r2, [r2, #4]
 8000c00:	809a      	strh	r2, [r3, #4]
 8000c02:	f107 030a 	add.w	r3, r7, #10
 8000c06:	225e      	movs	r2, #94	@ 0x5e
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 fe66 	bl	80048dc <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c10:	f001 fa3a 	bl	8002088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c14:	f000 f854 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c18:	f000 fafc 	bl	8001214 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c1c:	f000 fad0 	bl	80011c0 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000c20:	f000 f8da 	bl	8000dd8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c24:	f000 f978 	bl	8000f18 <MX_TIM2_Init>
  MX_TIM8_Init();
 8000c28:	f000 fa1e 	bl	8001068 <MX_TIM8_Init>
  MX_TIM3_Init();
 8000c2c:	f000 f9c8 	bl	8000fc0 <MX_TIM3_Init>
  MX_I2C1_Init();
 8000c30:	f000 f8a4 	bl	8000d7c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize peripherals
  OLED_Init();
 8000c34:	f000 fec4 	bl	80019c0 <OLED_Init>
  motor_init(&htim8, &htim2, &htim3);
 8000c38:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca8 <main+0xb8>)
 8000c3a:	491c      	ldr	r1, [pc, #112]	@ (8000cac <main+0xbc>)
 8000c3c:	481c      	ldr	r0, [pc, #112]	@ (8000cb0 <main+0xc0>)
 8000c3e:	f000 fb95 	bl	800136c <motor_init>
  servo_init(&htim1);
 8000c42:	481c      	ldr	r0, [pc, #112]	@ (8000cb4 <main+0xc4>)
 8000c44:	f000 ff48 	bl	8001ad8 <servo_init>

  // Setup
  OLED_ShowString(0, 0, "Press USER button");
 8000c48:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb8 <main+0xc8>)
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	f000 fe85 	bl	800195c <OLED_ShowString>
  OLED_ShowString(0, 15, "to continue");
 8000c52:	4a1a      	ldr	r2, [pc, #104]	@ (8000cbc <main+0xcc>)
 8000c54:	210f      	movs	r1, #15
 8000c56:	2000      	movs	r0, #0
 8000c58:	f000 fe80 	bl	800195c <OLED_ShowString>
  OLED_Refresh_Gram();
 8000c5c:	f000 fd54 	bl	8001708 <OLED_Refresh_Gram>

  // Set servo
  servo_set_val(4700);
 8000c60:	f241 205c 	movw	r0, #4700	@ 0x125c
 8000c64:	f000 ff4a 	bl	8001afc <servo_set_val>

  while (!is_USER_button_pressed());
 8000c68:	bf00      	nop
 8000c6a:	f7ff ffaf 	bl	8000bcc <is_USER_button_pressed>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	f083 0301 	eor.w	r3, r3, #1
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1f7      	bne.n	8000c6a <main+0x7a>
  OLED_Clear();
 8000c7a:	f000 fd7d 	bl	8001778 <OLED_Clear>
  OLED_ShowString(0, 0, "Hello");
 8000c7e:	4a09      	ldr	r2, [pc, #36]	@ (8000ca4 <main+0xb4>)
 8000c80:	2100      	movs	r1, #0
 8000c82:	2000      	movs	r0, #0
 8000c84:	f000 fe6a 	bl	800195c <OLED_ShowString>
  OLED_Refresh_Gram();
 8000c88:	f000 fd3e 	bl	8001708 <OLED_Refresh_Gram>

  motor_set_speed(10);
 8000c8c:	200a      	movs	r0, #10
 8000c8e:	f000 fbe7 	bl	8001460 <motor_set_speed>
  HAL_Delay(1000);
 8000c92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c96:	f001 fa69 	bl	800216c <HAL_Delay>
  motor_forward(120);
 8000c9a:	2078      	movs	r0, #120	@ 0x78
 8000c9c:	f000 fc58 	bl	8001550 <motor_forward>
  // OLED_Refresh_Gram();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <main+0xb0>
 8000ca4:	08005214 	.word	0x08005214
 8000ca8:	2000015c 	.word	0x2000015c
 8000cac:	20000114 	.word	0x20000114
 8000cb0:	200001a4 	.word	0x200001a4
 8000cb4:	200000cc 	.word	0x200000cc
 8000cb8:	080051f4 	.word	0x080051f4
 8000cbc:	08005208 	.word	0x08005208

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	@ 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0320 	add.w	r3, r7, #32
 8000cca:	2230      	movs	r2, #48	@ 0x30
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 fe04 	bl	80048dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	4b22      	ldr	r3, [pc, #136]	@ (8000d74 <SystemClock_Config+0xb4>)
 8000cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cec:	4a21      	ldr	r2, [pc, #132]	@ (8000d74 <SystemClock_Config+0xb4>)
 8000cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d74 <SystemClock_Config+0xb4>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d00:	2300      	movs	r3, #0
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	4b1c      	ldr	r3, [pc, #112]	@ (8000d78 <SystemClock_Config+0xb8>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a1b      	ldr	r2, [pc, #108]	@ (8000d78 <SystemClock_Config+0xb8>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	4b19      	ldr	r3, [pc, #100]	@ (8000d78 <SystemClock_Config+0xb8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d20:	2301      	movs	r3, #1
 8000d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d24:	2310      	movs	r3, #16
 8000d26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0320 	add.w	r3, r7, #32
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 fe5f 	bl	80029f4 <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d3c:	f000 fb10 	bl	8001360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d40:	230f      	movs	r3, #15
 8000d42:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f002 f8c2 	bl	8002ee4 <HAL_RCC_ClockConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000d66:	f000 fafb 	bl	8001360 <Error_Handler>
  }
}
 8000d6a:	bf00      	nop
 8000d6c:	3750      	adds	r7, #80	@ 0x50
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40007000 	.word	0x40007000

08000d7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d82:	4a13      	ldr	r2, [pc, #76]	@ (8000dd0 <MX_I2C1_Init+0x54>)
 8000d84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d88:	4a12      	ldr	r2, [pc, #72]	@ (8000dd4 <MX_I2C1_Init+0x58>)
 8000d8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000d9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da0:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000da6:	4b09      	ldr	r3, [pc, #36]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dac:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db2:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000db8:	4804      	ldr	r0, [pc, #16]	@ (8000dcc <MX_I2C1_Init+0x50>)
 8000dba:	f001 fcaf 	bl	800271c <HAL_I2C_Init>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dc4:	f000 facc 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000078 	.word	0x20000078
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	00061a80 	.word	0x00061a80

08000dd8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b096      	sub	sp, #88	@ 0x58
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
 8000e04:	611a      	str	r2, [r3, #16]
 8000e06:	615a      	str	r2, [r3, #20]
 8000e08:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2220      	movs	r2, #32
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f003 fd63 	bl	80048dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e16:	4b3e      	ldr	r3, [pc, #248]	@ (8000f10 <MX_TIM1_Init+0x138>)
 8000e18:	4a3e      	ldr	r2, [pc, #248]	@ (8000f14 <MX_TIM1_Init+0x13c>)
 8000e1a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5-1;
 8000e1c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f10 <MX_TIM1_Init+0x138>)
 8000e1e:	2204      	movs	r2, #4
 8000e20:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e22:	4b3b      	ldr	r3, [pc, #236]	@ (8000f10 <MX_TIM1_Init+0x138>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64000-1;
 8000e28:	4b39      	ldr	r3, [pc, #228]	@ (8000f10 <MX_TIM1_Init+0x138>)
 8000e2a:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000e2e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e30:	4b37      	ldr	r3, [pc, #220]	@ (8000f10 <MX_TIM1_Init+0x138>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e36:	4b36      	ldr	r3, [pc, #216]	@ (8000f10 <MX_TIM1_Init+0x138>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3c:	4b34      	ldr	r3, [pc, #208]	@ (8000f10 <MX_TIM1_Init+0x138>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e42:	4833      	ldr	r0, [pc, #204]	@ (8000f10 <MX_TIM1_Init+0x138>)
 8000e44:	f002 fa2e 	bl	80032a4 <HAL_TIM_Base_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000e4e:	f000 fa87 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e52:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e56:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e58:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	482c      	ldr	r0, [pc, #176]	@ (8000f10 <MX_TIM1_Init+0x138>)
 8000e60:	f002 fda6 	bl	80039b0 <HAL_TIM_ConfigClockSource>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000e6a:	f000 fa79 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e6e:	4828      	ldr	r0, [pc, #160]	@ (8000f10 <MX_TIM1_Init+0x138>)
 8000e70:	f002 fa67 	bl	8003342 <HAL_TIM_PWM_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000e7a:	f000 fa71 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4820      	ldr	r0, [pc, #128]	@ (8000f10 <MX_TIM1_Init+0x138>)
 8000e8e:	f003 f973 	bl	8004178 <HAL_TIMEx_MasterConfigSynchronization>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000e98:	f000 fa62 	bl	8001360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e9c:	2360      	movs	r3, #96	@ 0x60
 8000e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4813      	ldr	r0, [pc, #76]	@ (8000f10 <MX_TIM1_Init+0x138>)
 8000ec2:	f002 fcb3 	bl	800382c <HAL_TIM_PWM_ConfigChannel>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000ecc:	f000 fa48 	bl	8001360 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ee4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ee8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4807      	ldr	r0, [pc, #28]	@ (8000f10 <MX_TIM1_Init+0x138>)
 8000ef4:	f003 f9bc 	bl	8004270 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000efe:	f000 fa2f 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f02:	4803      	ldr	r0, [pc, #12]	@ (8000f10 <MX_TIM1_Init+0x138>)
 8000f04:	f000 ff74 	bl	8001df0 <HAL_TIM_MspPostInit>

}
 8000f08:	bf00      	nop
 8000f0a:	3758      	adds	r7, #88	@ 0x58
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200000cc 	.word	0x200000cc
 8000f14:	40010000 	.word	0x40010000

08000f18 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	@ 0x30
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f1e:	f107 030c 	add.w	r3, r7, #12
 8000f22:	2224      	movs	r2, #36	@ 0x24
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f003 fcd8 	bl	80048dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f34:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <MX_TIM2_Init+0xa4>)
 8000f36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f3a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000f3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000fbc <MX_TIM2_Init+0xa4>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f42:	4b1e      	ldr	r3, [pc, #120]	@ (8000fbc <MX_TIM2_Init+0xa4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000f48:	4b1c      	ldr	r3, [pc, #112]	@ (8000fbc <MX_TIM2_Init+0xa4>)
 8000f4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f4e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	@ (8000fbc <MX_TIM2_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f56:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <MX_TIM2_Init+0xa4>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f60:	2300      	movs	r3, #0
 8000f62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f64:	2301      	movs	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f70:	2300      	movs	r3, #0
 8000f72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f74:	2301      	movs	r3, #1
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000f80:	f107 030c 	add.w	r3, r7, #12
 8000f84:	4619      	mov	r1, r3
 8000f86:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <MX_TIM2_Init+0xa4>)
 8000f88:	f002 fafc 	bl	8003584 <HAL_TIM_Encoder_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000f92:	f000 f9e5 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4806      	ldr	r0, [pc, #24]	@ (8000fbc <MX_TIM2_Init+0xa4>)
 8000fa4:	f003 f8e8 	bl	8004178 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000fae:	f000 f9d7 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000fb2:	bf00      	nop
 8000fb4:	3730      	adds	r7, #48	@ 0x30
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	20000114 	.word	0x20000114

08000fc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08c      	sub	sp, #48	@ 0x30
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fc6:	f107 030c 	add.w	r3, r7, #12
 8000fca:	2224      	movs	r2, #36	@ 0x24
 8000fcc:	2100      	movs	r1, #0
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f003 fc84 	bl	80048dc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fdc:	4b20      	ldr	r3, [pc, #128]	@ (8001060 <MX_TIM3_Init+0xa0>)
 8000fde:	4a21      	ldr	r2, [pc, #132]	@ (8001064 <MX_TIM3_Init+0xa4>)
 8000fe0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8001060 <MX_TIM3_Init+0xa0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8001060 <MX_TIM3_Init+0xa0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	@ (8001060 <MX_TIM3_Init+0xa0>)
 8000ff0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ff4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff6:	4b1a      	ldr	r3, [pc, #104]	@ (8001060 <MX_TIM3_Init+0xa0>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ffc:	4b18      	ldr	r3, [pc, #96]	@ (8001060 <MX_TIM3_Init+0xa0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001002:	2303      	movs	r3, #3
 8001004:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001006:	2300      	movs	r3, #0
 8001008:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800100a:	2301      	movs	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800101a:	2301      	movs	r3, #1
 800101c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001022:	2300      	movs	r3, #0
 8001024:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001026:	f107 030c 	add.w	r3, r7, #12
 800102a:	4619      	mov	r1, r3
 800102c:	480c      	ldr	r0, [pc, #48]	@ (8001060 <MX_TIM3_Init+0xa0>)
 800102e:	f002 faa9 	bl	8003584 <HAL_TIM_Encoder_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001038:	f000 f992 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	@ (8001060 <MX_TIM3_Init+0xa0>)
 800104a:	f003 f895 	bl	8004178 <HAL_TIMEx_MasterConfigSynchronization>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001054:	f000 f984 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3730      	adds	r7, #48	@ 0x30
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	2000015c 	.word	0x2000015c
 8001064:	40000400 	.word	0x40000400

08001068 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b096      	sub	sp, #88	@ 0x58
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800107c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001086:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]
 8001096:	615a      	str	r2, [r3, #20]
 8001098:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2220      	movs	r2, #32
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f003 fc1b 	bl	80048dc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80010a6:	4b44      	ldr	r3, [pc, #272]	@ (80011b8 <MX_TIM8_Init+0x150>)
 80010a8:	4a44      	ldr	r2, [pc, #272]	@ (80011bc <MX_TIM8_Init+0x154>)
 80010aa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80010ac:	4b42      	ldr	r3, [pc, #264]	@ (80011b8 <MX_TIM8_Init+0x150>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b41      	ldr	r3, [pc, #260]	@ (80011b8 <MX_TIM8_Init+0x150>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7200-1;
 80010b8:	4b3f      	ldr	r3, [pc, #252]	@ (80011b8 <MX_TIM8_Init+0x150>)
 80010ba:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80010be:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	4b3d      	ldr	r3, [pc, #244]	@ (80011b8 <MX_TIM8_Init+0x150>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010c6:	4b3c      	ldr	r3, [pc, #240]	@ (80011b8 <MX_TIM8_Init+0x150>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010cc:	4b3a      	ldr	r3, [pc, #232]	@ (80011b8 <MX_TIM8_Init+0x150>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010d2:	4839      	ldr	r0, [pc, #228]	@ (80011b8 <MX_TIM8_Init+0x150>)
 80010d4:	f002 f8e6 	bl	80032a4 <HAL_TIM_Base_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80010de:	f000 f93f 	bl	8001360 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80010e8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80010ec:	4619      	mov	r1, r3
 80010ee:	4832      	ldr	r0, [pc, #200]	@ (80011b8 <MX_TIM8_Init+0x150>)
 80010f0:	f002 fc5e 	bl	80039b0 <HAL_TIM_ConfigClockSource>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80010fa:	f000 f931 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80010fe:	482e      	ldr	r0, [pc, #184]	@ (80011b8 <MX_TIM8_Init+0x150>)
 8001100:	f002 f91f 	bl	8003342 <HAL_TIM_PWM_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800110a:	f000 f929 	bl	8001360 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001116:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800111a:	4619      	mov	r1, r3
 800111c:	4826      	ldr	r0, [pc, #152]	@ (80011b8 <MX_TIM8_Init+0x150>)
 800111e:	f003 f82b 	bl	8004178 <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001128:	f000 f91a 	bl	8001360 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112c:	2360      	movs	r3, #96	@ 0x60
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001134:	2300      	movs	r3, #0
 8001136:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001138:	2300      	movs	r3, #0
 800113a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001148:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800114c:	2200      	movs	r2, #0
 800114e:	4619      	mov	r1, r3
 8001150:	4819      	ldr	r0, [pc, #100]	@ (80011b8 <MX_TIM8_Init+0x150>)
 8001152:	f002 fb6b 	bl	800382c <HAL_TIM_PWM_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 800115c:	f000 f900 	bl	8001360 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001160:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001164:	2204      	movs	r2, #4
 8001166:	4619      	mov	r1, r3
 8001168:	4813      	ldr	r0, [pc, #76]	@ (80011b8 <MX_TIM8_Init+0x150>)
 800116a:	f002 fb5f 	bl	800382c <HAL_TIM_PWM_ConfigChannel>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001174:	f000 f8f4 	bl	8001360 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800118c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001190:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <MX_TIM8_Init+0x150>)
 800119c:	f003 f868 	bl	8004270 <HAL_TIMEx_ConfigBreakDeadTime>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80011a6:	f000 f8db 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80011aa:	4803      	ldr	r0, [pc, #12]	@ (80011b8 <MX_TIM8_Init+0x150>)
 80011ac:	f000 fe20 	bl	8001df0 <HAL_TIM_MspPostInit>

}
 80011b0:	bf00      	nop
 80011b2:	3758      	adds	r7, #88	@ 0x58
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200001a4 	.word	0x200001a4
 80011bc:	40010400 	.word	0x40010400

080011c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011c4:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_USART3_UART_Init+0x4c>)
 80011c6:	4a12      	ldr	r2, [pc, #72]	@ (8001210 <MX_USART3_UART_Init+0x50>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011ca:	4b10      	ldr	r3, [pc, #64]	@ (800120c <MX_USART3_UART_Init+0x4c>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_USART3_UART_Init+0x4c>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_USART3_UART_Init+0x4c>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_USART3_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_USART3_UART_Init+0x4c>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_USART3_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_USART3_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_USART3_UART_Init+0x4c>)
 80011f8:	f003 f88c 	bl	8004314 <HAL_UART_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001202:	f000 f8ad 	bl	8001360 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200001ec 	.word	0x200001ec
 8001210:	40004800 	.word	0x40004800

08001214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b48      	ldr	r3, [pc, #288]	@ (8001350 <MX_GPIO_Init+0x13c>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a47      	ldr	r2, [pc, #284]	@ (8001350 <MX_GPIO_Init+0x13c>)
 8001234:	f043 0310 	orr.w	r3, r3, #16
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b45      	ldr	r3, [pc, #276]	@ (8001350 <MX_GPIO_Init+0x13c>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b41      	ldr	r3, [pc, #260]	@ (8001350 <MX_GPIO_Init+0x13c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	4a40      	ldr	r2, [pc, #256]	@ (8001350 <MX_GPIO_Init+0x13c>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	@ 0x30
 8001256:	4b3e      	ldr	r3, [pc, #248]	@ (8001350 <MX_GPIO_Init+0x13c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b3a      	ldr	r3, [pc, #232]	@ (8001350 <MX_GPIO_Init+0x13c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	4a39      	ldr	r2, [pc, #228]	@ (8001350 <MX_GPIO_Init+0x13c>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	6313      	str	r3, [r2, #48]	@ 0x30
 8001272:	4b37      	ldr	r3, [pc, #220]	@ (8001350 <MX_GPIO_Init+0x13c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b33      	ldr	r3, [pc, #204]	@ (8001350 <MX_GPIO_Init+0x13c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	4a32      	ldr	r2, [pc, #200]	@ (8001350 <MX_GPIO_Init+0x13c>)
 8001288:	f043 0304 	orr.w	r3, r3, #4
 800128c:	6313      	str	r3, [r2, #48]	@ 0x30
 800128e:	4b30      	ldr	r3, [pc, #192]	@ (8001350 <MX_GPIO_Init+0x13c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	f003 0304 	and.w	r3, r3, #4
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4b2c      	ldr	r3, [pc, #176]	@ (8001350 <MX_GPIO_Init+0x13c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001350 <MX_GPIO_Init+0x13c>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <MX_GPIO_Init+0x13c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80012bc:	4825      	ldr	r0, [pc, #148]	@ (8001354 <MX_GPIO_Init+0x140>)
 80012be:	f001 fa13 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_A_IN2_Pin|MOTOR_A_IN1_Pin|MOTOR_B_IN1_Pin|MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	213c      	movs	r1, #60	@ 0x3c
 80012c6:	4824      	ldr	r0, [pc, #144]	@ (8001358 <MX_GPIO_Init+0x144>)
 80012c8:	f001 fa0e 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(US_TRIG_GPIO_Port, US_TRIG_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2180      	movs	r1, #128	@ 0x80
 80012d0:	4822      	ldr	r0, [pc, #136]	@ (800135c <MX_GPIO_Init+0x148>)
 80012d2:	f001 fa09 	bl	80026e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCLK_Pin OLED_SDIN_Pin OLED_RESET_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RESET_Pin|OLED_DC_Pin;
 80012d6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80012da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012dc:	2301      	movs	r3, #1
 80012de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	4819      	ldr	r0, [pc, #100]	@ (8001354 <MX_GPIO_Init+0x140>)
 80012f0:	f001 f846 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_A_IN2_Pin MOTOR_A_IN1_Pin MOTOR_B_IN1_Pin MOTOR_B_IN2_Pin */
  GPIO_InitStruct.Pin = MOTOR_A_IN2_Pin|MOTOR_A_IN1_Pin|MOTOR_B_IN1_Pin|MOTOR_B_IN2_Pin;
 80012f4:	233c      	movs	r3, #60	@ 0x3c
 80012f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4619      	mov	r1, r3
 800130a:	4813      	ldr	r0, [pc, #76]	@ (8001358 <MX_GPIO_Init+0x144>)
 800130c:	f001 f838 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001310:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001314:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	480d      	ldr	r0, [pc, #52]	@ (800135c <MX_GPIO_Init+0x148>)
 8001326:	f001 f82b 	bl	8002380 <HAL_GPIO_Init>

  /*Configure GPIO pin : US_TRIG_Pin */
  GPIO_InitStruct.Pin = US_TRIG_Pin;
 800132a:	2380      	movs	r3, #128	@ 0x80
 800132c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(US_TRIG_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	4806      	ldr	r0, [pc, #24]	@ (800135c <MX_GPIO_Init+0x148>)
 8001342:	f001 f81d 	bl	8002380 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001346:	bf00      	nop
 8001348:	3728      	adds	r7, #40	@ 0x28
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40021000 	.word	0x40021000
 8001358:	40020000 	.word	0x40020000
 800135c:	40020c00 	.word	0x40020c00

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001364:	b672      	cpsid	i
}
 8001366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <Error_Handler+0x8>

0800136c <motor_init>:

// For matching motor speeds.
int16_t pwmValAccel = 0, pwmValTarget = 0, lPwmVal = 0, rPwmVal = 0;


void motor_init(TIM_HandleTypeDef* pwm, TIM_HandleTypeDef* l_enc, TIM_HandleTypeDef* r_enc) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
	// Assign timer pointers
	motor_pwm_tim = pwm;
 8001378:	4a0e      	ldr	r2, [pc, #56]	@ (80013b4 <motor_init+0x48>)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6013      	str	r3, [r2, #0]
	l_enc_tim = l_enc;
 800137e:	4a0e      	ldr	r2, [pc, #56]	@ (80013b8 <motor_init+0x4c>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	6013      	str	r3, [r2, #0]
	r_enc_tim = r_enc;
 8001384:	4a0d      	ldr	r2, [pc, #52]	@ (80013bc <motor_init+0x50>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]

	// Start Encoders and PWM for L, R motors
	HAL_TIM_Encoder_Start_IT(l_enc, TIM_CHANNEL_ALL);
 800138a:	213c      	movs	r1, #60	@ 0x3c
 800138c:	68b8      	ldr	r0, [r7, #8]
 800138e:	f002 f99f 	bl	80036d0 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(r_enc, TIM_CHANNEL_ALL);
 8001392:	213c      	movs	r1, #60	@ 0x3c
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f002 f99b 	bl	80036d0 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(pwm, L_CHANNEL);
 800139a:	2100      	movs	r1, #0
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f002 f829 	bl	80033f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(pwm, R_CHANNEL);
 80013a2:	2104      	movs	r1, #4
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f002 f825 	bl	80033f4 <HAL_TIM_PWM_Start>
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000234 	.word	0x20000234
 80013b8:	20000238 	.word	0x20000238
 80013bc:	2000023c 	.word	0x2000023c

080013c0 <move>:

void move(uint8_t dir) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
	// 0: stop, 1: forward, -1: backward
	if (dir == 0) {
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d114      	bne.n	80013fa <move+0x3a>
		HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_RESET);
 80013d0:	2200      	movs	r2, #0
 80013d2:	2108      	movs	r1, #8
 80013d4:	4816      	ldr	r0, [pc, #88]	@ (8001430 <move+0x70>)
 80013d6:	f001 f987 	bl	80026e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2104      	movs	r1, #4
 80013de:	4814      	ldr	r0, [pc, #80]	@ (8001430 <move+0x70>)
 80013e0:	f001 f982 	bl	80026e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_RESET);
 80013e4:	2200      	movs	r2, #0
 80013e6:	2110      	movs	r1, #16
 80013e8:	4811      	ldr	r0, [pc, #68]	@ (8001430 <move+0x70>)
 80013ea:	f001 f97d 	bl	80026e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2120      	movs	r1, #32
 80013f2:	480f      	ldr	r0, [pc, #60]	@ (8001430 <move+0x70>)
 80013f4:	f001 f978 	bl	80026e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_SET);
	}
}
 80013f8:	e016      	b.n	8001428 <move+0x68>
	} else if (dir == 1) {
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d113      	bne.n	8001428 <move+0x68>
		HAL_GPIO_WritePin(MOTOR_A_IN1_GPIO_Port, MOTOR_A_IN1_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2108      	movs	r1, #8
 8001404:	480a      	ldr	r0, [pc, #40]	@ (8001430 <move+0x70>)
 8001406:	f001 f96f 	bl	80026e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_A_IN2_GPIO_Port, MOTOR_A_IN2_Pin, GPIO_PIN_RESET);
 800140a:	2200      	movs	r2, #0
 800140c:	2104      	movs	r1, #4
 800140e:	4808      	ldr	r0, [pc, #32]	@ (8001430 <move+0x70>)
 8001410:	f001 f96a 	bl	80026e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_B_IN1_GPIO_Port, MOTOR_B_IN1_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	2110      	movs	r1, #16
 8001418:	4805      	ldr	r0, [pc, #20]	@ (8001430 <move+0x70>)
 800141a:	f001 f965 	bl	80026e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MOTOR_B_IN2_GPIO_Port, MOTOR_B_IN2_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2120      	movs	r1, #32
 8001422:	4803      	ldr	r0, [pc, #12]	@ (8001430 <move+0x70>)
 8001424:	f001 f960 	bl	80026e8 <HAL_GPIO_WritePin>
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40020000 	.word	0x40020000

08001434 <get_speed_pwm>:

int16_t get_speed_pwm(uint8_t speed) {
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
	int16_t val = (int16_t)(MOTOR_PWM_MAX / 100 * speed);
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	b29b      	uxth	r3, r3
 8001442:	461a      	mov	r2, r3
 8001444:	0112      	lsls	r2, r2, #4
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	b29b      	uxth	r3, r3
 800144c:	81fb      	strh	r3, [r7, #14]
	return val;
 800144e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
	...

08001460 <motor_set_speed>:

// Speed: 0 - 100
void motor_set_speed(uint8_t speed) {
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	pwmValTarget = get_speed_pwm(speed);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ffe1 	bl	8001434 <get_speed_pwm>
 8001472:	4603      	mov	r3, r0
 8001474:	461a      	mov	r2, r3
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <motor_set_speed+0x3c>)
 8001478:	801a      	strh	r2, [r3, #0]
	lPwmVal = pwmValTarget;
 800147a:	4b08      	ldr	r3, [pc, #32]	@ (800149c <motor_set_speed+0x3c>)
 800147c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <motor_set_speed+0x40>)
 8001482:	801a      	strh	r2, [r3, #0]
	rPwmVal = pwmValTarget;
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <motor_set_speed+0x3c>)
 8001486:	f9b3 2000 	ldrsh.w	r2, [r3]
 800148a:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <motor_set_speed+0x44>)
 800148c:	801a      	strh	r2, [r3, #0]
	set_pwm_LR();
 800148e:	f000 f821 	bl	80014d4 <set_pwm_LR>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000240 	.word	0x20000240
 80014a0:	20000242 	.word	0x20000242
 80014a4:	20000244 	.word	0x20000244

080014a8 <reset_encoders>:

void reset_encoders() {
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
	// Reset timers
	__HAL_TIM_SET_COUNTER(l_enc_tim, 0);
 80014ac:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <reset_encoders+0x24>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COUNTER(r_enc_tim, 0);
 80014b6:	4b06      	ldr	r3, [pc, #24]	@ (80014d0 <reset_encoders+0x28>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2200      	movs	r2, #0
 80014be:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20000238 	.word	0x20000238
 80014d0:	2000023c 	.word	0x2000023c

080014d4 <set_pwm_LR>:

void set_pwm_LR() {
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
	// Set L, R channels
	__HAL_TIM_SET_COMPARE(motor_pwm_tim, L_CHANNEL,
 80014d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <set_pwm_LR+0x70>)
 80014da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014de:	f241 7270 	movw	r2, #6000	@ 0x1770
 80014e2:	4293      	cmp	r3, r2
 80014e4:	dc0a      	bgt.n	80014fc <set_pwm_LR+0x28>
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <set_pwm_LR+0x70>)
 80014e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ec:	f240 1277 	movw	r2, #375	@ 0x177
 80014f0:	4293      	cmp	r3, r2
 80014f2:	bfb8      	it	lt
 80014f4:	4613      	movlt	r3, r2
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	461a      	mov	r2, r3
 80014fa:	e001      	b.n	8001500 <set_pwm_LR+0x2c>
 80014fc:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001500:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <set_pwm_LR+0x74>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	635a      	str	r2, [r3, #52]	@ 0x34
		lPwmVal > MOTOR_PWM_MAX
		? MOTOR_PWM_MAX
		: lPwmVal < MOTOR_PWM_MIN
		? MOTOR_PWM_MIN
		: lPwmVal);
	__HAL_TIM_SET_COMPARE(motor_pwm_tim, R_CHANNEL,
 8001508:	4b10      	ldr	r3, [pc, #64]	@ (800154c <set_pwm_LR+0x78>)
 800150a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001512:	4293      	cmp	r3, r2
 8001514:	dc0a      	bgt.n	800152c <set_pwm_LR+0x58>
 8001516:	4b0d      	ldr	r3, [pc, #52]	@ (800154c <set_pwm_LR+0x78>)
 8001518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151c:	f240 1277 	movw	r2, #375	@ 0x177
 8001520:	4293      	cmp	r3, r2
 8001522:	bfb8      	it	lt
 8001524:	4613      	movlt	r3, r2
 8001526:	b21b      	sxth	r3, r3
 8001528:	461a      	mov	r2, r3
 800152a:	e001      	b.n	8001530 <set_pwm_LR+0x5c>
 800152c:	f241 7270 	movw	r2, #6000	@ 0x1770
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <set_pwm_LR+0x74>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	639a      	str	r2, [r3, #56]	@ 0x38
		rPwmVal > MOTOR_PWM_MAX
		? MOTOR_PWM_MAX
		: rPwmVal < MOTOR_PWM_MIN
		? MOTOR_PWM_MIN
		: rPwmVal);
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000242 	.word	0x20000242
 8001548:	20000234 	.word	0x20000234
 800154c:	20000244 	.word	0x20000244

08001550 <motor_forward>:

void motor_forward_inf() {
	move(1);
}

void motor_forward(uint32_t distance) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b0a2      	sub	sp, #136	@ 0x88
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
	float wheel_radius = 3.4;							// Wheel radius (cm)
 8001558:	4b41      	ldr	r3, [pc, #260]	@ (8001660 <motor_forward+0x110>)
 800155a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float circumference = 2 * 3.14159 * wheel_radius;	// Calculate circumference
 800155e:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8001562:	f7ff f913 	bl	800078c <__aeabi_f2d>
 8001566:	a33c      	add	r3, pc, #240	@ (adr r3, 8001658 <motor_forward+0x108>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	f7fe fe80 	bl	8000270 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff f960 	bl	800083c <__aeabi_d2f>
 800157c:	4603      	mov	r3, r0
 800157e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t pulses_per_rev = 1550;						// Encoder's specification: 11 ppr * 30 (30x reducer) = 330
 8001580:	f240 630e 	movw	r3, #1550	@ 0x60e
 8001584:	67bb      	str	r3, [r7, #120]	@ 0x78
    float pulses_per_cm = pulses_per_rev / circumference;
 8001586:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001588:	ee07 3a90 	vmov	s15, r3
 800158c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001590:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 8001594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001598:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

    uint32_t target_pulses = (uint32_t)(distance * pulses_per_cm);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	ee07 3a90 	vmov	s15, r3
 80015a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015a6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80015aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015b2:	ee17 3a90 	vmov	r3, s15
 80015b6:	673b      	str	r3, [r7, #112]	@ 0x70

	uint8_t buf[100];
    sprintf(buf, "target_pulse: %u", target_pulses);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80015be:	4929      	ldr	r1, [pc, #164]	@ (8001664 <motor_forward+0x114>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 f96b 	bl	800489c <siprintf>

	OLED_Clear();
 80015c6:	f000 f8d7 	bl	8001778 <OLED_Clear>
	OLED_ShowString(0, 0, buf);
 80015ca:	f107 030c 	add.w	r3, r7, #12
 80015ce:	461a      	mov	r2, r3
 80015d0:	2100      	movs	r1, #0
 80015d2:	2000      	movs	r0, #0
 80015d4:	f000 f9c2 	bl	800195c <OLED_ShowString>
	OLED_Refresh_Gram();
 80015d8:	f000 f896 	bl	8001708 <OLED_Refresh_Gram>

	HAL_Delay(2000);
 80015dc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015e0:	f000 fdc4 	bl	800216c <HAL_Delay>
    
    // Reset encoder count
    reset_encoders();
 80015e4:	f7ff ff60 	bl	80014a8 <reset_encoders>
    uint32_t encoder_cnt = 65535;
 80015e8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

    // Move forward
	move(1);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f7ff fee5 	bl	80013c0 <move>

	OLED_Clear();
 80015f6:	f000 f8bf 	bl	8001778 <OLED_Clear>
	OLED_ShowString(0, 0, "encoder_cnt: ");
 80015fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001668 <motor_forward+0x118>)
 80015fc:	2100      	movs	r1, #0
 80015fe:	2000      	movs	r0, #0
 8001600:	f000 f9ac 	bl	800195c <OLED_ShowString>
	OLED_Refresh_Gram();
 8001604:	f000 f880 	bl	8001708 <OLED_Refresh_Gram>

    // while (encoder_cnt < target_pulses OR 65535 - encoder_cnt < target_pulses) {
    while (65535 - encoder_cnt < target_pulses) {
 8001608:	e016      	b.n	8001638 <motor_forward+0xe8>
        encoder_cnt = __HAL_TIM_GET_COUNTER(l_enc_tim);
 800160a:	4b18      	ldr	r3, [pc, #96]	@ (800166c <motor_forward+0x11c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001612:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        sprintf(buf, "%u", encoder_cnt);
 8001616:	f107 030c 	add.w	r3, r7, #12
 800161a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800161e:	4914      	ldr	r1, [pc, #80]	@ (8001670 <motor_forward+0x120>)
 8001620:	4618      	mov	r0, r3
 8001622:	f003 f93b 	bl	800489c <siprintf>
        OLED_ShowString(0, 30, buf);
 8001626:	f107 030c 	add.w	r3, r7, #12
 800162a:	461a      	mov	r2, r3
 800162c:	211e      	movs	r1, #30
 800162e:	2000      	movs	r0, #0
 8001630:	f000 f994 	bl	800195c <OLED_ShowString>
		OLED_Refresh_Gram();
 8001634:	f000 f868 	bl	8001708 <OLED_Refresh_Gram>
    while (65535 - encoder_cnt < target_pulses) {
 8001638:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800163c:	f5c3 437f 	rsb	r3, r3, #65280	@ 0xff00
 8001640:	33ff      	adds	r3, #255	@ 0xff
 8001642:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8001644:	429a      	cmp	r2, r3
 8001646:	d8e0      	bhi.n	800160a <motor_forward+0xba>
    }
    
    // Stop the motors when the target distance is reached
    move(0);
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff feb9 	bl	80013c0 <move>
}
 800164e:	bf00      	nop
 8001650:	3788      	adds	r7, #136	@ 0x88
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	f01b866e 	.word	0xf01b866e
 800165c:	401921f9 	.word	0x401921f9
 8001660:	4059999a 	.word	0x4059999a
 8001664:	0800521c 	.word	0x0800521c
 8001668:	08005230 	.word	0x08005230
 800166c:	20000238 	.word	0x20000238
 8001670:	08005240 	.word	0x08005240

08001674 <OLED_WR_Byte>:
			   1 => sending data
			   0 => sending command
Output  : none

**************************************************************************/
void OLED_WR_Byte(uint8_t dat, uint8_t DataCmd) {
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	460a      	mov	r2, r1
 800167e:	71fb      	strb	r3, [r7, #7]
 8001680:	4613      	mov	r3, r2
 8001682:	71bb      	strb	r3, [r7, #6]
	uint8_t i;

	if (DataCmd == 1) {		// Data write
 8001684:	79bb      	ldrb	r3, [r7, #6]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d106      	bne.n	8001698 <OLED_WR_Byte+0x24>
		OLED_RS_Set();		// Set the D/C# line
 800168a:	2201      	movs	r2, #1
 800168c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001690:	481c      	ldr	r0, [pc, #112]	@ (8001704 <OLED_WR_Byte+0x90>)
 8001692:	f001 f829 	bl	80026e8 <HAL_GPIO_WritePin>
 8001696:	e005      	b.n	80016a4 <OLED_WR_Byte+0x30>
	} else {				// Command write
		OLED_RS_Clr();
 8001698:	2200      	movs	r2, #0
 800169a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800169e:	4819      	ldr	r0, [pc, #100]	@ (8001704 <OLED_WR_Byte+0x90>)
 80016a0:	f001 f822 	bl	80026e8 <HAL_GPIO_WritePin>
	}						// Clear the D/C# line

	for(i = 0; i < 8 ; i++) {
 80016a4:	2300      	movs	r3, #0
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e01e      	b.n	80016e8 <OLED_WR_Byte+0x74>
		OLED_SCLK_Clr();
 80016aa:	2200      	movs	r2, #0
 80016ac:	2120      	movs	r1, #32
 80016ae:	4815      	ldr	r0, [pc, #84]	@ (8001704 <OLED_WR_Byte+0x90>)
 80016b0:	f001 f81a 	bl	80026e8 <HAL_GPIO_WritePin>
		(dat & 0x80) ? OLED_SDIN_Set(): OLED_SDIN_Clr();
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	da05      	bge.n	80016c8 <OLED_WR_Byte+0x54>
 80016bc:	2201      	movs	r2, #1
 80016be:	2140      	movs	r1, #64	@ 0x40
 80016c0:	4810      	ldr	r0, [pc, #64]	@ (8001704 <OLED_WR_Byte+0x90>)
 80016c2:	f001 f811 	bl	80026e8 <HAL_GPIO_WritePin>
 80016c6:	e004      	b.n	80016d2 <OLED_WR_Byte+0x5e>
 80016c8:	2200      	movs	r2, #0
 80016ca:	2140      	movs	r1, #64	@ 0x40
 80016cc:	480d      	ldr	r0, [pc, #52]	@ (8001704 <OLED_WR_Byte+0x90>)
 80016ce:	f001 f80b 	bl	80026e8 <HAL_GPIO_WritePin>
		dat <<= 1;
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	71fb      	strb	r3, [r7, #7]
		OLED_SCLK_Set();
 80016d8:	2201      	movs	r2, #1
 80016da:	2120      	movs	r1, #32
 80016dc:	4809      	ldr	r0, [pc, #36]	@ (8001704 <OLED_WR_Byte+0x90>)
 80016de:	f001 f803 	bl	80026e8 <HAL_GPIO_WritePin>
	for(i = 0; i < 8 ; i++) {
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	3301      	adds	r3, #1
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	2b07      	cmp	r3, #7
 80016ec:	d9dd      	bls.n	80016aa <OLED_WR_Byte+0x36>
	}

	OLED_RS_Set();			// Keep the D/C# line high upon exit
 80016ee:	2201      	movs	r2, #1
 80016f0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016f4:	4803      	ldr	r0, [pc, #12]	@ (8001704 <OLED_WR_Byte+0x90>)
 80016f6:	f000 fff7 	bl	80026e8 <HAL_GPIO_WritePin>
}
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40021000 	.word	0x40021000

08001708 <OLED_Refresh_Gram>:

// **************************************************************************
// Refresh the GRAM
uint8_t OLED_GRAM[128][8];
void OLED_Refresh_Gram() {
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	uint8_t i,n;
	for(i = 0; i < 8; i++){
 800170e:	2300      	movs	r3, #0
 8001710:	71fb      	strb	r3, [r7, #7]
 8001712:	e026      	b.n	8001762 <OLED_Refresh_Gram+0x5a>
		OLED_WR_Byte(0xb0 + i, OLED_CMD);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	3b50      	subs	r3, #80	@ 0x50
 8001718:	b2db      	uxtb	r3, r3
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ffa9 	bl	8001674 <OLED_WR_Byte>
		OLED_WR_Byte(0x00, OLED_CMD);
 8001722:	2100      	movs	r1, #0
 8001724:	2000      	movs	r0, #0
 8001726:	f7ff ffa5 	bl	8001674 <OLED_WR_Byte>
		OLED_WR_Byte(0x10, OLED_CMD);
 800172a:	2100      	movs	r1, #0
 800172c:	2010      	movs	r0, #16
 800172e:	f7ff ffa1 	bl	8001674 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 8001732:	2300      	movs	r3, #0
 8001734:	71bb      	strb	r3, [r7, #6]
 8001736:	e00d      	b.n	8001754 <OLED_Refresh_Gram+0x4c>
			OLED_WR_Byte(OLED_GRAM[n][i], OLED_DATA);
 8001738:	79ba      	ldrb	r2, [r7, #6]
 800173a:	79fb      	ldrb	r3, [r7, #7]
 800173c:	490d      	ldr	r1, [pc, #52]	@ (8001774 <OLED_Refresh_Gram+0x6c>)
 800173e:	00d2      	lsls	r2, r2, #3
 8001740:	440a      	add	r2, r1
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2101      	movs	r1, #1
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff93 	bl	8001674 <OLED_WR_Byte>
		for (n = 0; n < 128; n++)
 800174e:	79bb      	ldrb	r3, [r7, #6]
 8001750:	3301      	adds	r3, #1
 8001752:	71bb      	strb	r3, [r7, #6]
 8001754:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001758:	2b00      	cmp	r3, #0
 800175a:	daed      	bge.n	8001738 <OLED_Refresh_Gram+0x30>
	for(i = 0; i < 8; i++){
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	3301      	adds	r3, #1
 8001760:	71fb      	strb	r3, [r7, #7]
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b07      	cmp	r3, #7
 8001766:	d9d5      	bls.n	8001714 <OLED_Refresh_Gram+0xc>
	}
}
 8001768:	bf00      	nop
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000248 	.word	0x20000248

08001778 <OLED_Clear>:

// **************************************************************************
// Clear OLED
void OLED_Clear() {
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
	uint8_t i, n;
	for(i = 0; i < 8; i++)
 800177e:	2300      	movs	r3, #0
 8001780:	71fb      	strb	r3, [r7, #7]
 8001782:	e014      	b.n	80017ae <OLED_Clear+0x36>
		for(n = 0; n < 128; n++)
 8001784:	2300      	movs	r3, #0
 8001786:	71bb      	strb	r3, [r7, #6]
 8001788:	e00a      	b.n	80017a0 <OLED_Clear+0x28>
			OLED_GRAM[n][i] = 0X00;
 800178a:	79ba      	ldrb	r2, [r7, #6]
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	490c      	ldr	r1, [pc, #48]	@ (80017c0 <OLED_Clear+0x48>)
 8001790:	00d2      	lsls	r2, r2, #3
 8001792:	440a      	add	r2, r1
 8001794:	4413      	add	r3, r2
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
		for(n = 0; n < 128; n++)
 800179a:	79bb      	ldrb	r3, [r7, #6]
 800179c:	3301      	adds	r3, #1
 800179e:	71bb      	strb	r3, [r7, #6]
 80017a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	daf0      	bge.n	800178a <OLED_Clear+0x12>
	for(i = 0; i < 8; i++)
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	3301      	adds	r3, #1
 80017ac:	71fb      	strb	r3, [r7, #7]
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b07      	cmp	r3, #7
 80017b2:	d9e7      	bls.n	8001784 <OLED_Clear+0xc>
	OLED_Refresh_Gram();	// Refresh
 80017b4:	f7ff ffa8 	bl	8001708 <OLED_Refresh_Gram>
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000248 	.word	0x20000248

080017c4 <OLED_DrawPoint>:
	OLED_WR_Byte(0XAE, OLED_CMD);	// DISPLAY OFF
}

// **************************************************************************
// Draw A Point
void OLED_DrawPoint(uint8_t x, uint8_t y, uint8_t t) {
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
 80017ce:	460b      	mov	r3, r1
 80017d0:	71bb      	strb	r3, [r7, #6]
 80017d2:	4613      	mov	r3, r2
 80017d4:	717b      	strb	r3, [r7, #5]
	uint8_t pos, bx, temp = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	73fb      	strb	r3, [r7, #15]

	if (x > 127 || y > 63)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db41      	blt.n	8001866 <OLED_DrawPoint+0xa2>
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80017e6:	d83e      	bhi.n	8001866 <OLED_DrawPoint+0xa2>
		return;		// Out of reach

	pos = 7 - y/8;
 80017e8:	79bb      	ldrb	r3, [r7, #6]
 80017ea:	08db      	lsrs	r3, r3, #3
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	73bb      	strb	r3, [r7, #14]
	bx = y % 8;
 80017f4:	79bb      	ldrb	r3, [r7, #6]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	737b      	strb	r3, [r7, #13]
	temp = 1 << (7-bx);
 80017fc:	7b7b      	ldrb	r3, [r7, #13]
 80017fe:	f1c3 0307 	rsb	r3, r3, #7
 8001802:	2201      	movs	r2, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	73fb      	strb	r3, [r7, #15]

	if (t) {
 800180a:	797b      	ldrb	r3, [r7, #5]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d012      	beq.n	8001836 <OLED_DrawPoint+0x72>
		OLED_GRAM[x][pos] |= temp;
 8001810:	79fa      	ldrb	r2, [r7, #7]
 8001812:	7bbb      	ldrb	r3, [r7, #14]
 8001814:	4917      	ldr	r1, [pc, #92]	@ (8001874 <OLED_DrawPoint+0xb0>)
 8001816:	00d2      	lsls	r2, r2, #3
 8001818:	440a      	add	r2, r1
 800181a:	4413      	add	r3, r2
 800181c:	7818      	ldrb	r0, [r3, #0]
 800181e:	79fa      	ldrb	r2, [r7, #7]
 8001820:	7bbb      	ldrb	r3, [r7, #14]
 8001822:	7bf9      	ldrb	r1, [r7, #15]
 8001824:	4301      	orrs	r1, r0
 8001826:	b2c8      	uxtb	r0, r1
 8001828:	4912      	ldr	r1, [pc, #72]	@ (8001874 <OLED_DrawPoint+0xb0>)
 800182a:	00d2      	lsls	r2, r2, #3
 800182c:	440a      	add	r2, r1
 800182e:	4413      	add	r3, r2
 8001830:	4602      	mov	r2, r0
 8001832:	701a      	strb	r2, [r3, #0]
 8001834:	e018      	b.n	8001868 <OLED_DrawPoint+0xa4>
	} else {
		OLED_GRAM[x][pos] &= ~temp;
 8001836:	79fa      	ldrb	r2, [r7, #7]
 8001838:	7bbb      	ldrb	r3, [r7, #14]
 800183a:	490e      	ldr	r1, [pc, #56]	@ (8001874 <OLED_DrawPoint+0xb0>)
 800183c:	00d2      	lsls	r2, r2, #3
 800183e:	440a      	add	r2, r1
 8001840:	4413      	add	r3, r2
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	b25a      	sxtb	r2, r3
 8001846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184a:	43db      	mvns	r3, r3
 800184c:	b25b      	sxtb	r3, r3
 800184e:	4013      	ands	r3, r2
 8001850:	b259      	sxtb	r1, r3
 8001852:	79fa      	ldrb	r2, [r7, #7]
 8001854:	7bbb      	ldrb	r3, [r7, #14]
 8001856:	b2c8      	uxtb	r0, r1
 8001858:	4906      	ldr	r1, [pc, #24]	@ (8001874 <OLED_DrawPoint+0xb0>)
 800185a:	00d2      	lsls	r2, r2, #3
 800185c:	440a      	add	r2, r1
 800185e:	4413      	add	r3, r2
 8001860:	4602      	mov	r2, r0
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e000      	b.n	8001868 <OLED_DrawPoint+0xa4>
		return;		// Out of reach
 8001866:	bf00      	nop
	}
}
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	20000248 	.word	0x20000248

08001878 <OLED_ShowChar>:

// **************************************************************************
// Show Char
void OLED_ShowChar(uint8_t x, uint8_t y, uint8_t chr, uint8_t size, uint8_t mode) {
 8001878:	b590      	push	{r4, r7, lr}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	4604      	mov	r4, r0
 8001880:	4608      	mov	r0, r1
 8001882:	4611      	mov	r1, r2
 8001884:	461a      	mov	r2, r3
 8001886:	4623      	mov	r3, r4
 8001888:	71fb      	strb	r3, [r7, #7]
 800188a:	4603      	mov	r3, r0
 800188c:	71bb      	strb	r3, [r7, #6]
 800188e:	460b      	mov	r3, r1
 8001890:	717b      	strb	r3, [r7, #5]
 8001892:	4613      	mov	r3, r2
 8001894:	713b      	strb	r3, [r7, #4]
	uint8_t temp, t, t1;
	uint8_t y0 = y;
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	733b      	strb	r3, [r7, #12]

	chr = chr - ' ';
 800189a:	797b      	ldrb	r3, [r7, #5]
 800189c:	3b20      	subs	r3, #32
 800189e:	717b      	strb	r3, [r7, #5]
    for(t = 0; t < size; t++) {
 80018a0:	2300      	movs	r3, #0
 80018a2:	73bb      	strb	r3, [r7, #14]
 80018a4:	e04d      	b.n	8001942 <OLED_ShowChar+0xca>
		if (size == 12)
 80018a6:	793b      	ldrb	r3, [r7, #4]
 80018a8:	2b0c      	cmp	r3, #12
 80018aa:	d10b      	bne.n	80018c4 <OLED_ShowChar+0x4c>
			temp = oled_asc2_1206[chr][t];		// 1206 Size
 80018ac:	797a      	ldrb	r2, [r7, #5]
 80018ae:	7bb9      	ldrb	r1, [r7, #14]
 80018b0:	4828      	ldr	r0, [pc, #160]	@ (8001954 <OLED_ShowChar+0xdc>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4403      	add	r3, r0
 80018bc:	440b      	add	r3, r1
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	73fb      	strb	r3, [r7, #15]
 80018c2:	e007      	b.n	80018d4 <OLED_ShowChar+0x5c>
		else
			temp = oled_asc2_1608[chr][t];		// 1608 Size
 80018c4:	797a      	ldrb	r2, [r7, #5]
 80018c6:	7bbb      	ldrb	r3, [r7, #14]
 80018c8:	4923      	ldr	r1, [pc, #140]	@ (8001958 <OLED_ShowChar+0xe0>)
 80018ca:	0112      	lsls	r2, r2, #4
 80018cc:	440a      	add	r2, r1
 80018ce:	4413      	add	r3, r2
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	73fb      	strb	r3, [r7, #15]

        for(t1 = 0; t1 < 8; t1++) {
 80018d4:	2300      	movs	r3, #0
 80018d6:	737b      	strb	r3, [r7, #13]
 80018d8:	e02d      	b.n	8001936 <OLED_ShowChar+0xbe>
			if (temp & 0x80) {
 80018da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	da07      	bge.n	80018f2 <OLED_ShowChar+0x7a>
				OLED_DrawPoint(x, y, mode);
 80018e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018e6:	79b9      	ldrb	r1, [r7, #6]
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff ff6a 	bl	80017c4 <OLED_DrawPoint>
 80018f0:	e00c      	b.n	800190c <OLED_ShowChar+0x94>
			} else {
				OLED_DrawPoint(x, y, !mode);
 80018f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	bf0c      	ite	eq
 80018fa:	2301      	moveq	r3, #1
 80018fc:	2300      	movne	r3, #0
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	79b9      	ldrb	r1, [r7, #6]
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff5c 	bl	80017c4 <OLED_DrawPoint>
			}

			temp <<= 1;
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	73fb      	strb	r3, [r7, #15]
			y++;
 8001912:	79bb      	ldrb	r3, [r7, #6]
 8001914:	3301      	adds	r3, #1
 8001916:	71bb      	strb	r3, [r7, #6]

			if((y - y0) == size) {
 8001918:	79ba      	ldrb	r2, [r7, #6]
 800191a:	7b3b      	ldrb	r3, [r7, #12]
 800191c:	1ad2      	subs	r2, r2, r3
 800191e:	793b      	ldrb	r3, [r7, #4]
 8001920:	429a      	cmp	r2, r3
 8001922:	d105      	bne.n	8001930 <OLED_ShowChar+0xb8>
				y = y0;
 8001924:	7b3b      	ldrb	r3, [r7, #12]
 8001926:	71bb      	strb	r3, [r7, #6]
				x++;
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	3301      	adds	r3, #1
 800192c:	71fb      	strb	r3, [r7, #7]
				break;
 800192e:	e005      	b.n	800193c <OLED_ShowChar+0xc4>
        for(t1 = 0; t1 < 8; t1++) {
 8001930:	7b7b      	ldrb	r3, [r7, #13]
 8001932:	3301      	adds	r3, #1
 8001934:	737b      	strb	r3, [r7, #13]
 8001936:	7b7b      	ldrb	r3, [r7, #13]
 8001938:	2b07      	cmp	r3, #7
 800193a:	d9ce      	bls.n	80018da <OLED_ShowChar+0x62>
    for(t = 0; t < size; t++) {
 800193c:	7bbb      	ldrb	r3, [r7, #14]
 800193e:	3301      	adds	r3, #1
 8001940:	73bb      	strb	r3, [r7, #14]
 8001942:	7bba      	ldrb	r2, [r7, #14]
 8001944:	793b      	ldrb	r3, [r7, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	d3ad      	bcc.n	80018a6 <OLED_ShowChar+0x2e>
			}
		}
    }
}
 800194a:	bf00      	nop
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}
 8001954:	08005244 	.word	0x08005244
 8001958:	080056b8 	.word	0x080056b8

0800195c <OLED_ShowString>:
	}
}

// **************************************************************************
// Show The String
void OLED_ShowString(uint8_t x, uint8_t y, const uint8_t *p) {
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af02      	add	r7, sp, #8
 8001962:	4603      	mov	r3, r0
 8001964:	603a      	str	r2, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
 8001968:	460b      	mov	r3, r1
 800196a:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
    while (*p != '\0') {
 800196c:	e01f      	b.n	80019ae <OLED_ShowString+0x52>
        if (x > MAX_CHAR_POSX){
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b7a      	cmp	r3, #122	@ 0x7a
 8001972:	d904      	bls.n	800197e <OLED_ShowString+0x22>
        	x = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	71fb      	strb	r3, [r7, #7]
        	y += 16;
 8001978:	79bb      	ldrb	r3, [r7, #6]
 800197a:	3310      	adds	r3, #16
 800197c:	71bb      	strb	r3, [r7, #6]
        }

        if (y > MAX_CHAR_POSY) {
 800197e:	79bb      	ldrb	r3, [r7, #6]
 8001980:	2b3a      	cmp	r3, #58	@ 0x3a
 8001982:	d905      	bls.n	8001990 <OLED_ShowString+0x34>
        	y = x = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	71fb      	strb	r3, [r7, #7]
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	71bb      	strb	r3, [r7, #6]
        	OLED_Clear();
 800198c:	f7ff fef4 	bl	8001778 <OLED_Clear>
        }

        OLED_ShowChar(x, y, *p, 12, 1);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	79b9      	ldrb	r1, [r7, #6]
 8001996:	79f8      	ldrb	r0, [r7, #7]
 8001998:	2301      	movs	r3, #1
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	230c      	movs	r3, #12
 800199e:	f7ff ff6b 	bl	8001878 <OLED_ShowChar>
        x += 8;
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	3308      	adds	r3, #8
 80019a6:	71fb      	strb	r3, [r7, #7]
        p++;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	3301      	adds	r3, #1
 80019ac:	603b      	str	r3, [r7, #0]
    while (*p != '\0') {
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1db      	bne.n	800196e <OLED_ShowString+0x12>
    }
}
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <OLED_Init>:

void OLED_Init() {
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80019c4:	f000 ffee 	bl	80029a4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);	// turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles
 80019c8:	4b41      	ldr	r3, [pc, #260]	@ (8001ad0 <OLED_Init+0x110>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019cc:	4a40      	ldr	r2, [pc, #256]	@ (8001ad0 <OLED_Init+0x110>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019d4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad0 <OLED_Init+0x110>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ad0 <OLED_Init+0x110>)
 80019da:	f023 0304 	bic.w	r3, r3, #4
 80019de:	6713      	str	r3, [r2, #112]	@ 0x70
										// LSE oscillator switch off to let PC13 PC14 PC15 be IO


	HAL_PWR_DisableBkUpAccess();
 80019e0:	f000 fff4 	bl	80029cc <HAL_PWR_DisableBkUpAccess>

	OLED_RST_Clr();
 80019e4:	2200      	movs	r2, #0
 80019e6:	2180      	movs	r1, #128	@ 0x80
 80019e8:	483a      	ldr	r0, [pc, #232]	@ (8001ad4 <OLED_Init+0x114>)
 80019ea:	f000 fe7d 	bl	80026e8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80019ee:	2064      	movs	r0, #100	@ 0x64
 80019f0:	f000 fbbc 	bl	800216c <HAL_Delay>
	OLED_RST_Set();
 80019f4:	2201      	movs	r2, #1
 80019f6:	2180      	movs	r1, #128	@ 0x80
 80019f8:	4836      	ldr	r0, [pc, #216]	@ (8001ad4 <OLED_Init+0x114>)
 80019fa:	f000 fe75 	bl	80026e8 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE, OLED_CMD);	// Off Display
 80019fe:	2100      	movs	r1, #0
 8001a00:	20ae      	movs	r0, #174	@ 0xae
 8001a02:	f7ff fe37 	bl	8001674 <OLED_WR_Byte>

	OLED_WR_Byte(0xD5, OLED_CMD);	// Set Oscillator Division
 8001a06:	2100      	movs	r1, #0
 8001a08:	20d5      	movs	r0, #213	@ 0xd5
 8001a0a:	f7ff fe33 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(80, OLED_CMD);		// [3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2050      	movs	r0, #80	@ 0x50
 8001a12:	f7ff fe2f 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8, OLED_CMD);	// multiplex ratio
 8001a16:	2100      	movs	r1, #0
 8001a18:	20a8      	movs	r0, #168	@ 0xa8
 8001a1a:	f7ff fe2b 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F, OLED_CMD);	// duty = 0X3F(1/64)
 8001a1e:	2100      	movs	r1, #0
 8001a20:	203f      	movs	r0, #63	@ 0x3f
 8001a22:	f7ff fe27 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3, OLED_CMD);	// set display offset
 8001a26:	2100      	movs	r1, #0
 8001a28:	20d3      	movs	r0, #211	@ 0xd3
 8001a2a:	f7ff fe23 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0X00, OLED_CMD);	// 0
 8001a2e:	2100      	movs	r1, #0
 8001a30:	2000      	movs	r0, #0
 8001a32:	f7ff fe1f 	bl	8001674 <OLED_WR_Byte>

	OLED_WR_Byte(0x40, OLED_CMD);	// set display start line [5:0]- from 0-63. RESET
 8001a36:	2100      	movs	r1, #0
 8001a38:	2040      	movs	r0, #64	@ 0x40
 8001a3a:	f7ff fe1b 	bl	8001674 <OLED_WR_Byte>

	OLED_WR_Byte(0x8D, OLED_CMD);	// Set charge pump
 8001a3e:	2100      	movs	r1, #0
 8001a40:	208d      	movs	r0, #141	@ 0x8d
 8001a42:	f7ff fe17 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0x14, OLED_CMD); 	// Enable Charge Pump
 8001a46:	2100      	movs	r1, #0
 8001a48:	2014      	movs	r0, #20
 8001a4a:	f7ff fe13 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0x20, OLED_CMD);	// Set Memory Addressing Mode
 8001a4e:	2100      	movs	r1, #0
 8001a50:	2020      	movs	r0, #32
 8001a52:	f7ff fe0f 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0x02, OLED_CMD);	// Page Addressing Mode (RESET)
 8001a56:	2100      	movs	r1, #0
 8001a58:	2002      	movs	r0, #2
 8001a5a:	f7ff fe0b 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1, OLED_CMD);	// Set segment remap, bit0:0,0->0;1,0->127;
 8001a5e:	2100      	movs	r1, #0
 8001a60:	20a1      	movs	r0, #161	@ 0xa1
 8001a62:	f7ff fe07 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0, OLED_CMD);	// Set COM Output Scan Direction
 8001a66:	2100      	movs	r1, #0
 8001a68:	20c0      	movs	r0, #192	@ 0xc0
 8001a6a:	f7ff fe03 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA, OLED_CMD);	// Set COM Pins
 8001a6e:	2100      	movs	r1, #0
 8001a70:	20da      	movs	r0, #218	@ 0xda
 8001a72:	f7ff fdff 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0x12, OLED_CMD);	// [5:4] setting
 8001a76:	2100      	movs	r1, #0
 8001a78:	2012      	movs	r0, #18
 8001a7a:	f7ff fdfb 	bl	8001674 <OLED_WR_Byte>

	OLED_WR_Byte(0x81, OLED_CMD);	// Contrast Control
 8001a7e:	2100      	movs	r1, #0
 8001a80:	2081      	movs	r0, #129	@ 0x81
 8001a82:	f7ff fdf7 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF, OLED_CMD);	// 1~256; Default: 0X7F
 8001a86:	2100      	movs	r1, #0
 8001a88:	20ef      	movs	r0, #239	@ 0xef
 8001a8a:	f7ff fdf3 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9, OLED_CMD);	// Set Pre-charge Period
 8001a8e:	2100      	movs	r1, #0
 8001a90:	20d9      	movs	r0, #217	@ 0xd9
 8001a92:	f7ff fdef 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1, OLED_CMD);	// [3:0],PHASE 1;[7:4],PHASE 2;
 8001a96:	2100      	movs	r1, #0
 8001a98:	20f1      	movs	r0, #241	@ 0xf1
 8001a9a:	f7ff fdeb 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB, OLED_CMD);	// Set VCOMH
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	20db      	movs	r0, #219	@ 0xdb
 8001aa2:	f7ff fde7 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0x30, OLED_CMD);	// [6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	2030      	movs	r0, #48	@ 0x30
 8001aaa:	f7ff fde3 	bl	8001674 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4, OLED_CMD);	// Enable display outputs according to the GDDRAM contents
 8001aae:	2100      	movs	r1, #0
 8001ab0:	20a4      	movs	r0, #164	@ 0xa4
 8001ab2:	f7ff fddf 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6, OLED_CMD);	// Set normal display
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	20a6      	movs	r0, #166	@ 0xa6
 8001aba:	f7ff fddb 	bl	8001674 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF, OLED_CMD);	// DISPLAY ON
 8001abe:	2100      	movs	r1, #0
 8001ac0:	20af      	movs	r0, #175	@ 0xaf
 8001ac2:	f7ff fdd7 	bl	8001674 <OLED_WR_Byte>
	OLED_Clear();
 8001ac6:	f7ff fe57 	bl	8001778 <OLED_Clear>
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023800 	.word	0x40023800
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <servo_init>:

#define STRAIGHT	4700
#define LEFT		3000
#define RIGHT		7800

void servo_init(TIM_HandleTypeDef* pwm) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	pwm_tim = pwm;
 8001ae0:	4a05      	ldr	r2, [pc, #20]	@ (8001af8 <servo_init+0x20>)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6013      	str	r3, [r2, #0]
	HAL_TIM_PWM_Start(pwm, SERVO_PWM_CHANNEL);
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f001 fc83 	bl	80033f4 <HAL_TIM_PWM_Start>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000648 	.word	0x20000648

08001afc <servo_set_val>:

void servo_set_val(uint32_t val) {
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	pwm_tim->Instance->CCR1 = val;
 8001b04:	4b05      	ldr	r3, [pc, #20]	@ (8001b1c <servo_set_val+0x20>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001b0e:	bf00      	nop
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000648 	.word	0x20000648

08001b20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	4b10      	ldr	r3, [pc, #64]	@ (8001b6c <HAL_MspInit+0x4c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b6c <HAL_MspInit+0x4c>)
 8001b30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b34:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b36:	4b0d      	ldr	r3, [pc, #52]	@ (8001b6c <HAL_MspInit+0x4c>)
 8001b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
 8001b46:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <HAL_MspInit+0x4c>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	4a08      	ldr	r2, [pc, #32]	@ (8001b6c <HAL_MspInit+0x4c>)
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <HAL_MspInit+0x4c>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800

08001b70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	@ 0x28
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 0314 	add.w	r3, r7, #20
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	@ (8001bf4 <HAL_I2C_MspInit+0x84>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d12c      	bne.n	8001bec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a17      	ldr	r2, [pc, #92]	@ (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ICM_SCL_Pin|ICM_SDA_Pin;
 8001bae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb4:	2312      	movs	r3, #18
 8001bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bc0:	2304      	movs	r3, #4
 8001bc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 0314 	add.w	r3, r7, #20
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480c      	ldr	r0, [pc, #48]	@ (8001bfc <HAL_I2C_MspInit+0x8c>)
 8001bcc:	f000 fbd8 	bl	8002380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001bda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bde:	6413      	str	r3, [r2, #64]	@ 0x40
 8001be0:	4b05      	ldr	r3, [pc, #20]	@ (8001bf8 <HAL_I2C_MspInit+0x88>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001bec:	bf00      	nop
 8001bee:	3728      	adds	r7, #40	@ 0x28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40005400 	.word	0x40005400
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020400 	.word	0x40020400

08001c00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	@ 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a23      	ldr	r2, [pc, #140]	@ (8001cac <HAL_TIM_Base_MspInit+0xac>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d12d      	bne.n	8001c7e <HAL_TIM_Base_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b22      	ldr	r3, [pc, #136]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	4a21      	ldr	r2, [pc, #132]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8001c2c:	f043 0301 	orr.w	r3, r3, #1
 8001c30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c32:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8001c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8001c48:	f043 0310 	orr.w	r3, r3, #16
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4b18      	ldr	r3, [pc, #96]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f003 0310 	and.w	r3, r3, #16
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001c5a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c60:	2302      	movs	r3, #2
 8001c62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	4619      	mov	r1, r3
 8001c76:	480f      	ldr	r0, [pc, #60]	@ (8001cb4 <HAL_TIM_Base_MspInit+0xb4>)
 8001c78:	f000 fb82 	bl	8002380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001c7c:	e012      	b.n	8001ca4 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM8)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb8 <HAL_TIM_Base_MspInit+0xb8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d10d      	bne.n	8001ca4 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c88:	2300      	movs	r3, #0
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8001c8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c90:	4a07      	ldr	r2, [pc, #28]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8001c92:	f043 0302 	orr.w	r3, r3, #2
 8001c96:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_TIM_Base_MspInit+0xb0>)
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9c:	f003 0302 	and.w	r3, r3, #2
 8001ca0:	60bb      	str	r3, [r7, #8]
 8001ca2:	68bb      	ldr	r3, [r7, #8]
}
 8001ca4:	bf00      	nop
 8001ca6:	3728      	adds	r7, #40	@ 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	40010400 	.word	0x40010400

08001cbc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08c      	sub	sp, #48	@ 0x30
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
 8001ccc:	605a      	str	r2, [r3, #4]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	60da      	str	r2, [r3, #12]
 8001cd2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cdc:	d14b      	bne.n	8001d76 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	4b3f      	ldr	r3, [pc, #252]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	4a3e      	ldr	r2, [pc, #248]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ce8:	f043 0301 	orr.w	r3, r3, #1
 8001cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cee:	4b3c      	ldr	r3, [pc, #240]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	4b38      	ldr	r3, [pc, #224]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a37      	ldr	r2, [pc, #220]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d04:	f043 0301 	orr.w	r3, r3, #1
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b35      	ldr	r3, [pc, #212]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	4b31      	ldr	r3, [pc, #196]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	4a30      	ldr	r2, [pc, #192]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d26:	4b2e      	ldr	r3, [pc, #184]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = MOTOR_A_CH1_Pin;
 8001d32:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d44:	2301      	movs	r3, #1
 8001d46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_A_CH1_GPIO_Port, &GPIO_InitStruct);
 8001d48:	f107 031c 	add.w	r3, r7, #28
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4825      	ldr	r0, [pc, #148]	@ (8001de4 <HAL_TIM_Encoder_MspInit+0x128>)
 8001d50:	f000 fb16 	bl	8002380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_A_CH2_Pin;
 8001d54:	2308      	movs	r3, #8
 8001d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d64:	2301      	movs	r3, #1
 8001d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_A_CH2_GPIO_Port, &GPIO_InitStruct);
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	481e      	ldr	r0, [pc, #120]	@ (8001de8 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001d70:	f000 fb06 	bl	8002380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d74:	e030      	b.n	8001dd8 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a1c      	ldr	r2, [pc, #112]	@ (8001dec <HAL_TIM_Encoder_MspInit+0x130>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d12b      	bne.n	8001dd8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	4b16      	ldr	r3, [pc, #88]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	4a15      	ldr	r2, [pc, #84]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d8a:	f043 0302 	orr.w	r3, r3, #2
 8001d8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d90:	4b13      	ldr	r3, [pc, #76]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	4b0f      	ldr	r3, [pc, #60]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da4:	4a0e      	ldr	r2, [pc, #56]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dac:	4b0c      	ldr	r3, [pc, #48]	@ (8001de0 <HAL_TIM_Encoder_MspInit+0x124>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MOTOR_B_CH1_Pin|MOTOR_B_CH2_Pin;
 8001db8:	23c0      	movs	r3, #192	@ 0xc0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4804      	ldr	r0, [pc, #16]	@ (8001de4 <HAL_TIM_Encoder_MspInit+0x128>)
 8001dd4:	f000 fad4 	bl	8002380 <HAL_GPIO_Init>
}
 8001dd8:	bf00      	nop
 8001dda:	3730      	adds	r7, #48	@ 0x30
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020000 	.word	0x40020000
 8001de8:	40020400 	.word	0x40020400
 8001dec:	40000400 	.word	0x40000400

08001df0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b08a      	sub	sp, #40	@ 0x28
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	605a      	str	r2, [r3, #4]
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	60da      	str	r2, [r3, #12]
 8001e06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a24      	ldr	r2, [pc, #144]	@ (8001ea0 <HAL_TIM_MspPostInit+0xb0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d11f      	bne.n	8001e52 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	4b23      	ldr	r3, [pc, #140]	@ (8001ea4 <HAL_TIM_MspPostInit+0xb4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1a:	4a22      	ldr	r2, [pc, #136]	@ (8001ea4 <HAL_TIM_MspPostInit+0xb4>)
 8001e1c:	f043 0310 	orr.w	r3, r3, #16
 8001e20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e22:	4b20      	ldr	r3, [pc, #128]	@ (8001ea4 <HAL_TIM_MspPostInit+0xb4>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	613b      	str	r3, [r7, #16]
 8001e2c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = SERVO_PWM_Pin;
 8001e2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e40:	2301      	movs	r3, #1
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_PWM_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4817      	ldr	r0, [pc, #92]	@ (8001ea8 <HAL_TIM_MspPostInit+0xb8>)
 8001e4c:	f000 fa98 	bl	8002380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001e50:	e022      	b.n	8001e98 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM8)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a15      	ldr	r2, [pc, #84]	@ (8001eac <HAL_TIM_MspPostInit+0xbc>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d11d      	bne.n	8001e98 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_TIM_MspPostInit+0xb4>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e64:	4a0f      	ldr	r2, [pc, #60]	@ (8001ea4 <HAL_TIM_MspPostInit+0xb4>)
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ea4 <HAL_TIM_MspPostInit+0xb4>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_A_PWM_Pin|MOTOR_B_PWM_Pin;
 8001e78:	23c0      	movs	r3, #192	@ 0xc0
 8001e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	4807      	ldr	r0, [pc, #28]	@ (8001eb0 <HAL_TIM_MspPostInit+0xc0>)
 8001e94:	f000 fa74 	bl	8002380 <HAL_GPIO_Init>
}
 8001e98:	bf00      	nop
 8001e9a:	3728      	adds	r7, #40	@ 0x28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40010000 	.word	0x40010000
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010400 	.word	0x40010400
 8001eb0:	40020800 	.word	0x40020800

08001eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	@ 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a19      	ldr	r2, [pc, #100]	@ (8001f38 <HAL_UART_MspInit+0x84>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d12c      	bne.n	8001f30 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	4b18      	ldr	r3, [pc, #96]	@ (8001f3c <HAL_UART_MspInit+0x88>)
 8001edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ede:	4a17      	ldr	r2, [pc, #92]	@ (8001f3c <HAL_UART_MspInit+0x88>)
 8001ee0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ee6:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_UART_MspInit+0x88>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <HAL_UART_MspInit+0x88>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a10      	ldr	r2, [pc, #64]	@ (8001f3c <HAL_UART_MspInit+0x88>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b0e      	ldr	r3, [pc, #56]	@ (8001f3c <HAL_UART_MspInit+0x88>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f0e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f20:	2307      	movs	r3, #7
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4805      	ldr	r0, [pc, #20]	@ (8001f40 <HAL_UART_MspInit+0x8c>)
 8001f2c:	f000 fa28 	bl	8002380 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	@ 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40004800 	.word	0x40004800
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020800 	.word	0x40020800

08001f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f48:	bf00      	nop
 8001f4a:	e7fd      	b.n	8001f48 <NMI_Handler+0x4>

08001f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f50:	bf00      	nop
 8001f52:	e7fd      	b.n	8001f50 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f60:	bf00      	nop
 8001f62:	e7fd      	b.n	8001f60 <BusFault_Handler+0x4>

08001f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f68:	bf00      	nop
 8001f6a:	e7fd      	b.n	8001f68 <UsageFault_Handler+0x4>

08001f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f9a:	f000 f8c7 	bl	800212c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
	...

08001fa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fac:	4a14      	ldr	r2, [pc, #80]	@ (8002000 <_sbrk+0x5c>)
 8001fae:	4b15      	ldr	r3, [pc, #84]	@ (8002004 <_sbrk+0x60>)
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb8:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <_sbrk+0x64>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc0:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <_sbrk+0x64>)
 8001fc2:	4a12      	ldr	r2, [pc, #72]	@ (800200c <_sbrk+0x68>)
 8001fc4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc6:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <_sbrk+0x64>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4413      	add	r3, r2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d207      	bcs.n	8001fe4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd4:	f002 fc8a 	bl	80048ec <__errno>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	220c      	movs	r2, #12
 8001fdc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fde:	f04f 33ff 	mov.w	r3, #4294967295
 8001fe2:	e009      	b.n	8001ff8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe4:	4b08      	ldr	r3, [pc, #32]	@ (8002008 <_sbrk+0x64>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fea:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <_sbrk+0x64>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <_sbrk+0x64>)
 8001ff4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20020000 	.word	0x20020000
 8002004:	00000400 	.word	0x00000400
 8002008:	2000064c 	.word	0x2000064c
 800200c:	200007a0 	.word	0x200007a0

08002010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002014:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <SystemInit+0x20>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800201a:	4a05      	ldr	r2, [pc, #20]	@ (8002030 <SystemInit+0x20>)
 800201c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002020:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002034:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800206c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002038:	f7ff ffea 	bl	8002010 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800203c:	480c      	ldr	r0, [pc, #48]	@ (8002070 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800203e:	490d      	ldr	r1, [pc, #52]	@ (8002074 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002040:	4a0d      	ldr	r2, [pc, #52]	@ (8002078 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002044:	e002      	b.n	800204c <LoopCopyDataInit>

08002046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204a:	3304      	adds	r3, #4

0800204c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800204c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002050:	d3f9      	bcc.n	8002046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002052:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002054:	4c0a      	ldr	r4, [pc, #40]	@ (8002080 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002058:	e001      	b.n	800205e <LoopFillZerobss>

0800205a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800205c:	3204      	adds	r2, #4

0800205e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002060:	d3fb      	bcc.n	800205a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002062:	f002 fc49 	bl	80048f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002066:	f7fe fdc3 	bl	8000bf0 <main>
  bx  lr    
 800206a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800206c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002074:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002078:	08005d04 	.word	0x08005d04
  ldr r2, =_sbss
 800207c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002080:	2000079c 	.word	0x2000079c

08002084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <ADC_IRQHandler>
	...

08002088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800208c:	4b0e      	ldr	r3, [pc, #56]	@ (80020c8 <HAL_Init+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0d      	ldr	r2, [pc, #52]	@ (80020c8 <HAL_Init+0x40>)
 8002092:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002096:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002098:	4b0b      	ldr	r3, [pc, #44]	@ (80020c8 <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0a      	ldr	r2, [pc, #40]	@ (80020c8 <HAL_Init+0x40>)
 800209e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a07      	ldr	r2, [pc, #28]	@ (80020c8 <HAL_Init+0x40>)
 80020aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b0:	2003      	movs	r0, #3
 80020b2:	f000 f931 	bl	8002318 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b6:	200f      	movs	r0, #15
 80020b8:	f000 f808 	bl	80020cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020bc:	f7ff fd30 	bl	8001b20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023c00 	.word	0x40023c00

080020cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d4:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <HAL_InitTick+0x54>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <HAL_InitTick+0x58>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 f93b 	bl	8002366 <HAL_SYSTICK_Config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00e      	b.n	8002118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b0f      	cmp	r3, #15
 80020fe:	d80a      	bhi.n	8002116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002100:	2200      	movs	r2, #0
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f000 f911 	bl	800232e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800210c:	4a06      	ldr	r2, [pc, #24]	@ (8002128 <HAL_InitTick+0x5c>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e000      	b.n	8002118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000000 	.word	0x20000000
 8002124:	20000008 	.word	0x20000008
 8002128:	20000004 	.word	0x20000004

0800212c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002130:	4b06      	ldr	r3, [pc, #24]	@ (800214c <HAL_IncTick+0x20>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b06      	ldr	r3, [pc, #24]	@ (8002150 <HAL_IncTick+0x24>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a04      	ldr	r2, [pc, #16]	@ (8002150 <HAL_IncTick+0x24>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000008 	.word	0x20000008
 8002150:	20000650 	.word	0x20000650

08002154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return uwTick;
 8002158:	4b03      	ldr	r3, [pc, #12]	@ (8002168 <HAL_GetTick+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000650 	.word	0x20000650

0800216c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff ffee 	bl	8002154 <HAL_GetTick>
 8002178:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002184:	d005      	beq.n	8002192 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002186:	4b0a      	ldr	r3, [pc, #40]	@ (80021b0 <HAL_Delay+0x44>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002192:	bf00      	nop
 8002194:	f7ff ffde 	bl	8002154 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d8f7      	bhi.n	8002194 <HAL_Delay+0x28>
  {
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000008 	.word	0x20000008

080021b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c4:	4b0c      	ldr	r3, [pc, #48]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021d0:	4013      	ands	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021e6:	4a04      	ldr	r2, [pc, #16]	@ (80021f8 <__NVIC_SetPriorityGrouping+0x44>)
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	60d3      	str	r3, [r2, #12]
}
 80021ec:	bf00      	nop
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002200:	4b04      	ldr	r3, [pc, #16]	@ (8002214 <__NVIC_GetPriorityGrouping+0x18>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	0a1b      	lsrs	r3, r3, #8
 8002206:	f003 0307 	and.w	r3, r3, #7
}
 800220a:	4618      	mov	r0, r3
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr
 8002214:	e000ed00 	.word	0xe000ed00

08002218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db0a      	blt.n	8002242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	490c      	ldr	r1, [pc, #48]	@ (8002264 <__NVIC_SetPriority+0x4c>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	440b      	add	r3, r1
 800223c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002240:	e00a      	b.n	8002258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4908      	ldr	r1, [pc, #32]	@ (8002268 <__NVIC_SetPriority+0x50>)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3b04      	subs	r3, #4
 8002250:	0112      	lsls	r2, r2, #4
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	440b      	add	r3, r1
 8002256:	761a      	strb	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	e000e100 	.word	0xe000e100
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	@ 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f1c3 0307 	rsb	r3, r3, #7
 8002286:	2b04      	cmp	r3, #4
 8002288:	bf28      	it	cs
 800228a:	2304      	movcs	r3, #4
 800228c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	2b06      	cmp	r3, #6
 8002294:	d902      	bls.n	800229c <NVIC_EncodePriority+0x30>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3b03      	subs	r3, #3
 800229a:	e000      	b.n	800229e <NVIC_EncodePriority+0x32>
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	401a      	ands	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43d9      	mvns	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	4313      	orrs	r3, r2
         );
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	@ 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022e4:	d301      	bcc.n	80022ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e6:	2301      	movs	r3, #1
 80022e8:	e00f      	b.n	800230a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <SysTick_Config+0x40>)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022f2:	210f      	movs	r1, #15
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f7ff ff8e 	bl	8002218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022fc:	4b05      	ldr	r3, [pc, #20]	@ (8002314 <SysTick_Config+0x40>)
 80022fe:	2200      	movs	r2, #0
 8002300:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002302:	4b04      	ldr	r3, [pc, #16]	@ (8002314 <SysTick_Config+0x40>)
 8002304:	2207      	movs	r2, #7
 8002306:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	e000e010 	.word	0xe000e010

08002318 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff ff47 	bl	80021b4 <__NVIC_SetPriorityGrouping>
}
 8002326:	bf00      	nop
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232e:	b580      	push	{r7, lr}
 8002330:	b086      	sub	sp, #24
 8002332:	af00      	add	r7, sp, #0
 8002334:	4603      	mov	r3, r0
 8002336:	60b9      	str	r1, [r7, #8]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800233c:	2300      	movs	r3, #0
 800233e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002340:	f7ff ff5c 	bl	80021fc <__NVIC_GetPriorityGrouping>
 8002344:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	6978      	ldr	r0, [r7, #20]
 800234c:	f7ff ff8e 	bl	800226c <NVIC_EncodePriority>
 8002350:	4602      	mov	r2, r0
 8002352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002356:	4611      	mov	r1, r2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ff5d 	bl	8002218 <__NVIC_SetPriority>
}
 800235e:	bf00      	nop
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002366:	b580      	push	{r7, lr}
 8002368:	b082      	sub	sp, #8
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7ff ffb0 	bl	80022d4 <SysTick_Config>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002380:	b480      	push	{r7}
 8002382:	b089      	sub	sp, #36	@ 0x24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	e16b      	b.n	8002674 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800239c:	2201      	movs	r2, #1
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	fa02 f303 	lsl.w	r3, r2, r3
 80023a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4013      	ands	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	f040 815a 	bne.w	800266e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d005      	beq.n	80023d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d130      	bne.n	8002434 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	2203      	movs	r2, #3
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	fa02 f303 	lsl.w	r3, r2, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002408:	2201      	movs	r2, #1
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f003 0201 	and.w	r2, r3, #1
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	fa02 f303 	lsl.w	r3, r2, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	2b03      	cmp	r3, #3
 800243e:	d017      	beq.n	8002470 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	2203      	movs	r2, #3
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	fa02 f303 	lsl.w	r3, r2, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d123      	bne.n	80024c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	08da      	lsrs	r2, r3, #3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3208      	adds	r2, #8
 8002484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f003 0307 	and.w	r3, r3, #7
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	220f      	movs	r2, #15
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	4013      	ands	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	691a      	ldr	r2, [r3, #16]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	08da      	lsrs	r2, r3, #3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3208      	adds	r2, #8
 80024be:	69b9      	ldr	r1, [r7, #24]
 80024c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0203 	and.w	r2, r3, #3
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 80b4 	beq.w	800266e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	4b60      	ldr	r3, [pc, #384]	@ (800268c <HAL_GPIO_Init+0x30c>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250e:	4a5f      	ldr	r2, [pc, #380]	@ (800268c <HAL_GPIO_Init+0x30c>)
 8002510:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002514:	6453      	str	r3, [r2, #68]	@ 0x44
 8002516:	4b5d      	ldr	r3, [pc, #372]	@ (800268c <HAL_GPIO_Init+0x30c>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002522:	4a5b      	ldr	r2, [pc, #364]	@ (8002690 <HAL_GPIO_Init+0x310>)
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	3302      	adds	r3, #2
 800252a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800252e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	220f      	movs	r2, #15
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4013      	ands	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a52      	ldr	r2, [pc, #328]	@ (8002694 <HAL_GPIO_Init+0x314>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d02b      	beq.n	80025a6 <HAL_GPIO_Init+0x226>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a51      	ldr	r2, [pc, #324]	@ (8002698 <HAL_GPIO_Init+0x318>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d025      	beq.n	80025a2 <HAL_GPIO_Init+0x222>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a50      	ldr	r2, [pc, #320]	@ (800269c <HAL_GPIO_Init+0x31c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d01f      	beq.n	800259e <HAL_GPIO_Init+0x21e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4f      	ldr	r2, [pc, #316]	@ (80026a0 <HAL_GPIO_Init+0x320>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d019      	beq.n	800259a <HAL_GPIO_Init+0x21a>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4e      	ldr	r2, [pc, #312]	@ (80026a4 <HAL_GPIO_Init+0x324>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d013      	beq.n	8002596 <HAL_GPIO_Init+0x216>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4d      	ldr	r2, [pc, #308]	@ (80026a8 <HAL_GPIO_Init+0x328>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d00d      	beq.n	8002592 <HAL_GPIO_Init+0x212>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4c      	ldr	r2, [pc, #304]	@ (80026ac <HAL_GPIO_Init+0x32c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d007      	beq.n	800258e <HAL_GPIO_Init+0x20e>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a4b      	ldr	r2, [pc, #300]	@ (80026b0 <HAL_GPIO_Init+0x330>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d101      	bne.n	800258a <HAL_GPIO_Init+0x20a>
 8002586:	2307      	movs	r3, #7
 8002588:	e00e      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 800258a:	2308      	movs	r3, #8
 800258c:	e00c      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 800258e:	2306      	movs	r3, #6
 8002590:	e00a      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 8002592:	2305      	movs	r3, #5
 8002594:	e008      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 8002596:	2304      	movs	r3, #4
 8002598:	e006      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 800259a:	2303      	movs	r3, #3
 800259c:	e004      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 800259e:	2302      	movs	r3, #2
 80025a0:	e002      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <HAL_GPIO_Init+0x228>
 80025a6:	2300      	movs	r3, #0
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	f002 0203 	and.w	r2, r2, #3
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	4093      	lsls	r3, r2
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b8:	4935      	ldr	r1, [pc, #212]	@ (8002690 <HAL_GPIO_Init+0x310>)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	089b      	lsrs	r3, r3, #2
 80025be:	3302      	adds	r3, #2
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025c6:	4b3b      	ldr	r3, [pc, #236]	@ (80026b4 <HAL_GPIO_Init+0x334>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ea:	4a32      	ldr	r2, [pc, #200]	@ (80026b4 <HAL_GPIO_Init+0x334>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025f0:	4b30      	ldr	r3, [pc, #192]	@ (80026b4 <HAL_GPIO_Init+0x334>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002614:	4a27      	ldr	r2, [pc, #156]	@ (80026b4 <HAL_GPIO_Init+0x334>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800261a:	4b26      	ldr	r3, [pc, #152]	@ (80026b4 <HAL_GPIO_Init+0x334>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800263e:	4a1d      	ldr	r2, [pc, #116]	@ (80026b4 <HAL_GPIO_Init+0x334>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002644:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <HAL_GPIO_Init+0x334>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002668:	4a12      	ldr	r2, [pc, #72]	@ (80026b4 <HAL_GPIO_Init+0x334>)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3301      	adds	r3, #1
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	2b0f      	cmp	r3, #15
 8002678:	f67f ae90 	bls.w	800239c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	3724      	adds	r7, #36	@ 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40023800 	.word	0x40023800
 8002690:	40013800 	.word	0x40013800
 8002694:	40020000 	.word	0x40020000
 8002698:	40020400 	.word	0x40020400
 800269c:	40020800 	.word	0x40020800
 80026a0:	40020c00 	.word	0x40020c00
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40021400 	.word	0x40021400
 80026ac:	40021800 	.word	0x40021800
 80026b0:	40021c00 	.word	0x40021c00
 80026b4:	40013c00 	.word	0x40013c00

080026b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691a      	ldr	r2, [r3, #16]
 80026c8:	887b      	ldrh	r3, [r7, #2]
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026d0:	2301      	movs	r3, #1
 80026d2:	73fb      	strb	r3, [r7, #15]
 80026d4:	e001      	b.n	80026da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026da:	7bfb      	ldrb	r3, [r7, #15]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3714      	adds	r7, #20
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
 80026f4:	4613      	mov	r3, r2
 80026f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f8:	787b      	ldrb	r3, [r7, #1]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002704:	e003      	b.n	800270e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002706:	887b      	ldrh	r3, [r7, #2]
 8002708:	041a      	lsls	r2, r3, #16
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	619a      	str	r2, [r3, #24]
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
	...

0800271c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e12b      	b.n	8002986 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fa14 	bl	8001b70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2224      	movs	r2, #36	@ 0x24
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f022 0201 	bic.w	r2, r2, #1
 800275e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800276e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800277e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002780:	f000 fd68 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8002784:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a81      	ldr	r2, [pc, #516]	@ (8002990 <HAL_I2C_Init+0x274>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d807      	bhi.n	80027a0 <HAL_I2C_Init+0x84>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	4a80      	ldr	r2, [pc, #512]	@ (8002994 <HAL_I2C_Init+0x278>)
 8002794:	4293      	cmp	r3, r2
 8002796:	bf94      	ite	ls
 8002798:	2301      	movls	r3, #1
 800279a:	2300      	movhi	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e006      	b.n	80027ae <HAL_I2C_Init+0x92>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4a7d      	ldr	r2, [pc, #500]	@ (8002998 <HAL_I2C_Init+0x27c>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	bf94      	ite	ls
 80027a8:	2301      	movls	r3, #1
 80027aa:	2300      	movhi	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0e7      	b.n	8002986 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4a78      	ldr	r2, [pc, #480]	@ (800299c <HAL_I2C_Init+0x280>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	0c9b      	lsrs	r3, r3, #18
 80027c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4a6a      	ldr	r2, [pc, #424]	@ (8002990 <HAL_I2C_Init+0x274>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d802      	bhi.n	80027f0 <HAL_I2C_Init+0xd4>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3301      	adds	r3, #1
 80027ee:	e009      	b.n	8002804 <HAL_I2C_Init+0xe8>
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80027f6:	fb02 f303 	mul.w	r3, r2, r3
 80027fa:	4a69      	ldr	r2, [pc, #420]	@ (80029a0 <HAL_I2C_Init+0x284>)
 80027fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002800:	099b      	lsrs	r3, r3, #6
 8002802:	3301      	adds	r3, #1
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	430b      	orrs	r3, r1
 800280a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002816:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	495c      	ldr	r1, [pc, #368]	@ (8002990 <HAL_I2C_Init+0x274>)
 8002820:	428b      	cmp	r3, r1
 8002822:	d819      	bhi.n	8002858 <HAL_I2C_Init+0x13c>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	1e59      	subs	r1, r3, #1
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002832:	1c59      	adds	r1, r3, #1
 8002834:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002838:	400b      	ands	r3, r1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00a      	beq.n	8002854 <HAL_I2C_Init+0x138>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1e59      	subs	r1, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fbb1 f3f3 	udiv	r3, r1, r3
 800284c:	3301      	adds	r3, #1
 800284e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002852:	e051      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 8002854:	2304      	movs	r3, #4
 8002856:	e04f      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d111      	bne.n	8002884 <HAL_I2C_Init+0x168>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	1e58      	subs	r0, r3, #1
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	440b      	add	r3, r1
 800286e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002872:	3301      	adds	r3, #1
 8002874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002878:	2b00      	cmp	r3, #0
 800287a:	bf0c      	ite	eq
 800287c:	2301      	moveq	r3, #1
 800287e:	2300      	movne	r3, #0
 8002880:	b2db      	uxtb	r3, r3
 8002882:	e012      	b.n	80028aa <HAL_I2C_Init+0x18e>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	1e58      	subs	r0, r3, #1
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6859      	ldr	r1, [r3, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	0099      	lsls	r1, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	fbb0 f3f3 	udiv	r3, r0, r3
 800289a:	3301      	adds	r3, #1
 800289c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_Init+0x196>
 80028ae:	2301      	movs	r3, #1
 80028b0:	e022      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10e      	bne.n	80028d8 <HAL_I2C_Init+0x1bc>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	1e58      	subs	r0, r3, #1
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6859      	ldr	r1, [r3, #4]
 80028c2:	460b      	mov	r3, r1
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	440b      	add	r3, r1
 80028c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028cc:	3301      	adds	r3, #1
 80028ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028d6:	e00f      	b.n	80028f8 <HAL_I2C_Init+0x1dc>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	6809      	ldr	r1, [r1, #0]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a1b      	ldr	r3, [r3, #32]
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002926:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6911      	ldr	r1, [r2, #16]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68d2      	ldr	r2, [r2, #12]
 8002932:	4311      	orrs	r1, r2
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	6812      	ldr	r2, [r2, #0]
 8002938:	430b      	orrs	r3, r1
 800293a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2220      	movs	r2, #32
 8002972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	000186a0 	.word	0x000186a0
 8002994:	001e847f 	.word	0x001e847f
 8002998:	003d08ff 	.word	0x003d08ff
 800299c:	431bde83 	.word	0x431bde83
 80029a0:	10624dd3 	.word	0x10624dd3

080029a4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80029aa:	4b06      	ldr	r3, [pc, #24]	@ (80029c4 <HAL_PWR_EnableBkUpAccess+0x20>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80029b0:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <HAL_PWR_EnableBkUpAccess+0x24>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80029b6:	687b      	ldr	r3, [r7, #4]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	420e0020 	.word	0x420e0020
 80029c8:	40007000 	.word	0x40007000

080029cc <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80029d2:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <HAL_PWR_DisableBkUpAccess+0x20>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80029d8:	4b05      	ldr	r3, [pc, #20]	@ (80029f0 <HAL_PWR_DisableBkUpAccess+0x24>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80029de:	687b      	ldr	r3, [r7, #4]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	420e0020 	.word	0x420e0020
 80029f0:	40007000 	.word	0x40007000

080029f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e267      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d075      	beq.n	8002afe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a12:	4b88      	ldr	r3, [pc, #544]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d00c      	beq.n	8002a38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1e:	4b85      	ldr	r3, [pc, #532]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d112      	bne.n	8002a50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2a:	4b82      	ldr	r3, [pc, #520]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a36:	d10b      	bne.n	8002a50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	4b7e      	ldr	r3, [pc, #504]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d05b      	beq.n	8002afc <HAL_RCC_OscConfig+0x108>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d157      	bne.n	8002afc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e242      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a58:	d106      	bne.n	8002a68 <HAL_RCC_OscConfig+0x74>
 8002a5a:	4b76      	ldr	r3, [pc, #472]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a75      	ldr	r2, [pc, #468]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e01d      	b.n	8002aa4 <HAL_RCC_OscConfig+0xb0>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x98>
 8002a72:	4b70      	ldr	r3, [pc, #448]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a6f      	ldr	r2, [pc, #444]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a6c      	ldr	r2, [pc, #432]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0xb0>
 8002a8c:	4b69      	ldr	r3, [pc, #420]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a68      	ldr	r2, [pc, #416]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b66      	ldr	r3, [pc, #408]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a65      	ldr	r2, [pc, #404]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002a9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aac:	f7ff fb52 	bl	8002154 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7ff fb4e 	bl	8002154 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	@ 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e207      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b5b      	ldr	r3, [pc, #364]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xc0>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad4:	f7ff fb3e 	bl	8002154 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002adc:	f7ff fb3a 	bl	8002154 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	@ 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1f3      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aee:	4b51      	ldr	r3, [pc, #324]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0xe8>
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d063      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b0a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00b      	beq.n	8002b2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b16:	4b47      	ldr	r3, [pc, #284]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d11c      	bne.n	8002b5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b22:	4b44      	ldr	r3, [pc, #272]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d116      	bne.n	8002b5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	4b41      	ldr	r3, [pc, #260]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <HAL_RCC_OscConfig+0x152>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d001      	beq.n	8002b46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e1c7      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b46:	4b3b      	ldr	r3, [pc, #236]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4937      	ldr	r1, [pc, #220]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5a:	e03a      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b64:	4b34      	ldr	r3, [pc, #208]	@ (8002c38 <HAL_RCC_OscConfig+0x244>)
 8002b66:	2201      	movs	r2, #1
 8002b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6a:	f7ff faf3 	bl	8002154 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b72:	f7ff faef 	bl	8002154 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e1a8      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b84:	4b2b      	ldr	r3, [pc, #172]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b90:	4b28      	ldr	r3, [pc, #160]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4925      	ldr	r1, [pc, #148]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	600b      	str	r3, [r1, #0]
 8002ba4:	e015      	b.n	8002bd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ba6:	4b24      	ldr	r3, [pc, #144]	@ (8002c38 <HAL_RCC_OscConfig+0x244>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bac:	f7ff fad2 	bl	8002154 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb4:	f7ff face 	bl	8002154 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e187      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d036      	beq.n	8002c4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	695b      	ldr	r3, [r3, #20]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d016      	beq.n	8002c14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002be6:	4b15      	ldr	r3, [pc, #84]	@ (8002c3c <HAL_RCC_OscConfig+0x248>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7ff fab2 	bl	8002154 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf4:	f7ff faae 	bl	8002154 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e167      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c06:	4b0b      	ldr	r3, [pc, #44]	@ (8002c34 <HAL_RCC_OscConfig+0x240>)
 8002c08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x200>
 8002c12:	e01b      	b.n	8002c4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c14:	4b09      	ldr	r3, [pc, #36]	@ (8002c3c <HAL_RCC_OscConfig+0x248>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c1a:	f7ff fa9b 	bl	8002154 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c20:	e00e      	b.n	8002c40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c22:	f7ff fa97 	bl	8002154 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d907      	bls.n	8002c40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e150      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
 8002c34:	40023800 	.word	0x40023800
 8002c38:	42470000 	.word	0x42470000
 8002c3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c40:	4b88      	ldr	r3, [pc, #544]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ea      	bne.n	8002c22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 8097 	beq.w	8002d88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c5e:	4b81      	ldr	r3, [pc, #516]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10f      	bne.n	8002c8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	4b7d      	ldr	r3, [pc, #500]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	4a7c      	ldr	r2, [pc, #496]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c78:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c86:	2301      	movs	r3, #1
 8002c88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c8a:	4b77      	ldr	r3, [pc, #476]	@ (8002e68 <HAL_RCC_OscConfig+0x474>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d118      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c96:	4b74      	ldr	r3, [pc, #464]	@ (8002e68 <HAL_RCC_OscConfig+0x474>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a73      	ldr	r2, [pc, #460]	@ (8002e68 <HAL_RCC_OscConfig+0x474>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ca2:	f7ff fa57 	bl	8002154 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002caa:	f7ff fa53 	bl	8002154 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e10c      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cbc:	4b6a      	ldr	r3, [pc, #424]	@ (8002e68 <HAL_RCC_OscConfig+0x474>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d106      	bne.n	8002cde <HAL_RCC_OscConfig+0x2ea>
 8002cd0:	4b64      	ldr	r3, [pc, #400]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd4:	4a63      	ldr	r2, [pc, #396]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cd6:	f043 0301 	orr.w	r3, r3, #1
 8002cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cdc:	e01c      	b.n	8002d18 <HAL_RCC_OscConfig+0x324>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	2b05      	cmp	r3, #5
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x30c>
 8002ce6:	4b5f      	ldr	r3, [pc, #380]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cea:	4a5e      	ldr	r2, [pc, #376]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cec:	f043 0304 	orr.w	r3, r3, #4
 8002cf0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf2:	4b5c      	ldr	r3, [pc, #368]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cf6:	4a5b      	ldr	r2, [pc, #364]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_OscConfig+0x324>
 8002d00:	4b58      	ldr	r3, [pc, #352]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d04:	4a57      	ldr	r2, [pc, #348]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d06:	f023 0301 	bic.w	r3, r3, #1
 8002d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d0c:	4b55      	ldr	r3, [pc, #340]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d10:	4a54      	ldr	r2, [pc, #336]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d12:	f023 0304 	bic.w	r3, r3, #4
 8002d16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d015      	beq.n	8002d4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7ff fa18 	bl	8002154 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d28:	f7ff fa14 	bl	8002154 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e0cb      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3e:	4b49      	ldr	r3, [pc, #292]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0ee      	beq.n	8002d28 <HAL_RCC_OscConfig+0x334>
 8002d4a:	e014      	b.n	8002d76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4c:	f7ff fa02 	bl	8002154 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d52:	e00a      	b.n	8002d6a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d54:	f7ff f9fe 	bl	8002154 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e0b5      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d1ee      	bne.n	8002d54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d76:	7dfb      	ldrb	r3, [r7, #23]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d105      	bne.n	8002d88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d7c:	4b39      	ldr	r3, [pc, #228]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	4a38      	ldr	r2, [pc, #224]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 80a1 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d92:	4b34      	ldr	r3, [pc, #208]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d05c      	beq.n	8002e58 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d141      	bne.n	8002e2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da6:	4b31      	ldr	r3, [pc, #196]	@ (8002e6c <HAL_RCC_OscConfig+0x478>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7ff f9d2 	bl	8002154 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002db4:	f7ff f9ce 	bl	8002154 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e087      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc6:	4b27      	ldr	r3, [pc, #156]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	019b      	lsls	r3, r3, #6
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	3b01      	subs	r3, #1
 8002dec:	041b      	lsls	r3, r3, #16
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df4:	061b      	lsls	r3, r3, #24
 8002df6:	491b      	ldr	r1, [pc, #108]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e6c <HAL_RCC_OscConfig+0x478>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7ff f9a7 	bl	8002154 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0a:	f7ff f9a3 	bl	8002154 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e05c      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e1c:	4b11      	ldr	r3, [pc, #68]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x416>
 8002e28:	e054      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2a:	4b10      	ldr	r3, [pc, #64]	@ (8002e6c <HAL_RCC_OscConfig+0x478>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7ff f990 	bl	8002154 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e38:	f7ff f98c 	bl	8002154 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e045      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x444>
 8002e56:	e03d      	b.n	8002ed4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	699b      	ldr	r3, [r3, #24]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e038      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
 8002e64:	40023800 	.word	0x40023800
 8002e68:	40007000 	.word	0x40007000
 8002e6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e70:	4b1b      	ldr	r3, [pc, #108]	@ (8002ee0 <HAL_RCC_OscConfig+0x4ec>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d028      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d121      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d11a      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ea6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d111      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb6:	085b      	lsrs	r3, r3, #1
 8002eb8:	3b01      	subs	r3, #1
 8002eba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d107      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3718      	adds	r7, #24
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800

08002ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e0cc      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef8:	4b68      	ldr	r3, [pc, #416]	@ (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d90c      	bls.n	8002f20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f06:	4b65      	ldr	r3, [pc, #404]	@ (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	b2d2      	uxtb	r2, r2
 8002f0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0e:	4b63      	ldr	r3, [pc, #396]	@ (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0b8      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d020      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f38:	4b59      	ldr	r3, [pc, #356]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	4a58      	ldr	r2, [pc, #352]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f42:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f50:	4b53      	ldr	r3, [pc, #332]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	4a52      	ldr	r2, [pc, #328]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5c:	4b50      	ldr	r3, [pc, #320]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	494d      	ldr	r1, [pc, #308]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d044      	beq.n	8003004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	4b47      	ldr	r3, [pc, #284]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d119      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e07f      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d003      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f9e:	2b03      	cmp	r3, #3
 8002fa0:	d107      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa2:	4b3f      	ldr	r3, [pc, #252]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d109      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e06f      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb2:	4b3b      	ldr	r3, [pc, #236]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e067      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fc2:	4b37      	ldr	r3, [pc, #220]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f023 0203 	bic.w	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4934      	ldr	r1, [pc, #208]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fd4:	f7ff f8be 	bl	8002154 <HAL_GetTick>
 8002fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	e00a      	b.n	8002ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fdc:	f7ff f8ba 	bl	8002154 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e04f      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff2:	4b2b      	ldr	r3, [pc, #172]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 020c 	and.w	r2, r3, #12
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	429a      	cmp	r2, r3
 8003002:	d1eb      	bne.n	8002fdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003004:	4b25      	ldr	r3, [pc, #148]	@ (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	429a      	cmp	r2, r3
 8003010:	d20c      	bcs.n	800302c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003012:	4b22      	ldr	r3, [pc, #136]	@ (800309c <HAL_RCC_ClockConfig+0x1b8>)
 8003014:	683a      	ldr	r2, [r7, #0]
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b20      	ldr	r3, [pc, #128]	@ (800309c <HAL_RCC_ClockConfig+0x1b8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e032      	b.n	8003092 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003038:	4b19      	ldr	r3, [pc, #100]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4916      	ldr	r1, [pc, #88]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	4313      	orrs	r3, r2
 8003048:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003056:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	490e      	ldr	r1, [pc, #56]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800306a:	f000 f821 	bl	80030b0 <HAL_RCC_GetSysClockFreq>
 800306e:	4602      	mov	r2, r0
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	490a      	ldr	r1, [pc, #40]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c0>)
 800307c:	5ccb      	ldrb	r3, [r1, r3]
 800307e:	fa22 f303 	lsr.w	r3, r2, r3
 8003082:	4a09      	ldr	r2, [pc, #36]	@ (80030a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003086:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <HAL_RCC_ClockConfig+0x1c8>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff f81e 	bl	80020cc <HAL_InitTick>

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023c00 	.word	0x40023c00
 80030a0:	40023800 	.word	0x40023800
 80030a4:	08005ca8 	.word	0x08005ca8
 80030a8:	20000000 	.word	0x20000000
 80030ac:	20000004 	.word	0x20000004

080030b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b4:	b090      	sub	sp, #64	@ 0x40
 80030b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030b8:	2300      	movs	r3, #0
 80030ba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80030c4:	2300      	movs	r3, #0
 80030c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030c8:	4b59      	ldr	r3, [pc, #356]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x180>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 030c 	and.w	r3, r3, #12
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d00d      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x40>
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	f200 80a1 	bhi.w	800321c <HAL_RCC_GetSysClockFreq+0x16c>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x34>
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d003      	beq.n	80030ea <HAL_RCC_GetSysClockFreq+0x3a>
 80030e2:	e09b      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030e4:	4b53      	ldr	r3, [pc, #332]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x184>)
 80030e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030e8:	e09b      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030ea:	4b53      	ldr	r3, [pc, #332]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x188>)
 80030ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80030ee:	e098      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x180>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030fa:	4b4d      	ldr	r3, [pc, #308]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x180>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d028      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003106:	4b4a      	ldr	r3, [pc, #296]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x180>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	099b      	lsrs	r3, r3, #6
 800310c:	2200      	movs	r2, #0
 800310e:	623b      	str	r3, [r7, #32]
 8003110:	627a      	str	r2, [r7, #36]	@ 0x24
 8003112:	6a3b      	ldr	r3, [r7, #32]
 8003114:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003118:	2100      	movs	r1, #0
 800311a:	4b47      	ldr	r3, [pc, #284]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x188>)
 800311c:	fb03 f201 	mul.w	r2, r3, r1
 8003120:	2300      	movs	r3, #0
 8003122:	fb00 f303 	mul.w	r3, r0, r3
 8003126:	4413      	add	r3, r2
 8003128:	4a43      	ldr	r2, [pc, #268]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x188>)
 800312a:	fba0 1202 	umull	r1, r2, r0, r2
 800312e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003130:	460a      	mov	r2, r1
 8003132:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003136:	4413      	add	r3, r2
 8003138:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800313a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313c:	2200      	movs	r2, #0
 800313e:	61bb      	str	r3, [r7, #24]
 8003140:	61fa      	str	r2, [r7, #28]
 8003142:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003146:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800314a:	f7fd fbc7 	bl	80008dc <__aeabi_uldivmod>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4613      	mov	r3, r2
 8003154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003156:	e053      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003158:	4b35      	ldr	r3, [pc, #212]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x180>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	099b      	lsrs	r3, r3, #6
 800315e:	2200      	movs	r2, #0
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	617a      	str	r2, [r7, #20]
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800316a:	f04f 0b00 	mov.w	fp, #0
 800316e:	4652      	mov	r2, sl
 8003170:	465b      	mov	r3, fp
 8003172:	f04f 0000 	mov.w	r0, #0
 8003176:	f04f 0100 	mov.w	r1, #0
 800317a:	0159      	lsls	r1, r3, #5
 800317c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003180:	0150      	lsls	r0, r2, #5
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	ebb2 080a 	subs.w	r8, r2, sl
 800318a:	eb63 090b 	sbc.w	r9, r3, fp
 800318e:	f04f 0200 	mov.w	r2, #0
 8003192:	f04f 0300 	mov.w	r3, #0
 8003196:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800319a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800319e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80031a2:	ebb2 0408 	subs.w	r4, r2, r8
 80031a6:	eb63 0509 	sbc.w	r5, r3, r9
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	00eb      	lsls	r3, r5, #3
 80031b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031b8:	00e2      	lsls	r2, r4, #3
 80031ba:	4614      	mov	r4, r2
 80031bc:	461d      	mov	r5, r3
 80031be:	eb14 030a 	adds.w	r3, r4, sl
 80031c2:	603b      	str	r3, [r7, #0]
 80031c4:	eb45 030b 	adc.w	r3, r5, fp
 80031c8:	607b      	str	r3, [r7, #4]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031d6:	4629      	mov	r1, r5
 80031d8:	028b      	lsls	r3, r1, #10
 80031da:	4621      	mov	r1, r4
 80031dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031e0:	4621      	mov	r1, r4
 80031e2:	028a      	lsls	r2, r1, #10
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031ea:	2200      	movs	r2, #0
 80031ec:	60bb      	str	r3, [r7, #8]
 80031ee:	60fa      	str	r2, [r7, #12]
 80031f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031f4:	f7fd fb72 	bl	80008dc <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4613      	mov	r3, r2
 80031fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003200:	4b0b      	ldr	r3, [pc, #44]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x180>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	0c1b      	lsrs	r3, r3, #16
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	3301      	adds	r3, #1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003210:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800321a:	e002      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800321c:	4b05      	ldr	r3, [pc, #20]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x184>)
 800321e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003224:	4618      	mov	r0, r3
 8003226:	3740      	adds	r7, #64	@ 0x40
 8003228:	46bd      	mov	sp, r7
 800322a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800
 8003234:	00f42400 	.word	0x00f42400
 8003238:	017d7840 	.word	0x017d7840

0800323c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003240:	4b03      	ldr	r3, [pc, #12]	@ (8003250 <HAL_RCC_GetHCLKFreq+0x14>)
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000000 	.word	0x20000000

08003254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003258:	f7ff fff0 	bl	800323c <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b05      	ldr	r3, [pc, #20]	@ (8003274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	0a9b      	lsrs	r3, r3, #10
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4903      	ldr	r1, [pc, #12]	@ (8003278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003270:	4618      	mov	r0, r3
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40023800 	.word	0x40023800
 8003278:	08005cb8 	.word	0x08005cb8

0800327c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003280:	f7ff ffdc 	bl	800323c <HAL_RCC_GetHCLKFreq>
 8003284:	4602      	mov	r2, r0
 8003286:	4b05      	ldr	r3, [pc, #20]	@ (800329c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	0b5b      	lsrs	r3, r3, #13
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	4903      	ldr	r1, [pc, #12]	@ (80032a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003298:	4618      	mov	r0, r3
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	08005cb8 	.word	0x08005cb8

080032a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e041      	b.n	800333a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fe fc98 	bl	8001c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3304      	adds	r3, #4
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f000 fc2c 	bl	8003b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d101      	bne.n	8003354 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e041      	b.n	80033d8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800335a:	b2db      	uxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f839 	bl	80033e0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2202      	movs	r2, #2
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3304      	adds	r3, #4
 800337e:	4619      	mov	r1, r3
 8003380:	4610      	mov	r0, r2
 8003382:	f000 fbdd 	bl	8003b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2201      	movs	r2, #1
 800338a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2201      	movs	r2, #1
 80033aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2201      	movs	r2, #1
 80033ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d109      	bne.n	8003418 <HAL_TIM_PWM_Start+0x24>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b01      	cmp	r3, #1
 800340e:	bf14      	ite	ne
 8003410:	2301      	movne	r3, #1
 8003412:	2300      	moveq	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e022      	b.n	800345e <HAL_TIM_PWM_Start+0x6a>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	2b04      	cmp	r3, #4
 800341c:	d109      	bne.n	8003432 <HAL_TIM_PWM_Start+0x3e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b01      	cmp	r3, #1
 8003428:	bf14      	ite	ne
 800342a:	2301      	movne	r3, #1
 800342c:	2300      	moveq	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	e015      	b.n	800345e <HAL_TIM_PWM_Start+0x6a>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d109      	bne.n	800344c <HAL_TIM_PWM_Start+0x58>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b01      	cmp	r3, #1
 8003442:	bf14      	ite	ne
 8003444:	2301      	movne	r3, #1
 8003446:	2300      	moveq	r3, #0
 8003448:	b2db      	uxtb	r3, r3
 800344a:	e008      	b.n	800345e <HAL_TIM_PWM_Start+0x6a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b01      	cmp	r3, #1
 8003456:	bf14      	ite	ne
 8003458:	2301      	movne	r3, #1
 800345a:	2300      	moveq	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e07c      	b.n	8003560 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d104      	bne.n	8003476 <HAL_TIM_PWM_Start+0x82>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2202      	movs	r2, #2
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003474:	e013      	b.n	800349e <HAL_TIM_PWM_Start+0xaa>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b04      	cmp	r3, #4
 800347a:	d104      	bne.n	8003486 <HAL_TIM_PWM_Start+0x92>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003484:	e00b      	b.n	800349e <HAL_TIM_PWM_Start+0xaa>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d104      	bne.n	8003496 <HAL_TIM_PWM_Start+0xa2>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003494:	e003      	b.n	800349e <HAL_TIM_PWM_Start+0xaa>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2201      	movs	r2, #1
 80034a4:	6839      	ldr	r1, [r7, #0]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fe40 	bl	800412c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003568 <HAL_TIM_PWM_Start+0x174>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d004      	beq.n	80034c0 <HAL_TIM_PWM_Start+0xcc>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a2c      	ldr	r2, [pc, #176]	@ (800356c <HAL_TIM_PWM_Start+0x178>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <HAL_TIM_PWM_Start+0xd0>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <HAL_TIM_PWM_Start+0xd2>
 80034c4:	2300      	movs	r3, #0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d007      	beq.n	80034da <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a22      	ldr	r2, [pc, #136]	@ (8003568 <HAL_TIM_PWM_Start+0x174>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d022      	beq.n	800352a <HAL_TIM_PWM_Start+0x136>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ec:	d01d      	beq.n	800352a <HAL_TIM_PWM_Start+0x136>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a1f      	ldr	r2, [pc, #124]	@ (8003570 <HAL_TIM_PWM_Start+0x17c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d018      	beq.n	800352a <HAL_TIM_PWM_Start+0x136>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003574 <HAL_TIM_PWM_Start+0x180>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d013      	beq.n	800352a <HAL_TIM_PWM_Start+0x136>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a1c      	ldr	r2, [pc, #112]	@ (8003578 <HAL_TIM_PWM_Start+0x184>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00e      	beq.n	800352a <HAL_TIM_PWM_Start+0x136>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a16      	ldr	r2, [pc, #88]	@ (800356c <HAL_TIM_PWM_Start+0x178>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d009      	beq.n	800352a <HAL_TIM_PWM_Start+0x136>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a18      	ldr	r2, [pc, #96]	@ (800357c <HAL_TIM_PWM_Start+0x188>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d004      	beq.n	800352a <HAL_TIM_PWM_Start+0x136>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a16      	ldr	r2, [pc, #88]	@ (8003580 <HAL_TIM_PWM_Start+0x18c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d111      	bne.n	800354e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b06      	cmp	r3, #6
 800353a:	d010      	beq.n	800355e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354c:	e007      	b.n	800355e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0201 	orr.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	4618      	mov	r0, r3
 8003562:	3710      	adds	r7, #16
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40010000 	.word	0x40010000
 800356c:	40010400 	.word	0x40010400
 8003570:	40000400 	.word	0x40000400
 8003574:	40000800 	.word	0x40000800
 8003578:	40000c00 	.word	0x40000c00
 800357c:	40014000 	.word	0x40014000
 8003580:	40001800 	.word	0x40001800

08003584 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e097      	b.n	80036c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d106      	bne.n	80035b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7fe fb85 	bl	8001cbc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6812      	ldr	r2, [r2, #0]
 80035c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80035c8:	f023 0307 	bic.w	r3, r3, #7
 80035cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	3304      	adds	r3, #4
 80035d6:	4619      	mov	r1, r3
 80035d8:	4610      	mov	r0, r2
 80035da:	f000 fab1 	bl	8003b40 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	699b      	ldr	r3, [r3, #24]
 80035ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003606:	f023 0303 	bic.w	r3, r3, #3
 800360a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	021b      	lsls	r3, r3, #8
 8003616:	4313      	orrs	r3, r2
 8003618:	693a      	ldr	r2, [r7, #16]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003624:	f023 030c 	bic.w	r3, r3, #12
 8003628:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003630:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003634:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	69db      	ldr	r3, [r3, #28]
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	4313      	orrs	r3, r2
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	011a      	lsls	r2, r3, #4
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	031b      	lsls	r3, r3, #12
 8003654:	4313      	orrs	r3, r2
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003662:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800366a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685a      	ldr	r2, [r3, #4]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	4313      	orrs	r3, r2
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	697a      	ldr	r2, [r7, #20]
 8003684:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036e0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80036e8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036f0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80036f8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d110      	bne.n	8003722 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003700:	7bfb      	ldrb	r3, [r7, #15]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d102      	bne.n	800370c <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003706:	7b7b      	ldrb	r3, [r7, #13]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d001      	beq.n	8003710 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e089      	b.n	8003824 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2202      	movs	r2, #2
 800371c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003720:	e031      	b.n	8003786 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b04      	cmp	r3, #4
 8003726:	d110      	bne.n	800374a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003728:	7bbb      	ldrb	r3, [r7, #14]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d102      	bne.n	8003734 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800372e:	7b3b      	ldrb	r3, [r7, #12]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d001      	beq.n	8003738 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e075      	b.n	8003824 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2202      	movs	r2, #2
 8003744:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003748:	e01d      	b.n	8003786 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800374a:	7bfb      	ldrb	r3, [r7, #15]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d108      	bne.n	8003762 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003750:	7bbb      	ldrb	r3, [r7, #14]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d105      	bne.n	8003762 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003756:	7b7b      	ldrb	r3, [r7, #13]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d102      	bne.n	8003762 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800375c:	7b3b      	ldrb	r3, [r7, #12]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d001      	beq.n	8003766 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e05e      	b.n	8003824 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2202      	movs	r2, #2
 8003772:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2202      	movs	r2, #2
 800377a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2202      	movs	r2, #2
 8003782:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_TIM_Encoder_Start_IT+0xc4>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	2b04      	cmp	r3, #4
 8003790:	d010      	beq.n	80037b4 <HAL_TIM_Encoder_Start_IT+0xe4>
 8003792:	e01f      	b.n	80037d4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2201      	movs	r2, #1
 800379a:	2100      	movs	r1, #0
 800379c:	4618      	mov	r0, r3
 800379e:	f000 fcc5 	bl	800412c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f042 0202 	orr.w	r2, r2, #2
 80037b0:	60da      	str	r2, [r3, #12]
      break;
 80037b2:	e02e      	b.n	8003812 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2201      	movs	r2, #1
 80037ba:	2104      	movs	r1, #4
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 fcb5 	bl	800412c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 0204 	orr.w	r2, r2, #4
 80037d0:	60da      	str	r2, [r3, #12]
      break;
 80037d2:	e01e      	b.n	8003812 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2201      	movs	r2, #1
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fca5 	bl	800412c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2201      	movs	r2, #1
 80037e8:	2104      	movs	r1, #4
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fc9e 	bl	800412c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0202 	orr.w	r2, r2, #2
 80037fe:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0204 	orr.w	r2, r2, #4
 800380e:	60da      	str	r2, [r3, #12]
      break;
 8003810:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003838:	2300      	movs	r3, #0
 800383a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003842:	2b01      	cmp	r3, #1
 8003844:	d101      	bne.n	800384a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003846:	2302      	movs	r3, #2
 8003848:	e0ae      	b.n	80039a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b0c      	cmp	r3, #12
 8003856:	f200 809f 	bhi.w	8003998 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800385a:	a201      	add	r2, pc, #4	@ (adr r2, 8003860 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800385c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003860:	08003895 	.word	0x08003895
 8003864:	08003999 	.word	0x08003999
 8003868:	08003999 	.word	0x08003999
 800386c:	08003999 	.word	0x08003999
 8003870:	080038d5 	.word	0x080038d5
 8003874:	08003999 	.word	0x08003999
 8003878:	08003999 	.word	0x08003999
 800387c:	08003999 	.word	0x08003999
 8003880:	08003917 	.word	0x08003917
 8003884:	08003999 	.word	0x08003999
 8003888:	08003999 	.word	0x08003999
 800388c:	08003999 	.word	0x08003999
 8003890:	08003957 	.word	0x08003957
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68b9      	ldr	r1, [r7, #8]
 800389a:	4618      	mov	r0, r3
 800389c:	f000 f9fc 	bl	8003c98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0208 	orr.w	r2, r2, #8
 80038ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 0204 	bic.w	r2, r2, #4
 80038be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6999      	ldr	r1, [r3, #24]
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	619a      	str	r2, [r3, #24]
      break;
 80038d2:	e064      	b.n	800399e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fa4c 	bl	8003d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6999      	ldr	r1, [r3, #24]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	021a      	lsls	r2, r3, #8
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	619a      	str	r2, [r3, #24]
      break;
 8003914:	e043      	b.n	800399e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68b9      	ldr	r1, [r7, #8]
 800391c:	4618      	mov	r0, r3
 800391e:	f000 faa1 	bl	8003e64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69da      	ldr	r2, [r3, #28]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f042 0208 	orr.w	r2, r2, #8
 8003930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0204 	bic.w	r2, r2, #4
 8003940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69d9      	ldr	r1, [r3, #28]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	61da      	str	r2, [r3, #28]
      break;
 8003954:	e023      	b.n	800399e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	4618      	mov	r0, r3
 800395e:	f000 faf5 	bl	8003f4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003970:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003980:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69d9      	ldr	r1, [r3, #28]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	021a      	lsls	r2, r3, #8
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	61da      	str	r2, [r3, #28]
      break;
 8003996:	e002      	b.n	800399e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	75fb      	strb	r3, [r7, #23]
      break;
 800399c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039a8:	4618      	mov	r0, r3
 80039aa:	3718      	adds	r7, #24
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ba:	2300      	movs	r3, #0
 80039bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIM_ConfigClockSource+0x1c>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e0b4      	b.n	8003b36 <HAL_TIM_ConfigClockSource+0x186>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80039ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80039f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a04:	d03e      	beq.n	8003a84 <HAL_TIM_ConfigClockSource+0xd4>
 8003a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a0a:	f200 8087 	bhi.w	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a12:	f000 8086 	beq.w	8003b22 <HAL_TIM_ConfigClockSource+0x172>
 8003a16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a1a:	d87f      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a1c:	2b70      	cmp	r3, #112	@ 0x70
 8003a1e:	d01a      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0xa6>
 8003a20:	2b70      	cmp	r3, #112	@ 0x70
 8003a22:	d87b      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a24:	2b60      	cmp	r3, #96	@ 0x60
 8003a26:	d050      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x11a>
 8003a28:	2b60      	cmp	r3, #96	@ 0x60
 8003a2a:	d877      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a2c:	2b50      	cmp	r3, #80	@ 0x50
 8003a2e:	d03c      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0xfa>
 8003a30:	2b50      	cmp	r3, #80	@ 0x50
 8003a32:	d873      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a34:	2b40      	cmp	r3, #64	@ 0x40
 8003a36:	d058      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0x13a>
 8003a38:	2b40      	cmp	r3, #64	@ 0x40
 8003a3a:	d86f      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a3c:	2b30      	cmp	r3, #48	@ 0x30
 8003a3e:	d064      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a40:	2b30      	cmp	r3, #48	@ 0x30
 8003a42:	d86b      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d060      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d867      	bhi.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d05c      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d05a      	beq.n	8003b0a <HAL_TIM_ConfigClockSource+0x15a>
 8003a54:	e062      	b.n	8003b1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a66:	f000 fb41 	bl	80040ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003a78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	609a      	str	r2, [r3, #8]
      break;
 8003a82:	e04f      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a94:	f000 fb2a 	bl	80040ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003aa6:	609a      	str	r2, [r3, #8]
      break;
 8003aa8:	e03c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f000 fa9e 	bl	8003ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2150      	movs	r1, #80	@ 0x50
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 faf7 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003ac8:	e02c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	f000 fabd 	bl	8004056 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	2160      	movs	r1, #96	@ 0x60
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 fae7 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003ae8:	e01c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003af6:	461a      	mov	r2, r3
 8003af8:	f000 fa7e 	bl	8003ff8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2140      	movs	r1, #64	@ 0x40
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 fad7 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003b08:	e00c      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f000 face 	bl	80040b6 <TIM_ITRx_SetConfig>
      break;
 8003b1a:	e003      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b20:	e000      	b.n	8003b24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a46      	ldr	r2, [pc, #280]	@ (8003c6c <TIM_Base_SetConfig+0x12c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d013      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5e:	d00f      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a43      	ldr	r2, [pc, #268]	@ (8003c70 <TIM_Base_SetConfig+0x130>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00b      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a42      	ldr	r2, [pc, #264]	@ (8003c74 <TIM_Base_SetConfig+0x134>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a41      	ldr	r2, [pc, #260]	@ (8003c78 <TIM_Base_SetConfig+0x138>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d003      	beq.n	8003b80 <TIM_Base_SetConfig+0x40>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a40      	ldr	r2, [pc, #256]	@ (8003c7c <TIM_Base_SetConfig+0x13c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d108      	bne.n	8003b92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a35      	ldr	r2, [pc, #212]	@ (8003c6c <TIM_Base_SetConfig+0x12c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d02b      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba0:	d027      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a32      	ldr	r2, [pc, #200]	@ (8003c70 <TIM_Base_SetConfig+0x130>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d023      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a31      	ldr	r2, [pc, #196]	@ (8003c74 <TIM_Base_SetConfig+0x134>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01f      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a30      	ldr	r2, [pc, #192]	@ (8003c78 <TIM_Base_SetConfig+0x138>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d01b      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a2f      	ldr	r2, [pc, #188]	@ (8003c7c <TIM_Base_SetConfig+0x13c>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d017      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a2e      	ldr	r2, [pc, #184]	@ (8003c80 <TIM_Base_SetConfig+0x140>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d013      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a2d      	ldr	r2, [pc, #180]	@ (8003c84 <TIM_Base_SetConfig+0x144>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00f      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a2c      	ldr	r2, [pc, #176]	@ (8003c88 <TIM_Base_SetConfig+0x148>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00b      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8003c8c <TIM_Base_SetConfig+0x14c>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d007      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a2a      	ldr	r2, [pc, #168]	@ (8003c90 <TIM_Base_SetConfig+0x150>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d003      	beq.n	8003bf2 <TIM_Base_SetConfig+0xb2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a29      	ldr	r2, [pc, #164]	@ (8003c94 <TIM_Base_SetConfig+0x154>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d108      	bne.n	8003c04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	695b      	ldr	r3, [r3, #20]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a10      	ldr	r2, [pc, #64]	@ (8003c6c <TIM_Base_SetConfig+0x12c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d003      	beq.n	8003c38 <TIM_Base_SetConfig+0xf8>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a12      	ldr	r2, [pc, #72]	@ (8003c7c <TIM_Base_SetConfig+0x13c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d103      	bne.n	8003c40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	691a      	ldr	r2, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d105      	bne.n	8003c5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f023 0201 	bic.w	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	611a      	str	r2, [r3, #16]
  }
}
 8003c5e:	bf00      	nop
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	40010000 	.word	0x40010000
 8003c70:	40000400 	.word	0x40000400
 8003c74:	40000800 	.word	0x40000800
 8003c78:	40000c00 	.word	0x40000c00
 8003c7c:	40010400 	.word	0x40010400
 8003c80:	40014000 	.word	0x40014000
 8003c84:	40014400 	.word	0x40014400
 8003c88:	40014800 	.word	0x40014800
 8003c8c:	40001800 	.word	0x40001800
 8003c90:	40001c00 	.word	0x40001c00
 8003c94:	40002000 	.word	0x40002000

08003c98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f023 0201 	bic.w	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f023 0303 	bic.w	r3, r3, #3
 8003cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f023 0302 	bic.w	r3, r3, #2
 8003ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a20      	ldr	r2, [pc, #128]	@ (8003d70 <TIM_OC1_SetConfig+0xd8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d003      	beq.n	8003cfc <TIM_OC1_SetConfig+0x64>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a1f      	ldr	r2, [pc, #124]	@ (8003d74 <TIM_OC1_SetConfig+0xdc>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d10c      	bne.n	8003d16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f023 0308 	bic.w	r3, r3, #8
 8003d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	f023 0304 	bic.w	r3, r3, #4
 8003d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a15      	ldr	r2, [pc, #84]	@ (8003d70 <TIM_OC1_SetConfig+0xd8>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_OC1_SetConfig+0x8e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a14      	ldr	r2, [pc, #80]	@ (8003d74 <TIM_OC1_SetConfig+0xdc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d111      	bne.n	8003d4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	621a      	str	r2, [r3, #32]
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40010400 	.word	0x40010400

08003d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a1b      	ldr	r3, [r3, #32]
 8003d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
 8003d8c:	f023 0210 	bic.w	r2, r3, #16
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f023 0320 	bic.w	r3, r3, #32
 8003dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4a22      	ldr	r2, [pc, #136]	@ (8003e5c <TIM_OC2_SetConfig+0xe4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <TIM_OC2_SetConfig+0x68>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	4a21      	ldr	r2, [pc, #132]	@ (8003e60 <TIM_OC2_SetConfig+0xe8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d10d      	bne.n	8003dfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003de6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a17      	ldr	r2, [pc, #92]	@ (8003e5c <TIM_OC2_SetConfig+0xe4>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d003      	beq.n	8003e0c <TIM_OC2_SetConfig+0x94>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a16      	ldr	r2, [pc, #88]	@ (8003e60 <TIM_OC2_SetConfig+0xe8>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d113      	bne.n	8003e34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	695b      	ldr	r3, [r3, #20]
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	693a      	ldr	r2, [r7, #16]
 8003e38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	621a      	str	r2, [r3, #32]
}
 8003e4e:	bf00      	nop
 8003e50:	371c      	adds	r7, #28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	40010000 	.word	0x40010000
 8003e60:	40010400 	.word	0x40010400

08003e64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a1b      	ldr	r3, [r3, #32]
 8003e78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f023 0303 	bic.w	r3, r3, #3
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	021b      	lsls	r3, r3, #8
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a21      	ldr	r2, [pc, #132]	@ (8003f44 <TIM_OC3_SetConfig+0xe0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d003      	beq.n	8003eca <TIM_OC3_SetConfig+0x66>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	@ (8003f48 <TIM_OC3_SetConfig+0xe4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d10d      	bne.n	8003ee6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a16      	ldr	r2, [pc, #88]	@ (8003f44 <TIM_OC3_SetConfig+0xe0>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_OC3_SetConfig+0x92>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a15      	ldr	r2, [pc, #84]	@ (8003f48 <TIM_OC3_SetConfig+0xe4>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d113      	bne.n	8003f1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003efc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	621a      	str	r2, [r3, #32]
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	40010000 	.word	0x40010000
 8003f48:	40010400 	.word	0x40010400

08003f4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	021b      	lsls	r3, r3, #8
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	031b      	lsls	r3, r3, #12
 8003f9e:	693a      	ldr	r2, [r7, #16]
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a12      	ldr	r2, [pc, #72]	@ (8003ff0 <TIM_OC4_SetConfig+0xa4>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d003      	beq.n	8003fb4 <TIM_OC4_SetConfig+0x68>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a11      	ldr	r2, [pc, #68]	@ (8003ff4 <TIM_OC4_SetConfig+0xa8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d109      	bne.n	8003fc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003fba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	019b      	lsls	r3, r3, #6
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010000 	.word	0x40010000
 8003ff4:	40010400 	.word	0x40010400

08003ff8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a1b      	ldr	r3, [r3, #32]
 8004008:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	f023 0201 	bic.w	r2, r3, #1
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	f023 030a 	bic.w	r3, r3, #10
 8004034:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4313      	orrs	r3, r2
 800403c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	621a      	str	r2, [r3, #32]
}
 800404a:	bf00      	nop
 800404c:	371c      	adds	r7, #28
 800404e:	46bd      	mov	sp, r7
 8004050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004054:	4770      	bx	lr

08004056 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004056:	b480      	push	{r7}
 8004058:	b087      	sub	sp, #28
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	f023 0210 	bic.w	r2, r3, #16
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004080:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	031b      	lsls	r3, r3, #12
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	4313      	orrs	r3, r2
 800408a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004092:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	693a      	ldr	r2, [r7, #16]
 80040a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	621a      	str	r2, [r3, #32]
}
 80040aa:	bf00      	nop
 80040ac:	371c      	adds	r7, #28
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b085      	sub	sp, #20
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f043 0307 	orr.w	r3, r3, #7
 80040d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	609a      	str	r2, [r3, #8]
}
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b087      	sub	sp, #28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	607a      	str	r2, [r7, #4]
 80040f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004106:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	021a      	lsls	r2, r3, #8
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	431a      	orrs	r2, r3
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	4313      	orrs	r3, r2
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4313      	orrs	r3, r2
 8004118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	609a      	str	r2, [r3, #8]
}
 8004120:	bf00      	nop
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 031f 	and.w	r3, r3, #31
 800413e:	2201      	movs	r2, #1
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6a1a      	ldr	r2, [r3, #32]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	43db      	mvns	r3, r3
 800414e:	401a      	ands	r2, r3
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6a1a      	ldr	r2, [r3, #32]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	f003 031f 	and.w	r3, r3, #31
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	431a      	orrs	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	621a      	str	r2, [r3, #32]
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
	...

08004178 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800418c:	2302      	movs	r3, #2
 800418e:	e05a      	b.n	8004246 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	4313      	orrs	r3, r2
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a21      	ldr	r2, [pc, #132]	@ (8004254 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d022      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041dc:	d01d      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004258 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d018      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1b      	ldr	r2, [pc, #108]	@ (800425c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004260 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00e      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a18      	ldr	r2, [pc, #96]	@ (8004264 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d009      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a17      	ldr	r2, [pc, #92]	@ (8004268 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a15      	ldr	r2, [pc, #84]	@ (800426c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10c      	bne.n	8004234 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	4313      	orrs	r3, r2
 800422a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68ba      	ldr	r2, [r7, #8]
 8004232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004244:	2300      	movs	r3, #0
}
 8004246:	4618      	mov	r0, r3
 8004248:	3714      	adds	r7, #20
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40010000 	.word	0x40010000
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	40010400 	.word	0x40010400
 8004268:	40014000 	.word	0x40014000
 800426c:	40001800 	.word	0x40001800

08004270 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004288:	2302      	movs	r3, #2
 800428a:	e03d      	b.n	8004308 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	4313      	orrs	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3714      	adds	r7, #20
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d101      	bne.n	8004326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e042      	b.n	80043ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f7fd fdba 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2224      	movs	r2, #36	@ 0x24
 8004344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004356:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f82b 	bl	80043b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800436c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695a      	ldr	r2, [r3, #20]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800437c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800438c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2220      	movs	r2, #32
 8004398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b8:	b0c0      	sub	sp, #256	@ 0x100
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d0:	68d9      	ldr	r1, [r3, #12]
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	ea40 0301 	orr.w	r3, r0, r1
 80043dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e2:	689a      	ldr	r2, [r3, #8]
 80043e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	431a      	orrs	r2, r3
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800440c:	f021 010c 	bic.w	r1, r1, #12
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800441a:	430b      	orrs	r3, r1
 800441c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800441e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442e:	6999      	ldr	r1, [r3, #24]
 8004430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	ea40 0301 	orr.w	r3, r0, r1
 800443a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4b8f      	ldr	r3, [pc, #572]	@ (8004680 <UART_SetConfig+0x2cc>)
 8004444:	429a      	cmp	r2, r3
 8004446:	d005      	beq.n	8004454 <UART_SetConfig+0xa0>
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	4b8d      	ldr	r3, [pc, #564]	@ (8004684 <UART_SetConfig+0x2d0>)
 8004450:	429a      	cmp	r2, r3
 8004452:	d104      	bne.n	800445e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004454:	f7fe ff12 	bl	800327c <HAL_RCC_GetPCLK2Freq>
 8004458:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800445c:	e003      	b.n	8004466 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800445e:	f7fe fef9 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8004462:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004470:	f040 810c 	bne.w	800468c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004478:	2200      	movs	r2, #0
 800447a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800447e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004482:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004486:	4622      	mov	r2, r4
 8004488:	462b      	mov	r3, r5
 800448a:	1891      	adds	r1, r2, r2
 800448c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800448e:	415b      	adcs	r3, r3
 8004490:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004492:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004496:	4621      	mov	r1, r4
 8004498:	eb12 0801 	adds.w	r8, r2, r1
 800449c:	4629      	mov	r1, r5
 800449e:	eb43 0901 	adc.w	r9, r3, r1
 80044a2:	f04f 0200 	mov.w	r2, #0
 80044a6:	f04f 0300 	mov.w	r3, #0
 80044aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044b6:	4690      	mov	r8, r2
 80044b8:	4699      	mov	r9, r3
 80044ba:	4623      	mov	r3, r4
 80044bc:	eb18 0303 	adds.w	r3, r8, r3
 80044c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044c4:	462b      	mov	r3, r5
 80044c6:	eb49 0303 	adc.w	r3, r9, r3
 80044ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044e2:	460b      	mov	r3, r1
 80044e4:	18db      	adds	r3, r3, r3
 80044e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80044e8:	4613      	mov	r3, r2
 80044ea:	eb42 0303 	adc.w	r3, r2, r3
 80044ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80044f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80044f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80044f8:	f7fc f9f0 	bl	80008dc <__aeabi_uldivmod>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4b61      	ldr	r3, [pc, #388]	@ (8004688 <UART_SetConfig+0x2d4>)
 8004502:	fba3 2302 	umull	r2, r3, r3, r2
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	011c      	lsls	r4, r3, #4
 800450a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800450e:	2200      	movs	r2, #0
 8004510:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004514:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004518:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800451c:	4642      	mov	r2, r8
 800451e:	464b      	mov	r3, r9
 8004520:	1891      	adds	r1, r2, r2
 8004522:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004524:	415b      	adcs	r3, r3
 8004526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004528:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800452c:	4641      	mov	r1, r8
 800452e:	eb12 0a01 	adds.w	sl, r2, r1
 8004532:	4649      	mov	r1, r9
 8004534:	eb43 0b01 	adc.w	fp, r3, r1
 8004538:	f04f 0200 	mov.w	r2, #0
 800453c:	f04f 0300 	mov.w	r3, #0
 8004540:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004544:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004548:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800454c:	4692      	mov	sl, r2
 800454e:	469b      	mov	fp, r3
 8004550:	4643      	mov	r3, r8
 8004552:	eb1a 0303 	adds.w	r3, sl, r3
 8004556:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800455a:	464b      	mov	r3, r9
 800455c:	eb4b 0303 	adc.w	r3, fp, r3
 8004560:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004570:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004574:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004578:	460b      	mov	r3, r1
 800457a:	18db      	adds	r3, r3, r3
 800457c:	643b      	str	r3, [r7, #64]	@ 0x40
 800457e:	4613      	mov	r3, r2
 8004580:	eb42 0303 	adc.w	r3, r2, r3
 8004584:	647b      	str	r3, [r7, #68]	@ 0x44
 8004586:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800458a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800458e:	f7fc f9a5 	bl	80008dc <__aeabi_uldivmod>
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	4611      	mov	r1, r2
 8004598:	4b3b      	ldr	r3, [pc, #236]	@ (8004688 <UART_SetConfig+0x2d4>)
 800459a:	fba3 2301 	umull	r2, r3, r3, r1
 800459e:	095b      	lsrs	r3, r3, #5
 80045a0:	2264      	movs	r2, #100	@ 0x64
 80045a2:	fb02 f303 	mul.w	r3, r2, r3
 80045a6:	1acb      	subs	r3, r1, r3
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045ae:	4b36      	ldr	r3, [pc, #216]	@ (8004688 <UART_SetConfig+0x2d4>)
 80045b0:	fba3 2302 	umull	r2, r3, r3, r2
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045bc:	441c      	add	r4, r3
 80045be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045c8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045cc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045d0:	4642      	mov	r2, r8
 80045d2:	464b      	mov	r3, r9
 80045d4:	1891      	adds	r1, r2, r2
 80045d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045d8:	415b      	adcs	r3, r3
 80045da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045dc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045e0:	4641      	mov	r1, r8
 80045e2:	1851      	adds	r1, r2, r1
 80045e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80045e6:	4649      	mov	r1, r9
 80045e8:	414b      	adcs	r3, r1
 80045ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80045f8:	4659      	mov	r1, fp
 80045fa:	00cb      	lsls	r3, r1, #3
 80045fc:	4651      	mov	r1, sl
 80045fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004602:	4651      	mov	r1, sl
 8004604:	00ca      	lsls	r2, r1, #3
 8004606:	4610      	mov	r0, r2
 8004608:	4619      	mov	r1, r3
 800460a:	4603      	mov	r3, r0
 800460c:	4642      	mov	r2, r8
 800460e:	189b      	adds	r3, r3, r2
 8004610:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004614:	464b      	mov	r3, r9
 8004616:	460a      	mov	r2, r1
 8004618:	eb42 0303 	adc.w	r3, r2, r3
 800461c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800462c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004630:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004634:	460b      	mov	r3, r1
 8004636:	18db      	adds	r3, r3, r3
 8004638:	62bb      	str	r3, [r7, #40]	@ 0x28
 800463a:	4613      	mov	r3, r2
 800463c:	eb42 0303 	adc.w	r3, r2, r3
 8004640:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004642:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004646:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800464a:	f7fc f947 	bl	80008dc <__aeabi_uldivmod>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4b0d      	ldr	r3, [pc, #52]	@ (8004688 <UART_SetConfig+0x2d4>)
 8004654:	fba3 1302 	umull	r1, r3, r3, r2
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	2164      	movs	r1, #100	@ 0x64
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	3332      	adds	r3, #50	@ 0x32
 8004666:	4a08      	ldr	r2, [pc, #32]	@ (8004688 <UART_SetConfig+0x2d4>)
 8004668:	fba2 2303 	umull	r2, r3, r2, r3
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	f003 0207 	and.w	r2, r3, #7
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4422      	add	r2, r4
 800467a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800467c:	e106      	b.n	800488c <UART_SetConfig+0x4d8>
 800467e:	bf00      	nop
 8004680:	40011000 	.word	0x40011000
 8004684:	40011400 	.word	0x40011400
 8004688:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800468c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004690:	2200      	movs	r2, #0
 8004692:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004696:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800469a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800469e:	4642      	mov	r2, r8
 80046a0:	464b      	mov	r3, r9
 80046a2:	1891      	adds	r1, r2, r2
 80046a4:	6239      	str	r1, [r7, #32]
 80046a6:	415b      	adcs	r3, r3
 80046a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046ae:	4641      	mov	r1, r8
 80046b0:	1854      	adds	r4, r2, r1
 80046b2:	4649      	mov	r1, r9
 80046b4:	eb43 0501 	adc.w	r5, r3, r1
 80046b8:	f04f 0200 	mov.w	r2, #0
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	00eb      	lsls	r3, r5, #3
 80046c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046c6:	00e2      	lsls	r2, r4, #3
 80046c8:	4614      	mov	r4, r2
 80046ca:	461d      	mov	r5, r3
 80046cc:	4643      	mov	r3, r8
 80046ce:	18e3      	adds	r3, r4, r3
 80046d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046d4:	464b      	mov	r3, r9
 80046d6:	eb45 0303 	adc.w	r3, r5, r3
 80046da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80046fa:	4629      	mov	r1, r5
 80046fc:	008b      	lsls	r3, r1, #2
 80046fe:	4621      	mov	r1, r4
 8004700:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004704:	4621      	mov	r1, r4
 8004706:	008a      	lsls	r2, r1, #2
 8004708:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800470c:	f7fc f8e6 	bl	80008dc <__aeabi_uldivmod>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4b60      	ldr	r3, [pc, #384]	@ (8004898 <UART_SetConfig+0x4e4>)
 8004716:	fba3 2302 	umull	r2, r3, r3, r2
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	011c      	lsls	r4, r3, #4
 800471e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004722:	2200      	movs	r2, #0
 8004724:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004728:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800472c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004730:	4642      	mov	r2, r8
 8004732:	464b      	mov	r3, r9
 8004734:	1891      	adds	r1, r2, r2
 8004736:	61b9      	str	r1, [r7, #24]
 8004738:	415b      	adcs	r3, r3
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004740:	4641      	mov	r1, r8
 8004742:	1851      	adds	r1, r2, r1
 8004744:	6139      	str	r1, [r7, #16]
 8004746:	4649      	mov	r1, r9
 8004748:	414b      	adcs	r3, r1
 800474a:	617b      	str	r3, [r7, #20]
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004758:	4659      	mov	r1, fp
 800475a:	00cb      	lsls	r3, r1, #3
 800475c:	4651      	mov	r1, sl
 800475e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004762:	4651      	mov	r1, sl
 8004764:	00ca      	lsls	r2, r1, #3
 8004766:	4610      	mov	r0, r2
 8004768:	4619      	mov	r1, r3
 800476a:	4603      	mov	r3, r0
 800476c:	4642      	mov	r2, r8
 800476e:	189b      	adds	r3, r3, r2
 8004770:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004774:	464b      	mov	r3, r9
 8004776:	460a      	mov	r2, r1
 8004778:	eb42 0303 	adc.w	r3, r2, r3
 800477c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	67bb      	str	r3, [r7, #120]	@ 0x78
 800478a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004798:	4649      	mov	r1, r9
 800479a:	008b      	lsls	r3, r1, #2
 800479c:	4641      	mov	r1, r8
 800479e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047a2:	4641      	mov	r1, r8
 80047a4:	008a      	lsls	r2, r1, #2
 80047a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047aa:	f7fc f897 	bl	80008dc <__aeabi_uldivmod>
 80047ae:	4602      	mov	r2, r0
 80047b0:	460b      	mov	r3, r1
 80047b2:	4611      	mov	r1, r2
 80047b4:	4b38      	ldr	r3, [pc, #224]	@ (8004898 <UART_SetConfig+0x4e4>)
 80047b6:	fba3 2301 	umull	r2, r3, r3, r1
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	2264      	movs	r2, #100	@ 0x64
 80047be:	fb02 f303 	mul.w	r3, r2, r3
 80047c2:	1acb      	subs	r3, r1, r3
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	3332      	adds	r3, #50	@ 0x32
 80047c8:	4a33      	ldr	r2, [pc, #204]	@ (8004898 <UART_SetConfig+0x4e4>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047d4:	441c      	add	r4, r3
 80047d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047da:	2200      	movs	r2, #0
 80047dc:	673b      	str	r3, [r7, #112]	@ 0x70
 80047de:	677a      	str	r2, [r7, #116]	@ 0x74
 80047e0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047e4:	4642      	mov	r2, r8
 80047e6:	464b      	mov	r3, r9
 80047e8:	1891      	adds	r1, r2, r2
 80047ea:	60b9      	str	r1, [r7, #8]
 80047ec:	415b      	adcs	r3, r3
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047f4:	4641      	mov	r1, r8
 80047f6:	1851      	adds	r1, r2, r1
 80047f8:	6039      	str	r1, [r7, #0]
 80047fa:	4649      	mov	r1, r9
 80047fc:	414b      	adcs	r3, r1
 80047fe:	607b      	str	r3, [r7, #4]
 8004800:	f04f 0200 	mov.w	r2, #0
 8004804:	f04f 0300 	mov.w	r3, #0
 8004808:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800480c:	4659      	mov	r1, fp
 800480e:	00cb      	lsls	r3, r1, #3
 8004810:	4651      	mov	r1, sl
 8004812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004816:	4651      	mov	r1, sl
 8004818:	00ca      	lsls	r2, r1, #3
 800481a:	4610      	mov	r0, r2
 800481c:	4619      	mov	r1, r3
 800481e:	4603      	mov	r3, r0
 8004820:	4642      	mov	r2, r8
 8004822:	189b      	adds	r3, r3, r2
 8004824:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004826:	464b      	mov	r3, r9
 8004828:	460a      	mov	r2, r1
 800482a:	eb42 0303 	adc.w	r3, r2, r3
 800482e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	663b      	str	r3, [r7, #96]	@ 0x60
 800483a:	667a      	str	r2, [r7, #100]	@ 0x64
 800483c:	f04f 0200 	mov.w	r2, #0
 8004840:	f04f 0300 	mov.w	r3, #0
 8004844:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004848:	4649      	mov	r1, r9
 800484a:	008b      	lsls	r3, r1, #2
 800484c:	4641      	mov	r1, r8
 800484e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004852:	4641      	mov	r1, r8
 8004854:	008a      	lsls	r2, r1, #2
 8004856:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800485a:	f7fc f83f 	bl	80008dc <__aeabi_uldivmod>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4b0d      	ldr	r3, [pc, #52]	@ (8004898 <UART_SetConfig+0x4e4>)
 8004864:	fba3 1302 	umull	r1, r3, r3, r2
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	2164      	movs	r1, #100	@ 0x64
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	3332      	adds	r3, #50	@ 0x32
 8004876:	4a08      	ldr	r2, [pc, #32]	@ (8004898 <UART_SetConfig+0x4e4>)
 8004878:	fba2 2303 	umull	r2, r3, r2, r3
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	f003 020f 	and.w	r2, r3, #15
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4422      	add	r2, r4
 800488a:	609a      	str	r2, [r3, #8]
}
 800488c:	bf00      	nop
 800488e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004892:	46bd      	mov	sp, r7
 8004894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004898:	51eb851f 	.word	0x51eb851f

0800489c <siprintf>:
 800489c:	b40e      	push	{r1, r2, r3}
 800489e:	b500      	push	{lr}
 80048a0:	b09c      	sub	sp, #112	@ 0x70
 80048a2:	ab1d      	add	r3, sp, #116	@ 0x74
 80048a4:	9002      	str	r0, [sp, #8]
 80048a6:	9006      	str	r0, [sp, #24]
 80048a8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80048ac:	4809      	ldr	r0, [pc, #36]	@ (80048d4 <siprintf+0x38>)
 80048ae:	9107      	str	r1, [sp, #28]
 80048b0:	9104      	str	r1, [sp, #16]
 80048b2:	4909      	ldr	r1, [pc, #36]	@ (80048d8 <siprintf+0x3c>)
 80048b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048b8:	9105      	str	r1, [sp, #20]
 80048ba:	6800      	ldr	r0, [r0, #0]
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	a902      	add	r1, sp, #8
 80048c0:	f000 f994 	bl	8004bec <_svfiprintf_r>
 80048c4:	9b02      	ldr	r3, [sp, #8]
 80048c6:	2200      	movs	r2, #0
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	b01c      	add	sp, #112	@ 0x70
 80048cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048d0:	b003      	add	sp, #12
 80048d2:	4770      	bx	lr
 80048d4:	2000000c 	.word	0x2000000c
 80048d8:	ffff0208 	.word	0xffff0208

080048dc <memset>:
 80048dc:	4402      	add	r2, r0
 80048de:	4603      	mov	r3, r0
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d100      	bne.n	80048e6 <memset+0xa>
 80048e4:	4770      	bx	lr
 80048e6:	f803 1b01 	strb.w	r1, [r3], #1
 80048ea:	e7f9      	b.n	80048e0 <memset+0x4>

080048ec <__errno>:
 80048ec:	4b01      	ldr	r3, [pc, #4]	@ (80048f4 <__errno+0x8>)
 80048ee:	6818      	ldr	r0, [r3, #0]
 80048f0:	4770      	bx	lr
 80048f2:	bf00      	nop
 80048f4:	2000000c 	.word	0x2000000c

080048f8 <__libc_init_array>:
 80048f8:	b570      	push	{r4, r5, r6, lr}
 80048fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004930 <__libc_init_array+0x38>)
 80048fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004934 <__libc_init_array+0x3c>)
 80048fe:	1b64      	subs	r4, r4, r5
 8004900:	10a4      	asrs	r4, r4, #2
 8004902:	2600      	movs	r6, #0
 8004904:	42a6      	cmp	r6, r4
 8004906:	d109      	bne.n	800491c <__libc_init_array+0x24>
 8004908:	4d0b      	ldr	r5, [pc, #44]	@ (8004938 <__libc_init_array+0x40>)
 800490a:	4c0c      	ldr	r4, [pc, #48]	@ (800493c <__libc_init_array+0x44>)
 800490c:	f000 fc66 	bl	80051dc <_init>
 8004910:	1b64      	subs	r4, r4, r5
 8004912:	10a4      	asrs	r4, r4, #2
 8004914:	2600      	movs	r6, #0
 8004916:	42a6      	cmp	r6, r4
 8004918:	d105      	bne.n	8004926 <__libc_init_array+0x2e>
 800491a:	bd70      	pop	{r4, r5, r6, pc}
 800491c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004920:	4798      	blx	r3
 8004922:	3601      	adds	r6, #1
 8004924:	e7ee      	b.n	8004904 <__libc_init_array+0xc>
 8004926:	f855 3b04 	ldr.w	r3, [r5], #4
 800492a:	4798      	blx	r3
 800492c:	3601      	adds	r6, #1
 800492e:	e7f2      	b.n	8004916 <__libc_init_array+0x1e>
 8004930:	08005cfc 	.word	0x08005cfc
 8004934:	08005cfc 	.word	0x08005cfc
 8004938:	08005cfc 	.word	0x08005cfc
 800493c:	08005d00 	.word	0x08005d00

08004940 <__retarget_lock_acquire_recursive>:
 8004940:	4770      	bx	lr

08004942 <__retarget_lock_release_recursive>:
 8004942:	4770      	bx	lr

08004944 <_free_r>:
 8004944:	b538      	push	{r3, r4, r5, lr}
 8004946:	4605      	mov	r5, r0
 8004948:	2900      	cmp	r1, #0
 800494a:	d041      	beq.n	80049d0 <_free_r+0x8c>
 800494c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004950:	1f0c      	subs	r4, r1, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	bfb8      	it	lt
 8004956:	18e4      	addlt	r4, r4, r3
 8004958:	f000 f8e0 	bl	8004b1c <__malloc_lock>
 800495c:	4a1d      	ldr	r2, [pc, #116]	@ (80049d4 <_free_r+0x90>)
 800495e:	6813      	ldr	r3, [r2, #0]
 8004960:	b933      	cbnz	r3, 8004970 <_free_r+0x2c>
 8004962:	6063      	str	r3, [r4, #4]
 8004964:	6014      	str	r4, [r2, #0]
 8004966:	4628      	mov	r0, r5
 8004968:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800496c:	f000 b8dc 	b.w	8004b28 <__malloc_unlock>
 8004970:	42a3      	cmp	r3, r4
 8004972:	d908      	bls.n	8004986 <_free_r+0x42>
 8004974:	6820      	ldr	r0, [r4, #0]
 8004976:	1821      	adds	r1, r4, r0
 8004978:	428b      	cmp	r3, r1
 800497a:	bf01      	itttt	eq
 800497c:	6819      	ldreq	r1, [r3, #0]
 800497e:	685b      	ldreq	r3, [r3, #4]
 8004980:	1809      	addeq	r1, r1, r0
 8004982:	6021      	streq	r1, [r4, #0]
 8004984:	e7ed      	b.n	8004962 <_free_r+0x1e>
 8004986:	461a      	mov	r2, r3
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	b10b      	cbz	r3, 8004990 <_free_r+0x4c>
 800498c:	42a3      	cmp	r3, r4
 800498e:	d9fa      	bls.n	8004986 <_free_r+0x42>
 8004990:	6811      	ldr	r1, [r2, #0]
 8004992:	1850      	adds	r0, r2, r1
 8004994:	42a0      	cmp	r0, r4
 8004996:	d10b      	bne.n	80049b0 <_free_r+0x6c>
 8004998:	6820      	ldr	r0, [r4, #0]
 800499a:	4401      	add	r1, r0
 800499c:	1850      	adds	r0, r2, r1
 800499e:	4283      	cmp	r3, r0
 80049a0:	6011      	str	r1, [r2, #0]
 80049a2:	d1e0      	bne.n	8004966 <_free_r+0x22>
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	6053      	str	r3, [r2, #4]
 80049aa:	4408      	add	r0, r1
 80049ac:	6010      	str	r0, [r2, #0]
 80049ae:	e7da      	b.n	8004966 <_free_r+0x22>
 80049b0:	d902      	bls.n	80049b8 <_free_r+0x74>
 80049b2:	230c      	movs	r3, #12
 80049b4:	602b      	str	r3, [r5, #0]
 80049b6:	e7d6      	b.n	8004966 <_free_r+0x22>
 80049b8:	6820      	ldr	r0, [r4, #0]
 80049ba:	1821      	adds	r1, r4, r0
 80049bc:	428b      	cmp	r3, r1
 80049be:	bf04      	itt	eq
 80049c0:	6819      	ldreq	r1, [r3, #0]
 80049c2:	685b      	ldreq	r3, [r3, #4]
 80049c4:	6063      	str	r3, [r4, #4]
 80049c6:	bf04      	itt	eq
 80049c8:	1809      	addeq	r1, r1, r0
 80049ca:	6021      	streq	r1, [r4, #0]
 80049cc:	6054      	str	r4, [r2, #4]
 80049ce:	e7ca      	b.n	8004966 <_free_r+0x22>
 80049d0:	bd38      	pop	{r3, r4, r5, pc}
 80049d2:	bf00      	nop
 80049d4:	20000798 	.word	0x20000798

080049d8 <sbrk_aligned>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	4e0f      	ldr	r6, [pc, #60]	@ (8004a18 <sbrk_aligned+0x40>)
 80049dc:	460c      	mov	r4, r1
 80049de:	6831      	ldr	r1, [r6, #0]
 80049e0:	4605      	mov	r5, r0
 80049e2:	b911      	cbnz	r1, 80049ea <sbrk_aligned+0x12>
 80049e4:	f000 fba6 	bl	8005134 <_sbrk_r>
 80049e8:	6030      	str	r0, [r6, #0]
 80049ea:	4621      	mov	r1, r4
 80049ec:	4628      	mov	r0, r5
 80049ee:	f000 fba1 	bl	8005134 <_sbrk_r>
 80049f2:	1c43      	adds	r3, r0, #1
 80049f4:	d103      	bne.n	80049fe <sbrk_aligned+0x26>
 80049f6:	f04f 34ff 	mov.w	r4, #4294967295
 80049fa:	4620      	mov	r0, r4
 80049fc:	bd70      	pop	{r4, r5, r6, pc}
 80049fe:	1cc4      	adds	r4, r0, #3
 8004a00:	f024 0403 	bic.w	r4, r4, #3
 8004a04:	42a0      	cmp	r0, r4
 8004a06:	d0f8      	beq.n	80049fa <sbrk_aligned+0x22>
 8004a08:	1a21      	subs	r1, r4, r0
 8004a0a:	4628      	mov	r0, r5
 8004a0c:	f000 fb92 	bl	8005134 <_sbrk_r>
 8004a10:	3001      	adds	r0, #1
 8004a12:	d1f2      	bne.n	80049fa <sbrk_aligned+0x22>
 8004a14:	e7ef      	b.n	80049f6 <sbrk_aligned+0x1e>
 8004a16:	bf00      	nop
 8004a18:	20000794 	.word	0x20000794

08004a1c <_malloc_r>:
 8004a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a20:	1ccd      	adds	r5, r1, #3
 8004a22:	f025 0503 	bic.w	r5, r5, #3
 8004a26:	3508      	adds	r5, #8
 8004a28:	2d0c      	cmp	r5, #12
 8004a2a:	bf38      	it	cc
 8004a2c:	250c      	movcc	r5, #12
 8004a2e:	2d00      	cmp	r5, #0
 8004a30:	4606      	mov	r6, r0
 8004a32:	db01      	blt.n	8004a38 <_malloc_r+0x1c>
 8004a34:	42a9      	cmp	r1, r5
 8004a36:	d904      	bls.n	8004a42 <_malloc_r+0x26>
 8004a38:	230c      	movs	r3, #12
 8004a3a:	6033      	str	r3, [r6, #0]
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b18 <_malloc_r+0xfc>
 8004a46:	f000 f869 	bl	8004b1c <__malloc_lock>
 8004a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a4e:	461c      	mov	r4, r3
 8004a50:	bb44      	cbnz	r4, 8004aa4 <_malloc_r+0x88>
 8004a52:	4629      	mov	r1, r5
 8004a54:	4630      	mov	r0, r6
 8004a56:	f7ff ffbf 	bl	80049d8 <sbrk_aligned>
 8004a5a:	1c43      	adds	r3, r0, #1
 8004a5c:	4604      	mov	r4, r0
 8004a5e:	d158      	bne.n	8004b12 <_malloc_r+0xf6>
 8004a60:	f8d8 4000 	ldr.w	r4, [r8]
 8004a64:	4627      	mov	r7, r4
 8004a66:	2f00      	cmp	r7, #0
 8004a68:	d143      	bne.n	8004af2 <_malloc_r+0xd6>
 8004a6a:	2c00      	cmp	r4, #0
 8004a6c:	d04b      	beq.n	8004b06 <_malloc_r+0xea>
 8004a6e:	6823      	ldr	r3, [r4, #0]
 8004a70:	4639      	mov	r1, r7
 8004a72:	4630      	mov	r0, r6
 8004a74:	eb04 0903 	add.w	r9, r4, r3
 8004a78:	f000 fb5c 	bl	8005134 <_sbrk_r>
 8004a7c:	4581      	cmp	r9, r0
 8004a7e:	d142      	bne.n	8004b06 <_malloc_r+0xea>
 8004a80:	6821      	ldr	r1, [r4, #0]
 8004a82:	1a6d      	subs	r5, r5, r1
 8004a84:	4629      	mov	r1, r5
 8004a86:	4630      	mov	r0, r6
 8004a88:	f7ff ffa6 	bl	80049d8 <sbrk_aligned>
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d03a      	beq.n	8004b06 <_malloc_r+0xea>
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	442b      	add	r3, r5
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	f8d8 3000 	ldr.w	r3, [r8]
 8004a9a:	685a      	ldr	r2, [r3, #4]
 8004a9c:	bb62      	cbnz	r2, 8004af8 <_malloc_r+0xdc>
 8004a9e:	f8c8 7000 	str.w	r7, [r8]
 8004aa2:	e00f      	b.n	8004ac4 <_malloc_r+0xa8>
 8004aa4:	6822      	ldr	r2, [r4, #0]
 8004aa6:	1b52      	subs	r2, r2, r5
 8004aa8:	d420      	bmi.n	8004aec <_malloc_r+0xd0>
 8004aaa:	2a0b      	cmp	r2, #11
 8004aac:	d917      	bls.n	8004ade <_malloc_r+0xc2>
 8004aae:	1961      	adds	r1, r4, r5
 8004ab0:	42a3      	cmp	r3, r4
 8004ab2:	6025      	str	r5, [r4, #0]
 8004ab4:	bf18      	it	ne
 8004ab6:	6059      	strne	r1, [r3, #4]
 8004ab8:	6863      	ldr	r3, [r4, #4]
 8004aba:	bf08      	it	eq
 8004abc:	f8c8 1000 	streq.w	r1, [r8]
 8004ac0:	5162      	str	r2, [r4, r5]
 8004ac2:	604b      	str	r3, [r1, #4]
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	f000 f82f 	bl	8004b28 <__malloc_unlock>
 8004aca:	f104 000b 	add.w	r0, r4, #11
 8004ace:	1d23      	adds	r3, r4, #4
 8004ad0:	f020 0007 	bic.w	r0, r0, #7
 8004ad4:	1ac2      	subs	r2, r0, r3
 8004ad6:	bf1c      	itt	ne
 8004ad8:	1a1b      	subne	r3, r3, r0
 8004ada:	50a3      	strne	r3, [r4, r2]
 8004adc:	e7af      	b.n	8004a3e <_malloc_r+0x22>
 8004ade:	6862      	ldr	r2, [r4, #4]
 8004ae0:	42a3      	cmp	r3, r4
 8004ae2:	bf0c      	ite	eq
 8004ae4:	f8c8 2000 	streq.w	r2, [r8]
 8004ae8:	605a      	strne	r2, [r3, #4]
 8004aea:	e7eb      	b.n	8004ac4 <_malloc_r+0xa8>
 8004aec:	4623      	mov	r3, r4
 8004aee:	6864      	ldr	r4, [r4, #4]
 8004af0:	e7ae      	b.n	8004a50 <_malloc_r+0x34>
 8004af2:	463c      	mov	r4, r7
 8004af4:	687f      	ldr	r7, [r7, #4]
 8004af6:	e7b6      	b.n	8004a66 <_malloc_r+0x4a>
 8004af8:	461a      	mov	r2, r3
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	42a3      	cmp	r3, r4
 8004afe:	d1fb      	bne.n	8004af8 <_malloc_r+0xdc>
 8004b00:	2300      	movs	r3, #0
 8004b02:	6053      	str	r3, [r2, #4]
 8004b04:	e7de      	b.n	8004ac4 <_malloc_r+0xa8>
 8004b06:	230c      	movs	r3, #12
 8004b08:	6033      	str	r3, [r6, #0]
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	f000 f80c 	bl	8004b28 <__malloc_unlock>
 8004b10:	e794      	b.n	8004a3c <_malloc_r+0x20>
 8004b12:	6005      	str	r5, [r0, #0]
 8004b14:	e7d6      	b.n	8004ac4 <_malloc_r+0xa8>
 8004b16:	bf00      	nop
 8004b18:	20000798 	.word	0x20000798

08004b1c <__malloc_lock>:
 8004b1c:	4801      	ldr	r0, [pc, #4]	@ (8004b24 <__malloc_lock+0x8>)
 8004b1e:	f7ff bf0f 	b.w	8004940 <__retarget_lock_acquire_recursive>
 8004b22:	bf00      	nop
 8004b24:	20000790 	.word	0x20000790

08004b28 <__malloc_unlock>:
 8004b28:	4801      	ldr	r0, [pc, #4]	@ (8004b30 <__malloc_unlock+0x8>)
 8004b2a:	f7ff bf0a 	b.w	8004942 <__retarget_lock_release_recursive>
 8004b2e:	bf00      	nop
 8004b30:	20000790 	.word	0x20000790

08004b34 <__ssputs_r>:
 8004b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b38:	688e      	ldr	r6, [r1, #8]
 8004b3a:	461f      	mov	r7, r3
 8004b3c:	42be      	cmp	r6, r7
 8004b3e:	680b      	ldr	r3, [r1, #0]
 8004b40:	4682      	mov	sl, r0
 8004b42:	460c      	mov	r4, r1
 8004b44:	4690      	mov	r8, r2
 8004b46:	d82d      	bhi.n	8004ba4 <__ssputs_r+0x70>
 8004b48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b50:	d026      	beq.n	8004ba0 <__ssputs_r+0x6c>
 8004b52:	6965      	ldr	r5, [r4, #20]
 8004b54:	6909      	ldr	r1, [r1, #16]
 8004b56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b5a:	eba3 0901 	sub.w	r9, r3, r1
 8004b5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b62:	1c7b      	adds	r3, r7, #1
 8004b64:	444b      	add	r3, r9
 8004b66:	106d      	asrs	r5, r5, #1
 8004b68:	429d      	cmp	r5, r3
 8004b6a:	bf38      	it	cc
 8004b6c:	461d      	movcc	r5, r3
 8004b6e:	0553      	lsls	r3, r2, #21
 8004b70:	d527      	bpl.n	8004bc2 <__ssputs_r+0x8e>
 8004b72:	4629      	mov	r1, r5
 8004b74:	f7ff ff52 	bl	8004a1c <_malloc_r>
 8004b78:	4606      	mov	r6, r0
 8004b7a:	b360      	cbz	r0, 8004bd6 <__ssputs_r+0xa2>
 8004b7c:	6921      	ldr	r1, [r4, #16]
 8004b7e:	464a      	mov	r2, r9
 8004b80:	f000 fae8 	bl	8005154 <memcpy>
 8004b84:	89a3      	ldrh	r3, [r4, #12]
 8004b86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b8e:	81a3      	strh	r3, [r4, #12]
 8004b90:	6126      	str	r6, [r4, #16]
 8004b92:	6165      	str	r5, [r4, #20]
 8004b94:	444e      	add	r6, r9
 8004b96:	eba5 0509 	sub.w	r5, r5, r9
 8004b9a:	6026      	str	r6, [r4, #0]
 8004b9c:	60a5      	str	r5, [r4, #8]
 8004b9e:	463e      	mov	r6, r7
 8004ba0:	42be      	cmp	r6, r7
 8004ba2:	d900      	bls.n	8004ba6 <__ssputs_r+0x72>
 8004ba4:	463e      	mov	r6, r7
 8004ba6:	6820      	ldr	r0, [r4, #0]
 8004ba8:	4632      	mov	r2, r6
 8004baa:	4641      	mov	r1, r8
 8004bac:	f000 faa8 	bl	8005100 <memmove>
 8004bb0:	68a3      	ldr	r3, [r4, #8]
 8004bb2:	1b9b      	subs	r3, r3, r6
 8004bb4:	60a3      	str	r3, [r4, #8]
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	4433      	add	r3, r6
 8004bba:	6023      	str	r3, [r4, #0]
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bc2:	462a      	mov	r2, r5
 8004bc4:	f000 fad4 	bl	8005170 <_realloc_r>
 8004bc8:	4606      	mov	r6, r0
 8004bca:	2800      	cmp	r0, #0
 8004bcc:	d1e0      	bne.n	8004b90 <__ssputs_r+0x5c>
 8004bce:	6921      	ldr	r1, [r4, #16]
 8004bd0:	4650      	mov	r0, sl
 8004bd2:	f7ff feb7 	bl	8004944 <_free_r>
 8004bd6:	230c      	movs	r3, #12
 8004bd8:	f8ca 3000 	str.w	r3, [sl]
 8004bdc:	89a3      	ldrh	r3, [r4, #12]
 8004bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004be2:	81a3      	strh	r3, [r4, #12]
 8004be4:	f04f 30ff 	mov.w	r0, #4294967295
 8004be8:	e7e9      	b.n	8004bbe <__ssputs_r+0x8a>
	...

08004bec <_svfiprintf_r>:
 8004bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf0:	4698      	mov	r8, r3
 8004bf2:	898b      	ldrh	r3, [r1, #12]
 8004bf4:	061b      	lsls	r3, r3, #24
 8004bf6:	b09d      	sub	sp, #116	@ 0x74
 8004bf8:	4607      	mov	r7, r0
 8004bfa:	460d      	mov	r5, r1
 8004bfc:	4614      	mov	r4, r2
 8004bfe:	d510      	bpl.n	8004c22 <_svfiprintf_r+0x36>
 8004c00:	690b      	ldr	r3, [r1, #16]
 8004c02:	b973      	cbnz	r3, 8004c22 <_svfiprintf_r+0x36>
 8004c04:	2140      	movs	r1, #64	@ 0x40
 8004c06:	f7ff ff09 	bl	8004a1c <_malloc_r>
 8004c0a:	6028      	str	r0, [r5, #0]
 8004c0c:	6128      	str	r0, [r5, #16]
 8004c0e:	b930      	cbnz	r0, 8004c1e <_svfiprintf_r+0x32>
 8004c10:	230c      	movs	r3, #12
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	f04f 30ff 	mov.w	r0, #4294967295
 8004c18:	b01d      	add	sp, #116	@ 0x74
 8004c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c1e:	2340      	movs	r3, #64	@ 0x40
 8004c20:	616b      	str	r3, [r5, #20]
 8004c22:	2300      	movs	r3, #0
 8004c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c26:	2320      	movs	r3, #32
 8004c28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c30:	2330      	movs	r3, #48	@ 0x30
 8004c32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004dd0 <_svfiprintf_r+0x1e4>
 8004c36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c3a:	f04f 0901 	mov.w	r9, #1
 8004c3e:	4623      	mov	r3, r4
 8004c40:	469a      	mov	sl, r3
 8004c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c46:	b10a      	cbz	r2, 8004c4c <_svfiprintf_r+0x60>
 8004c48:	2a25      	cmp	r2, #37	@ 0x25
 8004c4a:	d1f9      	bne.n	8004c40 <_svfiprintf_r+0x54>
 8004c4c:	ebba 0b04 	subs.w	fp, sl, r4
 8004c50:	d00b      	beq.n	8004c6a <_svfiprintf_r+0x7e>
 8004c52:	465b      	mov	r3, fp
 8004c54:	4622      	mov	r2, r4
 8004c56:	4629      	mov	r1, r5
 8004c58:	4638      	mov	r0, r7
 8004c5a:	f7ff ff6b 	bl	8004b34 <__ssputs_r>
 8004c5e:	3001      	adds	r0, #1
 8004c60:	f000 80a7 	beq.w	8004db2 <_svfiprintf_r+0x1c6>
 8004c64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c66:	445a      	add	r2, fp
 8004c68:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 809f 	beq.w	8004db2 <_svfiprintf_r+0x1c6>
 8004c74:	2300      	movs	r3, #0
 8004c76:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c7e:	f10a 0a01 	add.w	sl, sl, #1
 8004c82:	9304      	str	r3, [sp, #16]
 8004c84:	9307      	str	r3, [sp, #28]
 8004c86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c8c:	4654      	mov	r4, sl
 8004c8e:	2205      	movs	r2, #5
 8004c90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c94:	484e      	ldr	r0, [pc, #312]	@ (8004dd0 <_svfiprintf_r+0x1e4>)
 8004c96:	f7fb fa9b 	bl	80001d0 <memchr>
 8004c9a:	9a04      	ldr	r2, [sp, #16]
 8004c9c:	b9d8      	cbnz	r0, 8004cd6 <_svfiprintf_r+0xea>
 8004c9e:	06d0      	lsls	r0, r2, #27
 8004ca0:	bf44      	itt	mi
 8004ca2:	2320      	movmi	r3, #32
 8004ca4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ca8:	0711      	lsls	r1, r2, #28
 8004caa:	bf44      	itt	mi
 8004cac:	232b      	movmi	r3, #43	@ 0x2b
 8004cae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cb2:	f89a 3000 	ldrb.w	r3, [sl]
 8004cb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cb8:	d015      	beq.n	8004ce6 <_svfiprintf_r+0xfa>
 8004cba:	9a07      	ldr	r2, [sp, #28]
 8004cbc:	4654      	mov	r4, sl
 8004cbe:	2000      	movs	r0, #0
 8004cc0:	f04f 0c0a 	mov.w	ip, #10
 8004cc4:	4621      	mov	r1, r4
 8004cc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cca:	3b30      	subs	r3, #48	@ 0x30
 8004ccc:	2b09      	cmp	r3, #9
 8004cce:	d94b      	bls.n	8004d68 <_svfiprintf_r+0x17c>
 8004cd0:	b1b0      	cbz	r0, 8004d00 <_svfiprintf_r+0x114>
 8004cd2:	9207      	str	r2, [sp, #28]
 8004cd4:	e014      	b.n	8004d00 <_svfiprintf_r+0x114>
 8004cd6:	eba0 0308 	sub.w	r3, r0, r8
 8004cda:	fa09 f303 	lsl.w	r3, r9, r3
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	9304      	str	r3, [sp, #16]
 8004ce2:	46a2      	mov	sl, r4
 8004ce4:	e7d2      	b.n	8004c8c <_svfiprintf_r+0xa0>
 8004ce6:	9b03      	ldr	r3, [sp, #12]
 8004ce8:	1d19      	adds	r1, r3, #4
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	9103      	str	r1, [sp, #12]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	bfbb      	ittet	lt
 8004cf2:	425b      	neglt	r3, r3
 8004cf4:	f042 0202 	orrlt.w	r2, r2, #2
 8004cf8:	9307      	strge	r3, [sp, #28]
 8004cfa:	9307      	strlt	r3, [sp, #28]
 8004cfc:	bfb8      	it	lt
 8004cfe:	9204      	strlt	r2, [sp, #16]
 8004d00:	7823      	ldrb	r3, [r4, #0]
 8004d02:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d04:	d10a      	bne.n	8004d1c <_svfiprintf_r+0x130>
 8004d06:	7863      	ldrb	r3, [r4, #1]
 8004d08:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d0a:	d132      	bne.n	8004d72 <_svfiprintf_r+0x186>
 8004d0c:	9b03      	ldr	r3, [sp, #12]
 8004d0e:	1d1a      	adds	r2, r3, #4
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	9203      	str	r2, [sp, #12]
 8004d14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d18:	3402      	adds	r4, #2
 8004d1a:	9305      	str	r3, [sp, #20]
 8004d1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004de0 <_svfiprintf_r+0x1f4>
 8004d20:	7821      	ldrb	r1, [r4, #0]
 8004d22:	2203      	movs	r2, #3
 8004d24:	4650      	mov	r0, sl
 8004d26:	f7fb fa53 	bl	80001d0 <memchr>
 8004d2a:	b138      	cbz	r0, 8004d3c <_svfiprintf_r+0x150>
 8004d2c:	9b04      	ldr	r3, [sp, #16]
 8004d2e:	eba0 000a 	sub.w	r0, r0, sl
 8004d32:	2240      	movs	r2, #64	@ 0x40
 8004d34:	4082      	lsls	r2, r0
 8004d36:	4313      	orrs	r3, r2
 8004d38:	3401      	adds	r4, #1
 8004d3a:	9304      	str	r3, [sp, #16]
 8004d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d40:	4824      	ldr	r0, [pc, #144]	@ (8004dd4 <_svfiprintf_r+0x1e8>)
 8004d42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d46:	2206      	movs	r2, #6
 8004d48:	f7fb fa42 	bl	80001d0 <memchr>
 8004d4c:	2800      	cmp	r0, #0
 8004d4e:	d036      	beq.n	8004dbe <_svfiprintf_r+0x1d2>
 8004d50:	4b21      	ldr	r3, [pc, #132]	@ (8004dd8 <_svfiprintf_r+0x1ec>)
 8004d52:	bb1b      	cbnz	r3, 8004d9c <_svfiprintf_r+0x1b0>
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	3307      	adds	r3, #7
 8004d58:	f023 0307 	bic.w	r3, r3, #7
 8004d5c:	3308      	adds	r3, #8
 8004d5e:	9303      	str	r3, [sp, #12]
 8004d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d62:	4433      	add	r3, r6
 8004d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d66:	e76a      	b.n	8004c3e <_svfiprintf_r+0x52>
 8004d68:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d6c:	460c      	mov	r4, r1
 8004d6e:	2001      	movs	r0, #1
 8004d70:	e7a8      	b.n	8004cc4 <_svfiprintf_r+0xd8>
 8004d72:	2300      	movs	r3, #0
 8004d74:	3401      	adds	r4, #1
 8004d76:	9305      	str	r3, [sp, #20]
 8004d78:	4619      	mov	r1, r3
 8004d7a:	f04f 0c0a 	mov.w	ip, #10
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d84:	3a30      	subs	r2, #48	@ 0x30
 8004d86:	2a09      	cmp	r2, #9
 8004d88:	d903      	bls.n	8004d92 <_svfiprintf_r+0x1a6>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0c6      	beq.n	8004d1c <_svfiprintf_r+0x130>
 8004d8e:	9105      	str	r1, [sp, #20]
 8004d90:	e7c4      	b.n	8004d1c <_svfiprintf_r+0x130>
 8004d92:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d96:	4604      	mov	r4, r0
 8004d98:	2301      	movs	r3, #1
 8004d9a:	e7f0      	b.n	8004d7e <_svfiprintf_r+0x192>
 8004d9c:	ab03      	add	r3, sp, #12
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	462a      	mov	r2, r5
 8004da2:	4b0e      	ldr	r3, [pc, #56]	@ (8004ddc <_svfiprintf_r+0x1f0>)
 8004da4:	a904      	add	r1, sp, #16
 8004da6:	4638      	mov	r0, r7
 8004da8:	f3af 8000 	nop.w
 8004dac:	1c42      	adds	r2, r0, #1
 8004dae:	4606      	mov	r6, r0
 8004db0:	d1d6      	bne.n	8004d60 <_svfiprintf_r+0x174>
 8004db2:	89ab      	ldrh	r3, [r5, #12]
 8004db4:	065b      	lsls	r3, r3, #25
 8004db6:	f53f af2d 	bmi.w	8004c14 <_svfiprintf_r+0x28>
 8004dba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004dbc:	e72c      	b.n	8004c18 <_svfiprintf_r+0x2c>
 8004dbe:	ab03      	add	r3, sp, #12
 8004dc0:	9300      	str	r3, [sp, #0]
 8004dc2:	462a      	mov	r2, r5
 8004dc4:	4b05      	ldr	r3, [pc, #20]	@ (8004ddc <_svfiprintf_r+0x1f0>)
 8004dc6:	a904      	add	r1, sp, #16
 8004dc8:	4638      	mov	r0, r7
 8004dca:	f000 f879 	bl	8004ec0 <_printf_i>
 8004dce:	e7ed      	b.n	8004dac <_svfiprintf_r+0x1c0>
 8004dd0:	08005cc0 	.word	0x08005cc0
 8004dd4:	08005cca 	.word	0x08005cca
 8004dd8:	00000000 	.word	0x00000000
 8004ddc:	08004b35 	.word	0x08004b35
 8004de0:	08005cc6 	.word	0x08005cc6

08004de4 <_printf_common>:
 8004de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de8:	4616      	mov	r6, r2
 8004dea:	4698      	mov	r8, r3
 8004dec:	688a      	ldr	r2, [r1, #8]
 8004dee:	690b      	ldr	r3, [r1, #16]
 8004df0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004df4:	4293      	cmp	r3, r2
 8004df6:	bfb8      	it	lt
 8004df8:	4613      	movlt	r3, r2
 8004dfa:	6033      	str	r3, [r6, #0]
 8004dfc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e00:	4607      	mov	r7, r0
 8004e02:	460c      	mov	r4, r1
 8004e04:	b10a      	cbz	r2, 8004e0a <_printf_common+0x26>
 8004e06:	3301      	adds	r3, #1
 8004e08:	6033      	str	r3, [r6, #0]
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	0699      	lsls	r1, r3, #26
 8004e0e:	bf42      	ittt	mi
 8004e10:	6833      	ldrmi	r3, [r6, #0]
 8004e12:	3302      	addmi	r3, #2
 8004e14:	6033      	strmi	r3, [r6, #0]
 8004e16:	6825      	ldr	r5, [r4, #0]
 8004e18:	f015 0506 	ands.w	r5, r5, #6
 8004e1c:	d106      	bne.n	8004e2c <_printf_common+0x48>
 8004e1e:	f104 0a19 	add.w	sl, r4, #25
 8004e22:	68e3      	ldr	r3, [r4, #12]
 8004e24:	6832      	ldr	r2, [r6, #0]
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	42ab      	cmp	r3, r5
 8004e2a:	dc26      	bgt.n	8004e7a <_printf_common+0x96>
 8004e2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e30:	6822      	ldr	r2, [r4, #0]
 8004e32:	3b00      	subs	r3, #0
 8004e34:	bf18      	it	ne
 8004e36:	2301      	movne	r3, #1
 8004e38:	0692      	lsls	r2, r2, #26
 8004e3a:	d42b      	bmi.n	8004e94 <_printf_common+0xb0>
 8004e3c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e40:	4641      	mov	r1, r8
 8004e42:	4638      	mov	r0, r7
 8004e44:	47c8      	blx	r9
 8004e46:	3001      	adds	r0, #1
 8004e48:	d01e      	beq.n	8004e88 <_printf_common+0xa4>
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	6922      	ldr	r2, [r4, #16]
 8004e4e:	f003 0306 	and.w	r3, r3, #6
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	bf02      	ittt	eq
 8004e56:	68e5      	ldreq	r5, [r4, #12]
 8004e58:	6833      	ldreq	r3, [r6, #0]
 8004e5a:	1aed      	subeq	r5, r5, r3
 8004e5c:	68a3      	ldr	r3, [r4, #8]
 8004e5e:	bf0c      	ite	eq
 8004e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e64:	2500      	movne	r5, #0
 8004e66:	4293      	cmp	r3, r2
 8004e68:	bfc4      	itt	gt
 8004e6a:	1a9b      	subgt	r3, r3, r2
 8004e6c:	18ed      	addgt	r5, r5, r3
 8004e6e:	2600      	movs	r6, #0
 8004e70:	341a      	adds	r4, #26
 8004e72:	42b5      	cmp	r5, r6
 8004e74:	d11a      	bne.n	8004eac <_printf_common+0xc8>
 8004e76:	2000      	movs	r0, #0
 8004e78:	e008      	b.n	8004e8c <_printf_common+0xa8>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	4652      	mov	r2, sl
 8004e7e:	4641      	mov	r1, r8
 8004e80:	4638      	mov	r0, r7
 8004e82:	47c8      	blx	r9
 8004e84:	3001      	adds	r0, #1
 8004e86:	d103      	bne.n	8004e90 <_printf_common+0xac>
 8004e88:	f04f 30ff 	mov.w	r0, #4294967295
 8004e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e90:	3501      	adds	r5, #1
 8004e92:	e7c6      	b.n	8004e22 <_printf_common+0x3e>
 8004e94:	18e1      	adds	r1, r4, r3
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	2030      	movs	r0, #48	@ 0x30
 8004e9a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e9e:	4422      	add	r2, r4
 8004ea0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ea4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ea8:	3302      	adds	r3, #2
 8004eaa:	e7c7      	b.n	8004e3c <_printf_common+0x58>
 8004eac:	2301      	movs	r3, #1
 8004eae:	4622      	mov	r2, r4
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	47c8      	blx	r9
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d0e6      	beq.n	8004e88 <_printf_common+0xa4>
 8004eba:	3601      	adds	r6, #1
 8004ebc:	e7d9      	b.n	8004e72 <_printf_common+0x8e>
	...

08004ec0 <_printf_i>:
 8004ec0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec4:	7e0f      	ldrb	r7, [r1, #24]
 8004ec6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ec8:	2f78      	cmp	r7, #120	@ 0x78
 8004eca:	4691      	mov	r9, r2
 8004ecc:	4680      	mov	r8, r0
 8004ece:	460c      	mov	r4, r1
 8004ed0:	469a      	mov	sl, r3
 8004ed2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ed6:	d807      	bhi.n	8004ee8 <_printf_i+0x28>
 8004ed8:	2f62      	cmp	r7, #98	@ 0x62
 8004eda:	d80a      	bhi.n	8004ef2 <_printf_i+0x32>
 8004edc:	2f00      	cmp	r7, #0
 8004ede:	f000 80d2 	beq.w	8005086 <_printf_i+0x1c6>
 8004ee2:	2f58      	cmp	r7, #88	@ 0x58
 8004ee4:	f000 80b9 	beq.w	800505a <_printf_i+0x19a>
 8004ee8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004eec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ef0:	e03a      	b.n	8004f68 <_printf_i+0xa8>
 8004ef2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ef6:	2b15      	cmp	r3, #21
 8004ef8:	d8f6      	bhi.n	8004ee8 <_printf_i+0x28>
 8004efa:	a101      	add	r1, pc, #4	@ (adr r1, 8004f00 <_printf_i+0x40>)
 8004efc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f00:	08004f59 	.word	0x08004f59
 8004f04:	08004f6d 	.word	0x08004f6d
 8004f08:	08004ee9 	.word	0x08004ee9
 8004f0c:	08004ee9 	.word	0x08004ee9
 8004f10:	08004ee9 	.word	0x08004ee9
 8004f14:	08004ee9 	.word	0x08004ee9
 8004f18:	08004f6d 	.word	0x08004f6d
 8004f1c:	08004ee9 	.word	0x08004ee9
 8004f20:	08004ee9 	.word	0x08004ee9
 8004f24:	08004ee9 	.word	0x08004ee9
 8004f28:	08004ee9 	.word	0x08004ee9
 8004f2c:	0800506d 	.word	0x0800506d
 8004f30:	08004f97 	.word	0x08004f97
 8004f34:	08005027 	.word	0x08005027
 8004f38:	08004ee9 	.word	0x08004ee9
 8004f3c:	08004ee9 	.word	0x08004ee9
 8004f40:	0800508f 	.word	0x0800508f
 8004f44:	08004ee9 	.word	0x08004ee9
 8004f48:	08004f97 	.word	0x08004f97
 8004f4c:	08004ee9 	.word	0x08004ee9
 8004f50:	08004ee9 	.word	0x08004ee9
 8004f54:	0800502f 	.word	0x0800502f
 8004f58:	6833      	ldr	r3, [r6, #0]
 8004f5a:	1d1a      	adds	r2, r3, #4
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6032      	str	r2, [r6, #0]
 8004f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e09d      	b.n	80050a8 <_printf_i+0x1e8>
 8004f6c:	6833      	ldr	r3, [r6, #0]
 8004f6e:	6820      	ldr	r0, [r4, #0]
 8004f70:	1d19      	adds	r1, r3, #4
 8004f72:	6031      	str	r1, [r6, #0]
 8004f74:	0606      	lsls	r6, r0, #24
 8004f76:	d501      	bpl.n	8004f7c <_printf_i+0xbc>
 8004f78:	681d      	ldr	r5, [r3, #0]
 8004f7a:	e003      	b.n	8004f84 <_printf_i+0xc4>
 8004f7c:	0645      	lsls	r5, r0, #25
 8004f7e:	d5fb      	bpl.n	8004f78 <_printf_i+0xb8>
 8004f80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f84:	2d00      	cmp	r5, #0
 8004f86:	da03      	bge.n	8004f90 <_printf_i+0xd0>
 8004f88:	232d      	movs	r3, #45	@ 0x2d
 8004f8a:	426d      	negs	r5, r5
 8004f8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f90:	4859      	ldr	r0, [pc, #356]	@ (80050f8 <_printf_i+0x238>)
 8004f92:	230a      	movs	r3, #10
 8004f94:	e011      	b.n	8004fba <_printf_i+0xfa>
 8004f96:	6821      	ldr	r1, [r4, #0]
 8004f98:	6833      	ldr	r3, [r6, #0]
 8004f9a:	0608      	lsls	r0, r1, #24
 8004f9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fa0:	d402      	bmi.n	8004fa8 <_printf_i+0xe8>
 8004fa2:	0649      	lsls	r1, r1, #25
 8004fa4:	bf48      	it	mi
 8004fa6:	b2ad      	uxthmi	r5, r5
 8004fa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004faa:	4853      	ldr	r0, [pc, #332]	@ (80050f8 <_printf_i+0x238>)
 8004fac:	6033      	str	r3, [r6, #0]
 8004fae:	bf14      	ite	ne
 8004fb0:	230a      	movne	r3, #10
 8004fb2:	2308      	moveq	r3, #8
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fba:	6866      	ldr	r6, [r4, #4]
 8004fbc:	60a6      	str	r6, [r4, #8]
 8004fbe:	2e00      	cmp	r6, #0
 8004fc0:	bfa2      	ittt	ge
 8004fc2:	6821      	ldrge	r1, [r4, #0]
 8004fc4:	f021 0104 	bicge.w	r1, r1, #4
 8004fc8:	6021      	strge	r1, [r4, #0]
 8004fca:	b90d      	cbnz	r5, 8004fd0 <_printf_i+0x110>
 8004fcc:	2e00      	cmp	r6, #0
 8004fce:	d04b      	beq.n	8005068 <_printf_i+0x1a8>
 8004fd0:	4616      	mov	r6, r2
 8004fd2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fd6:	fb03 5711 	mls	r7, r3, r1, r5
 8004fda:	5dc7      	ldrb	r7, [r0, r7]
 8004fdc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fe0:	462f      	mov	r7, r5
 8004fe2:	42bb      	cmp	r3, r7
 8004fe4:	460d      	mov	r5, r1
 8004fe6:	d9f4      	bls.n	8004fd2 <_printf_i+0x112>
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d10b      	bne.n	8005004 <_printf_i+0x144>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	07df      	lsls	r7, r3, #31
 8004ff0:	d508      	bpl.n	8005004 <_printf_i+0x144>
 8004ff2:	6923      	ldr	r3, [r4, #16]
 8004ff4:	6861      	ldr	r1, [r4, #4]
 8004ff6:	4299      	cmp	r1, r3
 8004ff8:	bfde      	ittt	le
 8004ffa:	2330      	movle	r3, #48	@ 0x30
 8004ffc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005000:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005004:	1b92      	subs	r2, r2, r6
 8005006:	6122      	str	r2, [r4, #16]
 8005008:	f8cd a000 	str.w	sl, [sp]
 800500c:	464b      	mov	r3, r9
 800500e:	aa03      	add	r2, sp, #12
 8005010:	4621      	mov	r1, r4
 8005012:	4640      	mov	r0, r8
 8005014:	f7ff fee6 	bl	8004de4 <_printf_common>
 8005018:	3001      	adds	r0, #1
 800501a:	d14a      	bne.n	80050b2 <_printf_i+0x1f2>
 800501c:	f04f 30ff 	mov.w	r0, #4294967295
 8005020:	b004      	add	sp, #16
 8005022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	f043 0320 	orr.w	r3, r3, #32
 800502c:	6023      	str	r3, [r4, #0]
 800502e:	4833      	ldr	r0, [pc, #204]	@ (80050fc <_printf_i+0x23c>)
 8005030:	2778      	movs	r7, #120	@ 0x78
 8005032:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005036:	6823      	ldr	r3, [r4, #0]
 8005038:	6831      	ldr	r1, [r6, #0]
 800503a:	061f      	lsls	r7, r3, #24
 800503c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005040:	d402      	bmi.n	8005048 <_printf_i+0x188>
 8005042:	065f      	lsls	r7, r3, #25
 8005044:	bf48      	it	mi
 8005046:	b2ad      	uxthmi	r5, r5
 8005048:	6031      	str	r1, [r6, #0]
 800504a:	07d9      	lsls	r1, r3, #31
 800504c:	bf44      	itt	mi
 800504e:	f043 0320 	orrmi.w	r3, r3, #32
 8005052:	6023      	strmi	r3, [r4, #0]
 8005054:	b11d      	cbz	r5, 800505e <_printf_i+0x19e>
 8005056:	2310      	movs	r3, #16
 8005058:	e7ac      	b.n	8004fb4 <_printf_i+0xf4>
 800505a:	4827      	ldr	r0, [pc, #156]	@ (80050f8 <_printf_i+0x238>)
 800505c:	e7e9      	b.n	8005032 <_printf_i+0x172>
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	f023 0320 	bic.w	r3, r3, #32
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	e7f6      	b.n	8005056 <_printf_i+0x196>
 8005068:	4616      	mov	r6, r2
 800506a:	e7bd      	b.n	8004fe8 <_printf_i+0x128>
 800506c:	6833      	ldr	r3, [r6, #0]
 800506e:	6825      	ldr	r5, [r4, #0]
 8005070:	6961      	ldr	r1, [r4, #20]
 8005072:	1d18      	adds	r0, r3, #4
 8005074:	6030      	str	r0, [r6, #0]
 8005076:	062e      	lsls	r6, r5, #24
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	d501      	bpl.n	8005080 <_printf_i+0x1c0>
 800507c:	6019      	str	r1, [r3, #0]
 800507e:	e002      	b.n	8005086 <_printf_i+0x1c6>
 8005080:	0668      	lsls	r0, r5, #25
 8005082:	d5fb      	bpl.n	800507c <_printf_i+0x1bc>
 8005084:	8019      	strh	r1, [r3, #0]
 8005086:	2300      	movs	r3, #0
 8005088:	6123      	str	r3, [r4, #16]
 800508a:	4616      	mov	r6, r2
 800508c:	e7bc      	b.n	8005008 <_printf_i+0x148>
 800508e:	6833      	ldr	r3, [r6, #0]
 8005090:	1d1a      	adds	r2, r3, #4
 8005092:	6032      	str	r2, [r6, #0]
 8005094:	681e      	ldr	r6, [r3, #0]
 8005096:	6862      	ldr	r2, [r4, #4]
 8005098:	2100      	movs	r1, #0
 800509a:	4630      	mov	r0, r6
 800509c:	f7fb f898 	bl	80001d0 <memchr>
 80050a0:	b108      	cbz	r0, 80050a6 <_printf_i+0x1e6>
 80050a2:	1b80      	subs	r0, r0, r6
 80050a4:	6060      	str	r0, [r4, #4]
 80050a6:	6863      	ldr	r3, [r4, #4]
 80050a8:	6123      	str	r3, [r4, #16]
 80050aa:	2300      	movs	r3, #0
 80050ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050b0:	e7aa      	b.n	8005008 <_printf_i+0x148>
 80050b2:	6923      	ldr	r3, [r4, #16]
 80050b4:	4632      	mov	r2, r6
 80050b6:	4649      	mov	r1, r9
 80050b8:	4640      	mov	r0, r8
 80050ba:	47d0      	blx	sl
 80050bc:	3001      	adds	r0, #1
 80050be:	d0ad      	beq.n	800501c <_printf_i+0x15c>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	079b      	lsls	r3, r3, #30
 80050c4:	d413      	bmi.n	80050ee <_printf_i+0x22e>
 80050c6:	68e0      	ldr	r0, [r4, #12]
 80050c8:	9b03      	ldr	r3, [sp, #12]
 80050ca:	4298      	cmp	r0, r3
 80050cc:	bfb8      	it	lt
 80050ce:	4618      	movlt	r0, r3
 80050d0:	e7a6      	b.n	8005020 <_printf_i+0x160>
 80050d2:	2301      	movs	r3, #1
 80050d4:	4632      	mov	r2, r6
 80050d6:	4649      	mov	r1, r9
 80050d8:	4640      	mov	r0, r8
 80050da:	47d0      	blx	sl
 80050dc:	3001      	adds	r0, #1
 80050de:	d09d      	beq.n	800501c <_printf_i+0x15c>
 80050e0:	3501      	adds	r5, #1
 80050e2:	68e3      	ldr	r3, [r4, #12]
 80050e4:	9903      	ldr	r1, [sp, #12]
 80050e6:	1a5b      	subs	r3, r3, r1
 80050e8:	42ab      	cmp	r3, r5
 80050ea:	dcf2      	bgt.n	80050d2 <_printf_i+0x212>
 80050ec:	e7eb      	b.n	80050c6 <_printf_i+0x206>
 80050ee:	2500      	movs	r5, #0
 80050f0:	f104 0619 	add.w	r6, r4, #25
 80050f4:	e7f5      	b.n	80050e2 <_printf_i+0x222>
 80050f6:	bf00      	nop
 80050f8:	08005cd1 	.word	0x08005cd1
 80050fc:	08005ce2 	.word	0x08005ce2

08005100 <memmove>:
 8005100:	4288      	cmp	r0, r1
 8005102:	b510      	push	{r4, lr}
 8005104:	eb01 0402 	add.w	r4, r1, r2
 8005108:	d902      	bls.n	8005110 <memmove+0x10>
 800510a:	4284      	cmp	r4, r0
 800510c:	4623      	mov	r3, r4
 800510e:	d807      	bhi.n	8005120 <memmove+0x20>
 8005110:	1e43      	subs	r3, r0, #1
 8005112:	42a1      	cmp	r1, r4
 8005114:	d008      	beq.n	8005128 <memmove+0x28>
 8005116:	f811 2b01 	ldrb.w	r2, [r1], #1
 800511a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800511e:	e7f8      	b.n	8005112 <memmove+0x12>
 8005120:	4402      	add	r2, r0
 8005122:	4601      	mov	r1, r0
 8005124:	428a      	cmp	r2, r1
 8005126:	d100      	bne.n	800512a <memmove+0x2a>
 8005128:	bd10      	pop	{r4, pc}
 800512a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800512e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005132:	e7f7      	b.n	8005124 <memmove+0x24>

08005134 <_sbrk_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d06      	ldr	r5, [pc, #24]	@ (8005150 <_sbrk_r+0x1c>)
 8005138:	2300      	movs	r3, #0
 800513a:	4604      	mov	r4, r0
 800513c:	4608      	mov	r0, r1
 800513e:	602b      	str	r3, [r5, #0]
 8005140:	f7fc ff30 	bl	8001fa4 <_sbrk>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d102      	bne.n	800514e <_sbrk_r+0x1a>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	b103      	cbz	r3, 800514e <_sbrk_r+0x1a>
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	bd38      	pop	{r3, r4, r5, pc}
 8005150:	2000078c 	.word	0x2000078c

08005154 <memcpy>:
 8005154:	440a      	add	r2, r1
 8005156:	4291      	cmp	r1, r2
 8005158:	f100 33ff 	add.w	r3, r0, #4294967295
 800515c:	d100      	bne.n	8005160 <memcpy+0xc>
 800515e:	4770      	bx	lr
 8005160:	b510      	push	{r4, lr}
 8005162:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005166:	f803 4f01 	strb.w	r4, [r3, #1]!
 800516a:	4291      	cmp	r1, r2
 800516c:	d1f9      	bne.n	8005162 <memcpy+0xe>
 800516e:	bd10      	pop	{r4, pc}

08005170 <_realloc_r>:
 8005170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005174:	4680      	mov	r8, r0
 8005176:	4615      	mov	r5, r2
 8005178:	460c      	mov	r4, r1
 800517a:	b921      	cbnz	r1, 8005186 <_realloc_r+0x16>
 800517c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005180:	4611      	mov	r1, r2
 8005182:	f7ff bc4b 	b.w	8004a1c <_malloc_r>
 8005186:	b92a      	cbnz	r2, 8005194 <_realloc_r+0x24>
 8005188:	f7ff fbdc 	bl	8004944 <_free_r>
 800518c:	2400      	movs	r4, #0
 800518e:	4620      	mov	r0, r4
 8005190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005194:	f000 f81a 	bl	80051cc <_malloc_usable_size_r>
 8005198:	4285      	cmp	r5, r0
 800519a:	4606      	mov	r6, r0
 800519c:	d802      	bhi.n	80051a4 <_realloc_r+0x34>
 800519e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80051a2:	d8f4      	bhi.n	800518e <_realloc_r+0x1e>
 80051a4:	4629      	mov	r1, r5
 80051a6:	4640      	mov	r0, r8
 80051a8:	f7ff fc38 	bl	8004a1c <_malloc_r>
 80051ac:	4607      	mov	r7, r0
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d0ec      	beq.n	800518c <_realloc_r+0x1c>
 80051b2:	42b5      	cmp	r5, r6
 80051b4:	462a      	mov	r2, r5
 80051b6:	4621      	mov	r1, r4
 80051b8:	bf28      	it	cs
 80051ba:	4632      	movcs	r2, r6
 80051bc:	f7ff ffca 	bl	8005154 <memcpy>
 80051c0:	4621      	mov	r1, r4
 80051c2:	4640      	mov	r0, r8
 80051c4:	f7ff fbbe 	bl	8004944 <_free_r>
 80051c8:	463c      	mov	r4, r7
 80051ca:	e7e0      	b.n	800518e <_realloc_r+0x1e>

080051cc <_malloc_usable_size_r>:
 80051cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051d0:	1f18      	subs	r0, r3, #4
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	bfbc      	itt	lt
 80051d6:	580b      	ldrlt	r3, [r1, r0]
 80051d8:	18c0      	addlt	r0, r0, r3
 80051da:	4770      	bx	lr

080051dc <_init>:
 80051dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051de:	bf00      	nop
 80051e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051e2:	bc08      	pop	{r3}
 80051e4:	469e      	mov	lr, r3
 80051e6:	4770      	bx	lr

080051e8 <_fini>:
 80051e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ea:	bf00      	nop
 80051ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ee:	bc08      	pop	{r3}
 80051f0:	469e      	mov	lr, r3
 80051f2:	4770      	bx	lr
